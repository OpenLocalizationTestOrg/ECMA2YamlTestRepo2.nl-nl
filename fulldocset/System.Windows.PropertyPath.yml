### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyPath
  id: PropertyPath
  children:
  - System.Windows.PropertyPath.#ctor(System.Object)
  - System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  - System.Windows.PropertyPath.Path
  - System.Windows.PropertyPath.PathParameters
  langs:
  - csharp
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
  type: Class
  summary: "Implementeert een gegevensstructuur voor de beschrijving van een eigenschap als een pad onder een andere eigenschap of onder een eigenaar type. Eigenschappaden worden gebruikt in gegevensbinding tot objecten en storyboards en tijdlijnen voor animaties."
  remarks: "Deze klasse bevat een tekenreeks <xref:System.Windows.PropertyPath.Path%2A>, en een lijst van afhankelijkheidseigenschappen die de <xref:System.Windows.PropertyPath.PathParameters%2A>in de tekenreeks<xref:System.Windows.PropertyPath.Path%2A>.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A>       PropertyPath ondersteunt twee modi van gedrag: **bronmodus** beschrijft een pad naar een eigenschap die wordt gebruikt als een bron voor een andere bewerking. Deze modus wordt gebruikt door de <xref:System.Windows.Data.Binding>klasse ter ondersteuning van gegevensbinding.</xref:System.Windows.Data.Binding>       **Doelmodus** beschrijft een pad naar een eigenschap die als een doeleigenschap worden ingesteld. Deze modus wordt gebruikt door de animatie ter ondersteuning van storyboard en de tijdlijn setters.       Bijvoorbeeld: `Background.Opacity` is een pad in twee stappen. Dit pad impliceert: Zoek eerst de `Background` eigenschap van een object ophalen van het waardeobject die de `Background` eigenschap is ingesteld op, en vervolgens de waarde van de `Opacity` eigenschap voor dat object.      <a name=&quot;xamlAttributeUsage_PropertyPath&quot;></a>## XAML Kenmerkgebruik ```   <object property=&quot;propertyPath&quot; .../>   ``` <a name=&quot;xamlValues_PropertyPath&quot;> </a> ## XAML waarden *propertyPath* een tekenreeks die wordt geëvalueerd als een eenvoudige of complexe eigenschapspad.       De syntaxis voor het instellen van een PropertyPath in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] apart onderwerp wordt beschreven en veelzijdige, maar complexe [PropertyPath-syntaxis voor XAML](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))]

      public sealed class PropertyPath
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> klasse."
  remarks: "Deze constructor heeft twee andere vormen van gebruik, afhankelijk van of deze wordt gebruikt voor een pad van de eigenschap source-modus voor een binding, of voor een pad van de stap voor stap eigenschap target-modus voor een storyboard-doel.       Als u dit <xref:System.Windows.PropertyPath>in de bronmodus voor een binding `parameter` is een tekenreeks die de naam van een eigenschap of een tekenreeks die worden beschreven van een pad &quot;stap-through&quot; naar de eigenschap in de [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] objectmodel van het object dat wordt gebruikt als bron voor een binding.</xref:System.Windows.PropertyPath> Het teken waarmee een &quot;stap&quot; is voor een pad van de eigenschap binding een punt (.). Indexeerfunctie verwijzingen (inclusief meerdere indexeerfuncties en type differentiatie) worden ook ondersteund. Voor meer informatie over de syntaxis van de tekenreeks die specifiek worden gebruikt door het <xref:System.Windows.Data.Binding>object, Zie <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>.</xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding> Een eigenschap die wordt gebruikt als een binding-bron moet niet worden een afhankelijkheidseigenschap. Als de binding wederzijdse bijwerkt, moet de eigenschap waarnaar wordt verwezen lezen-schrijven. Houd er ook rekening mee dat het doel van de binding hoeft te zijn van een afhankelijkheidseigenschap. Zie voor meer informatie [Binding overzicht](~/add/includes/ajax-current-ext-md.md).       Als u dit <xref:System.Windows.PropertyPath>in de doelmodus voor een stap voor stap pad voor een doel storyboard `parameter` wordt doorgaans opgegeven als type <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> </xref:System.Windows.PropertyPath> U kunt ook een tekenreeks die de <xref:System.Windows.DependencyProperty.Name%2A>.</xref:System.Windows.DependencyProperty.Name%2A> opgeven Een van beide resulteren in hetzelfde resultaat, omdat deze intern is opgeslagen als een tekenreeks. Een opgegeven dat <xref:System.Windows.DependencyProperty>wordt geconverteerd naar een tekenreeks via <xref:System.Windows.Markup.DependencyPropertyConverter>.</xref:System.Windows.Markup.DependencyPropertyConverter> </xref:System.Windows.DependencyProperty> De <xref:System.Windows.Markup.DependencyPropertyConverter>ondersteunt een gekwalificeerde naamgevingsconventie voor afhankelijkheidseigenschappen, zodat u kunt opgeven een *typeName*.* propertyName* afhankelijkheid eigenschap tekenreeks aan de constructor PropertyPath in code gekwalificeerd.</xref:System.Windows.Markup.DependencyPropertyConverter> Het pad naar de afhankelijkheid eigenschaps-id is een andere concept dan een complexe pad. Een complex-path <xref:System.Windows.PropertyPath>in plaats daarvan worden gemaakt met de <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName>constructor.</xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=fullName> </xref:System.Windows.PropertyPath>"
  syntax:
    content: public PropertyPath (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "Een eigenschapspad dat een beschrijving van een pad naar een [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] eigenschap of een enkel afhankelijkheidseigenschap."
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  id: '#ctor(System.String,System.Object[])'
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Windows.PropertyPath&quot;> </xref> klasse met de opgegeven grote token tekenreeks en de parameters."
  remarks: "Deze handtekening wordt doorgaans alleen gebruikt voor de doel-modus <xref:System.Windows.PropertyPath>gebruik met complexe paden.</xref:System.Windows.PropertyPath>       Deze constructor ondersteunt `params` voor de `pathParameters` constructor-argument. Daarom kunt u de inhoud van `pathParameters` als een reeks door komma&quot;s gescheiden constructorargumenten die vullen van de matrix in plaats van dat een matrix dimensie en vervolgens vult deze met de `pathParameters` items. Elk item dat u opgeeft moet een van de volgende typen: <xref:System.Windows.DependencyProperty>, <xref:System.Reflection.PropertyInfo> <xref:System.ComponentModel.PropertyDescriptor>.</xref:System.ComponentModel.PropertyDescriptor> </xref:System.Reflection.PropertyInfo> </xref:System.Windows.DependencyProperty>       Zie voor meer informatie over de vereisten van de parameters <xref:System.Windows.PropertyPath.Path%2A>en <xref:System.Windows.PropertyPath.PathParameters%2A>.</xref:System.Windows.PropertyPath.PathParameters%2A> </xref:System.Windows.PropertyPath.Path%2A>"
  syntax:
    content: public PropertyPath (string path, object[] pathParameters);
    parameters:
    - id: path
      type: System.String
      description: "Een tekenreeks waarmee de <xref:System.Windows.PropertyPath.Path*>, in een indeling die tokens.</xref:System.Windows.PropertyPath.Path*>"
    - id: pathParameters
      type: System.Object[]
      description: "Een matrix met objecten die Hiermee stelt u de <xref:System.Windows.PropertyPath.PathParameters*>.</xref:System.Windows.PropertyPath.PathParameters*>"
  overload: System.Windows.PropertyPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.Path
  id: Path
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van de tekenreeks met een beschrijving van het pad."
  remarks: "The string contained in this property has three completely different meanings depending on whether a <xref:System.Windows.PropertyPath> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.  \n  \n If using this <xref:System.Windows.PropertyPath> in source mode for a binding, Path is a string representing a property name, or can be a string that describes a \"step-through\" path to the property in the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding. For a binding property path, the character that identifies a \"step\" is a dot (.). Indexer references (including multiple indexers, and type differentiation) are also supported. For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=fullName>. A property used as a binding source need not be a dependency property. If the binding updates two-way, the property source must be read-write. Also note that the binding target does have to be a dependency property. For details, see [Data Binding Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, <xref:System.Windows.PropertyPath> is a string that is a *typeName*.*propertyName* qualified dependency property name string.  \n  \n If using this <xref:System.Windows.PropertyPath> for a complex path for a storyboard target, Path is a tokenized string format that describes the relationships of the various objects given in the <xref:System.Windows.PropertyPath.PathParameters%2A>.  \n  \n-   Each item in the array is specified in this format by the array index for the item enclosed in parentheses. For example, to specify the first item in the array, the string token is `(0)`.  \n  \n-   Relationships between items (\"steps\" in the path) are specified by a dot (.). The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two). The last step in the chain always represents the property being animated.  \n  \n-   Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]). The indexer is additive to the token representing the property. For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: `(0)[1].(1)` . You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.  \n  \n The path string for a <xref:System.Windows.PropertyPath> is typically established through the constructors: the <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> signature for bindings or single-step storyboard targets, the [PropertyPath(String, Object\\[\\])](assetId:///M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) signature for multi-step storyboard targets.  \n  \n **XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>). This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures. This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as Path and <xref:System.Windows.PropertyPath.PathParameters%2A>. For more information, see [PropertyPath XAML Syntax](~/add/includes/ajax-current-ext-md.md).  \n  \n<a name=\"xamlTextUsage_Path\"></a>   \n## XAML Text Usage  \n Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntax. See Remarks."
  syntax:
    content: public string Path { get; set; }
    return:
      type: System.String
      description: "De tekenreeks die in het pad worden beschreven."
  overload: System.Windows.PropertyPath.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyPath.PathParameters
  id: PathParameters
  parent: System.Windows.PropertyPath
  langs:
  - csharp
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Hiermee wordt de lijst met parameters moet worden gebruikt wanneer het pad naar geïndexeerde parameters verwijst opgehaald."
  remarks: "De eigenschappen voor een <xref:System.Windows.PropertyPath>worden doorgaans tot stand gebracht via de constructors.</xref:System.Windows.PropertyPath> Voor het instellen van de PathParameters, de <xref:System.Windows.PropertyPath.%23ctor%2A>constructor is met name handig omdat de `pathParameters` constructor-argument is aangewezen als `params`, wat betekent dat u niet wilt maken of een matrix voor bouw dimension.</xref:System.Windows.PropertyPath.%23ctor%2A> U kunt gewoon elk lid van de matrix opgeven als een extra parameter.       Als de laatste eigenschap die het doel is een <xref:System.Windows.Freezable>typt, waarde worden gekloond.</xref:System.Windows.Freezable> Zie voor meer informatie [Storyboards overzicht](~/add/includes/ajax-current-ext-md.md).       De werkelijke evaluatie van de eigenschap keten wordt uitgevoerd door de animatie storyboard mechanismen. Op de <xref:System.Windows.PropertyPath>niveau, geen validatie uitgevoerd om ervoor te zorgen dat de stappen van het pad op alle verbinding maken.</xref:System.Windows.PropertyPath> U kunt bijvoorbeeld een eigenschapspad met samenstellen <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>Als de eerste stap en <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName>Als de tweede stap.</xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> Maar een eigenschapspad mislukken als er daadwerkelijk worden toegepast als doel, omdat de kwast type die opvulling <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName>beschikt niet over een <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName>eigenschap.</xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=fullName> </xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=fullName> Ongeldige eigenschappaden mislukken achtergrond. Zie voor meer informatie [Storyboards overzicht](../Topic/Storyboards%20Overview.md).       **XAML:** als u werkt met een <xref:System.Windows.PropertyPath>te beschrijven de verwijzing naar een eigenschap in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], zoals een kenmerkwaarde, de tekenreeks die u opgeeft, eerst door een type-conversieprogramma verwerkt wordt (<xref:System.Windows.PropertyPathConverter>).</xref:System.Windows.PropertyPathConverter> </xref:System.Windows.PropertyPath> Dit typeconversieprogramma vervolgens verwerkt de tekenreeks en op basis van de syntaxis belt een van de <xref:System.Windows.PropertyPath>constructor handtekeningen.</xref:System.Windows.PropertyPath> Via de type-conversieprogramma afhandeling van een kenmerkwaarde op die manier wordt doorgaans hoe u gebruiken <xref:System.Windows.PropertyPath>in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)], in plaats van het declareren van een <xref:System.Windows.PropertyPath>object-element en vervolgens toe te passen waarden met specifieke kenmerken, zoals <xref:System.Windows.PropertyPath.Path%2A>en PathParameters.</xref:System.Windows.PropertyPath.Path%2A> </xref:System.Windows.PropertyPath> </xref:System.Windows.PropertyPath> Zie voor meer informatie [PropertyPath-syntaxis voor XAML](~/add/includes/ajax-current-ext-md.md).      <a name=&quot;xamlTextUsage_PathParameters&quot;></a>## XAML tekst gebruik leden van de <xref:System.Windows.PropertyPath>type zijn doorgaans niet ingesteld in een directe [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] syntaxis.</xref:System.Windows.PropertyPath> Zie de opmerkingen."
  syntax:
    content: public System.Collections.ObjectModel.Collection<object> PathParameters { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Object}
      description: "De lijst met parameters."
  overload: System.Windows.PropertyPath.PathParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.PropertyPath.#ctor(System.Object)
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(Object)
  nameWithType: PropertyPath.PropertyPath(Object)
  fullName: System.Windows.PropertyPath.PropertyPath(Object)
- uid: System.Windows.PropertyPath.#ctor(System.String,System.Object[])
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath(String,Object[])
  nameWithType: PropertyPath.PropertyPath(String,Object[])
  fullName: System.Windows.PropertyPath.PropertyPath(String,Object[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.PropertyPath.Path
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
  fullName: System.Windows.PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
  fullName: System.Windows.PropertyPath.PathParameters
- uid: System.Collections.ObjectModel.Collection{System.Object}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Object>
  nameWithType: Collection<Object>
  fullName: System.Collections.ObjectModel.Collection<System.Object>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.PropertyPath.#ctor*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath.PropertyPath
- uid: System.Windows.PropertyPath.Path*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: Path
  nameWithType: PropertyPath.Path
- uid: System.Windows.PropertyPath.PathParameters*
  parent: System.Windows.PropertyPath
  isExternal: false
  name: PathParameters
  nameWithType: PropertyPath.PathParameters
