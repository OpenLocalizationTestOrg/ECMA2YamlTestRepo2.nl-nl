### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Strings
  id: Strings
  children:
  - Microsoft.VisualBasic.Strings.Asc(System.Char)
  - Microsoft.VisualBasic.Strings.Asc(System.String)
  - Microsoft.VisualBasic.Strings.AscW(System.Char)
  - Microsoft.VisualBasic.Strings.AscW(System.String)
  - Microsoft.VisualBasic.Strings.Chr(System.Int32)
  - Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  - Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  - Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  - Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  - Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  - Microsoft.VisualBasic.Strings.LCase(System.Char)
  - Microsoft.VisualBasic.Strings.LCase(System.String)
  - Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Boolean)
  - Microsoft.VisualBasic.Strings.Len(System.Byte)
  - Microsoft.VisualBasic.Strings.Len(System.Char)
  - Microsoft.VisualBasic.Strings.Len(System.DateTime)
  - Microsoft.VisualBasic.Strings.Len(System.Decimal)
  - Microsoft.VisualBasic.Strings.Len(System.Double)
  - Microsoft.VisualBasic.Strings.Len(System.Int16)
  - Microsoft.VisualBasic.Strings.Len(System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Int64)
  - Microsoft.VisualBasic.Strings.Len(System.Object)
  - Microsoft.VisualBasic.Strings.Len(System.SByte)
  - Microsoft.VisualBasic.Strings.Len(System.Single)
  - Microsoft.VisualBasic.Strings.Len(System.String)
  - Microsoft.VisualBasic.Strings.Len(System.UInt16)
  - Microsoft.VisualBasic.Strings.Len(System.UInt32)
  - Microsoft.VisualBasic.Strings.Len(System.UInt64)
  - Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.LTrim(System.String)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RTrim(System.String)
  - Microsoft.VisualBasic.Strings.Space(System.Int32)
  - Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  - Microsoft.VisualBasic.Strings.StrReverse(System.String)
  - Microsoft.VisualBasic.Strings.Trim(System.String)
  - Microsoft.VisualBasic.Strings.UCase(System.Char)
  - Microsoft.VisualBasic.Strings.UCase(System.String)
  langs:
  - csharp
  name: Strings
  nameWithType: Strings
  fullName: Microsoft.VisualBasic.Strings
  type: Class
  summary: "De <xref uid=&quot;langword_csharp_Strings&quot; name=&quot;Strings&quot; href=&quot;&quot;> </xref> -module bevat procedures voor het uitvoeren van tekenreeksbewerkingen."
  remarks: "Deze module biedt ondersteuning voor de Visual Basic-taal sleutelwoorden en run-time-bibliotheek-leden die manipuleren van tekenreeksen."
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._6_1.vb)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Strings
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  id: Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> waarde voor de tekencode die overeenkomt met een teken."
  remarks: "`Asc`retourneert de *codepunt*, of tekencode voor het ingevoerde teken. Dit kan zijn 0 t/m 255 voor enkel-byte character set (SBCS) waarden en-32768 tot en met 32767 voor DBCS-tekens (DBCS) setwaarden.       `AscW`retourneert het Unicode-codepunt voor het ingevoerde teken. Dit kan zijn 0 tot en met 65535. De geretourneerde waarde is afhankelijk van de instellingen van de pagina cultuur en code voor de huidige thread.      > [!NOTE] > De `AscB` functie van eerdere versies van Visual Basic retourneert een code voor een byte in plaats van een teken. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle Visual Basic 2005 tekenreeksen zijn in Unicode en `AscB` wordt niet langer ondersteund."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._55_1.vb)]"
  syntax:
    content: public static int Asc (char String);
    parameters:
    - id: String
      type: System.Char
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie. Als `String` is een <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie, maar alleen het eerste teken van de tekenreeks wordt gebruikt voor invoer. Als `String` is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> of geen tekens bevat een <xref:System.ArgumentException>fout optreedt.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Retourneert een <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> waarde voor de tekencode die overeenkomt met een teken."
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  id: Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> waarde voor de tekencode die overeenkomt met een teken."
  remarks: "`Asc`retourneert de *codepunt*, of tekencode voor het ingevoerde teken. Dit kan zijn 0 t/m 255 voor enkel-byte character set (SBCS) waarden en-32768 tot en met 32767 voor DBCS-tekens (DBCS) setwaarden.       `AscW`retourneert het Unicode-codepunt voor het ingevoerde teken. Dit kan zijn 0 tot en met 65535. De geretourneerde waarde is afhankelijk van de instellingen van de pagina cultuur en code voor de huidige thread.      > [!NOTE] > De `AscB` functie van eerdere versies van Visual Basic retourneert een code voor een byte in plaats van een teken. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle Visual Basic 2005 tekenreeksen zijn in Unicode en `AscB` wordt niet langer ondersteund."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._249_1.vb)]"
  syntax:
    content: public static int Asc (string String);
    parameters:
    - id: String
      type: System.String
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie. Als `String` is een <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie, maar alleen het eerste teken van de tekenreeks wordt gebruikt voor invoer. Als `String` is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> of geen tekens bevat een <xref:System.ArgumentException>fout optreedt.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Retourneert een <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> waarde voor de tekencode die overeenkomt met een teken."
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  id: AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> waarde voor de tekencode die overeenkomt met een teken."
  remarks: "`Asc`retourneert de *codepunt*, of tekencode voor het ingevoerde teken. Dit kan zijn 0 t/m 255 voor enkel-byte character set (SBCS) waarden en-32768 tot en met 32767 voor DBCS-tekens (DBCS) setwaarden.       `AscW`retourneert het Unicode-codepunt voor het ingevoerde teken. Dit kan zijn 0 tot en met 65535. De geretourneerde waarde is afhankelijk van de instellingen van de pagina cultuur en code voor de huidige thread.      > [!NOTE] > De `AscB` functie van eerdere versies van Visual Basic retourneert een code voor een byte in plaats van een teken. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle Visual Basic 2005 tekenreeksen zijn in Unicode en `AscB` wordt niet langer ondersteund."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._18_1.vb)]"
  syntax:
    content: public static int AscW (char String);
    parameters:
    - id: String
      type: System.Char
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie. Als `String` is een <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie, maar alleen het eerste teken van de tekenreeks wordt gebruikt voor invoer. Als `String` is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> of geen tekens bevat een <xref:System.ArgumentException>fout optreedt.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Retourneert een <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> waarde voor de tekencode die overeenkomt met een teken."
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  id: AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> waarde voor de tekencode die overeenkomt met een teken."
  remarks: "`Asc`retourneert de *codepunt*, of tekencode voor het ingevoerde teken. Dit kan zijn 0 t/m 255 voor enkel-byte character set (SBCS) waarden en-32768 tot en met 32767 voor DBCS-tekens (DBCS) setwaarden.       `AscW`retourneert het Unicode-codepunt voor het ingevoerde teken. Dit kan zijn 0 tot en met 65535. De geretourneerde waarde is afhankelijk van de instellingen van de pagina cultuur en code voor de huidige thread.      > [!NOTE] > De `AscB` functie van eerdere versies van Visual Basic retourneert een code voor een byte in plaats van een teken. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle Visual Basic 2005 tekenreeksen zijn in Unicode en `AscB` wordt niet langer ondersteund."
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._205_1.vb)]"
  syntax:
    content: public static int AscW (string String);
    parameters:
    - id: String
      type: System.String
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie. Als `String` is een <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie, maar alleen het eerste teken van de tekenreeks wordt gebruikt voor invoer. Als `String` is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> of geen tekens bevat een <xref:System.ArgumentException>fout optreedt.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Retourneert een <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> waarde voor de tekencode die overeenkomt met een teken."
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  id: Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het teken dat is gekoppeld aan de opgegeven tekencode hoort."
  remarks: "Het bereik asymmetrische geaccepteerd voor `CharCode` gecompenseerd voor de opslag verschillen tussen de `Short` en de `Integer`. -29183 is bijvoorbeeld een `Short` maar +36353 is een `Integer`. Dit vereenvoudigt ook de compatibiliteit met Visual Basic 6.0.       `Chr`maakt gebruik van de <xref:System.Text.Encoding>-klasse in de <xref:System.Text?displayProperty=fullName>naamruimte om te bepalen of de huidige thread wordt gebruikt door een enkel-byte-tekenset (SBCS) of DBCS-tekens (DBCS) ingesteld.</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> Vervolgens wordt `CharCode` punt als een code in de juiste set. Het bereik is 0 tot en met 255 voor SBCS-tekens en-32768 tot en met 65535 voor DBCS-tekens.       De geretourneerde waarde is afhankelijk van de codetabel voor de huidige thread die is opgenomen in de <xref:System.Globalization.TextInfo.ANSICodePage%2A>eigenschap van de <xref:System.Globalization.TextInfo>-klasse in de <xref:System.Globalization>naamruimte.</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> U kunt verkrijgen <xref:System.Globalization.TextInfo.ANSICodePage%2A>door te geven `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`neemt `CharCode` als een Unicode-codepunt. Het bereik is onafhankelijk van de instellingen van de pagina cultuur en code voor de huidige thread. Waarden van-32768 tot en met-1 zijn behandeld hetzelfde als de waarden in het bereik +32768 via +65535.       Getallen van 0 tot en met 31 zijn hetzelfde als standaard niet-afdrukbare ASCII-codes. Bijvoorbeeld, `Chr(10)` retourneert een regelinvoer.      > [!NOTE] > De `ChrB` functie in eerdere versies van Visual Basic retourneert één enkele byte. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle tekenreeksen in Visual Basic en .NET Framework zijn in Unicode en `ChrB` wordt niet langer ondersteund."
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._105_1.vb)]"
  syntax:
    content: public static char Chr (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "Vereist. Een <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> expressie die de `code point`, of tekencode voor het teken."
    return:
      type: System.Char
      description: "Retourneert het teken dat is gekoppeld aan de opgegeven tekencode hoort."
  overload: Microsoft.VisualBasic.Strings.Chr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; 0 or &gt; 255 for <xref uid=&quot;langword_csharp_Chr&quot; name=&quot;Chr&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  id: ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het teken dat is gekoppeld aan de opgegeven tekencode hoort."
  remarks: "Het bereik asymmetrische geaccepteerd voor `CharCode` gecompenseerd voor de opslag verschillen tussen de `Short` en de `Integer`. -29183 is bijvoorbeeld een `Short` maar +36353 is een `Integer`. Dit vereenvoudigt ook de compatibiliteit met Visual Basic 6.0.       `Chr`maakt gebruik van de <xref:System.Text.Encoding>-klasse in de <xref:System.Text?displayProperty=fullName>naamruimte om te bepalen of de huidige thread wordt gebruikt door een enkel-byte-tekenset (SBCS) of DBCS-tekens (DBCS) ingesteld.</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> Vervolgens wordt `CharCode` punt als een code in de juiste set. Het bereik is 0 tot en met 255 voor SBCS-tekens en-32768 tot en met 65535 voor DBCS-tekens.       De geretourneerde waarde is afhankelijk van de codetabel voor de huidige thread die is opgenomen in de <xref:System.Globalization.TextInfo.ANSICodePage%2A>eigenschap van de <xref:System.Globalization.TextInfo>-klasse in de <xref:System.Globalization>naamruimte.</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> U kunt verkrijgen <xref:System.Globalization.TextInfo.ANSICodePage%2A>door te geven `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`neemt `CharCode` als een Unicode-codepunt. Het bereik is onafhankelijk van de instellingen van de pagina cultuur en code voor de huidige thread. Waarden van-32768 tot en met-1 zijn behandeld hetzelfde als de waarden in het bereik +32768 via +65535.       Getallen van 0 tot en met 31 zijn hetzelfde als standaard niet-afdrukbare ASCII-codes. Bijvoorbeeld, `Chr(10)` retourneert een regelinvoer.      > [!NOTE] > De `ChrB` functie in eerdere versies van Visual Basic retourneert één enkele byte. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle tekenreeksen in Visual Basic en .NET Framework zijn in Unicode en `ChrB` wordt niet langer ondersteund."
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._45_1.vb)]"
  syntax:
    content: public static char ChrW (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "Vereist. Een <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> expressie die de `code point`, of tekencode voor het teken."
    return:
      type: System.Char
      description: "Retourneert het teken dat is gekoppeld aan de opgegeven tekencode hoort."
  overload: Microsoft.VisualBasic.Strings.ChrW*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; -32768 or &gt; 65535 for <xref uid=&quot;langword_csharp_ChrW&quot; name=&quot;ChrW&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een op nul gebaseerde matrix met een subset van een <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matrix op basis van opgegeven filtercriteria."
  remarks: "Als er geen overeenkomsten van `Match` zijn gevonden binnen `Source`, wordt de `Filter` functie retourneert een lege matrix. Als er een fout optreedt `Source` is ingesteld op `Nothing` of is geen eendimensionale matrix.       De matrix die is geretourneerd door de `Filter` functie bevat alleen voldoende elementen zodanig dat het aantal overeenkomende items bevatten.       De `Compare` argument kan de volgende waarden hebben.      |||   |-|-|   | Constante | Beschrijving |   | `CompareMethod.Binary`| Een binaire vergelijking uitvoeren |   | `CompareMethod.Text`| Een tekstuele vergelijking |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/bfb6d7a4-ec2d-49ca-96ad-_1.vb)]"
  syntax:
    content: public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.Object[]
      description: "Vereist. Eendimensionale matrix met tekenreeksen waarnaar moet worden gezocht."
    - id: Match
      type: System.String
      description: "Vereist. De tekenreeks om naar te zoeken."
    - id: Include
      type: System.Boolean
      description: "Optioneel. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>waarde waarmee wordt aangegeven of subtekenreeksen die opnemen of uitsluiten die worden geretourneerd `Match`. Als `Include` is <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> functie retourneert de subset van de matrix met `Match` als een subtekenreeks. Als `Include` is <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> functie retourneert de subset van de matrix geen bevat `Match` als een subtekenreeks."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Optioneel. Numerieke waarde die aangeeft welk type tekenreeksvergelijking te gebruiken. Zie &quot;Instellingen&quot; voor waarden."
    return:
      type: System.String[]
      description: "Retourneert een op nul gebaseerde matrix met een subset van een <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matrix op basis van opgegeven filtercriteria."
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> of is geen eendimensionale matrix."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een op nul gebaseerde matrix met een subset van een <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matrix op basis van opgegeven filtercriteria."
  remarks: "Als er geen overeenkomsten van `Match` zijn gevonden binnen `Source`, wordt de `Filter` functie retourneert een lege matrix. Als er een fout optreedt `Source` is ingesteld op `Nothing` of is geen eendimensionale matrix.       De matrix die is geretourneerd door de `Filter` functie bevat alleen voldoende elementen zodanig dat het aantal overeenkomende items bevatten.       De `Compare` argument kan de volgende waarden hebben.      |||   |-|-|   | Constante | Beschrijving |   | `CompareMethod.Binary`| Een binaire vergelijking uitvoeren |   | `CompareMethod.Text`| Een tekstuele vergelijking |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/a4b278ef-f791-4808-8a23-_1.vb)]"
  syntax:
    content: public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.String[]
      description: "Vereist. Eendimensionale matrix met tekenreeksen waarnaar moet worden gezocht."
    - id: Match
      type: System.String
      description: "Vereist. De tekenreeks om naar te zoeken."
    - id: Include
      type: System.Boolean
      description: "Optioneel. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>waarde waarmee wordt aangegeven of subtekenreeksen die opnemen of uitsluiten die worden geretourneerd `Match`. Als `Include` is <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> functie retourneert de subset van de matrix met `Match` als een subtekenreeks. Als `Include` is <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref> functie retourneert de subset van de matrix geen bevat `Match` als een subtekenreeks."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Optioneel. Numerieke waarde die aangeeft welk type tekenreeksvergelijking te gebruiken. Zie &quot;Instellingen&quot; voor waarden."
    return:
      type: System.String[]
      description: "Retourneert een op nul gebaseerde matrix met een subset van een <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> matrix op basis van opgegeven filtercriteria."
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> of is geen eendimensionale matrix."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  id: Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks die is ingedeeld volgens de instructies in een indeling <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
  remarks: "The <xref:System.String.Format%2A?displayProperty=fullName> method also provides similar functionality.  \n  \n If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.  \n  \n If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware. However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.  \n  \n## Different Formats for Different Numeric Values  \n A user-defined format expression for numbers can have from one to three sections separated by semicolons. If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.  \n  \n|||  \n|-|-|  \n|If you use|This is the result|  \n|One section only|The format expression applies to all values.|  \n|Two sections|The first section applies to positive values and zeros; the second applies to negative values.|  \n|Three sections|The first section applies to positive values, the second applies to negative values, and the third applies to zeros.|  \n  \n The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values. Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.  \n  \n [!code-vb[VbVbalrStrings#18](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_1.vb)]  \n  \n If you include semicolons with nothing between them, the missing section is printed using the format of the positive value. For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.  \n  \n [!code-vb[VbVbalrStrings#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_2.vb)]  \n  \n## Predefined Numeric Formats  \n The following table identifies the predefined numeric format names. These may be used by name as the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format name|Description|  \n|`General Number`, `G`, or `g`|Displays number with no thousand separator.<br /><br /> For example, `Format(&H3FA, \"g\")` returns `1018`.|  \n|`Currency`, `C`, or `c`|Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator. Output is based on system locale settings.<br /><br /> For example, `Format(1234567, \"c\")` returns `$1,234,567.00`.|  \n|`Fixed`, `F`, or `f`|Displays at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"f\")` returns `1234567.00`.|  \n|`Standard`, `N`, or `n`|Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"n\")` returns `1,234,567.00`.|  \n|`Percent`|Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.4744, \"Percent\")` returns `47.44%`.|  \n|`P`, or `p`|Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.80345, \"p\")` returns `80.35 %`.|  \n|`Scientific`|Uses standard scientific notation, providing two significant digits.<br /><br /> For example, `Format(1234567, \"Scientific\")` returns `1.23E+06`.|  \n|`E`, or `e`|Uses standard scientific notation, providing six significant digits.<br /><br /> For example, `Format(1234567, \"e\")` returns `1.234567e+006`.|  \n|`D`, or `d`|Displays number as a string that contains the value of the number in Decimal (base 10) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(&H7F, \"d\")` returns `127`.|  \n|`X`, or `x`|Displays number as a string that contains the value of the number in Hexadecimal (base 16) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(127, \"x\")` returns `7f`.|  \n|`Yes/No`|Displays `No` if number is 0; otherwise, displays `Yes`.<br /><br /> For example, `Format(0, \"Yes/No\")` returns `No`.|  \n|`True/False`|Displays `False` if number is 0; otherwise, displays `True`.<br /><br /> For example, `Format(1, \"True/False\")` returns `True`.|  \n|`On/Off`|Displays `Off` if number is 0; otherwise, displays `On`.<br /><br /> For example, `Format(1, \"On/Off\")` returns `On`.|  \n  \n### Smart Device Developer Notes  \n The `Yes/No`, `True/False`, and `On/Off` formats are not supported.  \n  \n## User-Defined Numeric Formats  \n The following table identifies characters you can use to create user-defined number formats. These may be used to build the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|None|Displays the number with no formatting.|  \n|(`0`)|Digit placeholder. Displays a digit or a zero. If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.<br /><br /> If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros. If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros. If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.|  \n|(`#`)|Digit placeholder. Displays a digit or nothing. If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.<br /><br /> This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.|  \n|(`.`)|Decimal placeholder. The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator. If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator. To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator. In some locales, a comma is used as the decimal separator. The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system. Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder. The formatted string will appear in the format correct for the locale.|  \n|(`%`)|Percent placeholder. Multiplies the expression by 100. The percent character (`%`) is inserted in the position where it appears in the format string.|  \n|(`,`)|Thousand separator. The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator. Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).<br /><br /> A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means \"scale the number by dividing it by 1,000, rounding as needed.\" Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`. Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.<br /><br /> Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator. In some locales, a period is used as a thousand separator. The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system. Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator. The formatted string will appear in the format correct for the locale.<br /><br /> For example, consider the three following format strings:<br /><br /> -   `\"#,0.\"`, which uses the thousands separator to format the number 100 million as the string \"100,000,000\".<br />-   `\"#0,.\"`, which uses scaling by a factor of one thousand to format the number 100 million as the string \"100000\".<br />-   `\"#,0,.\"`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string \"100,000\".|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character used as the time separator in formatted output is determined by your system settings.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character used as the date separator in formatted output is determined by your system settings.|  \n|(`E-``E+``e-``e+`)|Scientific format. If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent. The number of digit placeholders to the left determines the number of digits in the exponent. Use `E-` or `e-` to place a minus sign next to negative exponents. Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents. You must also include digit placeholders to the right of this symbol to get correct formatting.|  \n|`-` `+` `$` ( )|Literal characters. These characters are displayed exactly as typed in the format string. To display a character other than one of those listed, precede it with a backslash (`\\`) or enclose it in double quotation marks (\" \").|  \n|(`\\`)|Displays the next character in the format string. To display a character that has special meaning as a literal character, precede it with a backslash (`\\`). The backslash itself isn't displayed. Using a backslash is the same as enclosing the next character in double quotation marks. To display a backslash, use two backslashes (`\\\\`).<br /><br /> Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).|  \n|(`\"``ABC``\"`)|Displays the string inside the double quotation marks (\" \"). To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (\")).|  \n  \n### Legacy Code Example  \n The following table contains some sample format expressions for numbers. (These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.  \n  \n|||||  \n|-|-|-|-|  \n|Format (`Style`)|\"5\" formatted as|\"-5\" formatted as|\"0.5\" formatted as|  \n|`Zero-length string (\"\")`|`5`|`-5`|`0.5`|  \n|`0`|`5`|`-5`|`1`|  \n|`0.00`|`5.00`|`-5.00`|`0.50`|  \n|`#,##0`|`5`|`-5`|`1`|  \n|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  \n|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  \n|`0%`|`500%`|`-500%`|`50%`|  \n|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  \n|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  \n|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  \n  \n## Predefined Date/Time Formats  \n The following table identifies the predefined date and time format names. These may be used by name as the style argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format Name|Description|  \n|`General Date`, or `G`|Displays a date and/or time. For example, `3/12/2008 11:07:31 AM`. Date display is determined by your application's current culture value.|  \n|`Long Date`, `Medium Date`, or `D`|Displays a date according to your current culture's long date format. For example, `Wednesday, March 12, 2008`.|  \n|`Short Date`, or `d`|Displays a date using your current culture's short date format. For example, `3/12/2008`.<br /><br /> The `d` character displays the day in a user-defined date format.|  \n|`Long Time`, `Medium Time`, or `T`|Displays a time using your current culture's long time format; typically includes hours, minutes, seconds. For example, `11:07:31 AM`.|  \n|`Short Time` or `t`|Displays a time using your current culture's short time format. For example, `11:07 AM`.<br /><br /> The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.|  \n|`f`|Displays the long date and short time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07 AM`.|  \n|`F`|Displays the long date and long time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07:31 AM`.|  \n|`g`|Displays the short date and short time according to your current culture's format. For example, `3/12/2008 11:07 AM`.|  \n|`M`, `m`|Displays the month and the day of a date. For example, `March 12`.<br /><br /> The `M` character displays the month in a user-defined date format. The `m` character displays the minutes in a user-defined time format.|  \n|`R`, `r`|Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property. For example, `Wed, 12 Mar 2008 11:07:31 GMT`. The formatted date does not adjust the value of the date and time. You must adjust the Date/Time value to GMT before calling the `Format` function.|  \n|`s`|Formats the date and time as a sortable index. For example, `2008-03-12T11:07:31`.<br /><br /> The `s` character displays the seconds in a user-defined time format.|  \n|`u`|Formats the date and time as a GMT sortable index. For example, `2008-03-12 11:07:31Z`.|  \n|`U`|Formats the date and time with the long date and long time as GMT. For example, `Wednesday, March 12, 2008 6:07:31 PM`.|  \n|`Y`, `y`|Formats the date as the year and month. For example, `March, 2008`.<br /><br /> The `Y` and `y` characters display the year in a user-defined date format.|  \n  \n For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).  \n  \n## User-Defined Date/Time Formats  \n The following table shows characters you can use to create user-defined date/time formats. Unlike in earlier versions of [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], these format characters are case-sensitive.  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character that is used as the time separator in formatted output is determined by your application's current culture value.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character that is used as the date separator in formatted output is determined by your application's current culture.|  \n|(`%`)|Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters. Also used to indicate that a single-letter format is read as a user-defined format. See what follows for additional details.|  \n|`d`|Displays the day as a number without a leading zero (for example, `1`). Use `%d` if this is the only character in your user-defined numeric format.|  \n|`dd`|Displays the day as a number with a leading zero (for example, `01`).|  \n|`ddd`|Displays the day as an abbreviation (for example, `Sun`).|  \n|`dddd`|Displays the day as a full name (for example, `Sunday`).|  \n|`M`|Displays the month as a number without a leading zero (for example, January is represented as `1`). Use `%M` if this is the only character in your user-defined numeric format.|  \n|`MM`|Displays the month as a number with a leading zero (for example, `01/12/01`).|  \n|`MMM`|Displays the month as an abbreviation (for example, `Jan`).|  \n|`MMMM`|Displays the month as a full month name (for example, `January`).|  \n|`gg`|Displays the period/era string (for example, `A.D.`).|  \n|`h`|Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`). Use `%h` if this is the only character in your user-defined numeric format.|  \n|`hh`|Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).|  \n|`H`|Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`). Use `%H` if this is the only character in your user-defined numeric format.|  \n|`HH`|Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).|  \n|`m`|Displays the minute as a number without leading zeros (for example, `12:1:15`). Use `%m` if this is the only character in your user-defined numeric format.|  \n|`mm`|Displays the minute as a number with leading zeros (for example, `12:01:15`).|  \n|`s`|Displays the second as a number without leading zeros (for example, `12:15:5`). Use `%s` if this is the only character in your user-defined numeric format.|  \n|`ss`|Displays the second as a number with leading zeros (for example, `12:15:05`).|  \n|`f`|Displays fractions of seconds. For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds. You may use up to seven `f` symbols in your user-defined format. Use `%f` if this is the only character in your user-defined numeric format.|  \n|`t`|Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M. Use `%t` if this is the only character in your user-defined numeric format.|  \n|`tt`|For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.<br /><br /> For locales that use a 24-hour clock, displays nothing.|  \n|`y`|Displays the year number (0-9) without leading zeros. Use `%y` if this is the only character in your user-defined numeric format.|  \n|`yy`|Displays the year in two-digit numeric format with a leading zero, if applicable.|  \n|`yyy`|Displays the year in four-digit numeric format.|  \n|`yyyy`|Displays the year in four-digit numeric format.|  \n|`z`|Displays the timezone offset without a leading zero (for example, `-8`). Use `%z` if this is the only character in your user-defined numeric format.|  \n|`zz`|Displays the timezone offset with a leading zero (for example, `-08`)|  \n|`zzz`|Displays the full timezone offset (for example, `-08:00`)|  \n  \n### Legacy Code Example  \n The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:  \n  \n|||  \n|-|-|  \n|Format|Displays|  \n|`M/d/yy`|`12/7/58`|  \n|`d-MMM`|`7-Dec`|  \n|`d-MMMM-yy`|`7-December-58`|  \n|`d MMMM`|`7 December`|  \n|`MMMM yy`|`December 58`|  \n|`hh:mm tt`|`08:50 PM`|  \n|`h:mm:ss t`|`8:50:35 P`|  \n|`H:mm`|`20:50`|  \n|`H:mm:ss`|`20:50:35`|  \n|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  \n  \n### Smart Device Developer Notes  \n The minimum time resolution for a device is determined by the manufacturer of the device. If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device."
  example:
  - "This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats. For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using. When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.  \n  \n> [!NOTE]\n>  For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.  \n  \n [!code-vb[VbVbalrStrings#27](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_3.vb)]"
  syntax:
    content: public static string Format (object Expression, string Style = "");
    parameters:
    - id: Expression
      type: System.Object
      description: "Vereist. Een geldige expressie."
    - id: Style
      type: System.String
      description: "Optioneel. Een geldige indeling voor benoemde of door de gebruiker gedefinieerde <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks die is ingedeeld volgens de instructies in een indeling <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
  overload: Microsoft.VisualBasic.Strings.Format*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een expressie die wordt ingedeeld als valutawaarde met het valutasymbool dat is gedefinieerd in het Configuratiescherm."
  remarks: "Wanneer een of meer optionele argumenten worden weggelaten, worden de overeenkomende regionale instellingen waarden van de computer in plaats daarvan gebruikt.       De positie van het valutasymbool ten opzichte van de valutawaarde wordt bepaald door de landinstellingen van het systeem.      > [!NOTE] > Alle instellingen informatie afkomstig is van de landinstellingen van de toepassing. Standaard is dat de landinstellingen in het Configuratiescherm. Maar deze kan worden gewijzigd via een programma met behulp van de .NET Framework, met uitzondering van nul wordt opgehaald uit de `Number` tabblad.       De `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, en `GroupDigits` argumenten duren voordat de volgende waarden van een opsomming.      |||   |-|-|   | Waarde | Beschrijving |   | `TriState.True`| De waarde True |   | `TriState.False`| ONWAAR |   | `TriState.UseDefault`| De landinstellingen van de computer |"
  example:
  - "The following example illustrates the use of the `FormatCurrency` function.  \n  \n [!code-vb[VbVbalrStrings#32](~/add/codesnippet/visualbasic/c6b3af93-c0fc-4dd7-8b87-_1.vb)]"
  syntax:
    content: public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Vereist. Expressie die moet worden geformatteerd."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Optioneel. Numerieke waarde die aangeeft hoeveel posities aan de rechterkant van het decimaalteken worden weergegeven. Standaardwaarde is –&1;, waarmee wordt aangegeven dat de landinstellingen van de computer worden gebruikt."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Optioneel. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>opsomming waarmee wordt aangegeven of een nul wordt weergegeven voor decimale waarden. Zie &quot;Opmerkingen&quot; voor waarden."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Optioneel. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>opsomming die of aangeeft negatieve waarden tussen haakjes plaatsen. Zie &quot;Opmerkingen&quot; voor waarden."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Optioneel. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>opsomming die aangeeft of getallen worden gegroepeerd met behulp van de groepsscheidingsteken opgegeven in de landinstellingen van de computer. Zie &quot;Opmerkingen&quot; voor waarden."
    return:
      type: System.String
      description: "Retourneert een expressie die wordt ingedeeld als valutawaarde met het valutasymbool dat is gedefinieerd in het Configuratiescherm."
  overload: Microsoft.VisualBasic.Strings.FormatCurrency*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal cijfers na het decimaalteken is groter dan 99."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Type is geen numerieke."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  id: FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeksexpressie die een datum/tijd-waarde vertegenwoordigt."
  remarks: "De `Date` gegevenstype bevat altijd zowel datum en tijd. Voor de doeleinden van typeconversie, beschouwt Visual Basic 1/1/1 (1 januari van het jaar 1) als een neutrale waarde voor de datum en 00:00:00 (middernacht) moet een neutrale waarde voor de tijd. Als u een `Date` waarde als een datum/tijd-tekenreeks `FormatDateTime` omvat geen neutrale waarden in de resulterende tekenreeks. Bijvoorbeeld, als u #1/1/0001 converteren 9:30:&#00; om een tekenreeks, het resultaat is &quot;9:30:00 uur&quot;; de informatie wordt onderdrukt. De informatie is echter nog steeds aanwezig zijn in de oorspronkelijke `Date` waarde en kunnen worden hersteld met functies zoals `DatePart`.      > [!NOTE] > Als u de `Expression` argument als een `String` letterlijke, `FormatDateTime` interpreteert die volgens de <xref:System.Globalization.CultureInfo.CurrentCulture%2A>instellen van uw toepassing.</xref:System.Globalization.CultureInfo.CurrentCulture%2A> Echter als u als doorgeeft een `Date` letterlijke, gebruikt u de indeling #mm/dd/jjjj #, omdat `FormatDateTime` altijd interpreteert een `Date` letterlijke volgens de cultuur Engels (V.S.). Dit is nodig omdat, als een toepassing die is ontwikkeld en gecodeerd met behulp van `Date` letterlijke waarden van een van de cultuur, maar dan wordt uitgevoerd op een platform met een andere cultuur de `Date` letterlijke waarden niet juist kunnen worden geparseerd.       De `NamedFormat` argument heeft de volgende instellingen.      |||   |-|-|   | Constante | Beschrijving |   | `DateFormat.GeneralDate`| Een datum en/of tijd worden weergegeven. Een datumgedeelte als een korte datum weergeven. Als er een tijdgedeelte, weergeven met een lange tijd. Indien aanwezig, beide onderdelen weergeven. |   | `DateFormat.LongDate`| Een datum weergeven met de lange datumnotatie is opgegeven in de landinstellingen van de computer. |   | `DateFormat.ShortDate`| Een datum in de korte datumnotatie is opgegeven in de landinstellingen van de computer weergeven. |   | `DateFormat.LongTime`| Een tijd weergeven met de tijdnotatie die is opgegeven in de landinstellingen van de computer. |   | `DateFormat.ShortTime`| Een tijd weergeven met de 24-uursnotatie (uu: mm). |"
  example:
  - "This example demonstrates the use of the `FormatDateTime` function.  \n  \n [!code-vb[VbVbalrStrings#3](~/add/codesnippet/visualbasic/12ae27ca-4a0f-4ea2-855e-_1.vb)]"
  syntax:
    content: public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "Vereist. <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>expressie die moet worden geformatteerd."
    - id: NamedFormat
      type: Microsoft.VisualBasic.DateFormat
      description: "Optioneel. Numerieke waarde die aangeeft van de datum/tijd-indeling gebruikt. Als u dit weglaat, <xref uid=&quot;langword_csharp_DateFormat.GeneralDate&quot; name=&quot;DateFormat.GeneralDate&quot; href=&quot;&quot;> </xref> wordt gebruikt."
    return:
      type: System.String
      description: "Retourneert een tekenreeksexpressie die een datum/tijd-waarde vertegenwoordigt."
  overload: Microsoft.VisualBasic.Strings.FormatDateTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>NamedFormat</code>instelling is niet geldig."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een expressie die is opgemaakt als een getal."
  remarks: "Wanneer een of meer optionele argumenten worden weggelaten worden de waarden voor deze argumenten worden geleverd door de lokale instellingen.      > [!NOTE] > Alle instellingen informatie afkomstig is van de landinstellingen van de toepassing. Standaard is dat de landinstellingen in het Configuratiescherm. Maar kan deze worden gewijzigd programmatisch met behulp van .NET Framework.       De `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, en `GroupDigits` argumenten hebben de volgende instellingen.      |||   |-|-|   | Constante | Beschrijving |   | `TriState.True`| De waarde True |   | `TriState.False`| ONWAAR |   | `TriState.UseDefault`| De landinstellingen van de computer |"
  example:
  - "This example demonstrates the `FormatNumber` function.  \n  \n [!code-vb[VbVbalrStrings#15](~/add/codesnippet/visualbasic/4c7d3c11-69f8-405b-a033-_1.vb)]"
  syntax:
    content: public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Vereist. Expressie die moet worden geformatteerd."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Optioneel. Numerieke waarde die aangeeft hoeveel posities aan de rechterkant van het decimaalteken worden weergegeven. De standaardwaarde is –&1;, waarmee wordt aangegeven dat de landinstellingen van de computer worden gebruikt."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Optioneel. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante die aangeeft of een toonaangevende 0 wordt weergegeven voor decimale waarden. Zie &quot;Instellingen&quot; voor waarden."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Optioneel. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante die aangeeft of negatieve waarden tussen haakjes plaatsen. Zie &quot;Instellingen&quot; voor waarden."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Optioneel. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante die aangeeft of getallen worden gegroepeerd met behulp van de groepsscheidingsteken in de landinstellingen opgegeven. Zie &quot;Instellingen&quot; voor waarden."
    return:
      type: System.String
      description: "Retourneert een expressie die is opgemaakt als een getal."
  overload: Microsoft.VisualBasic.Strings.FormatNumber*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Type is geen numerieke."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een expressie die is opgemaakt als een percentage (dat zich bevindt, vermenigvuldigd met 100) met % als volgteken."
  remarks: "Wanneer een of meer optionele argumenten worden weggelaten, worden de waarden voor deze argumenten worden geleverd door de lokale instellingen.      > [!NOTE] > Alle instellingen informatie afkomstig is van de landinstellingen van de toepassing. Standaard is dat de landinstellingen in het Configuratiescherm. Maar kan deze worden gewijzigd programmatisch met behulp van .NET Framework.       De `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, en `GroupDigits` argumenten hebben de volgende instellingen.      |||   |-|-|   | Constante | Beschrijving |   | `TriState.True`| De waarde True |   | `TriState.False`| ONWAAR |   | `TriState.Default`| De landinstellingen van de computer |"
  example:
  - "This example illustrates the use of the `FormatPercent` function.  \n  \n [!code-vb[VbVbalrStrings#28](~/add/codesnippet/visualbasic/699b6dbf-5eeb-4a3e-a4b1-_1.vb)]"
  syntax:
    content: public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "Vereist. Expressie die moet worden geformatteerd."
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "Optioneel. Numerieke waarde die aangeeft hoeveel posities aan de rechterkant van het decimaalteken worden weergegeven. Standaardwaarde is –&1;, waarmee wordt aangegeven dat de landinstellingen worden gebruikt."
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "Optioneel. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante die aangeeft of een nul voor decimale waarden worden weergegeven. Zie &quot;Instellingen&quot; voor waarden."
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "Optioneel. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante waarde die of aangeeft negatieve waarden tussen haakjes plaatsen. Zie &quot;Instellingen&quot; voor waarden."
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "Optioneel. <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>constante die aangeeft of getallen worden gegroepeerd met behulp van de groepsscheidingsteken in de landinstellingen opgegeven. Zie &quot;Instellingen&quot; voor waarden."
    return:
      type: System.String
      description: "Retourneert een expressie die is opgemaakt als een percentage (dat zich bevindt, vermenigvuldigd met 100) met % als volgteken."
  overload: Microsoft.VisualBasic.Strings.FormatPercent*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Type is geen numerieke."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  id: GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> waarde voor het teken uit de opgegeven index in de opgegeven tekenreeks."
  remarks: "Als `Index` is minder dan 1 of groter zijn dan de index van het laatste teken in `str`, een `ArgumentException` gegenereerd."
  example:
  - "This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.  \n  \n [!code-vb[VbVbalrStrings#23](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._0_1.vb)]"
  syntax:
    content: public static char GetChar (string str, int Index);
    parameters:
    - id: str
      type: System.String
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    - id: Index
      type: System.Int32
      description: "Vereist. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>de expressie. De index (op&1; gebaseerd) van het teken in `str` moeten worden geretourneerd."
    return:
      type: System.Char
      description: "<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>de waarde voor het teken uit de opgegeven index in de opgegeven tekenreeks."
  overload: Microsoft.VisualBasic.Strings.GetChar*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>str</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <code>Index</code> &lt; 1, of <code>Index</code> groter is dan de index van het laatste teken van <code>str</code>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een integer voor de beginpositie van het eerste exemplaar van de ene tekenreeks in een andere."
  remarks: "Normaal gesproken de `InStr` functie wordt gebruikt bij het parseren van tekenreeksen.      > [!NOTE] > De `InStrB` functie in eerdere versies van Visual Basic wordt een aantal bytes in plaats van de positie van een teken. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle Visual Basic 2005 tekenreeksen zijn in Unicode en `InStrB` wordt niet langer ondersteund.       De `Compare` argumentinstellingen zijn: |||   |-|-|-|   | Constante | Waarde | Beschrijving |   | `Binary`|0| Een binaire vergelijking uitvoeren |   | `Text`|1| Tekst voor een vergelijking |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/f1b47808-d5f4-408b-b1fc-_1.vb)]"
  syntax:
    content: public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>de expressie wordt doorzocht."
    - id: String2
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>de expressie is aangevraagd."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Optioneel. Geeft het type tekenreeksvergelijking. Als `Compare` weglaat, de <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> instelling bepaalt het type vergelijking."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Als       </td><td> InStr-retourneert       </td></tr><tr><td>           <code>String1</code>lengte van nul is of<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>lengte van nul is of<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> De beginpositie voor de zoekopdracht, wordt standaard ingesteld op de positie van het eerste teken.       </td></tr><tr><td>           <code>String2</code>is niet gevonden       </td><td> 0       </td></tr><tr><td>           <code>String2</code>binnen wordt gevonden<code>String1</code></td><td> Positie waar overeenkomst begint       </td></tr><tr><td></td><td></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een integer voor de beginpositie van het eerste exemplaar van de ene tekenreeks in een andere."
  remarks: "Normaal gesproken de `InStr` functie wordt gebruikt bij het parseren van tekenreeksen.      > [!NOTE] > De `InStrB` functie in eerdere versies van Visual Basic wordt een aantal bytes in plaats van de positie van een teken. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle Visual Basic 2005 tekenreeksen zijn in Unicode en `InStrB` wordt niet langer ondersteund.       De `Compare` argumentinstellingen zijn: |||   |-|-|-|   | Constante | Waarde | Beschrijving |   | `Binary`|0| Een binaire vergelijking uitvoeren |   | `Text`|1| Tekst voor een vergelijking |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/087e182b-78be-4d9a-be91-_1.vb)]"
  syntax:
    content: public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Start
      type: System.Int32
      description: "Optioneel. Numerieke expressie die de beginpositie voor elke zoekactie. Als u dit weglaat, wordt gezocht op de positie van het eerste teken. De startIndex is op basis van 1."
    - id: String1
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>de expressie wordt doorzocht."
    - id: String2
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>de expressie is aangevraagd."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Optioneel. Geeft het type tekenreeksvergelijking. Als `Compare` weglaat, de <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> instelling bepaalt het type vergelijking."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Als       </td><td> InStr-retourneert       </td></tr><tr><td>           <code>String1</code>lengte van nul is of<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>lengte van nul is of<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td>           <code>start</code>         </td></tr><tr><td>           <code>String2</code>is niet gevonden       </td><td> 0       </td></tr><tr><td>           <code>String2</code>binnen wordt gevonden<code>String1</code></td><td> Positie waar overeenkomst begint       </td></tr><tr><td>           <code>Start</code>&gt; lengte van<code>String1</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code> &lt; 1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert de positie van het eerste exemplaar van de ene tekenreeks in een andere, vanaf de rechterkant van de tekenreeks."
  remarks: "Houd er rekening mee dat de syntaxis voor de `InStrRev` functie is niet hetzelfde zijn als de syntaxis voor de `InStr` functie.       De `Compare` argument kan de volgende waarden hebben.      |||   |-|-|   | Constante | Beschrijving |   | `Binary`| Een binaire vergelijking uitvoeren. |   | `Text`| Een tekstuele voor een vergelijking. |"
  example:
  - "This example demonstrates the use of the `InStrRev` function.  \n  \n [!code-vb[VbVbalrStrings#26](~/add/codesnippet/visualbasic/ee8ba742-f981-4eca-b754-_1.vb)]"
  syntax:
    content: public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: StringCheck
      type: System.String
      description: "Vereist. Tekenreeksexpressie waarin wordt gezocht."
    - id: StringMatch
      type: System.String
      description: "Vereist. Een tekenreeksexpressie waarnaar wordt gezocht."
    - id: Start
      type: System.Int32
      description: "Optioneel. Een numerieke expressie voor het instellen van de op basis van een beginpositie voor elke zoeken, te beginnen vanaf de linkerkant van de tekenreeks. Als `Start` vervolgens –&1; wordt gebruikt, wat betekent dat de zoekopdracht op de positie van het laatste teken wordt weggelaten. Vervolgens wordt gezocht van rechts naar links."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Optioneel. Numerieke waarde die aangeeft welk type vergelijking wordt gebruikt bij het evalueren van subtekenreeksen. Als u dit weglaat, wordt een binaire vergelijking uitgevoerd. Zie instellingen voor waarden."
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> Als       </td><td> InStrRev retourneert       </td></tr><tr><td>           <code>StringCheck</code>lengte van nul heeft       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>lengte van nul heeft       </td><td>           <code>Start</code>         </td></tr><tr><td>           <code>StringMatch</code>is niet gevonden       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>binnen wordt gevonden<code>StringCheck</code></td><td> De positie waar de eerste overeenkomst wordt gevonden, vanaf de rechterkant van de tekenreeks.       </td></tr><tr><td>           <code>Start</code>is groter dan de lengte van<code>StringMatch</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStrRev*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>= 0 or <code>Start</code> &lt; -1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  id: Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks die is gemaakt door een aantal subtekenreeksen in een matrix."
  remarks: "Er is een pariteit tussen de `Join` en `Split` functies. De `Join` functie heeft een matrix met tekenreeksen en koppelt u deze met een scheidingsteken tekenreeks, een één-tekenreeks geretourneerd. De `Split` functie een tekenreeks en afscheiding op het scheidingsteken, om te retourneren van een matrix met tekenreeksen. Een belangrijk verschil is dat echter `Join` tekenreeksen met een willekeurige tekenreeks scheidingsteken kunt samenvoegen `Split` kunt alleen tekenreeksen met behulp van een enkel teken scheidingsteken scheiden."
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._160_1.vb)]"
  syntax:
    content: public static string Join (object[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.Object[]
      description: "Vereist. Eendimensionale matrix met subtekenreeksen worden toegevoegd."
    - id: Delimiter
      type: System.String
      description: "Optioneel. Elke tekenreeks gebruikt voor het scheiden van de subtekenreeksen in de tekenreeks geretourneerd. Als u dit weglaat, wordt het spatieteken (&quot;&quot;) wordt gebruikt. Als `Delimiter` is een tekenreeks met lengte nul (&quot;&quot;) of <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, alle items in de lijst worden samengevoegd met zonder scheidingstekens."
    return:
      type: System.String
      description: "Retourneert een tekenreeks die is gemaakt door een aantal subtekenreeksen in een matrix."
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>is niet een dimensionale."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  id: Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks die is gemaakt door een aantal subtekenreeksen in een matrix."
  remarks: "Er is een pariteit tussen de `Join` en `Split` functies. De `Join` functie heeft een matrix met tekenreeksen en koppelt u deze met een scheidingsteken tekenreeks, een één-tekenreeks geretourneerd. De `Split` functie een tekenreeks en afscheiding op het scheidingsteken, om te retourneren van een matrix met tekenreeksen. Een belangrijk verschil is dat echter `Join` tekenreeksen met een willekeurige tekenreeks scheidingsteken kunt samenvoegen `Split` kunt alleen tekenreeksen met behulp van een enkel teken scheidingsteken scheiden."
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._124_1.vb)]"
  syntax:
    content: public static string Join (string[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.String[]
      description: "Vereist. Eendimensionale matrix met subtekenreeksen worden toegevoegd."
    - id: Delimiter
      type: System.String
      description: "Optioneel. Elke tekenreeks gebruikt voor het scheiden van de subtekenreeksen in de tekenreeks geretourneerd. Als u dit weglaat, wordt het spatieteken (&quot;&quot;) wordt gebruikt. Als `Delimiter` is een tekenreeks met lengte nul (&quot;&quot;) of <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, alle items in de lijst worden samengevoegd met zonder scheidingstekens."
    return:
      type: System.String
      description: "Retourneert een tekenreeks die is gemaakt door een aantal subtekenreeksen in een matrix."
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>is niet een dimensionale."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  id: LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks of teken omgezet in kleine letters."
  remarks: "Alleen hoofdletters worden geconverteerd naar kleine letters. alle kleine letters en overige tekens blijven ongewijzigd.       Hierbij wordt gebruikgemaakt van de toepassing cultuurinformatie bij het bewerken van de tekenreeks zodat de wijzigingen van de case geschikt zijn voor de landinstelling waarin de toepassing wordt gebruikt.      > [!IMPORTANT] > Als uw toepassing beslissingen beveiliging op basis van het resultaat van een vergelijking of de bewerking van de case-Wijzig de bewerking moet en gebruik vervolgens de <xref:System.String.Compare%2A?displayProperty=fullName>methode en pass <xref:System.StringComparison>of <xref:System.StringComparison>voor de `comparisonType` argument.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Zie voor meer informatie [cultuur is van invloed op tekenreeksen in Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._236_1.vb)]"
  syntax:
    content: public static char LCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> of <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.Char
      description: "Retourneert een tekenreeks of teken omgezet in kleine letters."
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  id: LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks of teken omgezet in kleine letters."
  remarks: "Alleen hoofdletters worden geconverteerd naar kleine letters. alle kleine letters en overige tekens blijven ongewijzigd.       Hierbij wordt gebruikgemaakt van de toepassing cultuurinformatie bij het bewerken van de tekenreeks zodat de wijzigingen van de case geschikt zijn voor de landinstelling waarin de toepassing wordt gebruikt.      > [!IMPORTANT] > Als uw toepassing beslissingen beveiliging op basis van het resultaat van een vergelijking of de bewerking van de case-Wijzig de bewerking moet en gebruik vervolgens de <xref:System.String.Compare%2A?displayProperty=fullName>methode en pass <xref:System.StringComparison>of <xref:System.StringComparison>voor de `comparisonType` argument.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Zie voor meer informatie [cultuur is van invloed op tekenreeksen in Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._214_1.vb)]"
  syntax:
    content: public static string LCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> of <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks of teken omgezet in kleine letters."
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  id: Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks met een opgegeven aantal tekens vanaf de linkerkant van een tekenreeks."
  remarks: "Om te bepalen het aantal tekens in `str`, gebruiken de `Len` functie. Als in een Windows Forms-toepassing of een andere klasse die is gebruikt een `Left` eigenschap, u moet volledig te kwalificeren de functie met `Microsoft.VisualBasic.Left`.      > [!NOTE] > De `LeftB` functie in eerdere versies van Visual Basic retourneert een tekenreeks in bytes in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LeftB` niet meer wordt ondersteund."
  example:
  - "This example demonstrates the use of the `Left` function to return a substring of a given `String`. In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.  \n  \n [!code-vb[VbVbalrStrings#20](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._139_1.vb)]"
  syntax:
    content: public static string Left (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>de expressie waarvan de meest linkse tekens worden geretourneerd."
    - id: Length
      type: System.Int32
      description: "Vereist. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>de expressie. Numerieke expressie die aangeeft hoeveel tekens moeten worden geretourneerd. Als u 0 opgeeft, een tekenreeks met lengte nul (&quot;&quot;) wordt geretourneerd. Als groter dan of gelijk zijn aan het aantal tekens in `str`, wordt de hele tekenreeks geretourneerd."
    return:
      type: System.String
      description: "Retourneert een tekenreeks met een opgegeven aantal tekens vanaf de linkerkant van een tekenreeks."
  overload: Microsoft.VisualBasic.Strings.Left*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  id: Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._155_1.vb)]"
  syntax:
    content: public static int Len (bool Expression);
    parameters:
    - id: Expression
      type: System.Boolean
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  id: Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._157_1.vb)]"
  syntax:
    content: public static int Len (byte Expression);
    parameters:
    - id: Expression
      type: System.Byte
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  id: Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._159_1.vb)]"
  syntax:
    content: public static int Len (char Expression);
    parameters:
    - id: Expression
      type: System.Char
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  id: Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._5_1.vb)]"
  syntax:
    content: public static int Len (DateTime Expression);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  id: Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._30_1.vb)]"
  syntax:
    content: public static int Len (decimal Expression);
    parameters:
    - id: Expression
      type: System.Decimal
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  id: Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._173_1.vb)]"
  syntax:
    content: public static int Len (double Expression);
    parameters:
    - id: Expression
      type: System.Double
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  id: Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._198_1.vb)]"
  syntax:
    content: public static int Len (short Expression);
    parameters:
    - id: Expression
      type: System.Int16
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  id: Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._99_1.vb)]"
  syntax:
    content: public static int Len (int Expression);
    parameters:
    - id: Expression
      type: System.Int32
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  id: Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._162_1.vb)]"
  syntax:
    content: public static int Len (long Expression);
    parameters:
    - id: Expression
      type: System.Int64
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  id: Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._193_1.vb)]"
  syntax:
    content: public static int Len (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  id: Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._171_1.vb)]"
  syntax:
    content: public static int Len (sbyte Expression);
    parameters:
    - id: Expression
      type: System.SByte
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  id: Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._21_1.vb)]"
  syntax:
    content: public static int Len (float Expression);
    parameters:
    - id: Expression
      type: System.Single
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  id: Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._72_1.vb)]"
  syntax:
    content: public static int Len (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  id: Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._211_1.vb)]"
  syntax:
    content: public static int Len (ushort Expression);
    parameters:
    - id: Expression
      type: System.UInt16
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  id: Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._150_1.vb)]"
  syntax:
    content: public static int Len (uint Expression);
    parameters:
    - id: Expression
      type: System.UInt32
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  id: Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  remarks: "Met de gebruiker gedefinieerde typen en `Object` variabelen, de `Len` functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de `FilePut` functie. Als een `Object` bevat een `String`, de lengte van de tekenreeks wordt geretourneerd. Als een `Object` bevat een ander type, de grootte van het object wordt geretourneerd als deze wordt weggeschreven naar het bestand door de `FilePut` functie.       De `VBFixedString` kenmerk kan worden toegepast op tekenreeksvelden in objecten om aan te geven van de grootte van de tekenreeks in bytes, wanneer geschreven naar schijf. De `Len` functie maakt gebruik van de `VBFixedString` kenmerk toe, indien beschikbaar, bij het bepalen van de grootte van `Object` variabelen.      > [!NOTE] > De `Len` functie misschien niet mogelijk om te bepalen van het werkelijke aantal opslagbytes dat nodig is gebruikt in combinatie met variabele lengte tekenreeksen in de gebruiker gedefinieerde gegevenstypen.      > [!NOTE] > De `LenB` functie in eerdere versies van Visual Basic retourneert het aantal bytes in een tekenreeks in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `LenB` niet meer wordt ondersteund.      ## Smart Device-opmerkingen voor ontwikkelaars de `Len` functie accepteert alleen `String` en `Object` variabelen als parameters. Als een `Object` bevat een `String`, retourneert de lengte van de `String`. Als een parameter een NULL is `Object` -verwijzing, de functie nul retourneert. Als een `Object` een ander type bevat een uitzondering gegenereerd."
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._37_1.vb)]"
  syntax:
    content: public static int Len (ulong Expression);
    parameters:
    - id: Expression
      type: System.UInt64
      description: "Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie of variabele naam. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, wordt de <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref> functie retourneert de grootte, zoals deze wordt weggeschreven naar het bestand door de <xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;> </xref> functie."
    return:
      type: System.Int32
      description: "Retourneert een geheel getal met het aantal tekens in een tekenreeks of het nominaal aantal bytes dat is vereist voor het opslaan van een variabele."
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  id: LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een links uitgelijnde tekenreeks met de opgegeven tekenreeks die is aangepast aan de opgegeven lengte."
  remarks: "Als de opgegeven tekenreeks langer dan de opgegeven lengte is, wordt de geretourneerde tekenreeks ingekort tot de opgegeven lengte. Als de opgegeven tekenreeks kleiner dan de opgegeven lengte is, worden spaties toegevoegd aan de rechterkant van de geretourneerde tekenreeks voor het produceren van de juiste lengte."
  example:
  - "This example demonstrates the use of the `LSet` function.  \n  \n [!code-vb[VbVbalrStrings#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._168_1.vb)]"
  syntax:
    content: public static string LSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>de expressie. Naam van een string-variabele."
    - id: Length
      type: System.Int32
      description: "Vereist. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>de expressie. Lengte van tekenreeks geretourneerd."
    return:
      type: System.String
      description: "Retourneert een links uitgelijnde tekenreeks met de opgegeven tekenreeks die is aangepast aan de opgegeven lengte."
  overload: Microsoft.VisualBasic.Strings.LSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  id: LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks met een kopie van een opgegeven tekenreeks zonder voorloopspaties (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), niets volgspaties (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), of geen voorloop- of volgspaties (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "De `LTrim`, `RTrim`, en `Trim` functies spaties verwijderen van de kanten van tekenreeksen."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._110_1.vb)]"
  syntax:
    content: public static string LTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks met een kopie van een opgegeven tekenreeks zonder voorloopspaties (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), niets volgspaties (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), of geen voorloop- of volgspaties (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.LTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  id: Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks met alle tekens vanaf een opgegeven positie in een tekenreeks."
  remarks: "Om te bepalen het aantal tekens in `str`, gebruiken de `Len` functie.       Visual Basic heeft een `Mid` functie en een `Mid` instructie. Deze elementen beide op een opgegeven aantal tekens in een tekenreeks werken, maar de `Mid` functie retourneert de tekens die u tijdens de `Mid` instructie vervangt de tekens. Zie voor meer informatie [instructie Mid](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > De `MidB` functie in eerdere versies van Visual Basic retourneert een tekenreeks in bytes in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle Visual Basic tekenreeksen zijn in Unicode en `MidB` wordt niet langer ondersteund."
  example:
  - "The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._67_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start);
    parameters:
    - id: str
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>de expressie waarvan tekens worden geretourneerd."
    - id: Start
      type: System.Int32
      description: "Vereist. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>de expressie. Beginpositie van de tekens te retourneren. Als `Start` is groter dan het aantal tekens in `str`, wordt de <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref> functie retourneert een tekenreeks-tekenreeks (&quot;&quot;). `Start`is gebaseerd op één."
    return:
      type: System.String
      description: "Een tekenreeks die bestaat uit alle tekens vanaf de opgegeven positie in de tekenreeks."
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  id: Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks met een opgegeven aantal tekens vanaf een opgegeven positie in een tekenreeks."
  remarks: "Om te bepalen het aantal tekens in `str`, gebruiken de `Len` functie.       Visual Basic heeft een `Mid` functie en een `Mid` instructie. Deze elementen beide op een opgegeven aantal tekens in een tekenreeks werken, maar de `Mid` functie retourneert de tekens die u tijdens de `Mid` instructie vervangt de tekens. Zie voor meer informatie [instructie Mid](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > De `MidB` functie in eerdere versies van Visual Basic retourneert een tekenreeks in bytes in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle Visual Basic tekenreeksen zijn in Unicode en `MidB` wordt niet langer ondersteund."
  example:
  - "The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions. (The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._33_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>de expressie waarvan tekens worden geretourneerd."
    - id: Start
      type: System.Int32
      description: "Vereist. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>de expressie. Beginpositie van de tekens te retourneren. Als `Start` is groter dan het aantal tekens in `str`, wordt de <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref> functie retourneert een tekenreeks-tekenreeks (&quot;&quot;). `Start`een is gebaseerd."
    - id: Length
      type: System.Int32
      description: "Optioneel. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>de expressie. Het aantal tekens retourneren. Als u niets opgeeft, of als er minder dan `Length` tekens in de tekst (met inbegrip van het teken op positie `Start`), worden alle tekens vanaf de startpositie aan het einde van de tekenreeks geretourneerd."
    return:
      type: System.String
      description: "Een tekenreeks die bestaat uit het opgegeven aantal tekens vanaf de opgegeven positie in de tekenreeks."
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks waarin een opgegeven subtekenreeks zijn vervangen door een andere subtekenreeks een opgegeven aantal keren."
  remarks: "De geretourneerde waarde van de `Replace` functie is een tekenreeks die op de positie die is opgegeven begint door `Start` en eindigt bij het einde van de `Expression` tekenreeks met de vervangingen zoals opgegeven door de `Find` en `Replace` waarden.       De `Compare` argument kan de volgende waarden hebben.      |||   |-|-|   | Constante | Beschrijving |   | `Binary`| Een binaire vergelijking uitvoeren |   | `Text`| Een tekstuele vergelijking |"
  example:
  - "This example demonstrates the `Replace` function.  \n  \n```vb#  \nDim TestString As String = \"Shopping List\"  \n' Returns \"Shipping List\".  \nDim aString As String = Replace(TestString, \"o\", \"i\")  \n```"
  syntax:
    content: public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "Vereist. Tekenreeksexpressie met subtekenreeks te vervangen."
    - id: Find
      type: System.String
      description: "Vereist. De subtekenreeks waarnaar wordt gezocht."
    - id: Replacement
      type: System.String
      description: "Vereist. De subtekenreeks vervanging."
    - id: Start
      type: System.Int32
      description: "Optioneel. Plaats binnen `Expression` die een subtekenreeks gebruikt voor de vervanging wordt gestart. De retourwaarde van <xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;> </xref> is een tekenreeks die begint bij `Start`, met de juiste vervangingen. Als u dit weglaat, wordt 1 gebruikt."
    - id: Count
      type: System.Int32
      description: "Optioneel. Het aantal subtekenreeks vervangingen om uit te voeren. Als u dit weglaat, is de standaardwaarde –&1;, wat betekent dat &quot;Maak alle mogelijke vervangingen.&quot;"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Optioneel. Numerieke waarde die aangeeft welk type vergelijking wordt gebruikt bij het evalueren van subtekenreeksen. Zie instellingen voor waarden."
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;></xref>retourneert de volgende waarden.       <table><tbody><tr><td> Als       </td><td> Resultaat van Replace       </td></tr><tr><td><code>Find</code>lengte van nul heeft of<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> Exemplaar van<code>Expression</code></td></tr><tr><td><code>Replace</code>lengte van nul heeft       </td><td> Kopiëren van <code> Expression </code> met geen exemplaren van<code>Find</code></td></tr><tr><td><code>Expression</code>lengte van nul heeft of <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, of <code> Start </code> is groter dan de lengte van<code>Expression</code></td><td><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td></tr><tr><td><code>Count</code>0 is       </td><td> Exemplaar van<code>Expression</code></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.Replace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Count</code>&lt; -1 or <code>Start</code> &lt;= 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  id: Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks met een opgegeven aantal tekens vanaf de rechterkant van een tekenreeks."
  remarks: "Om te bepalen het aantal tekens in `str`, gebruiken de `Len` functie. Als in een Windows-formulier of een andere klasse die is gebruikt een `Right` eigenschap, u moet volledig te kwalificeren de functie met `Microsoft.VisualBasic.Strings.Right`.      > [!NOTE] > De `RightB` functie in eerdere versies van Visual Basic retourneert een tekenreeks in bytes, in plaats van tekens. Dit wordt hoofdzakelijk gebruikt voor tekenreeksen in double-byte character set (DBCS) toepassingen converteren. Alle huidige Visual Basic-tekenreeksen zijn in Unicode en `RightB` niet meer wordt ondersteund."
  example:
  - "This example demonstrates the use of the `Right` function to return a substring of a given `String`. In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.  \n  \n [!code-vb[VbVbalrStrings#21](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._221_1.vb)]"
  syntax:
    content: public static string Right (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>de expressie waarvan de meest rechtse tekens worden geretourneerd."
    - id: Length
      type: System.Int32
      description: "Vereist. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. Numerieke expressie die aangeeft hoeveel tekens moeten worden geretourneerd. Als u 0 opgeeft, een tekenreeks met lengte nul (&quot;&quot;) wordt geretourneerd. Als groter dan of gelijk zijn aan het aantal tekens in `str`, wordt de hele tekenreeks geretourneerd."
    return:
      type: System.String
      description: "Retourneert een tekenreeks met een opgegeven aantal tekens vanaf de rechterkant van een tekenreeks."
  overload: Microsoft.VisualBasic.Strings.Right*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  id: RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een rechts uitgelijnde tekenreeks met de opgegeven tekenreeks die is aangepast aan de opgegeven lengte."
  remarks: "Als `Source` is langer dan `Length`, `RSet` plaatst alleen de meest linkse tekens, tot de lengte van `Source`, in de tekenreeks geretourneerd. Als de opgegeven tekenreeks kleiner dan de opgegeven lengte is, worden spaties toegevoegd aan de linkerkant van de tekenreeks voor het produceren van de juiste lengte. Als de opgegeven tekenreeks langer dan de opgegeven lengte is, wordt deze aan de opgegeven lengte ingekort."
  example:
  - "This example demonstrates the use of the `RSet` function.  \n  \n [!code-vb[VbVbalrStrings#9](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._218_1.vb)]"
  syntax:
    content: public static string RSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>de expressie. Naam van een string-variabele."
    - id: Length
      type: System.Int32
      description: "Vereist. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>de expressie. Lengte van tekenreeks geretourneerd."
    return:
      type: System.String
      description: "Retourneert een rechts uitgelijnde tekenreeks met de opgegeven tekenreeks die is aangepast aan de opgegeven lengte."
  overload: Microsoft.VisualBasic.Strings.RSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  id: RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks met een kopie van een opgegeven tekenreeks zonder voorloopspaties (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), niets volgspaties (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), of geen voorloop- of volgspaties (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "De `LTrim`, `RTrim`, en `Trim` functies spaties verwijderen van de kanten van tekenreeksen."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._143_1.vb)]"
  syntax:
    content: public static string RTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks met een kopie van een opgegeven tekenreeks zonder voorloopspaties (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), niets volgspaties (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), of geen voorloop- of volgspaties (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.RTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  id: Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks die bestaat uit het opgegeven aantal spaties."
  remarks: "De `Space` functie is handig voor het opmaken van uitvoer en wissen van gegevens in tekenreeksen met vaste lengte."
  example:
  - "This example uses the `Space` function to return a string consisting of a specified number of spaces.  \n  \n [!code-vb[VbVbalrStrings#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._154_1.vb)]"
  syntax:
    content: public static string Space (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "Vereist. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>de expressie. Het aantal spaties dat u in de tekenreeks wilt."
    return:
      type: System.String
      description: "Retourneert een tekenreeks die bestaat uit het opgegeven aantal spaties."
  overload: Microsoft.VisualBasic.Strings.Space*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een op nul gebaseerde, eendimensionale matrix met een opgegeven aantal subtekenreeksen."
  remarks: "Standaard of wanneer `Limit` is gelijk aan -1, de `Split` functie splitst de invoerreeks bij elke instantie van de tekenreeks scheidingsteken en retourneert de subtekenreeksen in een matrix. Wanneer de `Limit` parameter is groter dan nul, de `Split` functie splitst de tekenreeks in de eerste `Limit`-1 exemplaren van het scheidingsteken, en retourneert een matrix met de resulterende subtekenreeksen. Bijvoorbeeld: `Split(&quot;a:b:c&quot;, &quot;:&quot;)` retourneert de matrix `{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}`, terwijl `Split(&quot;a:b:c&quot;, &quot;:&quot;, 2)` retourneert de matrix `{&quot;a&quot;, &quot;b:c&quot;}`.       Wanneer de `Split` functie aangetroffen twee scheidingstekens in een rij of een scheidingsteken aan het begin of einde van de tekenreeks, ze geïnterpreteerd als wanneer u een lege tekenreeks (&quot;&quot;). Bijvoorbeeld, `Split(&quot;xx&quot;, &quot;x&quot;)` retourneert de matrix met tekenreeksen voor drie leeg: een tussen het begin van de tekenreeks en de eerste &quot;x&quot;, een tussen de twee tekenreeksen &quot; x&quot; en een tussen het laatste &quot;x&quot; en het einde van de tekenreeks.       Deze tabel ziet u hoe de optionele `Delimiter`, `Limit`, en `Compare` parameters kunnen wijzigen het gedrag van de `Split` functie.      |||   |-|-|   | Aanroep splitsen | Retourwaarde |   | `Split(&quot;42, 12, 19&quot;)`| {&quot;42&quot;, &quot;12&quot;, &quot;19&quot;} |   | `Split(&quot;42, 12, 19&quot;, &quot;, &quot;)`| {{&quot;42&quot;, &quot;12&quot;, &quot;19&quot;} |   | `Split(&quot;42, 12, 19&quot;, &quot;, &quot;, 2)`| {&quot;42&quot;, &quot; 12, 19&quot;} |   | `Split(&quot;192.168.0.1&quot;, &quot;.&quot;)`| {{&quot;192&quot;, &quot;168&quot;, &quot;0&quot;, &quot;1&quot;} |   | `Split(&quot;Alice and Bob&quot;, &quot; AND &quot;)`| {{&quot; Els en Bob&quot;} |   | `Split(&quot;Alice and Bob&quot;, &quot; AND &quot;, ,CompareMethod.Text)`| {{&quot;Els&quot;, &quot;Bob&quot;} |   | `Split(&quot;someone@example.com&quot;, &quot;@&quot;,1)`| {&quot;someone@example.com&quot;}|   | `Split(&quot;someone@example.com&quot;, &quot;@&quot;,2)`| {{&quot;iemand&quot;, &quot;example.com&quot;}|       De `Compare` argument kan de volgende waarden hebben.      ||||   |-|-|-|   | Constante | Beschrijving | Waarde |   | `CompareMethod.Binary`| Een binaire vergelijking uitvoeren |&0; |   | `CompareMethod.Text`| Een tekstuele vergelijking |&1; |"
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_1.vb)]  \n  \n The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.  \n  \n [!code-vb[VbVbalrStrings#14](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_2.vb)]"
  syntax:
    content: public static string[] Split (string Expression, string Delimiter = " ", int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressie met subtekenreeksen en scheidingstekens."
    - id: Delimiter
      type: System.String
      description: "Optioneel. Een enkel teken gebruikt voor het identificeren van substring limieten. Als `Delimiter` wordt weggelaten, een spatie (&quot;&quot;) wordt ervan uitgegaan dat het scheidingsteken."
    - id: Limit
      type: System.Int32
      description: "Optioneel. Maximum aantal subtekenreeksen waarin de invoertekenreeks moet worden gesplitst. De standaardwaarde –&1;, geeft aan dat de invoertekenreeks moet worden gesplitst bij elke instantie van de `Delimiter` tekenreeks."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Optioneel. Numerieke waarde die aangeeft van de vergelijking wordt gebruikt bij het evalueren van subtekenreeksen. Zie &quot;Instellingen&quot; voor waarden."
    return:
      type: System.String[]
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>matrix. Als <code> Expression </code> is een tekenreeks met lengte nul (&quot;&quot;), <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref> retourneert een matrix met één element met een lengte van nul-tekenreeks. Als <code> Delimiter </code> een tekenreeks met lengte nul is of als deze niet overal in <code> Expression </code>, <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref> retourneert een matrix met één element met de gehele <code> Expression </code> tekenreeks."
  overload: Microsoft.VisualBasic.Strings.Split*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert -1, 0 of 1, op basis van het resultaat van een vergelijking van tekenreeksen."
  remarks: "De tekenreeksen worden vergeleken alfanumeriek sorteren-waarden die beginnen met het eerste teken. Zie voor meer informatie over binaire vergelijkingen tekstuele vergelijkingen en sorteervolgorde [vergelijken instructie Option](~/add/includes/ajax-current-ext-md.md).       De `Compare` argumentinstellingen zijn: |||   |-|-|   | Constante | Beschrijving |   | `Binary`| Een binaire vergelijking, op basis van een sorteervolgorde die is afgeleid van de interne binaire weergaven van de tekens uitvoeren. |   | `Text`| Voor een vergelijking tekst, op basis van een niet-hoofdlettergevoelige tekst sorteervolgorde bepaald door uw systeem `LocaleID` waarde. |"
  example:
  - "This example uses the `StrComp` function to return the results of a string comparison.  \n  \n [!code-vb[VbVbalrStrings#22](~/add/codesnippet/visualbasic/40cb6ac0-98a9-4acc-9cbf-_1.vb)]"
  syntax:
    content: public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    - id: String2
      type: System.String
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "Optioneel. Geeft het type tekenreeksvergelijking. Als `Compare` weglaat, de <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref> instelling bepaalt het type vergelijking."
    return:
      type: System.Int32
      description: "De <xref uid=&quot;langword_csharp_StrComp&quot; name=&quot;StrComp&quot; href=&quot;&quot;> </xref> functie heeft de volgende waarden geretourneerd.       <table><tbody><tr><td> Als       </td><td> Retourwaarde       </td></tr><tr><td><code>String1</code>sorteert voor<code>String2</code></td><td> -1       </td></tr><tr><td><code>String1</code>is gelijk aan<code>String2</code></td><td> 0       </td></tr><tr><td><code>String1</code>sorteert na<code>String2</code></td><td> 1       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.StrComp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Compare</code>waarde is niet geldig."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  id: StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks die is geconverteerd zoals is opgegeven."
  remarks: "De constanten `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, en `VbStrConv.Hiragana` kan leiden tot runtime-fouten bij gebruik in de landinstellingen waar ze niet van toepassing, maar niet altijd: de constanten `VbStrConv.Katakana` en `VbStrConv.Hiragana` kan worden gebruikt in een niet-Japanse-systeem met het Japanse taalpakket is geïnstalleerd. Bovendien kunt u van de constanten `VbStrConv.Wide` en `VbStrConv.Narrow` wordt ondersteund op systemen met een Aziatische taal is geïnstalleerd.       Hierbij wordt gebruikgemaakt van de toepassing cultuurinformatie bij het bewerken van de tekenreeks zodat de wijzigingen van de case geschikt zijn voor de landinstelling waarin de toepassing wordt gebruikt.      > [!IMPORTANT] > Als uw toepassing beslissingen beveiliging op basis van het resultaat van een vergelijking of de bewerking van de case-Wijzig de bewerking moet en gebruik vervolgens de <xref:System.String.Compare%2A?displayProperty=fullName>methode en pass <xref:System.StringComparison>of <xref:System.StringComparison>voor de `comparisonType` argument.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Zie voor meer informatie [cultuur is van invloed op tekenreeksen in Visual Basic](~/add/includes/ajax-current-ext-md.md).       De `Conversion` argumentinstellingen zijn: |||   |-|-|   | -Inventarisatielid | Beschrijving |   | `VbStrConv.None`| Geen conversie voert |   | `VbStrConv.LinguisticCasing`| Taalkundige regels worden gebruikt voor gebruik in plaats van File System (standaard). Geldig met `VbStrConv.UpperCase` en `VbStrConv.LowerCase` alleen. |   | `VbStrConv.UpperCase`| Converteert hoofdletters. |   | `VbStrConv.LowerCase`| Zet de tekenreeks in kleine letters. |   | `VbStrConv.ProperCase`| Hiermee converteert u de eerste letter van elk woord in tekenreeks naar hoofdletters. |   | `VbStrConv.Wide` <sup>*</sup>| Hiermee worden smalle (halve breedte) tekens in de tekenreeks wide (volledige breedte) tekens. |   | `VbStrConv.Narrow` <sup>*</sup>| Converteert wide (volledige breedte) tekens in de tekenreeks om te beperken (halve breedte) tekens. |   | `VbStrConv.Katakana` <sup>**</sup>| Hiragana tekens in de tekenreeks converteren naar Katakana-tekens. |   | `VbStrConv.Hiragana` <sup>**</sup>| Katakana tekens in de tekenreeks converteren naar Hiragana-tekens. |   | `VbStrConv.SimplifiedChinese` <sup>*</sup>| Traditioneel Chinees converteert naar vereenvoudigd Chinees. |   | `VbStrConv.TraditionalChinese` <sup>*</sup>| Vereenvoudigd Chinees tekens converteren naar traditioneel Chinees. |       <sup> * </sup> Van toepassing op Aziatische landinstellingen.       <sup>**</sup>Geldt alleen voor Japan.      > [!NOTE] > Deze constanten worden opgegeven in de .NET Framework common language runtime. Hierdoor kunnen kunnen ze worden gebruikt een willekeurige plaats in uw code in plaats van de werkelijke waarden. De meeste kunnen worden gecombineerd (bijvoorbeeld `UpperCase + Wide`), behalve wanneer ze elkaar wederzijds uit (bijvoorbeeld `VbStrConv.Wide + VbStrConv.Narrow`).       Hieronder vindt u geldige word scheidingstekens voor het juiste gebruik: Null (`Chr$(0)`), horizontale tab (`Chr$(9)`), regel aan (`Chr$(10)`), verticale tabblad (`Chr$(11)`), pagina (`Chr$(12)`), regelterugloop (`Chr$(13)`), ruimte (enkel-byte character set) (`Chr$(32)`). De werkelijke waarde voor een spatie, die full of halve breedte worden kan, varieert per land/regio voor de Aziatische culturen."
  example:
  - "This example converts text into all lowercase letters.  \n  \n [!code-vb[VbVbalrStrings#6](~/add/codesnippet/visualbasic/834dd6b9-b57e-4455-8085-_1.vb)]"
  syntax:
    content: public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);
    parameters:
    - id: str
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>expressie die moet worden geconverteerd."
    - id: Conversion
      type: Microsoft.VisualBasic.VbStrConv
      description: "Vereist. <xref href=&quot;Microsoft.VisualBasic.VbStrConv&quot;></xref>lid. De opsommingswaarde op te geven van de conversie uit te voeren."
    - id: LocaleID
      type: System.Int32
      description: "Optioneel. De <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> waarde, als deze verschilt van het systeem <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> waarde. (Het systeem <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref> de standaardwaarde.)"
    return:
      type: System.String
      description: "Retourneert een tekenreeks die is geconverteerd zoals is opgegeven."
  overload: Microsoft.VisualBasic.Strings.StrConv*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Niet-ondersteunde <code> LocaleID </code>, <code> Conversion </code> &lt; 0 of &gt; 2048 of niet-ondersteunde conversie voor de opgegeven landinstelling."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  id: StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks of het object dat bestaat uit het opgegeven teken het opgegeven aantal keren herhaald."
  remarks: "Deze functie retourneert een `String` bestaat uit herhaalde tekens. Het teken dat als de tekenreeks is het eerste teken in de `Character` argument, maar is gedupliceerd `Number` keren."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._197_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, char Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Vereist. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>de expressie. De lengte van de tekenreeks die moet worden geretourneerd."
    - id: Character
      type: System.Char
      description: "Vereist. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Alleen het eerste teken van de expressie wordt gebruikt. Als teken van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, mag ofwel een <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> of een <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>waarde."
    return:
      type: System.String
      description: "Retourneert een tekenreeks of het object dat bestaat uit het opgegeven teken het opgegeven aantal keren herhaald."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is kleiner dan 0 of <code>Character</code> type is niet geldig."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  id: StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks of het object dat bestaat uit het opgegeven teken het opgegeven aantal keren herhaald."
  remarks: "Deze functie retourneert een `String` bestaat uit herhaalde tekens. Het teken dat als de tekenreeks is het eerste teken in de `Character` argument, maar is gedupliceerd `Number` keren."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._63_1.vb)]"
  syntax:
    content: public static object StrDup (int Number, object Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Vereist. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>de expressie. De lengte van de tekenreeks die moet worden geretourneerd."
    - id: Character
      type: System.Object
      description: "Vereist. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Alleen het eerste teken van de expressie wordt gebruikt. Als teken van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, mag ofwel een <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> of een <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>waarde."
    return:
      type: System.Object
      description: "Retourneert een tekenreeks of het object dat bestaat uit het opgegeven teken het opgegeven aantal keren herhaald."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is kleiner dan 0 of <code>Character</code> type is niet geldig."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  id: StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks of het object dat bestaat uit het opgegeven teken het opgegeven aantal keren herhaald."
  remarks: "Deze functie retourneert een `String` bestaat uit herhaalde tekens. Het teken dat als de tekenreeks is het eerste teken in de `Character` argument, maar is gedupliceerd `Number` keren."
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._148_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, string Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "Vereist. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>de expressie. De lengte van de tekenreeks die moet worden geretourneerd."
    - id: Character
      type: System.String
      description: "Vereist. Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. Alleen het eerste teken van de expressie wordt gebruikt. Als teken van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, mag ofwel een <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> of een <xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;> </xref>waarde."
    return:
      type: System.String
      description: "Retourneert een tekenreeks of het object dat bestaat uit het opgegeven teken het opgegeven aantal keren herhaald."
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is kleiner dan 0 of <code>Character</code> type is niet geldig."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  id: StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks waarin de tekenvolgorde van een opgegeven tekenreeks is omgekeerd."
  remarks: "De `StrReverse` functie retourneert een tekenreeks met de dezelfde tekens als `Expression`, maar in de omgekeerde volgorde."
  example:
  - '[!code-vb[VbVbalrStrings#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._7_1.vb)]'
  syntax:
    content: public static string StrReverse (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Vereist. Een tekenreeksexpressie waarvan de tekens moeten worden omgekeerd. Als `Expression` is een tekenreeks met lengte nul (&quot;&quot;), een tekenreeks met lengte nul wordt geretourneerd."
    return:
      type: System.String
      description: "Retourneert een tekenreeks waarin de tekenvolgorde van een opgegeven tekenreeks is omgekeerd."
  overload: Microsoft.VisualBasic.Strings.StrReverse*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  id: Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks met een kopie van een opgegeven tekenreeks zonder voorloopspaties (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), niets volgspaties (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), of geen voorloop- of volgspaties (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  remarks: "De `LTrim`, `RTrim`, en `Trim` functies spaties verwijderen van de kanten van tekenreeksen."
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._87_1.vb)]"
  syntax:
    content: public static string Trim (string str);
    parameters:
    - id: str
      type: System.String
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks met een kopie van een opgegeven tekenreeks zonder voorloopspaties (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>), niets volgspaties (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>), of geen voorloop- of volgspaties (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)."
  overload: Microsoft.VisualBasic.Strings.Trim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  id: UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks of teken met de opgegeven tekenreeks naar hoofdletters is geconverteerd."
  remarks: "Alleen kleine letters worden omgezet in hoofdletters. alle hoofdletters en overige tekens blijven ongewijzigd.       Hierbij wordt gebruikgemaakt van de toepassing cultuurinformatie bij het bewerken van de tekenreeks zodat de wijzigingen van de case geschikt zijn voor de landinstelling waarin de toepassing wordt gebruikt.      > [!IMPORTANT] > Als uw toepassing beslissingen beveiliging op basis van het resultaat van een vergelijking of de bewerking van de case-Wijzig de bewerking moet en gebruik vervolgens de <xref:System.String.Compare%2A?displayProperty=fullName>methode en pass <xref:System.StringComparison>of <xref:System.StringComparison>voor de `comparisonType` argument.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Zie voor meer informatie [cultuur is van invloed op tekenreeksen in Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._201_1.vb)]"
  syntax:
    content: public static char UCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> of <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.Char
      description: "Retourneert een tekenreeks of teken met de opgegeven tekenreeks naar hoofdletters is geconverteerd."
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  id: UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks of teken met de opgegeven tekenreeks naar hoofdletters is geconverteerd."
  remarks: "Alleen kleine letters worden omgezet in hoofdletters. alle hoofdletters en overige tekens blijven ongewijzigd.       Hierbij wordt gebruikgemaakt van de toepassing cultuurinformatie bij het bewerken van de tekenreeks zodat de wijzigingen van de case geschikt zijn voor de landinstelling waarin de toepassing wordt gebruikt.      > [!IMPORTANT] > Als uw toepassing beslissingen beveiliging op basis van het resultaat van een vergelijking of de bewerking van de case-Wijzig de bewerking moet en gebruik vervolgens de <xref:System.String.Compare%2A?displayProperty=fullName>methode en pass <xref:System.StringComparison>of <xref:System.StringComparison>voor de `comparisonType` argument.</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> Zie voor meer informatie [cultuur is van invloed op tekenreeksen in Visual Basic](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._23_1.vb)]"
  syntax:
    content: public static string UCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> of <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks of teken met de opgegeven tekenreeks naar hoofdletters is geconverteerd."
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.CompareMethod
  parent: Microsoft.VisualBasic
  isExternal: false
  name: CompareMethod
  nameWithType: CompareMethod
  fullName: Microsoft.VisualBasic.CompareMethod
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.TriState
  parent: Microsoft.VisualBasic
  isExternal: false
  name: TriState
  nameWithType: TriState
  fullName: Microsoft.VisualBasic.TriState
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.VisualBasic.DateFormat
  parent: Microsoft.VisualBasic
  isExternal: false
  name: DateFormat
  nameWithType: DateFormat
  fullName: Microsoft.VisualBasic.DateFormat
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
- uid: System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
- uid: Microsoft.VisualBasic.VbStrConv
  parent: Microsoft.VisualBasic
  isExternal: false
  name: VbStrConv
  nameWithType: VbStrConv
  fullName: Microsoft.VisualBasic.VbStrConv
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
- uid: Microsoft.VisualBasic.Strings.Asc*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc
  nameWithType: Strings.Asc
- uid: Microsoft.VisualBasic.Strings.AscW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW
  nameWithType: Strings.AscW
- uid: Microsoft.VisualBasic.Strings.Chr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr
  nameWithType: Strings.Chr
- uid: Microsoft.VisualBasic.Strings.ChrW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW
  nameWithType: Strings.ChrW
- uid: Microsoft.VisualBasic.Strings.Filter*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter
  nameWithType: Strings.Filter
- uid: Microsoft.VisualBasic.Strings.Format*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format
  nameWithType: Strings.Format
- uid: Microsoft.VisualBasic.Strings.FormatCurrency*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency
  nameWithType: Strings.FormatCurrency
- uid: Microsoft.VisualBasic.Strings.FormatDateTime*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime
  nameWithType: Strings.FormatDateTime
- uid: Microsoft.VisualBasic.Strings.FormatNumber*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber
  nameWithType: Strings.FormatNumber
- uid: Microsoft.VisualBasic.Strings.FormatPercent*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent
  nameWithType: Strings.FormatPercent
- uid: Microsoft.VisualBasic.Strings.GetChar*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar
  nameWithType: Strings.GetChar
- uid: Microsoft.VisualBasic.Strings.InStr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr
  nameWithType: Strings.InStr
- uid: Microsoft.VisualBasic.Strings.InStrRev*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev
  nameWithType: Strings.InStrRev
- uid: Microsoft.VisualBasic.Strings.Join*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join
  nameWithType: Strings.Join
- uid: Microsoft.VisualBasic.Strings.LCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase
  nameWithType: Strings.LCase
- uid: Microsoft.VisualBasic.Strings.Left*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left
  nameWithType: Strings.Left
- uid: Microsoft.VisualBasic.Strings.Len*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len
  nameWithType: Strings.Len
- uid: Microsoft.VisualBasic.Strings.LSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet
  nameWithType: Strings.LSet
- uid: Microsoft.VisualBasic.Strings.LTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim
  nameWithType: Strings.LTrim
- uid: Microsoft.VisualBasic.Strings.Mid*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid
  nameWithType: Strings.Mid
- uid: Microsoft.VisualBasic.Strings.Replace*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace
  nameWithType: Strings.Replace
- uid: Microsoft.VisualBasic.Strings.Right*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right
  nameWithType: Strings.Right
- uid: Microsoft.VisualBasic.Strings.RSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet
  nameWithType: Strings.RSet
- uid: Microsoft.VisualBasic.Strings.RTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim
  nameWithType: Strings.RTrim
- uid: Microsoft.VisualBasic.Strings.Space*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space
  nameWithType: Strings.Space
- uid: Microsoft.VisualBasic.Strings.Split*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split
  nameWithType: Strings.Split
- uid: Microsoft.VisualBasic.Strings.StrComp*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp
  nameWithType: Strings.StrComp
- uid: Microsoft.VisualBasic.Strings.StrConv*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv
  nameWithType: Strings.StrConv
- uid: Microsoft.VisualBasic.Strings.StrDup*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup
  nameWithType: Strings.StrDup
- uid: Microsoft.VisualBasic.Strings.StrReverse*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse
  nameWithType: Strings.StrReverse
- uid: Microsoft.VisualBasic.Strings.Trim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim
  nameWithType: Strings.Trim
- uid: Microsoft.VisualBasic.Strings.UCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase
  nameWithType: Strings.UCase
