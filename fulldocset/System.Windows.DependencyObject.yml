### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyObject
  id: DependencyObject
  children:
  - System.Windows.DependencyObject.#ctor
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  langs:
  - csharp
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
  type: Class
  summary: "Hiermee geeft u een object dat deel uitmaakt van het systeem van de eigenschap afhankelijkheid."
  remarks: "De klasse DependencyObject kunt [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] eigenschap systeemservices op veel afgeleide klassen.       Primaire functie van de eigenschap van het systeem is voor het berekenen van de waarden van eigenschappen en het systeem een melding over de waarden die zijn gewijzigd. Een andere belangrijke klasse die deel uitmaakt van het systeem eigenschap is <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> <xref:System.Windows.DependencyProperty>Hiermee schakelt u de registratie van afhankelijkheidseigenschappen naar het systeem eigenschap en bevat identificatie en informatie over elke afhankelijkheidseigenschap terwijl DependencyObject als basisklasse kan objecten met de afhankelijkheidseigenschappen.</xref:System.Windows.DependencyProperty>       DependencyObject services en kenmerken zijn onder andere het volgende:-afhankelijkheidseigenschap die als host fungeert voor ondersteuning. U registreert een afhankelijkheidseigenschap door het aanroepen van de <xref:System.Windows.DependencyProperty.Register%2A>methode en opslaan van de geretourneerde waarde van de methode als een openbare statische veld zijn in uw klasse.</xref:System.Windows.DependencyProperty.Register%2A>      -De gekoppelde eigenschap die als host fungeert voor ondersteuning. Registreren van een gekoppelde eigenschap door het aanroepen van de <xref:System.Windows.DependencyProperty.RegisterAttached%2A>methode en opslaan van de geretourneerde waarde van de methode als een openbare statische alleen-lezen veld zijn in uw klasse.</xref:System.Windows.DependencyProperty.RegisterAttached%2A> (Er zijn ook aanvullende lid vereisten; Houd er rekening mee dat dit vertegenwoordigt een [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] specifieke implementatie voor de bijgevoegde eigenschappen. Zie voor meer informatie [gekoppeld eigenschappen overzicht](~/add/includes/ajax-current-ext-md.md).) De gekoppelde eigenschap kan vervolgens worden ingesteld op een klasse die is afgeleid van DependencyObject.      -Ophalen, instellen en schakel hulpprogrammamethoden voor waarden van de eigenschappen van een afhankelijkheid die aanwezig zijn op het DependencyObject.      -Metagegevens, waarde ondersteuning forceren, eigenschap melding en onderdrukking retouraanroepen voor afhankelijkheidseigenschappen zijn gewijzigd of eigenschappen die zijn gekoppeld. De klasse DependencyObject vereenvoudigt ook de metagegevens van de eigenschap per eigenaar voor een afhankelijkheidseigenschap.      -Er is een algemene basisklasse voor klassen die zijn afgeleid van <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, of <xref:System.Windows.Media.Visual>.</xref:System.Windows.Media.Visual> </xref:System.Windows.Freezable> </xref:System.Windows.ContentElement> (<xref:System.Windows.UIElement>, een andere klasse basiselement, heeft een Klassehiërarchie waarin <xref:System.Windows.Media.Visual>.)</xref:System.Windows.Media.Visual> </xref:System.Windows.UIElement>"
  example:
  - "The following example derives from DependencyObject to create a new abstract class. The class then registers an attached property and includes support members for that attached property.  \n  \n [!code-cs[WPFAquariumSln#DOMain](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#domain)]\n [!code-vb[WPFAquariumSln#DOMain](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#domain)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))]

      [System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))]

      public class DependencyObject : System.Windows.Threading.DispatcherObject
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.DependencyObject.#ctor
  id: '#ctor'
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: DependencyObject()
  nameWithType: DependencyObject.DependencyObject()
  fullName: System.Windows.DependencyObject.DependencyObject()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> klasse."
  syntax:
    content: public DependencyObject ();
    parameters: []
  overload: System.Windows.DependencyObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  id: ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hiermee wist u de lokale waarde van een eigenschap. De eigenschap worden gewist is opgegeven door een <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> id."
  remarks: "De waarde van eigenschap wissen door het aanroepen van ClearValue geeft noodzakelijk geen een afhankelijkheidseigenschap de standaardwaarde die is opgegeven in de metagegevens van de eigenschap afhankelijkheid. De eigenschap alleen specifiek wissen wordt gewist ongeacht lokale waarde zijn toegepast. Zie voor meer informatie [afhankelijkheid eigenschap waarde prioriteit](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example iterates all properties that have local values set on an object, then calls ClearValue to clear the values of each such property.  \n  \n [!code-cs[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/csharp/DPClearValue/default.xaml.cs#iteratelocalvaluesandclear)]\n [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/visualbasic/DPClearValue/default.xaml.vb#iteratelocalvaluesandclear)]"
  syntax:
    content: public void ClearValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "De afhankelijkheidseigenschap worden gewist, geïdentificeerd door een <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> objectverwijzing."
  overload: System.Windows.DependencyObject.ClearValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Poging om aan te roepen ClearValue een verzegelde <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  id: ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyPropertyKey)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hiermee wist u de lokale waarde van een alleen-lezen eigenschap. De eigenschap worden gewist is opgegeven door een <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref>."
  remarks: "Een <xref:System.Windows.DependencyPropertyKey>identificeert een alleen-lezen afhankelijkheidseigenschap voor bewerkingen van het systeem.</xref:System.Windows.DependencyPropertyKey> Klassen die definiëren van alleen-lezen afhankelijkheidseigenschappen moeten niet beschikbaar voor deze sleutel met openbare toegang. Een openbaar blootgestelde sleutel biedt een pad voor openbare code die het kenmerk alleen-lezen teken van de eigenschap genegeerde als methoden zoals <xref:System.Windows.DependencyObject.ClearValue%2A>of <xref:System.Windows.DependencyObject.SetValue%2A>buiten de klasse of de assembly, verwijst naar de sleutel kan worden aangeroepen.</xref:System.Windows.DependencyObject.SetValue%2A> </xref:System.Windows.DependencyObject.ClearValue%2A>       De waarde van eigenschap wissen door het aanroepen van ClearValue geeft noodzakelijk geen een afhankelijkheidseigenschap de standaardwaarde die is opgegeven in de metagegevens van de eigenschap afhankelijkheid. De waarde alleen specifiek wissen wordt gewist ongeacht lokale waarde zijn toegepast. Zie voor meer informatie [afhankelijkheid eigenschap waarde prioriteit](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void ClearValue (System.Windows.DependencyPropertyKey key);
    parameters:
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "De sleutel voor de afhankelijkheidseigenschap worden gewist."
  overload: System.Windows.DependencyObject.ClearValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Er is geprobeerd om aan te roepen <xref:System.Windows.DependencyObject.ClearValue*>op een verzegelde <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>.</xref:System.Windows.DependencyObject.ClearValue*>"
  platform:
  - net462
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  id: CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hiermee wordt de waarde van de opgegeven afhankelijkheidseigenschap geconverteerd. Dit wordt bereikt door het aanroepen van een <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref> functie die is opgegeven in de metagegevens van de eigenschap voor de afhankelijkheidseigenschap zoals zich dit in de aanroep <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "Naast het expliciet wordt aangeroepen door het aanroepen van CoerceValue, de <xref:System.Windows.CoerceValueCallback>voor een afhankelijkheid eigenschap wordt ook aangeroepen intern wanneer de waarde van de eigenschap afhankelijkheid wordt opnieuw geëvalueerd door de [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)] eigenschap system.</xref:System.Windows.CoerceValueCallback>       Als u de CoerceValue-methode aanroept, aanroept u uiteindelijk de callback coerce waarde voor de eigenschap die u opgeeft. U wordt doorgaans CoerceValue aanroepen alleen als u weet dat er een retouraanroep coerce-waarde bestaat, en als u weet dat de callback criteria voor afdwingen.       De meest voorkomende scenario voor het aanroepen van CoerceValue valt binnen de verwerking van de klasse of eigenschap wijziging retouraanroepen van verwante eigenschappen die van invloed op de waarden in een afhankelijke manier. Zie voor meer informatie [afhankelijkheid eigenschap retouraanroepen en validatie](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example calls CoerceValue within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class. This is a common pattern for introducing true value dependencies between dependency properties.  \n  \n [!code-cs[DPCallbackOverride#OnPCCurrent](~/add/codesnippet/csharp/DPCallbackOverride/SDKSampleLibrary/class1.cs#onpccurrent)]\n [!code-vb[DPCallbackOverride#OnPCCurrent](~/add/codesnippet/visualbasic/DPCallbackOverride.sdksamplelibrary/class1.vb#onpccurrent)]"
  syntax:
    content: public void CoerceValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "De id voor de afhankelijkheidseigenschap gedwongen."
  overload: System.Windows.DependencyObject.CoerceValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De opgegeven <code> dp </code> of de waarde ervan zijn ongeldig of bestaat niet."
  platform:
  - net462
- uid: System.Windows.DependencyObject.DependencyObjectType
  id: DependencyObjectType
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
  fullName: System.Windows.DependencyObject.DependencyObjectType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Haalt de <xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref> die loopt de [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] type van dit exemplaar."
  remarks: "Deze eigenschap is handig als een object dat wordt geretourneerd vanaf een methode een retourwaarde type heeft <xref:System.Windows.DependencyObject>en u wilt uitvoeren van de eigenschap system specifieke bewerkingen op, afhankelijk van het type.</xref:System.Windows.DependencyObject> Voorbeeld is het efficiënter om aan te roepen <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29>met behulp van de <xref:System.Windows.DependencyObjectType>in plaats van de [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] type.</xref:System.Windows.DependencyObjectType> </xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> <xref:System.Windows.DependencyObjectType>snellere lookup vergemakkelijkt.</xref:System.Windows.DependencyObjectType>"
  example:
  - "In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property. The class implements a default constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.  \n  \n `public DOClass() : base()`  \n  \n `{`  \n  \n `__customPropertyCache = (CustomDP)`  \n  \n `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  \n  \n `}`"
  syntax:
    content: public System.Windows.DependencyObjectType DependencyObjectType { get; }
    return:
      type: System.Windows.DependencyObjectType
      description: "Een <xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref> die loopt de [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] type van dit exemplaar."
  overload: System.Windows.DependencyObject.DependencyObjectType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: DependencyObject.Equals(Object)
  fullName: System.Windows.DependencyObject.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hiermee wordt bepaald of een opgegeven <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> is gelijk aan de huidige <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "Deze implementatie is alleen verwijzingsgelijkheid en probeert niet te evalueren waarde gelijkheid van de eigenschappen van opgenomen."
  syntax:
    content: public override sealed bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "De <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> om te vergelijken met het huidige exemplaar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de twee exemplaren hetzelfde; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyObject.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetHashCode
  id: GetHashCode
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: DependencyObject.GetHashCode()
  fullName: System.Windows.DependencyObject.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hiermee wordt een hash-code voor dit <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  syntax:
    content: public override sealed int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Een 32-bits geheel hash-code."
  overload: System.Windows.DependencyObject.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator
  id: GetLocalValueEnumerator
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetLocalValueEnumerator()
  nameWithType: DependencyObject.GetLocalValueEnumerator()
  fullName: System.Windows.DependencyObject.GetLocalValueEnumerator()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "De enumerator voor een gespecialiseerde maakt om te bepalen welke afhankelijkheidseigenschappen lokaal waarden is ingesteld in dit <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "Een *lokale waarde* is elke eigenschapswaarde afhankelijkheid die is ingesteld door <xref:System.Windows.DependencyObject.SetValue%2A>, zoals in tegenstelling tot andere aspecten van de eigenschap system.</xref:System.Windows.DependencyObject.SetValue%2A>       De <xref:System.Windows.LocalValueEnumerator>verkregen door het aanroepen van GetLocalValueEnumerator kan worden gebruikt voor het inventariseren van eigenschappen die een lokaal is ingesteld op de waarde een <xref:System.Windows.DependencyObject>exemplaar.</xref:System.Windows.DependencyObject> </xref:System.Windows.LocalValueEnumerator> Elke eigenschap die wordt weergegeven in de enumerator door een <xref:System.Windows.LocalValueEntry>-object met eigenschappen die verwijzen naar de specifieke <xref:System.Windows.DependencyProperty>en de bijbehorende waarden.</xref:System.Windows.DependencyProperty> </xref:System.Windows.LocalValueEntry> Deze techniek van het inventariseren van via de lokaal ingestelde waarden kunnen worden gebruikt voor optimalisatie of voor andere verwerking van de lokale waarden, zoals om te bepalen welke waarden van de eigenschap van een <xref:System.Windows.DependencyObject>zou veranderen als ze zijn uitgeschakeld.</xref:System.Windows.DependencyObject>      > [!IMPORTANT] > De geretourneerde <xref:System.Windows.LocalValueEnumerator>bevatten mogelijk <xref:System.Windows.LocalValueEntry>records voor afhankelijkheidseigenschappen die alleen-lezen zijn of waarbij de waarden worden berekend door het systeem eigenschap afhankelijkheidseigenschappen.</xref:System.Windows.LocalValueEntry> </xref:System.Windows.LocalValueEnumerator> Bijvoorbeeld, rapporteert een visuele framework-element dat een breedte tot stand gebracht via de indeling heeft een lokale waarde voor <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</xref:System.Windows.FrameworkElement.ActualWidth%2A> Als u lokale waarden krijgt om te kunnen herstellen, controleert u de <xref:System.Windows.DependencyProperty.ReadOnly%2A>waarde van de eigenschap id van elk <xref:System.Windows.LocalValueEntry>om te controleren of de <xref:System.Windows.DependencyProperty>in kwestie is van geen alleen-lezen.</xref:System.Windows.DependencyProperty> </xref:System.Windows.LocalValueEntry> </xref:System.Windows.DependencyProperty.ReadOnly%2A>"
  example:
  - "The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.  \n  \n [!code-cs[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/csharp/DPClearValue/default.xaml.cs#iteratelocalvaluesandclear)]\n [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/add/codesnippet/visualbasic/DPClearValue/default.xaml.vb#iteratelocalvaluesandclear)]"
  syntax:
    content: public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();
    parameters: []
    return:
      type: System.Windows.LocalValueEnumerator
      description: "Een speciale lokale waarde-opsomming."
  overload: System.Windows.DependencyObject.GetLocalValueEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  id: GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Retourneert de huidige effectieve waarde van de afhankelijkheidseigenschap van een voor dit exemplaar van een <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  remarks: "De *effectieve waarde* is de waarde van de eigenschap die wordt geretourneerd door het systeem eigenschap aan een aanvrager die de waarde aanvraagt. De effectieve waarde is het resultaat van de eigenschap system de mogelijke invoerwaarden die deel uitmaken van de eigenschap system waarde prioriteit hebben geëvalueerd. Dit omvat afdwingen en animatie. Zie voor meer informatie [afhankelijkheid eigenschap waarde prioriteit](~/add/includes/ajax-current-ext-md.md).       Deze methode wordt nooit <xref:System.Windows.DependencyProperty>.</xref:System.Windows.DependencyProperty> geretourneerd. De <xref:System.Windows.DependencyProperty>is een sentinel-waarde voor de eigenschap systeem dat wordt gebruikt in verschillende capaciteiten intern en soms ook beschikbaar via het afdwingen retouraanroepen.</xref:System.Windows.DependencyProperty>       Als u niet zeker weet wat de eigenschap type moet zijn, kunt u de id van de aangevraagde afhankelijkheidseigenschap om te bepalen of er een meer specifiek query <xref:System.Windows.DependencyProperty.PropertyType%2A>die de retourwaarde kan worden geconverteerd naar.</xref:System.Windows.DependencyProperty.PropertyType%2A>"
  syntax:
    content: public object GetValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "De <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> id van de eigenschap voor het ophalen van de waarde voor."
    return:
      type: System.Object
      description: "Retourneert de huidige effectieve waarde."
  overload: System.Windows.DependencyObject.GetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De opgegeven <code> dp </code> of de waarde is ongeldig of de opgegeven <code> dp </code> bestaat niet."
  platform:
  - net462
- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  id: InvalidateProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: InvalidateProperty(DependencyProperty)
  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.InvalidateProperty(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "De effectieve waarde voor de opgegeven afhankelijkheidseigenschap evalueert opnieuw"
  remarks: "Wanneer u InvalidateProperty, elk gekoppeld en toepasselijke aanroepen <xref:System.Windows.CoerceValueCallback>of <xref:System.Windows.PropertyChangedCallback>functies geregistreerd voor die afhankelijkheidseigenschap kan worden aangeroepen.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback>       Het aanroepen van InvalidateProperty met een eigenschap die de lokale waarde is ingesteld hebben geen effect omdat de lokale waarde voorrang op andere invoer van de eigenschap systeem, met uitzondering van animaties heeft. U kunt echter aanroepen <xref:System.Windows.DependencyObject.ClearValue%2A>, roept u vervolgens InvalidateProperty.</xref:System.Windows.DependencyObject.ClearValue%2A> Zie voor meer informatie [afhankelijkheid eigenschap waarde prioriteit](~/add/includes/ajax-current-ext-md.md).       Het aanroepen van InvalidateProperty is niet noodzakelijkerwijs van toepassing op veel scenario&quot;s voor afhankelijkheid-eigenschap. Als een afhankelijkheidseigenschap ongeldig vanwege wijzigingen in een van de componenten waarde gemaakt wordt, wordt het systeem eigenschap wordt ongeldig gemaakt en opnieuw automatisch evalueert de afhankelijkheidseigenschap. Er zijn echter nog steeds bepaalde juiste scenario&quot;s waarin InvalidateProperty handig is. U kunt in het bijzonder InvalidateProperty binnen de coerce gebruiken waarde of de eigenschap gewijzigd retouraanroep voor een andere afhankelijkheidseigenschap. U kunt ook InvalidateProperty gebruiken om af te dwingen nieuwe evaluatie van een binding met een gegevensbron die niet tot het implementeren van de aanbevolen <xref:System.ComponentModel.INotifyPropertyChanged>meldingsmechanisme (bijvoorbeeld als verbruikt gegevensklassen die niet worden afgeleid van of een statisch lid van de gegevens is).</xref:System.ComponentModel.INotifyPropertyChanged>"
  example:
  - "The following example calls InvalidateProperty on a custom property, whenever properties that are involved in the invalidated property's calculations change. This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.  \n  \n [!code-cs[PropertySystemEsoterics#InvalidateProperty](~/add/codesnippet/csharp/PropertySystemEsoterics/SDKSampleLibrary/class1.cs#invalidateproperty)]\n [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/add/codesnippet/visualbasic/PropertySystemEsoterics.sdksamplelibrary/class1.vb#invalidateproperty)]"
  syntax:
    content: public void InvalidateProperty (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "De <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> id van de eigenschap ongeldig maken."
  overload: System.Windows.DependencyObject.InvalidateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.IsSealed
  id: IsSealed
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
  fullName: System.Windows.DependencyObject.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Haalt een waarde die aangeeft of dit exemplaar is momenteel verzegeld (alleen-lezen)."
  remarks: "Deze waarde is intern ingesteld."
  syntax:
    content: public bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als dit exemplaar is verzegeld; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyObject.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Aangeroepen wanneer de effectieve waarde van de afhankelijkheidseigenschap van een op deze <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> is bijgewerkt. De specifieke afhankelijkheidseigenschap die gewijzigd wordt vermeld in de gebeurtenisgegevens worden opgeslagen."
  remarks: "Deze methode is niet bedoeld voor afzonderlijke eigenschapswijzigingen in het algemeen te detecteren of invalidations van eigenschappen uitvoeren op basis van per aanvraag. OnPropertyChanged is in plaats daarvan bedoeld om de wijzigingen van het patroon algemene ongeldig maken als bepaalde gegevens over wide classificaties van eigenschappen bekend is. Bijvoorbeeld verandert een <xref:System.Windows.Freezable>mogelijk wijzigingen in de typen van de <xref:System.Windows.Freezable>, of mogelijk subeigenschappen, waarbij de wijzigingen in andere zijn <xref:System.Windows.Freezable>verwijzingen.</xref:System.Windows.Freezable> </xref:System.Windows.Freezable> </xref:System.Windows.Freezable> De <xref:System.Windows.Freezable>onderdrukking uitvoering van OnPropertyChanged interne informatie gebruikt om te bepalen of de eigenschappen subeigenschappen en logica van de toepasselijke basisklasse voorziet in beide gevallen.</xref:System.Windows.Freezable>       OnPropertyChanged is mogelijk meerdere keren worden aangeroepen tijdens de levensduur van een object. Daarom kunt u betere prestaties voor de algemene eigenschap systeem bereiken als u de metagegevens van specifieke eigenschappen overschrijven en koppel vervolgens <xref:System.Windows.CoerceValueCallback>of <xref:System.Windows.PropertyChangedCallback>functies voor afzonderlijke eigenschappen.</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback> U zou deze methode echter gebruiken als een <xref:System.Windows.DependencyObject>bevat een groot aantal afhankelijkheidseigenschappen waarde-aan elkaar gerelateerd, of als deze logica bevat, zoals de rendering van gedrag die moet opnieuw worden uitgevoerd voor verschillende gevallen van eigenschap invalidations gerelateerde.</xref:System.Windows.DependencyObject>"
  syntax:
    content: protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "Gebeurtenisgegevens die de id van de eigenschap afhankelijkheid van belang, de metagegevens van de eigenschap voor het type en oude en nieuwe waarden bevat."
  overload: System.Windows.DependencyObject.OnPropertyChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  id: ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Retourneert de lokale waarde van een afhankelijkheidseigenschap als deze bestaat."
  remarks: "U moet gebruiken <xref:System.Windows.DependencyObject.GetValue%2A>voor de meest voorkomende &quot;ophalen&quot; bewerkingen voor een afhankelijkheidseigenschap.</xref:System.Windows.DependencyObject.GetValue%2A> ReadLocalValue retourneert de effectieve waarde voor tal van situaties waarbij lokaal niet de waarde is ingesteld.       De waarden die zijn ingesteld door stijlen, thema&quot;s, sjablonen, de standaardwaarde van de metagegevens of een waarde van Eigenschapsovername worden niet beschouwd als lokale waarden. Echter, bindingen en andere expressies worden beschouwd als lokale waarden nadat ze zijn geëvalueerd.       Wanneer er geen lokale waarde is ingesteld, retourneert deze methode <xref:System.Windows.DependencyProperty.UnsetValue>.</xref:System.Windows.DependencyProperty.UnsetValue>       Als de geretourneerde waarde anders dan is <xref:System.Windows.DependencyProperty.UnsetValue>, u kunt de metagegevens van de aangevraagde afhankelijkheidseigenschap om te bepalen of er een meer specifiek type zijn dat de retourwaarde kan worden geconverteerd naar een query.</xref:System.Windows.DependencyProperty.UnsetValue>"
  syntax:
    content: public object ReadLocalValue (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "De <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> id van de eigenschap voor het ophalen van de waarde voor."
    return:
      type: System.Object
      description: "Retourneert de waarde van de lokale of retourneert de waarde sentinel <xref href=&quot;System.Windows.DependencyProperty&quot;> </xref> als er geen lokale waarde is ingesteld."
  overload: System.Windows.DependencyObject.ReadLocalValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  id: SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetCurrentValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(DependencyProperty,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hiermee stelt u de waarde van een afhankelijkheidseigenschap zonder te wijzigen van de Waardebron."
  remarks: "Deze methode wordt gebruikt door een component die programmatisch stelt u de waarde van een van de eigen eigenschappen zonder gedeclareerde gebruik van de eigenschap van een toepassing uitschakelen. De methode SetCurrentValue wijzigt de effectieve waarde van de eigenschap, maar bestaande triggers, gegevensbindingen, en stijlen blijven werken."
  syntax:
    content: public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "De id van de afhankelijkheidseigenschap om in te stellen."
    - id: value
      type: System.Object
      description: "De nieuwe lokale waarde."
  overload: System.Windows.DependencyObject.SetCurrentValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Poging tot het wijzigen van een alleen-lezen afhankelijkheidseigenschap of een eigenschap van een verzegelde <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>is niet het juiste type geregistreerd voor de <code>dp</code> eigenschap."
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  id: SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyProperty,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hiermee stelt u de lokale waarde van een afhankelijkheidseigenschap, opgegeven door de afhankelijkheid eigenschaps-id."
  remarks: "Als het opgegeven type komt niet overeen met het type dat is gedeclareerd voor de afhankelijkheidseigenschap zoals die oorspronkelijk is geregistreerd, wordt een uitzondering opgetreden. De `value` moet altijd worden opgegeven als het juiste type.       De uitzonderingsvoorwaarden wordt mogelijk beïnvloed door de <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>callbackfunctie die bestaat op de eigenschaps-id van de afhankelijkheid van de afhankelijkheidseigenschap wordt ingesteld.</xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> De opgegeven waarde mogelijk anders algemene type controleren voorwaarden (bijvoorbeeld, een reeks wordt doorgegeven als het systeemeigen type Double) mislukt."
  syntax:
    content: public void SetValue (System.Windows.DependencyProperty dp, object value);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "De id van de afhankelijkheidseigenschap om in te stellen."
    - id: value
      type: System.Object
      description: "De nieuwe lokale waarde."
  overload: System.Windows.DependencyObject.SetValue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Poging tot het wijzigen van een alleen-lezen afhankelijkheidseigenschap of een eigenschap van een verzegelde <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>is niet het juiste type geregistreerd voor de <code>dp</code> eigenschap."
  platform:
  - net462
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  id: SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: SetValue(DependencyPropertyKey,Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyPropertyKey,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hiermee stelt u de lokale waarde van een alleen-lezen afhankelijkheidseigenschap, opgegeven door de <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref> id van de afhankelijkheidseigenschap."
  remarks: "Deze handtekening wordt doorgaans gebruikt wanneer u waarden voor alleen-lezen afhankelijkheidseigenschappen die zijn gedefinieerd door uw aangepaste klassen instellen. In het algemeen is SetValue alleen aangeroepen vanuit het type dat geregistreerd die afhankelijkheidseigenschap waarmee de interne logica waarmee de waarde bepaald voor de afhankelijkheidseigenschap. Zie voor meer informatie [alleen-lezen-Dependency Properties](~/add/includes/ajax-current-ext-md.md).       Als het opgegeven type komt niet overeen met het type dat is gedeclareerd voor de afhankelijkheidseigenschap zoals die oorspronkelijk is geregistreerd, wordt een uitzondering opgetreden. De `value` moet altijd worden opgegeven als het juiste type. De uitzonderingsvoorwaarden wordt mogelijk beïnvloed door de <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>callbackfunctie die bestaat op de eigenschaps-id van de afhankelijkheid van de afhankelijkheidseigenschap wordt ingesteld.</xref:System.Windows.DependencyProperty.ValidateValueCallback%2A>"
  example:
  - "The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)] wrapper.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public void SetValue (System.Windows.DependencyPropertyKey key, object value);
    parameters:
    - id: key
      type: System.Windows.DependencyPropertyKey
      description: "De <xref href=&quot;System.Windows.DependencyPropertyKey&quot;> </xref> id van de eigenschap in te stellen."
    - id: value
      type: System.Object
      description: "De nieuwe lokale waarde."
  overload: System.Windows.DependencyObject.SetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  id: ShouldSerializeProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  langs:
  - csharp
  name: ShouldSerializeProperty(DependencyProperty)
  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.ShouldSerializeProperty(DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Retourneert een waarde die aangeeft of serialisatie processen de waarde voor de opgegeven afhankelijkheidseigenschap te serialiseren."
  remarks: "Retourneert de standaardimplementatie `true` in alle gevallen waarin een afhankelijkheidseigenschap had een lokale waarde ingesteld in de <xref:System.Windows.DependencyObject>.</xref:System.Windows.DependencyObject>"
  syntax:
    content: protected virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "De id voor de afhankelijkheidseigenschap die moet worden geserialiseerd."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de afhankelijkheidseigenschap dat wordt meegeleverd waarde geserialiseerd moet; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.DependencyObject.ShouldSerializeProperty*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.DependencyObject.#ctor
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObject()
  nameWithType: DependencyObject.DependencyObject()
  fullName: System.Windows.DependencyObject.DependencyObject()
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue(DependencyProperty)
  nameWithType: DependencyObject.ClearValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyProperty)
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue(DependencyPropertyKey)
  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)
  fullName: System.Windows.DependencyObject.ClearValue(DependencyPropertyKey)
- uid: System.Windows.DependencyPropertyKey
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyKey
  nameWithType: DependencyPropertyKey
  fullName: System.Windows.DependencyPropertyKey
- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: CoerceValue(DependencyProperty)
  nameWithType: DependencyObject.CoerceValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.CoerceValue(DependencyProperty)
- uid: System.Windows.DependencyObject.DependencyObjectType
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
  fullName: System.Windows.DependencyObject.DependencyObjectType
- uid: System.Windows.DependencyObjectType
  parent: System.Windows
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObjectType
  fullName: System.Windows.DependencyObjectType
- uid: System.Windows.DependencyObject.Equals(System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: Equals(Object)
  nameWithType: DependencyObject.Equals(Object)
  fullName: System.Windows.DependencyObject.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.DependencyObject.GetHashCode
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetHashCode()
  nameWithType: DependencyObject.GetHashCode()
  fullName: System.Windows.DependencyObject.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetLocalValueEnumerator()
  nameWithType: DependencyObject.GetLocalValueEnumerator()
  fullName: System.Windows.DependencyObject.GetLocalValueEnumerator()
- uid: System.Windows.LocalValueEnumerator
  parent: System.Windows
  isExternal: false
  name: LocalValueEnumerator
  nameWithType: LocalValueEnumerator
  fullName: System.Windows.LocalValueEnumerator
- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetValue(DependencyProperty)
  nameWithType: DependencyObject.GetValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.GetValue(DependencyProperty)
- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: InvalidateProperty(DependencyProperty)
  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.InvalidateProperty(DependencyProperty)
- uid: System.Windows.DependencyObject.IsSealed
  parent: System.Windows.DependencyObject
  isExternal: false
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
  fullName: System.Windows.DependencyObject.IsSealed
- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ReadLocalValue(DependencyProperty)
  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)
  fullName: System.Windows.DependencyObject.ReadLocalValue(DependencyProperty)
- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetCurrentValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetCurrentValue(DependencyProperty,Object)
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue(DependencyProperty,Object)
  nameWithType: DependencyObject.SetValue(DependencyProperty,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyProperty,Object)
- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue(DependencyPropertyKey,Object)
  nameWithType: DependencyObject.SetValue(DependencyPropertyKey,Object)
  fullName: System.Windows.DependencyObject.SetValue(DependencyPropertyKey,Object)
- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ShouldSerializeProperty(DependencyProperty)
  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)
  fullName: System.Windows.DependencyObject.ShouldSerializeProperty(DependencyProperty)
- uid: System.Windows.DependencyObject.#ctor*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject.DependencyObject
- uid: System.Windows.DependencyObject.ClearValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ClearValue
  nameWithType: DependencyObject.ClearValue
- uid: System.Windows.DependencyObject.CoerceValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: CoerceValue
  nameWithType: DependencyObject.CoerceValue
- uid: System.Windows.DependencyObject.DependencyObjectType*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObject.DependencyObjectType
- uid: System.Windows.DependencyObject.Equals*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: Equals
  nameWithType: DependencyObject.Equals
- uid: System.Windows.DependencyObject.GetHashCode*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetHashCode
  nameWithType: DependencyObject.GetHashCode
- uid: System.Windows.DependencyObject.GetLocalValueEnumerator*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetLocalValueEnumerator
  nameWithType: DependencyObject.GetLocalValueEnumerator
- uid: System.Windows.DependencyObject.GetValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: GetValue
  nameWithType: DependencyObject.GetValue
- uid: System.Windows.DependencyObject.InvalidateProperty*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: InvalidateProperty
  nameWithType: DependencyObject.InvalidateProperty
- uid: System.Windows.DependencyObject.IsSealed*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: IsSealed
  nameWithType: DependencyObject.IsSealed
- uid: System.Windows.DependencyObject.OnPropertyChanged*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: OnPropertyChanged
  nameWithType: DependencyObject.OnPropertyChanged
- uid: System.Windows.DependencyObject.ReadLocalValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ReadLocalValue
  nameWithType: DependencyObject.ReadLocalValue
- uid: System.Windows.DependencyObject.SetCurrentValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetCurrentValue
  nameWithType: DependencyObject.SetCurrentValue
- uid: System.Windows.DependencyObject.SetValue*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: SetValue
  nameWithType: DependencyObject.SetValue
- uid: System.Windows.DependencyObject.ShouldSerializeProperty*
  parent: System.Windows.DependencyObject
  isExternal: false
  name: ShouldSerializeProperty
  nameWithType: DependencyObject.ShouldSerializeProperty
