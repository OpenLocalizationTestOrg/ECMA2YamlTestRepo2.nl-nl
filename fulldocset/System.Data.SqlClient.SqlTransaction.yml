### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlTransaction
  id: SqlTransaction
  children:
  - System.Data.SqlClient.SqlTransaction.Commit
  - System.Data.SqlClient.SqlTransaction.Connection
  - System.Data.SqlClient.SqlTransaction.DbConnection
  - System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  - System.Data.SqlClient.SqlTransaction.IsolationLevel
  - System.Data.SqlClient.SqlTransaction.Rollback
  - System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  - System.Data.SqlClient.SqlTransaction.Save(System.String)
  langs:
  - csharp
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
  type: Class
  summary: "Hiermee geeft u een [!INCLUDE[tsql](~/add/includes/tsql-md.md)] transactie te worden gemaakt in een [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] database. Deze klasse kan niet worden overgenomen."
  remarks: "The application creates a SqlTransaction object by calling <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> on the <xref:System.Data.SqlClient.SqlConnection> object. All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the SqlTransaction object.  \n  \n> [!NOTE]\n>  `Try`/`Catch` exception handling should always be used when committing or rolling back a SqlTransaction. Both <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generate an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.  \n  \n For more information on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] transactions, see [Explicit Transactions](http://msdn.microsoft.com/library/ms175127\\(SQL.105\\).aspx) and [Coding Efficient Transactions](http://msdn.microsoft.com/library/ms187484\\(SQL.105\\).aspx)."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a SqlTransaction. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error, or if it is disposed without first being committed. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._10_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._10_1.vb)]"
  syntax:
    content: 'public sealed class SqlTransaction : System.Data.Common.DbTransaction'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Data.Common.DbTransaction
  implements: []
  inheritedMembers:
  - System.Data.Common.DbTransaction.Dispose
  - System.Data.Common.DbTransaction.System#Data#IDbTransaction#Connection
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Commit
  id: Commit
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: SqlTransaction.Commit()
  fullName: System.Data.SqlClient.SqlTransaction.Commit()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "De database-transactie worden doorgevoerd."
  remarks: "De methode Commit is gelijk aan de COMMIT TRANSACTION van Transact-SQL-instructie. U kan niet worden teruggedraaid een transactie nadat deze toegewezen is, omdat alle wijzigingen hebben een permanente deel van de database uitmaken. Zie SQL Server Books Online voor meer informatie.      > [!NOTE]  >   `Try` / `Catch` uitzonderingsverwerking moet altijd worden gebruikt bij het doorvoeren of terugdraaien van een <xref:System.Data.SqlClient.SqlTransaction>.</xref:System.Data.SqlClient.SqlTransaction> Beide `Commit` en <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>genereert een <xref:System.InvalidOperationException>Als de verbinding is verbroken of als de transactie is al teruggedraaid op de server.</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>       Zie &quot;Expliciete transacties&quot; en &quot;Coderen efficiënte transacties&quot; in SQL Server Books Online voor meer informatie over SQL Server-transacties."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the Commit, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._25_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._25_1.vb)]"
  syntax:
    content: public override void Commit ();
    parameters: []
  overload: System.Data.SqlClient.SqlTransaction.Commit*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Er is een fout opgetreden tijdens het doorvoeren van de transactie."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De transactie is al doorgevoerd of teruggedraaid.       - of - de verbinding is verbroken."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Connection
  id: Connection
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Connection
  nameWithType: SqlTransaction.Connection
  fullName: System.Data.SqlClient.SqlTransaction.Connection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Haalt de <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> object dat is gekoppeld aan de transactie of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als de transactie niet meer geldig is."
  remarks: "Één toepassing mogelijk meerdere databaseverbindingen, elk met nul of meer transacties. Deze eigenschap kunt u het verbindingsobject dat is gekoppeld aan een bepaalde transactie gemaakt door <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> bepalen"
  syntax:
    content: public System.Data.SqlClient.SqlConnection Connection { get; }
    return:
      type: System.Data.SqlClient.SqlConnection
      description: "De <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref> object dat is gekoppeld aan de transactie."
  overload: System.Data.SqlClient.SqlTransaction.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.DbConnection
  id: DbConnection
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
  fullName: System.Data.SqlClient.SqlTransaction.DbConnection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbConnection DbConnection { get; }
    return:
      type: System.Data.Common.DbConnection
      description: "Moet worden toegevoegd."
  overload: System.Data.SqlClient.SqlTransaction.DbConnection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SqlTransaction.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlTransaction.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "Moet worden toegevoegd."
  overload: System.Data.SqlClient.SqlTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel
  id: IsolationLevel
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
  fullName: System.Data.SqlClient.SqlTransaction.IsolationLevel
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Hiermee geeft u de <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> voor deze transactie."
  remarks: "Parallelle transacties worden niet ondersteund. Daarom de <xref:System.Data.IsolationLevel>geldt voor de hele transactie.</xref:System.Data.IsolationLevel>       Zie &quot;Isolatie niveaus in de Database-Engine&quot; in SQL Server Books Online voor meer informatie over de isolatieniveaus SQL Server."
  syntax:
    content: public override System.Data.IsolationLevel IsolationLevel { get; }
    return:
      type: System.Data.IsolationLevel
      description: "De <xref href=&quot;System.Data.IsolationLevel&quot;> </xref> voor deze transactie. De standaardwaarde is <xref uid=&quot;langword_csharp_ReadCommitted&quot; name=&quot;ReadCommitted&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.SqlClient.SqlTransaction.IsolationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Rollback
  id: Rollback
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Rollback()
  nameWithType: SqlTransaction.Rollback()
  fullName: System.Data.SqlClient.SqlTransaction.Rollback()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Een transactie teruggedraaid in behandeling."
  remarks: "De Rollback-methode is gelijk aan de ROLLBACK TRANSACTION van Transact-SQL-instructie. Zie SQL Server Books Online voor meer informatie.       De transactie kan alleen worden teruggezet vanuit een status in behandeling (nadat <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>is aangeroepen, maar voordat <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>wordt genoemd).</xref:System.Data.SqlClient.SqlTransaction.Commit%2A> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> De transactie is teruggedraaid terug in de gebeurtenis is buiten gebruik gesteld voordat `Commit` of `Rollback` wordt aangeroepen.      > [!NOTE]  >   `Try` / `Catch` uitzonderingsverwerking moet altijd worden gebruikt wanneer een transactie wordt teruggedraaid. Een `Rollback` genereert een <xref:System.InvalidOperationException>Als de verbinding is verbroken of als de transactie is al teruggedraaid op de server.</xref:System.InvalidOperationException>       Zie &quot;Expliciete transacties&quot; en &quot;Coderen efficiënte transacties&quot; in SQL Server Books Online voor meer informatie over SQL Server-transacties."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and Rollback methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._8_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._8_1.vb)]"
  syntax:
    content: public override void Rollback ();
    parameters: []
  overload: System.Data.SqlClient.SqlTransaction.Rollback*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Er is een fout opgetreden tijdens het doorvoeren van de transactie."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De transactie is al doorgevoerd of teruggedraaid.       - of - de verbinding is verbroken."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  id: Rollback(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Rollback(String)
  nameWithType: SqlTransaction.Rollback(String)
  fullName: System.Data.SqlClient.SqlTransaction.Rollback(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Een transactie teruggedraaid van de status in behandeling en geeft de transactie of opslagpunt naam."
  remarks: "De <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>methode is gelijk aan de ROLLBACK TRANSACTION van Transact-SQL-instructie.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> Zie &quot;Expliciete transacties&quot; en &quot;Transactie Savepoints&quot; in SQL Server Books Online voor meer informatie.       De transactie kan alleen worden teruggezet vanuit een status in behandeling (nadat <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>is aangeroepen, maar voordat <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>wordt genoemd).</xref:System.Data.SqlClient.SqlTransaction.Commit%2A> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> De transactie wordt teruggedraaid als deze is verwijderd voordat `Commit` of `Rollback` wordt aangeroepen.      > [!NOTE]  >   `Try` / `Catch` uitzonderingsverwerking moet altijd worden gebruikt wanneer een transactie wordt teruggedraaid. Een `Rollback` genereert een <xref:System.InvalidOperationException>Als de verbinding is verbroken of als de transactie is al teruggedraaid op de server.</xref:System.InvalidOperationException>       Zie &quot;Expliciete transacties&quot; en &quot;Coderen efficiënte transacties&quot; in SQL Server Books Online voor meer informatie over SQL Server-transacties."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods. The transaction is rolled back on any error. `Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._40_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._40_1.vb)]"
  syntax:
    content: public void Rollback (string transactionName);
    parameters:
    - id: transactionName
      type: System.String
      description: "De naam van de transactie ongedaan te maken of de opslagpunt waarop terugdraaien."
  overload: System.Data.SqlClient.SqlTransaction.Rollback*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Geen transactienaam is opgegeven."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De transactie is al doorgevoerd of teruggedraaid.       - of - de verbinding is verbroken."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlTransaction.Save(System.String)
  id: Save(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  langs:
  - csharp
  name: Save(String)
  nameWithType: SqlTransaction.Save(String)
  fullName: System.Data.SqlClient.SqlTransaction.Save(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "Een opslagpunt gemaakt in de transactie die kan worden gebruikt om een deel van de transactie wordt teruggedraaid en geeft de naam van het opslagpunt."
  remarks: "Methode Save is gelijk aan de SAVE TRANSACTION van Transact-SQL-instructie.       De waarde die wordt gebruikt in de `savePoint` parameter kan worden gebruikt in dezelfde waarde de `transactionName` parameter van sommige implementaties van de <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>methode.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>       Savepoints bieden een mechanisme om terug te draaien delen van transacties. Maken van een opslagpunt via de methode opslaan en later aanroep de <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>methode terug te draaien naar de opslagpunt in plaats van naar het begin van de transactie wordt ongedaan gemaakt.</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>"
  syntax:
    content: public void Save (string savePointName);
    parameters:
    - id: savePointName
      type: System.String
      description: "De naam van het opslagpunt."
  overload: System.Data.SqlClient.SqlTransaction.Save*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Er is een fout opgetreden tijdens het doorvoeren van de transactie."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De transactie is al doorgevoerd of teruggedraaid.       - of - de verbinding is verbroken."
  platform:
  - net462
references:
- uid: System.Data.Common.DbTransaction
  isExternal: false
  name: System.Data.Common.DbTransaction
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.SqlClient.SqlTransaction.Commit
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Commit()
  nameWithType: SqlTransaction.Commit()
  fullName: System.Data.SqlClient.SqlTransaction.Commit()
- uid: System.Data.SqlClient.SqlTransaction.Connection
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Connection
  nameWithType: SqlTransaction.Connection
  fullName: System.Data.SqlClient.SqlTransaction.Connection
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlTransaction.DbConnection
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
  fullName: System.Data.SqlClient.SqlTransaction.DbConnection
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  nameWithType: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SqlTransaction.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlTransaction.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
  fullName: System.Data.SqlClient.SqlTransaction.IsolationLevel
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.SqlClient.SqlTransaction.Rollback
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback()
  nameWithType: SqlTransaction.Rollback()
  fullName: System.Data.SqlClient.SqlTransaction.Rollback()
- uid: System.Data.SqlClient.SqlTransaction.Rollback(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback(String)
  nameWithType: SqlTransaction.Rollback(String)
  fullName: System.Data.SqlClient.SqlTransaction.Rollback(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlTransaction.Save(System.String)
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Save(String)
  nameWithType: SqlTransaction.Save(String)
  fullName: System.Data.SqlClient.SqlTransaction.Save(String)
- uid: System.Data.SqlClient.SqlTransaction.Commit*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Commit
  nameWithType: SqlTransaction.Commit
- uid: System.Data.SqlClient.SqlTransaction.Connection*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Connection
  nameWithType: SqlTransaction.Connection
- uid: System.Data.SqlClient.SqlTransaction.DbConnection*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: DbConnection
  nameWithType: SqlTransaction.DbConnection
- uid: System.Data.SqlClient.SqlTransaction.Dispose*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Dispose
  nameWithType: SqlTransaction.Dispose
- uid: System.Data.SqlClient.SqlTransaction.IsolationLevel*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: IsolationLevel
  nameWithType: SqlTransaction.IsolationLevel
- uid: System.Data.SqlClient.SqlTransaction.Rollback*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Rollback
  nameWithType: SqlTransaction.Rollback
- uid: System.Data.SqlClient.SqlTransaction.Save*
  parent: System.Data.SqlClient.SqlTransaction
  isExternal: false
  name: Save
  nameWithType: SqlTransaction.Save
