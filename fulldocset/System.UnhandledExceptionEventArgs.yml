### YamlMime:ManagedReference
items:
- uid: System.UnhandledExceptionEventArgs
  id: UnhandledExceptionEventArgs
  children:
  - System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  - System.UnhandledExceptionEventArgs.ExceptionObject
  - System.UnhandledExceptionEventArgs.IsTerminating
  langs:
  - csharp
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs
  fullName: System.UnhandledExceptionEventArgs
  type: Class
  summary: "Biedt gegevens voor de gebeurtenis die wordt gegenereerd wanneer er een uitzondering opgetreden die niet in elk toepassingsdomein wordt verwerkt."
  remarks: "UnhandledExceptionEventArgs biedt toegang tot het object uitzondering en een vlag die aangeeft of de common language runtime wordt beëindigd. De UnhandledExceptionEventArgs is een van de parameters doorgegeven aan <xref:System.UnhandledExceptionEventHandler>voor de <xref:System.AppDomain.UnhandledException?displayProperty=fullName>gebeurtenis.</xref:System.AppDomain.UnhandledException?displayProperty=fullName> </xref:System.UnhandledExceptionEventHandler>       Zie voor meer informatie over de gebeurtenis-handler gemachtigden [gebeurtenissen](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class UnhandledExceptionEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  id: '#ctor(System.Object,System.Boolean)'
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.UnhandledExceptionEventArgs&quot;> </xref> klasse met het object exception en een common language runtime beëindiging vlag."
  syntax:
    content: public UnhandledExceptionEventArgs (object exception, bool isTerminating);
    parameters:
    - id: exception
      type: System.Object
      description: "De uitzondering die niet wordt verwerkt."
    - id: isTerminating
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de runtime wordt beëindigd; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.UnhandledExceptionEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  id: ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Haalt de niet-verwerkte uitzondering-object."
  remarks: "Deze eigenschap geeft een object van het type <xref:System.Object>in plaats van een afgeleid van <xref:System.Exception>.</xref:System.Exception> </xref:System.Object> Hoewel de Common Language Specification vereist dat alle typen zijn afgeleid van <xref:System.Exception>, is het mogelijk voor methoden uitzonderingen met objecten die niet is afgeleid van <xref:System.Exception>.</xref:System.Exception> genereert</xref:System.Exception> U kunt als volgt werken met deze uitzondering:-toepassing de <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>kenmerk met een <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName>waarde van `true` naar de assembly waarin de gebeurtenis-handler.</xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName> </xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> Dit verpakt alle uitzonderingen die niet is afgeleid van de <xref:System.Exception>-klasse in een <xref:System.Runtime.CompilerServices.RuntimeWrappedException>object.</xref:System.Runtime.CompilerServices.RuntimeWrappedException> </xref:System.Exception> U kunt vervolgens veilig cast-conversie (in C#) of converteren (in Visual Basic) van het object dat wordt geretourneerd door deze eigenschap in op een <xref:System.Exception>object en het ophalen van de oorspronkelijke uitzondering-object van het <xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName>eigenschap.</xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName> </xref:System.Exception> Houd er rekening mee dat sommige compilers, zoals de compilers C# en Visual Basic dit kenmerk worden automatisch toegepast.      -Converteer het object die is geretourneerd door deze eigenschap in op een <xref:System.Exception>object.</xref:System.Exception>"
  example:
  - "The following example demonstrates the <xref:System.AppDomain.UnhandledException> event. It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain. It then throws two exceptions. The first is handled by a **try/catch** block. The second is unhandled and invokes the `MyHandle` routine before the application terminates.  \n  \n [!code-cs[AppDomain_UnhandledException#1](~/add/codesnippet/csharp/p-system.unhandledexcept_1.cs)]\n [!code-vb[AppDomain_UnhandledException#1](~/add/codesnippet/visualbasic/p-system.unhandledexcept_1.vb)]\n [!code-cpp[AppDomain_UnhandledException#1](~/add/codesnippet/cpp/p-system.unhandledexcept_1.cpp)]"
  syntax:
    content: public object ExceptionObject { get; }
    return:
      type: System.Object
      description: "Het object dat niet-verwerkte uitzondering."
  overload: System.UnhandledExceptionEventArgs.ExceptionObject*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  id: IsTerminating
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Hiermee wordt aangegeven of de common language runtime wordt beëindigd."
  remarks: "Deze eigenschap geeft u begint met de .NET Framework versie 2.0, `true` voor de meeste onverwerkte uitzonderingen, tenzij de markering van een toepassing compatibiliteit wordt gebruikt om het gedrag van de versies 1.0 en 1.1 te herstellen. De reden is dat de meest onverwerkte uitzonderingen in threads, inclusief threads thread-groep, zijn toegestaan om door te gaan natuurlijk dat normaal gesproken leidt tot beëindiging van de toepassing. Zie voor meer informatie, waaronder een lijst van gevallen waarin de runtime niet beëindigt, [uitzonderingen in beheerd Threads](~/add/includes/ajax-current-ext-md.md).      ## Versie-informatie van de volgende van toepassing op het .NET Framework-versies 1.0 en 1.1: deze eigenschap geeft `true` wanneer een uitzondering is ontvangen, maar niet verwerkt door een toepassing hoofdthread. Deze eigenschap geeft ook `true` als een onbegeleide thread beheerde code wordt uitgevoerd en een onverwerkte uitzondering ontvangt. Ten slotte deze eigenschap geeft `false` voor thread pool threads en beheerde threads gemaakt door een toepassing, omdat de versies 1.0 en 1.1 catch-niet-verwerkte uitzonderingen in deze threads en negeren."
  syntax:
    content: public bool IsTerminating { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de runtime wordt beëindigd; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.UnhandledExceptionEventArgs.IsTerminating*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
- uid: System.UnhandledExceptionEventArgs.#ctor*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs
- uid: System.UnhandledExceptionEventArgs.ExceptionObject*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
