### YamlMime:ManagedReference
items:
- uid: System.Security.IStackWalk
  id: IStackWalk
  children:
  - System.Security.IStackWalk.Assert
  - System.Security.IStackWalk.Demand
  - System.Security.IStackWalk.Deny
  - System.Security.IStackWalk.PermitOnly
  langs:
  - csharp
  name: IStackWalk
  nameWithType: IStackWalk
  fullName: System.Security.IStackWalk
  type: Interface
  summary: "Beheert de stackwalk die bepaalt of alle aanroepfuncties in de aanroepstack de vereiste machtigingen hebben voor toegang tot een beveiligde bron."
  remarks: "Gedeeltelijk vertrouwde code is altijd een beveiligingsrisico. Soms kan worden gemanipuleerd bewerkingen namens schadelijke code die is niet gemachtigd voor toegang tot een bron uit te voeren. Op deze manier kunt schadelijke code bereiken beveiligingstoegang hoger dan moet worden toegestaan.       De common language runtime beveiligt begeleide code uit deze aanvallen door een stackwalk uitgevoerd op alle aanroepen. De stackwalk vereist dat alle code in de aanroepstack toegang heeft tot een beveiligde bron. Omdat de code probeert de aanval wordt altijd ergens in de aanroepstack, zal de kan niet groter zijn dan de eigen beveiligingsmachtigingen zijn."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IStackWalk
  implements: []
  platform:
  - net462
- uid: System.Security.IStackWalk.Assert
  id: Assert
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Beschouwt dat de aanroepende code toegang de resource met het huidige object machtiging, tot kunt zelfs als aanroepfuncties hoger in de stack niet gemachtigd voor toegang tot de bron."
  remarks: "Assert aanroepen, stopt de controle van de machtiging voor aanroepers hoger in de aanroepstack. Dus zelfs als deze aanroepfuncties niet de vereiste machtigingen hoeft, ze nog steeds toegang tot bronnen. Een bewering werkt alleen als de code die Assert aanroepen voor de beveiligingscontrole voor de machtiging die wordt ervoor gezorgd slaagt.       Een aanroep van Assert is van kracht totdat de aanroepende code aan de aanroeper retourneert of een latere aanroep Assert de vorige bevestiging ongeschikt worden. Bovendien <xref:System.Security.CodeAccessPermission.RevertAssert%2A>of <xref:System.Security.CodeAccessPermission.RevertAll%2A>verwijdert een in behandeling Assert.</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertAssert%2A>       Assert wordt genegeerd voor een machtiging die niet worden toegewezen omdat een verzoek voor die machtiging niet slaagt. Echter als lager in de aanroepstack code roept <xref:System.Security.IStackWalk.Demand%2A>voor die machtiging, een <xref:System.Security.SecurityException>wordt gegenereerd wanneer de stackwalk heeft bereikt de code die Assert gebeld.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> Dit komt doordat de code die Assert aangeroepen niet de machtiging gekregen heeft, zelfs als het claimen van deze Assert.      > [!CAUTION] > Omdat Assert aanroepen, verwijdert de vereiste dat alle code in de keten aanroep moet worden gemachtigd voor toegang tot de opgegeven bron, het openen van beveiligingsproblemen als onjuist of verkeerd gebruikt. Daarom moet het voorzichtig worden gebruikt."
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.IStackWalk.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "De aanroepende code heeft geen <xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.IStackWalk.Demand
  id: Demand
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hiermee bepaalt u tijdens de uitvoering of alle aanroepfuncties in de aanroepstack de machtiging die is opgegeven door het huidige object van de machtiging hebben gekregen."
  remarks: "Deze methode wordt doorgaans gebruikt door beveiligde bibliotheken om ervoor te zorgen dat aanroepfuncties gemachtigd voor toegang tot een bron. Een klasse bestand in een beveiligde class-bibliotheek wordt bijvoorbeeld een aanvraag voor de benodigde <xref:System.Security.Permissions.FileIOPermission>voordat u een bestandsbewerking aangevraagd door de aanroeper uitvoert.</xref:System.Security.Permissions.FileIOPermission>       De machtigingen van de code die deze methode aanroept, zijn niet onderzocht; de controle van de onmiddellijke aanroeper van die code begint en verloopt van de stack. Vraag slaagt alleen als er geen <xref:System.Security.SecurityException>wordt gegenereerd.</xref:System.Security.SecurityException>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.IStackWalk.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "Een hoger in de aanroepstack aanroeper heeft niet de machtiging die is opgegeven door de huidige permission-object.       - of - aanroeper in de aanroepstack is aangeroepen <xref:System.Security.IStackWalk.Deny*>op het huidige object permission.</xref:System.Security.IStackWalk.Deny*>"
  platform:
  - net462
- uid: System.Security.IStackWalk.Deny
  id: Deny
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Zorgt ervoor dat elke <xref:System.Security.IStackWalk.Demand*>voor het huidige object dat wordt doorgegeven via de aanroepende code mislukken.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "Deze methode wordt voorkomen dat hoger in de aanroepstack aanroepfuncties toegang tot de beveiligde bron via de code die deze methode aanroept, zelfs als de aanroepers gemachtigd om deze te openen. De aanroepstack wordt doorgaans weergegeven als groeit, zodat de methoden die boven in de aanroepstack methoden lager in de aanroepstack aanroepen.       Weigeren kan de verantwoordelijkheid van de programmeurs beperken of voorkomen dat per ongeluk beveiligingslekken omdat de service helpt voorkomen dat de methode die weigeren wordt gebruikt voor toegang tot de resource die wordt beveiligd door de geweigerde machtiging aanroept. Als een methode aanroept weigeren voor een machtiging, en als een <xref:System.Security.IStackWalk.Demand%2A>voor deze machtiging wordt opgeroepen door een lager in de aanroepstack aanroeper, die security-controle mislukt wanneer het de weigeren is bereikt.</xref:System.Security.IStackWalk.Demand%2A>       Weigeren voor een machtiging die niet worden toegewezen omdat een verzoek voor die machtiging niet slaagt wordt genegeerd."
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.IStackWalk.Deny*
  exceptions: []
  platform:
  - net462
- uid: System.Security.IStackWalk.PermitOnly
  id: PermitOnly
  parent: System.Security.IStackWalk
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Zorgt ervoor dat elke <xref:System.Security.IStackWalk.Demand*>voor alle objecten, behalve de huidige die wordt doorgegeven via de aanroepende code mislukken, zelfs als code hoger in de aanroepstack die gemachtigd zijn voor toegang tot andere resources.</xref:System.Security.IStackWalk.Demand*>"
  remarks: "PermitOnly is vergelijkbaar met <xref:System.Security.IStackWalk.Deny%2A>, in dat beide stack leidt veroorzaken mislukken wanneer ze anders zou slagen.</xref:System.Security.IStackWalk.Deny%2A> Het verschil is dat <xref:System.Security.IStackWalk.Deny%2A>geeft aan machtigingen waardoor de stack helpt doen mislukken, maar PermitOnly Hiermee geeft u de enige machtigingen die niet voor de stackwalk zorgen mislukken.</xref:System.Security.IStackWalk.Deny%2A> Deze methode om ervoor te zorgen dat uw code kan worden gebruikt voor toegang tot alleen de opgegeven resources aanroepen.       PermitOnly is genegeerd voor een machtiging die niet worden toegewezen omdat een verzoek voor die machtiging niet slaagt. Echter, als code lager in de aanroep van stack later aanroepen <xref:System.Security.IStackWalk.Demand%2A>voor die machtiging een <xref:System.Security.SecurityException>wordt gegenereerd wanneer de stackwalk heeft bereikt de code die PermitOnly gebeld.</xref:System.Security.SecurityException> </xref:System.Security.IStackWalk.Demand%2A> Dit komt doordat de code die PermitOnly aangeroepen niet de machtiging gekregen heeft, hoewel deze PermitOnly voor deze machtiging aangeroepen. De aanroepstack wordt doorgaans weergegeven als groeit, zodat de methoden die boven in de aanroepstack methoden lager in de aanroepstack aanroepen."
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.IStackWalk.PermitOnly*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Security.IStackWalk.Assert
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert()
  nameWithType: IStackWalk.Assert()
  fullName: System.Security.IStackWalk.Assert()
- uid: System.Security.IStackWalk.Demand
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand()
  nameWithType: IStackWalk.Demand()
  fullName: System.Security.IStackWalk.Demand()
- uid: System.Security.IStackWalk.Deny
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny()
  nameWithType: IStackWalk.Deny()
  fullName: System.Security.IStackWalk.Deny()
- uid: System.Security.IStackWalk.PermitOnly
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly()
  nameWithType: IStackWalk.PermitOnly()
  fullName: System.Security.IStackWalk.PermitOnly()
- uid: System.Security.IStackWalk.Assert*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Assert
  nameWithType: IStackWalk.Assert
- uid: System.Security.IStackWalk.Demand*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Demand
  nameWithType: IStackWalk.Demand
- uid: System.Security.IStackWalk.Deny*
  parent: System.Security.IStackWalk
  isExternal: false
  name: Deny
  nameWithType: IStackWalk.Deny
- uid: System.Security.IStackWalk.PermitOnly*
  parent: System.Security.IStackWalk
  isExternal: false
  name: PermitOnly
  nameWithType: IStackWalk.PermitOnly
