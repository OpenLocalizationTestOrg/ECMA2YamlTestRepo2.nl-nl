### YamlMime:ManagedReference
items:
- uid: System.CharEnumerator
  id: CharEnumerator
  children:
  - System.CharEnumerator.Clone
  - System.CharEnumerator.Current
  - System.CharEnumerator.Dispose
  - System.CharEnumerator.MoveNext
  - System.CharEnumerator.Reset
  - System.CharEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: CharEnumerator
  nameWithType: CharEnumerator
  fullName: System.CharEnumerator
  type: Class
  summary: "Ondersteunt iteratie van een <xref:System.String>object en de afzonderlijke tekens te lezen.</xref:System.String> Deze klasse kan niet worden overgenomen."
  remarks: "Een CharEnumerator geeft alleen-lezen toegang tot de tekens in een waarnaar wordt verwezen <xref:System.String>object.</xref:System.String> Bijvoorbeeld, de `foreach` -instructie van de Microsoft Visual Basic en C# programmeertalen, waarvan de elementen van een verzameling doorlopen, haalt u een CharEnumerator van een <xref:System.String>object om te kunnen doorlopen van de tekens in dat object.</xref:System.String>       Er is geen openbare constructor voor CharEnumerator. Roep in plaats daarvan een <xref:System.String>van het object <xref:System.String.GetEnumerator%2A>methode voor het verkrijgen van een CharEnumerator die om te verwijzen naar de tekenreeks is geïnitialiseerd.</xref:System.String.GetEnumerator%2A> </xref:System.String>       Een CharEnumerator onderhoudt een interne index van de tekens in de tekenreeks de CharEnumerator-verwijzingen. De status van de index is ongeldig wanneer deze verwijst naar een tekenpositie logisch vóór het eerste teken of na het laatste teken in de tekenreeks en geldig wanneer deze verwijst naar een teken in de tekenreeks. De index naar een positie logisch vóór het eerste teken is geïnitialiseerd en is ingesteld op een positie na het laatste teken wanneer de herhaling voltooid is. Als u probeert toegang tot een teken terwijl de index ongeldig is, wordt er een uitzondering gegenereerd.       De <xref:System.CharEnumerator.MoveNext%2A>methode wordt de index verhoogd met één, zodat de eerste en de volgende tekens zijn toegankelijk zijn op zijn beurt.</xref:System.CharEnumerator.MoveNext%2A> De <xref:System.CharEnumerator.Reset%2A>methode stelt u de index naar een positie logisch vóór het eerste teken.</xref:System.CharEnumerator.Reset%2A> De <xref:System.CharEnumerator.Current%2A>eigenschap haalt het teken momenteel waarnaar wordt verwezen door de index.</xref:System.CharEnumerator.Current%2A> De <xref:System.CharEnumerator.Clone%2A>methode maakt u een kopie van de CharEnumerator.</xref:System.CharEnumerator.Clone%2A>      > [!NOTE] > Meerdere onafhankelijke exemplaren van CharEnumerator tussen een of meer threads hebben toegang tot één exemplaar van <xref:System.String>.</xref:System.String> Deze klasse is geïmplementeerd ter ondersteuning van de <xref:System.Collections.IEnumerator>interface.</xref:System.Collections.IEnumerator> Zie voor meer informatie over het gebruik van een enumerator de <xref:System.Collections.IEnumerator>onderwerp.</xref:System.Collections.IEnumerator>"
  example:
  - "The following example uses the CharEnumerator class to enumerate the individual characters in a string. It instantiates a CharEnumerator object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/t-system.charenumerator_1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/t-system.charenumerator_1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/t-system.charenumerator_1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/t-system.charenumerator_2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/t-system.charenumerator_2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/t-system.charenumerator_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator<char>
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerator<System.Char>
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.CharEnumerator.Clone
  id: Clone
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Maakt een kopie van de huidige <xref href=&quot;System.CharEnumerator&quot;> </xref> object."
  remarks: "De geretourneerde waarde is een kopie van dit exemplaar van <xref:System.CharEnumerator>en de huidige status.</xref:System.CharEnumerator> Dit is handig voor het opslaan van uw status tijdens het doorlopen een <xref:System.String>object.</xref:System.String>       Stel bijvoorbeeld dat uw toepassing gebruikmaakt van een oorspronkelijke exemplaar van <xref:System.CharEnumerator>aan elk teken in een <xref:System.String>.</xref:System.String> doorlopen</xref:System.CharEnumerator> Wanneer een unieke teken wordt aangetroffen, wordt uw toepassing verwerking wordt onderbroken en roept de methode Clone. In feite slaat Hiermee u de <xref:System.CharEnumerator>index van het object in de <xref:System.String>.</xref:System.String> </xref:System.CharEnumerator>       Uw toepassing de kloon wordt gebruikt om te navigeren naar een ander deel van de `String` om uit te voeren sommige hulpverwerkingsknooppunt. De neveneffect van deze navigatie is dat de kloon verliest voor het bijhouden van de positie waar verwerking wordt gestopt. Echter, wanneer het hulpverwerkingsknooppunt voltooid is, uw toepassing wordt verwijderd van de kloon en maakt gebruik van de oorspronkelijke <xref:System.CharEnumerator>exemplaar hervatten werken op de <xref:System.String>waarbij de oorspronkelijke verwerking wordt gestopt.</xref:System.String> </xref:System.CharEnumerator>      > [!NOTE] > Deze methode is geïmplementeerd ter ondersteuning van de <xref:System.ICloneable>interface.</xref:System.ICloneable>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Een <xref:System.Object>die een kopie van de huidige <xref href=&quot;System.CharEnumerator&quot;> </xref> object.</xref:System.Object>"
  overload: System.CharEnumerator.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Current
  id: Current
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Hiermee haalt u het teken dat momenteel waarnaar wordt verwezen in de tekenreeks die wordt geïnventariseerd door dit <xref href=&quot;System.CharEnumerator&quot;> </xref> object."
  remarks: "De <xref:System.CharEnumerator>klasse onderhoudt een interne index van de geïnventariseerde tekenreeks en de huidige eigenschap retourneert het teken dat momenteel wordt verwezen door de index.</xref:System.CharEnumerator> Deze eigenschap moet worden aangeroepen, alleen wanneer de index geldig is. anders wordt er een uitzondering gegenereerd.       De index is altijd ongeldig voor een lege tekenreeks (&quot;&quot;). De index is ook ongeldig na de <xref:System.String.GetEnumerator%2A?displayProperty=fullName>of <xref:System.CharEnumerator.Reset%2A>methode wordt aangeroepen.</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A?displayProperty=fullName> Nadat een van deze methoden is aangeroepen, roepen de <xref:System.CharEnumerator.MoveNext%2A>methode voor het aanpassen van de index van het eerste teken van de geïnventariseerde tekenreeks.</xref:System.CharEnumerator.MoveNext%2A> De index is geldig wanneer de <xref:System.CharEnumerator.MoveNext%2A>methode retourneert `true`.</xref:System.CharEnumerator.MoveNext%2A>       Huidige verplaatst de index geen en opeenvolgende aanroepen naar de huidige retourneren teken tot <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, of <xref:System.String.GetEnumerator%2A?displayProperty=fullName>wordt aangeroepen.</xref:System.String.GetEnumerator%2A?displayProperty=fullName> </xref:System.CharEnumerator.Reset%2A> </xref:System.CharEnumerator.MoveNext%2A>"
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the Current property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/p-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/p-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/p-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/p-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/p-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/p-system.charenumerator._2.vb)]"
  syntax:
    content: public char Current { get; }
    return:
      type: System.Char
      description: "Het Unicode-teken momenteel waarnaar wordt verwezen door dit <xref href=&quot;System.CharEnumerator&quot;> </xref> object."
  overload: System.CharEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De index is ongeldig; dat wil zeggen, is voor de eerste of na het laatste teken van de geïnventariseerde tekenreeks."
  platform:
  - net462
- uid: System.CharEnumerator.Dispose
  id: Dispose
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Versies van alle resources die worden gebruikt door het huidige exemplaar van de <xref href=&quot;System.CharEnumerator&quot;> </xref> klasse."
  remarks: "Dispose aanroepen wanneer u klaar bent met de <xref:System.CharEnumerator>.</xref:System.CharEnumerator> De methode Dispose verlaat de <xref:System.CharEnumerator>in een onbruikbare status.</xref:System.CharEnumerator> Na Dispose aanroepen, moet u alle verwijzingen naar vrijgeven de <xref:System.CharEnumerator>zodat het geheugen door de garbage collector vrijmaken kunt die de <xref:System.CharEnumerator>is bepaald dat zich bevindt.</xref:System.CharEnumerator> </xref:System.CharEnumerator>       Zie voor meer informatie [onbeheerde hulpbronnen reinigen](~/add/includes/ajax-current-ext-md.md) en [uitvoering van een methode Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Altijd aanroep verwijderen voordat u uw laatste verwijzing naar de <xref:System.CharEnumerator>.</xref:System.CharEnumerator> vrijgeven Anders wordt de resources die worden gebruikt niet vrij tot het aanroepen van de garbagecollector van de <xref:System.CharEnumerator>van het object `Finalize` methode.</xref:System.CharEnumerator>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.CharEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.MoveNext
  id: MoveNext
  parent: System.CharEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Verhoogt de interne index van de huidige <xref href=&quot;System.CharEnumerator&quot;> </xref> object naar het volgende teken van de geïnventariseerde tekenreeks."
  remarks: "De <xref:System.CharEnumerator>klasse houdt een interne index van de geïnventariseerde tekenreeks en de methode MoveNext wordt de index met één verhoogd.</xref:System.CharEnumerator> Roep MoveNext na het aanroepen <xref:System.String.GetEnumerator%2A>of <xref:System.CharEnumerator.Reset%2A>moet worden verhoogd, de huidige tekenpositie naar het eerste teken in de geïnventariseerde tekenreeks.</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A> Controleer of de geretourneerde waarde is `true` om te bepalen of de huidige tekenpositie geldig is.       Als de index al afgezien van het laatste teken van de geïnventariseerde tekenreeks is, wordt de index wordt niet gewijzigd en `false` wordt geretourneerd.       U ziet dat als de geïnventariseerde tekenreeks leeg is (&quot;&quot;), wordt de status van de <xref:System.CharEnumerator>altijd is ongeldig.</xref:System.CharEnumerator> Dit komt doordat de interne index voor de <xref:System.CharEnumerator>is in eerste instantie vóór het eerste teken van de geïnventariseerde tekenreeks en is daarom ongeldig.</xref:System.CharEnumerator> De index MoveNext logisch ingesteld na het laatste (niet-bestaande) teken van de geïnventariseerde tekenreeks ook ongeldig is."
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the MoveNext method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/m-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/m-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/m-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/m-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/m-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/m-system.charenumerator._2.vb)]"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de index met succes wordt verhoogd, en binnen de geïnventariseerde tekenreeks; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.CharEnumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Reset
  id: Reset
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "Initialiseert de index van een positie logisch vóór het eerste teken van de geïnventariseerde tekenreeks."
  remarks: "De <xref:System.CharEnumerator>klasse houdt een interne index van de geïnventariseerde tekenreeks en de methode voor opnieuw instellen wordt de index ingesteld op de ongeldige status.</xref:System.CharEnumerator>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.CharEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.CharEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "Hiermee haalt u het teken dat momenteel waarnaar wordt verwezen in de tekenreeks die wordt geïnventariseerd door dit <xref href=&quot;System.CharEnumerator&quot;> </xref> object. Zie voor een beschrijving van dit lid &lt;xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName&gt;."
  remarks: "Dit lid is een expliciete interface lid-implementatie. Het kan worden gebruikt alleen wanneer de <xref:System.CharEnumerator>exemplaar is geconverteerd naar een <xref:System.Collections.IEnumerator>interface.</xref:System.Collections.IEnumerator> </xref:System.CharEnumerator>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "Het in een vak Unicode-teken momenteel waarnaar wordt verwezen door dit <xref href=&quot;System.CharEnumerator&quot;> </xref> object."
  overload: System.CharEnumerator.System#Collections#IEnumerator#Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Opsomming is niet gestart.       - of - inventarisatie is geëindigd."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.CharEnumerator.Clone
  parent: System.CharEnumerator
  isExternal: false
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
- uid: System.CharEnumerator.Current
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.CharEnumerator.Dispose
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
- uid: System.CharEnumerator.MoveNext
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.CharEnumerator.Reset
  parent: System.CharEnumerator
  isExternal: false
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
- uid: System.CharEnumerator.Clone*
  parent: System.CharEnumerator
  isExternal: false
  name: Clone
  nameWithType: CharEnumerator.Clone
- uid: System.CharEnumerator.Current*
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
- uid: System.CharEnumerator.Dispose*
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose
  nameWithType: CharEnumerator.Dispose
- uid: System.CharEnumerator.MoveNext*
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: CharEnumerator.MoveNext
- uid: System.CharEnumerator.Reset*
  parent: System.CharEnumerator
  isExternal: false
  name: Reset
  nameWithType: CharEnumerator.Reset
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current*
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
