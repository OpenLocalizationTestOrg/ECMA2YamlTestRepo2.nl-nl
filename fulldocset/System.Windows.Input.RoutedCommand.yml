### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.RoutedCommand
  id: RoutedCommand
  children:
  - System.Windows.Input.RoutedCommand.#ctor
  - System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)
  - System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)
  - System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)
  - System.Windows.Input.RoutedCommand.CanExecuteChanged
  - System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)
  - System.Windows.Input.RoutedCommand.InputGestures
  - System.Windows.Input.RoutedCommand.Name
  - System.Windows.Input.RoutedCommand.OwnerType
  - System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)
  - System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)
  langs:
  - csharp
  name: RoutedCommand
  nameWithType: RoutedCommand
  fullName: System.Windows.Input.RoutedCommand
  type: Class
  summary: "Definieert een opdracht die wordt ge√Ømplementeerd <xref:System.Windows.Input.ICommand>en doorgestuurd via de element-structuur.</xref:System.Windows.Input.ICommand>"
  remarks: "The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a RoutedCommand do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.  The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.  \n  \n The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.  The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.  \n  \n<a name=\"xamlAttributeUsage_RoutedCommand\"></a>   \n## XAML Attribute Usage  \n \\<*object* *property*=\"*predefinedCommandName*\"/>  \n  \n \\- or -  \n  \n \\<*object* *property*=\"*predefinedClassName*.*predefinedCommandName*\"/>  \n  \n \\- or -  \n  \n \\<*object* *property*=\"{ *customClassName*.*customCommandName*}\"/>  \n  \n<a name=\"xamlValues_RoutedCommand\"></a>   \n## XAML Values  \n *predefinedClassName*  \n One of the predefined command classes.  \n  \n *predefinedCommandName*  \n One of the predefined commands.  \n  \n *customClassName*  \n A custom class which contains the custom command. Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/add/includes/ajax-current-ext-md.md).  \n  \n *customCommandName*  \n A custom command."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]

      [System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]

      public class RoutedCommand : System.Windows.Input.ICommand
  inheritance:
  - System.Object
  implements:
  - System.Windows.Input.ICommand
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.#ctor
  id: '#ctor'
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: RoutedCommand()
  nameWithType: RoutedCommand.RoutedCommand()
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> klasse."
  syntax:
    content: public RoutedCommand ();
    parameters: []
  overload: System.Windows.Input.RoutedCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)
  id: '#ctor(System.String,System.Type)'
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: RoutedCommand(String,Type)
  nameWithType: RoutedCommand.RoutedCommand(String,Type)
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> klasse met de opgegeven naam en de eigenaar van het type."
  syntax:
    content: public RoutedCommand (string name, Type ownerType);
    parameters:
    - id: name
      type: System.String
      description: "Naam van de gedeclareerde voor serialisatie."
    - id: ownerType
      type: System.Type
      description: "Het type dat de opdracht registreert."
  overload: System.Windows.Input.RoutedCommand.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ownerType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)
  id: '#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)'
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: RoutedCommand(String,Type,InputGestureCollection)
  nameWithType: RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> klasse met de opgegeven naam, eigenaarstype en verzameling van gebaren."
  syntax:
    content: public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);
    parameters:
    - id: name
      type: System.String
      description: "Naam van de gedeclareerde voor serialisatie."
    - id: ownerType
      type: System.Type
      description: "Het type dat de opdracht registreert."
    - id: inputGestures
      type: System.Windows.Input.InputGestureCollection
      description: "De invoer gebaren standaard gekoppeld aan deze opdracht."
  overload: System.Windows.Input.RoutedCommand.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "the length of <code>name</code> is zero  \n  \n \\- or -  \n  \n <code>ownerType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)
  id: CanExecute(System.Object,System.Windows.IInputElement)
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: CanExecute(Object,IInputElement)
  nameWithType: RoutedCommand.CanExecute(Object,IInputElement)
  fullName: System.Windows.Input.RoutedCommand.CanExecute(Object,IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Hiermee wordt bepaald of dit <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> kunt uitvoeren in de huidige status."
  remarks: "De werkelijke logica waarmee wordt bepaald of een <xref:System.Windows.Input.RoutedCommand>kan worden uitgevoerd op de huidige opdracht doel is niet opgenomen in de CanExecute-methoden, in plaats daarvan CanExecute genereert de <xref:System.Windows.Input.CommandManager.PreviewCanExecute>en de <xref:System.Windows.Input.CommandManager.CanExecute>gebeurtenissen welke tunnel en belgrootte via element boomstructuur zoekt naar een object met een <xref:System.Windows.Input.CommandBinding>.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.PreviewCanExecute> </xref:System.Windows.Input.RoutedCommand>  Als een <xref:System.Windows.Input.CommandBinding>voor die <xref:System.Windows.Input.RoutedCommand>is gevonden, wordt de <xref:System.Windows.Input.CanExecuteRoutedEventHandler>gekoppeld aan <xref:System.Windows.Input.CommandBinding>heet.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.CommandBinding>  Deze handlers leveren de programmacode om te bepalen of de <xref:System.Windows.Input.RoutedCommand>of niet kan worden uitgevoerd.</xref:System.Windows.Input.RoutedCommand>       De <xref:System.Windows.Input.CommandManager.PreviewCanExecute>en <xref:System.Windows.Input.CommandManager.PreviewExecuted>gebeurtenissen worden gegenereerd op de <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</xref:System.Windows.Input.ICommandSource.CommandTarget%2A> </xref:System.Windows.Input.CommandManager.PreviewExecuted> </xref:System.Windows.Input.CommandManager.PreviewCanExecute>  Als de <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>is niet ingesteld voor de <xref:System.Windows.Input.ICommandSource>, wordt de <xref:System.Windows.Input.CommandManager.PreviewCanExecute>en <xref:System.Windows.Input.CommandManager.CanExecute>gebeurtenissen worden gegenereerd voor het element toetsenbordfocus.</xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.PreviewCanExecute> </xref:System.Windows.Input.ICommandSource> </xref:System.Windows.Input.ICommandSource.CommandTarget%2A>"
  example:
  - "The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.  \n  \n `this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.  If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.  If the command is a <xref:System.Windows.Input.RoutedCommand>, then the CanExecute method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \n  \n If the CanExecute method returns `true`, then the control is enabled; otherwise, the control is disable.  \n  \n [!code-cs[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/csharp/ImplementICommandSource/CommandSlider.cs#implementicommandcanexecutechanged)]\n [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/visualbasic/implementicommandsource/commandslider.vb#implementicommandcanexecutechanged)]"
  syntax:
    content: public bool CanExecute (object parameter, System.Windows.IInputElement target);
    parameters:
    - id: parameter
      type: System.Object
      description: "Een gebruiker gedefinieerd gegevenstype."
    - id: target
      type: System.Windows.IInputElement
      description: "Het doel van de opdracht."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de opdracht kan worden uitgevoerd op de huidige opdracht doel; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.RoutedCommand.CanExecute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>target</code>is not a <xref href=&quot;System.Windows.UIElement&quot;></xref> or <xref href=&quot;System.Windows.ContentElement&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.CanExecuteChanged
  id: CanExecuteChanged
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: CanExecuteChanged
  nameWithType: RoutedCommand.CanExecuteChanged
  fullName: System.Windows.Input.RoutedCommand.CanExecuteChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Deze gebeurtenis treedt op wanneer er wijzigingen in de broncode van de opdracht door de opdracht manager worden gedetecteerd. Deze wijzigingen is vaak invloed op of de opdracht moet worden uitgevoerd op de huidige opdracht doel."
  remarks: "De <xref:System.Windows.Input.RoutedCommand>luistert voor de <xref:System.Windows.Input.CommandManager.RequerySuggested>gebeurtenis die wordt gegenereerd door de <xref:System.Windows.Input.CommandManager>.</xref:System.Windows.Input.CommandManager> </xref:System.Windows.Input.CommandManager.RequerySuggested> </xref:System.Windows.Input.RoutedCommand> De <xref:System.Windows.Input.CommandManager.RequerySuggested>gebeurtenis wordt geactiveerd wanneer de voorwaarden wordt voldaan die overgaan of u de opdracht moet worden uitgevoerd, zoals een wijziging in de toetsenbordfocus.</xref:System.Windows.Input.CommandManager.RequerySuggested>  Wanneer de opdracht ontvangt de <xref:System.Windows.Input.CommandManager.RequerySuggested>gebeurtenis, wordt de gebeurtenis CanExecuteChanged.</xref:System.Windows.Input.CommandManager.RequerySuggested>  In het algemeen de Opdrachtbron luistert voor deze gebeurtenis en de query de <xref:System.Windows.Input.RoutedCommand>van de <xref:System.Windows.Input.RoutedCommand.CanExecute%2A>methode.</xref:System.Windows.Input.RoutedCommand.CanExecute%2A> </xref:System.Windows.Input.RoutedCommand>  De meeste bronnen van de opdracht wordt zelf uitschakelen als de opdracht kan niet worden uitgevoerd als onderdeel van de opdrachtbinding.  Een voorbeeld hiervan is wanneer een <xref:System.Windows.Controls.MenuItem>grays zichzelf uit wanneer de opdracht kan niet worden uitgevoerd.</xref:System.Windows.Controls.MenuItem>       In sommige gevallen is de <xref:System.Windows.Input.CommandManager>merkt niets van een wijziging in de voorwaarden die wijzigt de mogelijkheid van een opdracht uit te voeren.</xref:System.Windows.Input.CommandManager>  In dergelijke gevallen kunt u dwingen de <xref:System.Windows.Input.CommandManager>naar verhoogt de <xref:System.Windows.Input.CommandManager.RequerySuggested>gebeurtenis door het aanroepen van de <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>methode, op zijn beurt Hierdoor wordt de <xref:System.Windows.Input.RoutedCommand>verhogen van de gebeurtenis CanExecuteChanged.</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> </xref:System.Windows.Input.CommandManager.RequerySuggested> </xref:System.Windows.Input.CommandManager>"
  example:
  - "The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.  \n  \n `this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.  If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.  If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \n  \n If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disabled.  \n  \n [!code-cs[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/csharp/ImplementICommandSource/CommandSlider.cs#implementicommandcanexecutechanged)]\n [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/visualbasic/implementicommandsource/commandslider.vb#implementicommandcanexecutechanged)]"
  syntax:
    content: public event EventHandler CanExecuteChanged;
    return:
      type: System.EventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)
  id: Execute(System.Object,System.Windows.IInputElement)
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: Execute(Object,IInputElement)
  nameWithType: RoutedCommand.Execute(Object,IInputElement)
  fullName: System.Windows.Input.RoutedCommand.Execute(Object,IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Voert de <xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref> op de huidige opdracht doel."
  remarks: "De werkelijke logica die wordt uitgevoerd de <xref:System.Windows.Input.RoutedCommand>niet is opgenomen in de Execute-methoden.</xref:System.Windows.Input.RoutedCommand>  Uitvoeren van de <xref:System.Windows.Input.CommandManager.PreviewExecuted>en <xref:System.Windows.Input.CommandManager.Executed>gebeurtenissen, welke tunnel en belgrootte via het element boomstructuur zoekt naar een object met een <xref:System.Windows.Input.CommandBinding>.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.CommandManager.PreviewExecuted> genereert  Als een <xref:System.Windows.Input.CommandBinding>voor die <xref:System.Windows.Input.RoutedCommand>is gevonden, wordt de <xref:System.Windows.Input.ExecutedRoutedEventHandler>gekoppeld aan <xref:System.Windows.Input.CommandBinding>heet.</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.ExecutedRoutedEventHandler> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.CommandBinding>  Deze handlers leveren de programming logica waarmee de <xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand>       De <xref:System.Windows.Input.CommandManager.PreviewExecuted>en <xref:System.Windows.Input.CommandManager.Executed>gebeurtenissen worden gegenereerd op de <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</xref:System.Windows.Input.ICommandSource.CommandTarget%2A> </xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.CommandManager.PreviewExecuted>  Als de <xref:System.Windows.Input.ICommandSource.CommandTarget%2A>is niet ingesteld voor de <xref:System.Windows.Input.ICommandSource>, wordt de <xref:System.Windows.Input.CommandManager.PreviewExecuted>en <xref:System.Windows.Input.CommandManager.Executed>gebeurtenissen worden gegenereerd voor het element toetsenbordfocus.</xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.CommandManager.PreviewExecuted> </xref:System.Windows.Input.ICommandSource> </xref:System.Windows.Input.ICommandSource.CommandTarget%2A>"
  example:
  - "The following example is from a custom implementation of <xref:System.Windows.Input.ICommandSource> sample.  \n  \n `this.Command` in this example is the Command property on the <xref:System.Windows.Input.ICommandSource>.  If the command is not null, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.  If it is a <xref:System.Windows.Input.RoutedCommand>, then the Execute method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  If the command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \n  \n [!code-cs[ImplementICommandSource#ImplementICommandExecute](~/add/codesnippet/csharp/ImplementICommandSource/CommandSlider.cs#implementicommandexecute)]\n [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/add/codesnippet/visualbasic/implementicommandsource/commandslider.vb#implementicommandexecute)]"
  syntax:
    content: public void Execute (object parameter, System.Windows.IInputElement target);
    parameters:
    - id: parameter
      type: System.Object
      description: "De gebruiker gedefinieerde parameter worden doorgegeven aan de handler."
    - id: target
      type: System.Windows.IInputElement
      description: "Element waarmee om te beginnen met zoeken naar opdracht handlers."
  overload: System.Windows.Input.RoutedCommand.Execute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>target</code>is not a <xref href=&quot;System.Windows.UIElement&quot;></xref> or <xref href=&quot;System.Windows.ContentElement&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.InputGestures
  id: InputGestures
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: InputGestures
  nameWithType: RoutedCommand.InputGestures
  fullName: System.Windows.Input.RoutedCommand.InputGestures
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Hiermee wordt de verzameling <xref href=&quot;System.Windows.Input.InputGesture&quot;> </xref> objecten die gekoppeld aan deze opdracht zijn."
  remarks: ''
  example:
  - "The following example shows how to add a new <xref:System.Windows.Input.MouseGesture> to a <xref:System.Windows.Input.RoutedCommand>.  \n  \n [!code-cs[commandlibrarysnippets#MouseBindingAddedCommand](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#mousebindingaddedcommand)]\n [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#mousebindingaddedcommand)]"
  syntax:
    content: public System.Windows.Input.InputGestureCollection InputGestures { get; }
    return:
      type: System.Windows.Input.InputGestureCollection
      description: "De invoer gebaren."
  overload: System.Windows.Input.RoutedCommand.InputGestures*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.Name
  id: Name
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: Name
  nameWithType: RoutedCommand.Name
  fullName: System.Windows.Input.RoutedCommand.Name
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Hiermee haalt u de naam van de opdracht."
  remarks: "Deze eigenschap kan worden gebruikt wanneer u verwijst naar een <xref:System.Windows.Input.RoutedCommand>in [!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)].</xref:System.Windows.Input.RoutedCommand>"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "De naam van de opdracht."
  overload: System.Windows.Input.RoutedCommand.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.OwnerType
  id: OwnerType
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: OwnerType
  nameWithType: RoutedCommand.OwnerType
  fullName: System.Windows.Input.RoutedCommand.OwnerType
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Hiermee wordt het type dat is geregistreerd bij de opdracht."
  syntax:
    content: public Type OwnerType { get; }
    return:
      type: System.Type
      description: "Het type van de eigenaar van de opdracht."
  overload: System.Windows.Input.RoutedCommand.OwnerType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)
  id: System#Windows#Input#ICommand#CanExecute(System.Object)
  isEii: true
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: System.Windows.Input.ICommand.CanExecute(Object)
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)
  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Zie voor een beschrijving van deze leden <xref:System.Windows.Input.ICommand.CanExecute*>.</xref:System.Windows.Input.ICommand.CanExecute*>"
  remarks: "Dit lid is een expliciete interface lid-implementatie. Het kan worden gebruikt alleen wanneer de <xref:System.Windows.Input.RoutedCommand>exemplaar is geconverteerd naar een <xref:System.Windows.Input.ICommand>interface.</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.RoutedCommand>"
  syntax:
    content: bool ICommand.CanExecute (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "Gegevens die worden gebruikt door de opdracht.  Als de opdracht geen gegevens worden doorgegeven vereist, dit object kan worden ingesteld op <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als u deze opdracht kan worden uitgevoerd; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)
  id: System#Windows#Input#ICommand#Execute(System.Object)
  isEii: true
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: System.Windows.Input.ICommand.Execute(Object)
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.Execute(Object)
  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.Execute(Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Zie voor een beschrijving van deze leden <xref:System.Windows.Input.ICommand.Execute*>.</xref:System.Windows.Input.ICommand.Execute*>"
  remarks: "Dit lid is een expliciete interface lid-implementatie. Het kan worden gebruikt alleen wanneer de <xref:System.Windows.Input.RoutedCommand>exemplaar is geconverteerd naar een <xref:System.Windows.Input.ICommand>interface.</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.RoutedCommand>"
  example:
  - "See Also  \n  \n <xref:System.Windows.Input.RoutedCommand.Execute%2A>"
  syntax:
    content: void ICommand.Execute (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "Gegevens die worden gebruikt door de opdracht.  Als de opdracht geen gegevens worden doorgegeven vereist, dit object kan worden ingesteld op <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Input.RoutedCommand.#ctor
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: RoutedCommand()
  nameWithType: RoutedCommand.RoutedCommand()
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand()
- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: RoutedCommand(String,Type)
  nameWithType: RoutedCommand.RoutedCommand(String,Type)
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: RoutedCommand(String,Type,InputGestureCollection)
  nameWithType: RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)
- uid: System.Windows.Input.InputGestureCollection
  parent: System.Windows.Input
  isExternal: false
  name: InputGestureCollection
  nameWithType: InputGestureCollection
  fullName: System.Windows.Input.InputGestureCollection
- uid: System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: CanExecute(Object,IInputElement)
  nameWithType: RoutedCommand.CanExecute(Object,IInputElement)
  fullName: System.Windows.Input.RoutedCommand.CanExecute(Object,IInputElement)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.RoutedCommand.CanExecuteChanged
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: CanExecuteChanged
  nameWithType: RoutedCommand.CanExecuteChanged
  fullName: System.Windows.Input.RoutedCommand.CanExecuteChanged
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: Execute(Object,IInputElement)
  nameWithType: RoutedCommand.Execute(Object,IInputElement)
  fullName: System.Windows.Input.RoutedCommand.Execute(Object,IInputElement)
- uid: System.Windows.Input.RoutedCommand.InputGestures
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: InputGestures
  nameWithType: RoutedCommand.InputGestures
  fullName: System.Windows.Input.RoutedCommand.InputGestures
- uid: System.Windows.Input.RoutedCommand.Name
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: Name
  nameWithType: RoutedCommand.Name
  fullName: System.Windows.Input.RoutedCommand.Name
- uid: System.Windows.Input.RoutedCommand.OwnerType
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: OwnerType
  nameWithType: RoutedCommand.OwnerType
  fullName: System.Windows.Input.RoutedCommand.OwnerType
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: System.Windows.Input.ICommand.CanExecute(Object)
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)
  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: System.Windows.Input.ICommand.Execute(Object)
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.Execute(Object)
  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.Execute(Object)
- uid: System.Windows.Input.RoutedCommand.#ctor*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: RoutedCommand
  nameWithType: RoutedCommand.RoutedCommand
- uid: System.Windows.Input.RoutedCommand.CanExecute*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: CanExecute
  nameWithType: RoutedCommand.CanExecute
- uid: System.Windows.Input.RoutedCommand.Execute*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: Execute
  nameWithType: RoutedCommand.Execute
- uid: System.Windows.Input.RoutedCommand.InputGestures*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: InputGestures
  nameWithType: RoutedCommand.InputGestures
- uid: System.Windows.Input.RoutedCommand.Name*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: Name
  nameWithType: RoutedCommand.Name
- uid: System.Windows.Input.RoutedCommand.OwnerType*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: OwnerType
  nameWithType: RoutedCommand.OwnerType
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: System.Windows.Input.ICommand.CanExecute
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.CanExecute
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: System.Windows.Input.ICommand.Execute
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.Execute
