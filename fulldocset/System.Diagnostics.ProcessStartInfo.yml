### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.ProcessStartInfo
  id: ProcessStartInfo
  children:
  - System.Diagnostics.ProcessStartInfo.#ctor
  - System.Diagnostics.ProcessStartInfo.#ctor(System.String)
  - System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)
  - System.Diagnostics.ProcessStartInfo.Arguments
  - System.Diagnostics.ProcessStartInfo.CreateNoWindow
  - System.Diagnostics.ProcessStartInfo.Domain
  - System.Diagnostics.ProcessStartInfo.Environment
  - System.Diagnostics.ProcessStartInfo.EnvironmentVariables
  - System.Diagnostics.ProcessStartInfo.ErrorDialog
  - System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle
  - System.Diagnostics.ProcessStartInfo.FileName
  - System.Diagnostics.ProcessStartInfo.LoadUserProfile
  - System.Diagnostics.ProcessStartInfo.Password
  - System.Diagnostics.ProcessStartInfo.PasswordInClearText
  - System.Diagnostics.ProcessStartInfo.RedirectStandardError
  - System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  - System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  - System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  - System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  - System.Diagnostics.ProcessStartInfo.UserName
  - System.Diagnostics.ProcessStartInfo.UseShellExecute
  - System.Diagnostics.ProcessStartInfo.Verb
  - System.Diagnostics.ProcessStartInfo.Verbs
  - System.Diagnostics.ProcessStartInfo.WindowStyle
  - System.Diagnostics.ProcessStartInfo.WorkingDirectory
  langs:
  - csharp
  name: ProcessStartInfo
  nameWithType: ProcessStartInfo
  fullName: System.Diagnostics.ProcessStartInfo
  type: Class
  summary: "Hiermee geeft u een set waarden die worden gebruikt bij het starten van een proces."
  remarks: "ProcessStartInfo wordt gebruikt in combinatie met de <xref:System.Diagnostics.Process>onderdeel.</xref:System.Diagnostics.Process> Wanneer u start een proces met de <xref:System.Diagnostics.Process>klasse, hebt u toegang tot het verwerken van gegevens over naast beschikbaar wanneer koppelen aan een proces dat wordt uitgevoerd.</xref:System.Diagnostics.Process>       U kunt de klasse ProcessStartInfo gebruiken voor betere controle over het proces starten. U moet ten minste instellen de <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>eigenschap, ofwel handmatig of met behulp van de constructor.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> De bestandsnaam is een toepassing of het document. Hier wordt een document gedefinieerd om te worden van elk bestandstype met een open of standaardactie gekoppeld. U kunt geregistreerde bestandstypen en de bijbehorende toepassingen voor de computer weergeven met behulp van de **Mapopties** in het dialoogvenster dat beschikbaar is via het besturingssysteem. De **Geavanceerd** knop leidt tot een dialoogvenster waarin wordt aangegeven of er een actie openen die zijn gekoppeld aan een specifieke geregistreerd bestandstype.       Bovendien kunt u andere eigenschappen die acties bepalen moet uitvoeren met dat bestand instellen. U kunt opgeven dat een waarde die specifiek zijn voor het type van de <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>eigenschap voor de <xref:System.Diagnostics.ProcessStartInfo.Verb%2A>eigenschap.</xref:System.Diagnostics.ProcessStartInfo.Verb%2A> </xref:System.Diagnostics.ProcessStartInfo.FileName%2A> U kunt bijvoorbeeld opgeven voor een documenttype &quot; afdrukken&quot;. Bovendien kunt u <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>eigenschapswaarden worden de opdrachtregelargumenten doorgeven aan het bestand open procedure.</xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> Bijvoorbeeld, als u een toepassing van de editor voor tekst in de <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>eigenschap, kunt u de <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>eigenschap om op te geven van een tekstbestand worden geopend in de editor.</xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> </xref:System.Diagnostics.ProcessStartInfo.FileName%2A>       Standard-invoer is meestal het toetsenbord en standaarduitvoer en de standaardfout zijn meestal het scherm weergegeven. U kunt echter de <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A>, <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A>, en <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A>Eigenschappen ertoe leiden dat het proces van invoer of uitvoer terug naar een bestand of een ander apparaat.</xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A> </xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A> </xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A> Als u de <xref:System.Diagnostics.Process.StandardInput%2A>, <xref:System.Diagnostics.Process.StandardOutput%2A>, of <xref:System.Diagnostics.Process.StandardError%2A>Eigenschappen op de <xref:System.Diagnostics.Process>onderdeel, moet u eerst instellen de overeenkomstige waarde in de eigenschap ProcessStartInfo.</xref:System.Diagnostics.Process> </xref:System.Diagnostics.Process.StandardError%2A> </xref:System.Diagnostics.Process.StandardOutput%2A> </xref:System.Diagnostics.Process.StandardInput%2A> Het systeem anders wordt er een uitzondering gegenereerd bij het lezen of schrijven naar de stroom.       Stel <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>aangeven of u het proces starten met behulp van de shell van het besturingssysteem.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>       U kunt de waarde van een eigenschap ProcessStartInfo tot het moment dat het proces wordt gestart. Nadat u het proces starten, heeft deze waarden wijzigen geen effect.      > [!NOTE] > Deze klasse bevat een koppeling vraag op het klasseniveau van de die van toepassing op alle leden is. Een <xref:System.Security.SecurityException>wordt gegenereerd wanneer de onmiddellijke aanroeper heeft geen machtiging voor volledig vertrouwen.</xref:System.Security.SecurityException> Zie voor meer informatie over beveiliging eisen [koppeling eisen](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates how to use the ProcessStartInfo class to start Internet Explorer, providing the destination URLs as ProcessStartInfo arguments.  \n  \n [!code-vb[Process.Start_static#1](~/add/codesnippet/visualbasic/t-system.diagnostics.pro_2_1.vb)]\n [!code-cs[Process.Start_static#1](~/add/codesnippet/csharp/t-system.diagnostics.pro_2_1.cs)]\n [!code-cpp[Process.Start_static#1](~/add/codesnippet/cpp/t-system.diagnostics.pro_2_1.cpp)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]

      public sealed class ProcessStartInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.#ctor
  id: '#ctor'
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: ProcessStartInfo()
  nameWithType: ProcessStartInfo.ProcessStartInfo()
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo()
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Diagnostics.ProcessStartInfo&quot;> </xref> klasse zonder op te geven van een bestandsnaam op waarmee het proces te starten."
  remarks: "U moet instellen ten minste de <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>eigenschap voordat u begint met het proces.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> De bestandsnaam is een toepassing of het document. In dit geval is een document gedefinieerd om te worden van elk bestandstype met een open of standaardactie gekoppeld. U kunt geregistreerde bestandstypen en de bijbehorende toepassingen voor de computer weergeven met behulp van de **Mapopties** in het dialoogvenster dat beschikbaar is via het besturingssysteem. De **Geavanceerd** knop leidt tot een dialoogvenster waarin wordt aangegeven of er een actie openen die zijn gekoppeld aan een specifieke geregistreerd bestandstype.       U kunt eventueel ook andere eigenschappen instellen voordat u begint met het proces. De <xref:System.Diagnostics.ProcessStartInfo.Verb%2A>eigenschap levert acties moet uitvoeren, zoals &quot;print&quot; met het bestand aangegeven in de <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>eigenschap.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> </xref:System.Diagnostics.ProcessStartInfo.Verb%2A> De <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>eigenschap biedt een manier om door te geven van de argumenten voor de opdrachtregel naar het bestand wanneer deze wordt geopend. het systeem</xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>"
  syntax:
    content: public ProcessStartInfo ();
    parameters: []
  overload: System.Diagnostics.ProcessStartInfo.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: ProcessStartInfo(String)
  nameWithType: ProcessStartInfo.ProcessStartInfo(String)
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Diagnostics.ProcessStartInfo&quot;> </xref> klasse en Hiermee geeft u een bestandsnaam in, bijvoorbeeld een toepassing of het document dat u het proces te starten."
  remarks: "De bestandsnaam is een toepassing of het document. In dit geval is een document gedefinieerd om te worden van elk bestandstype met een open of standaardactie gekoppeld. U kunt geregistreerde bestandstypen en de bijbehorende toepassingen voor de computer weergeven met behulp van de **Mapopties** in het dialoogvenster dat beschikbaar is via het besturingssysteem. De **Geavanceerd** knop leidt tot een dialoogvenster waarin wordt aangegeven of er een actie openen die zijn gekoppeld aan een specifieke geregistreerd bestandstype.       U kunt wijzigen de <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>eigenschap na het aanroepen van deze constructor, tot aan de tijd die het proces wordt gestart.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Nadat u het proces starten, heeft deze waarden wijzigen geen effect."
  syntax:
    content: public ProcessStartInfo (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "Een toepassing of het document dat u om een proces te starten."
  overload: System.Diagnostics.ProcessStartInfo.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: ProcessStartInfo(String,String)
  nameWithType: ProcessStartInfo.ProcessStartInfo(String,String)
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Diagnostics.ProcessStartInfo&quot;> </xref> klasse, geeft u de bestandsnaam van een toepassing waarmee het proces te starten en geeft een reeks opdrachtregelargumenten doorgeven aan de toepassing."
  remarks: "De bestandsnaam is een toepassing of het document. In dit geval is een document gedefinieerd om te worden van elk bestandstype met een open of standaardactie gekoppeld. U kunt geregistreerde bestandstypen en de bijbehorende toepassingen voor de computer weergeven met behulp van de **Mapopties** in het dialoogvenster dat beschikbaar is via het besturingssysteem. De **Geavanceerd** knop leidt tot een dialoogvenster waarin wordt aangegeven of er een actie openen die zijn gekoppeld aan een specifieke geregistreerd bestandstype.       U kunt wijzigen de <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>of <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>Eigenschappen na het aanroepen van deze constructor, tot aan de tijd die het proces wordt gestart.</xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> </xref:System.Diagnostics.ProcessStartInfo.FileName%2A> Nadat u het proces starten, heeft deze waarden wijzigen geen effect."
  syntax:
    content: public ProcessStartInfo (string fileName, string arguments);
    parameters:
    - id: fileName
      type: System.String
      description: "Een toepassing waarmee u om een proces te starten."
    - id: arguments
      type: System.String
      description: "De opdrachtregelargumenten doorgeven aan de toepassing wanneer het proces wordt gestart."
  overload: System.Diagnostics.ProcessStartInfo.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Arguments
  id: Arguments
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Arguments
  nameWithType: ProcessStartInfo.Arguments
  fullName: System.Diagnostics.ProcessStartInfo.Arguments
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van de reeks opdrachtregelargumenten moet worden gebruikt wanneer de toepassing wordt gestart."
  remarks: ''
  example:
  - "The first example below creates a small application (argsecho.exe) that echos its arguments to the console. The second example creates an application that invokes argsecho.exe to demonstrate different variations for the Arguments property.  \n  \n [!code-vb[Process.Start_static#3](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_2_1.vb)]\n [!code-cs[Process.Start_static#3](~/add/codesnippet/csharp/p-system.diagnostics.pro_2_1.cs)]\n [!code-cpp[Process.Start_static#3](~/add/codesnippet/cpp/p-system.diagnostics.pro_2_1.cpp)]  \n  \n [!code-vb[Process.Start_static#2](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_2_2.vb)]\n [!code-cs[Process.Start_static#2](~/add/codesnippet/csharp/p-system.diagnostics.pro_2_2.cs)]\n [!code-cpp[Process.Start_static#2](~/add/codesnippet/cpp/p-system.diagnostics.pro_2_2.cpp)]"
  syntax:
    content: public string Arguments { get; set; }
    return:
      type: System.String
      description: "Één tekenreeks die de argumenten worden doorgegeven aan de doeltoepassing die is opgegeven in de <xref:System.Diagnostics.ProcessStartInfo.FileName*>eigenschap.</xref:System.Diagnostics.ProcessStartInfo.FileName*> De standaardwaarde is een lege tekenreeks (&quot;&quot;). De lengte van de argumenten toegevoegd aan de lengte van het volledige pad naar het proces moet kleiner zijn dan 2080 zijn in Windows Vista en eerdere versies van het besturingssysteem Windows. De lengte moet kleiner zijn dan 32699 in Windows 7 en hoger.       Argumenten zijn geparseerd en geïnterpreteerd door de doeltoepassing, zodat de verwachtingen van die toepassing moet zijn afgestemd. For.NET toepassingen, zoals geïllustreerd in de onderstaande voorbeelden spaties worden geïnterpreteerd als scheidingsteken tussen meerdere argumenten. Één argument met spaties moet tussen aanhalingstekens, maar de aanhalingstekens zijn niet doorgevoerd in de doeltoepassing. Opnemen in aanhalingstekens in de laatste geparseerd triple-escape-argument elke is ingeschakeld."
  overload: System.Diagnostics.ProcessStartInfo.Arguments*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.CreateNoWindow
  id: CreateNoWindow
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: CreateNoWindow
  nameWithType: ProcessStartInfo.CreateNoWindow
  fullName: System.Diagnostics.ProcessStartInfo.CreateNoWindow
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of het proces wordt gestart in een nieuw venster."
  remarks: "Als de <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>eigenschap is `true` of de <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>en <xref:System.Diagnostics.ProcessStartInfo.Password%2A>Eigenschappen zijn niet `null`, wordt de waarde van de eigenschap CreateNoWindow genegeerd en wordt een nieuw venster wordt gemaakt.</xref:System.Diagnostics.ProcessStartInfo.Password%2A> </xref:System.Diagnostics.ProcessStartInfo.UserName%2A> </xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>"
  example:
  - >-
    [!code-cpp[Process.Start_instance#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_19_1.cpp)]
     [!code-vb[Process.Start_instance#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_19_1.vb)]
     [!code-cs[Process.Start_instance#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_19_1.cs)]
  syntax:
    content: public bool CreateNoWindow { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het proces moet worden gestart zonder te maken van een nieuw venster te bevatten. anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.CreateNoWindow*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Domain
  id: Domain
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Domain
  nameWithType: ProcessStartInfo.Domain
  fullName: System.Diagnostics.ProcessStartInfo.Domain
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van een waarde die het domein moet worden gebruikt bij het starten van het proces wordt geïdentificeerd."
  syntax:
    content: public string Domain { get; set; }
    return:
      type: System.String
      description: "Het Active Directory-domein moet worden gebruikt wanneer het proces wordt gestart. De eigenschap domain is vooral van belang zijn voor gebruikers in bedrijfsomgevingen die gebruikmaken van Active Directory."
  overload: System.Diagnostics.ProcessStartInfo.Domain*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Environment
  id: Environment
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Environment
  nameWithType: ProcessStartInfo.Environment
  fullName: System.Diagnostics.ProcessStartInfo.Environment
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Hiermee haalt u de omgevingsvariabelen die op dit proces en de onderliggende processen van toepassing."
  remarks: "The environment variables contain search paths for files, directories for temporary files, application-specific options, and other similar information. Although you cannot directly set the Environment property, you can modify the generic dictionary returned by the property. For example, the following code adds a TempPath environment variable: `myProcess.StartInfo.Environment.Add(\"TempPath\", \"C:\\\\Temp\")`.  You must set the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property to `false` to start the process after changing the Environment property. If <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, an <xref:System.InvalidOperationException> is thrown when the <xref:System.Diagnostics.Process.Start%2A> method is called.  \n  \n On .NET Framework applications, using the Environment property is the same as using the <xref:System.Diagnostics.ProcessStartInfo.EnvironmentVariables%2A> property."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> Environment { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "Een algemene woordenlijst met de omgevingsvariabelen die op dit proces en de onderliggende processen van toepassing. De standaardwaarde is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.Environment*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.EnvironmentVariables
  id: EnvironmentVariables
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: EnvironmentVariables
  nameWithType: ProcessStartInfo.EnvironmentVariables
  fullName: System.Diagnostics.ProcessStartInfo.EnvironmentVariables
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald zoeken paden voor bestanden, mappen voor tijdelijke bestanden, toepassingsspecifieke opties en andere soortgelijke informatie."
  remarks: 'Hoewel u niet de eigenschap omgevingsvariabelen instellen, kunt u de <xref:System.Collections.Specialized.StringDictionary>geretourneerd door de eigenschap.</xref:System.Collections.Specialized.StringDictionary> Bijvoorbeeld de volgende code wordt toegevoegd een omgevingsvariabele TempPath: `myProcess.StartInfo.EnvironmentVariables.Add(&quot;TempPath&quot;, &quot;C:\\Temp&quot;)`.  U moet instellen de <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>eigenschap `false` het proces te starten na het wijzigen van de eigenschap omgevingsvariabelen.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Als <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>is `true`, een <xref:System.InvalidOperationException>gegenereerd wanneer de <xref:System.Diagnostics.Process.Start%2A>methode wordt aangeroepen.</xref:System.Diagnostics.Process.Start%2A> </xref:System.InvalidOperationException> </xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>'
  syntax:
    content: public System.Collections.Specialized.StringDictionary EnvironmentVariables { get; }
    return:
      type: System.Collections.Specialized.StringDictionary
      description: "Een tekenreeks-woordenlijst waarmee omgevingsvariabelen die van toepassing zijn op dit proces en onderliggende processen. De standaardwaarde is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.EnvironmentVariables*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialog
  id: ErrorDialog
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: ErrorDialog
  nameWithType: ProcessStartInfo.ErrorDialog
  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialog
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of er een dialoogvenster voor de gebruiker wordt weergegeven als het proces kan niet worden gestart."
  remarks: >-
    > [!NOTE]

    >  <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> must be `true` if you want to set ErrorDialog to `true`.
  syntax:
    content: public bool ErrorDialog { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als een dialoogvenster moet worden weergegeven op het scherm als het proces kan niet worden gestart. anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.ErrorDialog*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle
  id: ErrorDialogParentHandle
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: ErrorDialogParentHandle
  nameWithType: ProcessStartInfo.ErrorDialogParentHandle
  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van de vensterkoppeling moet worden gebruikt wanneer er een dialoogvenster wordt weergegeven voor een proces dat kan niet worden gestart."
  remarks: "Als <xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A>is `true`, de ErrorDialogParentHandle-eigenschap geeft u het bovenliggende venster voor het dialoogvenster dat wordt weergegeven.</xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A> Dit is handig om op te geven van een bovenliggende als u wilt behouden in het dialoogvenster voor de toepassing."
  syntax:
    content: public IntPtr ErrorDialogParentHandle { get; set; }
    return:
      type: System.IntPtr
      description: "Een verwijzing naar de ingang van de fout in het dialoogvenster dat resultaten van een proces is mislukt starten."
  overload: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.FileName
  id: FileName
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: FileName
  nameWithType: ProcessStartInfo.FileName
  fullName: System.Diagnostics.ProcessStartInfo.FileName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van de toepassing of het document te starten."
  remarks: "U moet ten minste de FileName eigenschap instellen voordat u begint met het proces. De bestandsnaam is een toepassing of het document. Een document is gedefinieerd om te worden van elk bestandstype met een open of standaardactie gekoppeld. U kunt geregistreerde bestandstypen en de bijbehorende toepassingen voor de computer weergeven met behulp van de **Mapopties** in het dialoogvenster dat beschikbaar is via het besturingssysteem. De **Geavanceerd** knop leidt tot een dialoogvenster waarin wordt aangegeven of er een actie openen die zijn gekoppeld aan een specifieke geregistreerd bestandstype.       De set met bestandstypen die voor u beschikbaar is deels afhankelijk van de waarde van de <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>eigenschap.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Als <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>is `true`, kunt u het starten van elk document en bewerkingen uitvoeren op het bestand, zoals af te drukken, met de <xref:System.Diagnostics.Process>onderdeel.</xref:System.Diagnostics.Process> </xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Wanneer <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>is `false`, kunt u beginnen met alleen uitvoerbare bestanden met de <xref:System.Diagnostics.Process>onderdeel.</xref:System.Diagnostics.Process> </xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>       U kunt een ClickOnce-toepassing starten door de eigenschap FileName naar de locatie (bijvoorbeeld een webadres) van waaruit u de toepassing oorspronkelijk zijn geïnstalleerd. Een ClickOnce-toepassing niet starten door op te geven van de geïnstalleerde locatie op de vaste schijf."
  example:
  - >-
    [!code-cpp[Process.Start_instance#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_27_1.cpp)]
     [!code-vb[Process.Start_instance#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_27_1.vb)]
     [!code-cs[Process.Start_instance#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_27_1.cs)]
  syntax:
    content: public string FileName { get; set; }
    return:
      type: System.String
      description: "De naam van de toepassing te starten, of de naam van een document van een bestandstype dat is gekoppeld aan een toepassing en met een standaard beschikbaar zijn voor deze actie openen. De standaardwaarde is een lege tekenreeks (&quot;&quot;)."
  overload: System.Diagnostics.ProcessStartInfo.FileName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.LoadUserProfile
  id: LoadUserProfile
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: LoadUserProfile
  nameWithType: ProcessStartInfo.LoadUserProfile
  fullName: System.Diagnostics.ProcessStartInfo.LoadUserProfile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of het profiel van de gebruiker van Windows worden geladen uit het register."
  remarks: "Deze eigenschap wordt verwezen als het proces wordt gestart met behulp van de gebruikersnaam, wachtwoord en domein.       Als de waarde `true`, het gebruikersprofiel in de `HKEY_USERS` registersleutel wordt geladen. Het profiel wordt geladen kan tijdrovend zijn. Daarom is het beste gebruiken deze waarde alleen als u toegang moet hebben tot de informatie in de `HKEY_CURRENT_USER` registersleutel.       In Windows Server 2003 en Windows 2000, is het profiel is verwijderd nadat het nieuwe proces is beëindigd, ongeacht of het proces heeft gemaakt onderliggende processen.       Het profiel wordt verwijderd nadat het nieuwe proces in Windows XP, en alle onderliggende processen die deze gemaakt zijn beëindigd."
  syntax:
    content: public bool LoadUserProfile { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het profiel voor Windows-gebruiker moet worden geladen; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.LoadUserProfile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Password
  id: Password
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Password
  nameWithType: ProcessStartInfo.Password
  fullName: System.Diagnostics.ProcessStartInfo.Password
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van een beveiligde tekenreeks zijn met het wachtwoord van de gebruiker moet worden gebruikt bij het starten van het proces."
  remarks: "> [!IMPORTANT]\n>  The <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property must be set if <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> and Password are provided. If the property is not set, the default working directory is %SYSTEMROOT%\\system32.  \n  \n> [!NOTE]\n>  Setting the <xref:System.Diagnostics.ProcessStartInfo.Domain%2A>, <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>, and the Password properties in a <xref:System.Diagnostics.ProcessStartInfo> object is the recommended practice for starting a process with user credentials.  \n  \n A <xref:System.Security.SecureString> object is like a <xref:System.String> object in that it has a text value. However, the value of a <xref:System.Security.SecureString> object is automatically encrypted, it can be modified until your application marks it as read-only, and it can be deleted from computer memory by either your application or the .NET Framework garbage collector.  \n  \n For more information about secure strings and an example of how to obtain a password to set this property, see the <xref:System.Security.SecureString> class.  \n  \n> [!NOTE]\n>  If you provide a value for the Password property, the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property must be `false`, or an <xref:System.InvalidOperationException> will be thrown when the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName> method is called."
  syntax:
    content: public System.Security.SecureString Password { get; set; }
    return:
      type: System.Security.SecureString
      description: "Het wachtwoord van de gebruiker moet worden gebruikt wanneer het proces wordt gestart."
  overload: System.Diagnostics.ProcessStartInfo.Password*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.PasswordInClearText
  id: PasswordInClearText
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: PasswordInClearText
  nameWithType: ProcessStartInfo.PasswordInClearText
  fullName: System.Diagnostics.ProcessStartInfo.PasswordInClearText
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van het wachtwoord in ongecodeerde tekst moet worden gebruikt wanneer het proces wordt gestart."
  syntax:
    content: public string PasswordInClearText { get; set; }
    return:
      type: System.String
      description: "De gebruikerswachtwoord in ongecodeerde tekst."
  overload: System.Diagnostics.ProcessStartInfo.PasswordInClearText*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardError
  id: RedirectStandardError
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: RedirectStandardError
  nameWithType: ProcessStartInfo.RedirectStandardError
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardError
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of de foutuitvoer van een toepassing wordt geschreven naar de &lt;xref:System.Diagnostics.Process.StandardError%2A?displayProperty=fullName&gt; stroom."
  remarks: "Wanneer een <xref:System.Diagnostics.Process>schrijft van tekst naar de Standaardfoutstroom tekst wordt doorgaans weergegeven op de console.</xref:System.Diagnostics.Process> Door het omleiden van de <xref:System.Diagnostics.Process.StandardError%2A>stream, u kunt bewerken of de foutuitvoer van een proces te onderdrukken.</xref:System.Diagnostics.Process.StandardError%2A> U kunt bijvoorbeeld de tekst filteren, anders opmaken of de uitvoer naar zowel de console en een aangewezen logboekbestand schrijven.      > [!NOTE] > Moet u instellen <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>naar `false` als u RedirectStandardError ingesteld wilt op `true`.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Anders lezen van de <xref:System.Diagnostics.Process.StandardError%2A>stroom er een uitzondering gegenereerd.</xref:System.Diagnostics.Process.StandardError%2A>       De omgeleide <xref:System.Diagnostics.Process.StandardError%2A>stroom kan worden gelezen synchroon of asynchroon.</xref:System.Diagnostics.Process.StandardError%2A> Methoden zoals <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>en <xref:System.IO.StreamReader.ReadToEnd%2A>synchrone leesbewerkingen op de uitvoerstroom fout van het proces uitvoeren.</xref:System.IO.StreamReader.ReadToEnd%2A> </xref:System.IO.StreamReader.ReadLine%2A> </xref:System.IO.StreamReader.Read%2A> Deze synchrone lezen bewerkingen niet voltooit tot de bijbehorende <xref:System.Diagnostics.Process>schrijft naar de <xref:System.Diagnostics.Process.StandardError%2A>streamen of de stroom wordt gesloten.</xref:System.Diagnostics.Process.StandardError%2A> </xref:System.Diagnostics.Process>       Daarentegen <xref:System.Diagnostics.Process.BeginErrorReadLine%2A>begint asynchrone leesbewerkingen op de <xref:System.Diagnostics.Process.StandardError%2A>stream.</xref:System.Diagnostics.Process.StandardError%2A> </xref:System.Diagnostics.Process.BeginErrorReadLine%2A> Deze methode kan een aangewezen gebeurtenis-handler voor de Stroomuitvoer van de en retourneert onmiddellijk naar de aanroeper die andere taken uitvoeren kunt terwijl de Stroomuitvoer van de is omgeleid naar de gebeurtenis-handler.      > [!NOTE] > De toepassing die wordt verwerkt door de uitvoer van de asynchrone aanroep moet de <xref:System.Diagnostics.Process.WaitForExit%2A>methode om ervoor te zorgen dat de uitvoerbuffer is leeggemaakt.</xref:System.Diagnostics.Process.WaitForExit%2A>       Synchroon lezen bewerkingen introduceren een afhankelijkheid tussen de aanroeper lezen van de <xref:System.Diagnostics.Process.StandardError%2A>stroom en de onderliggende proces schrijven naar deze stroom.</xref:System.Diagnostics.Process.StandardError%2A> Deze afhankelijkheden kunnen voorwaarden impasse veroorzaken. Wanneer de aanroeper is gelezen uit de omgeleide stroom van een onderliggend proces, is afhankelijk van de onderliggende. De leesbewerking wacht de aanroeper totdat de onderliggende naar de stroom schrijft of de stroom wordt gesloten. Wanneer het onderliggende proces voldoende gegevens schrijft voor het vervullen van de omgeleide stroom, is afhankelijk van het bovenliggende item. De volgende schrijfbewerking het onderliggende proces wordt gewacht totdat de bovenliggende van de volledige stroom leest of de stroom wordt gesloten. De impassesituatie treedt op wanneer de aanroeper en het onderliggende proces wacht tot elkaar om een bewerking te voltooien en geen van beide kan worden voortgezet. U kunt impassen voorkomen door het evalueren van afhankelijkheden tussen de aanroeper en het onderliggende proces.       De volgende C#-code ziet u bijvoorbeeld het lezen van een omgeleide stroom en wacht tot het onderliggende proces om af te sluiten.      ```   // Start the child process.    Process p = new Process();    // Redirect the error stream of the child process.    p.StartInfo.UseShellExecute = false;    p.StartInfo.RedirectStandardError = true;    p.StartInfo.FileName = &quot;Write500Lines.exe&quot;;    p.Start();    // Do not wait for the child process to exit before    // reading to the end of its redirected error stream.    // p.WaitForExit();    // Read the error stream first and then wait.    string error = p.StandardError.ReadToEnd();    p.WaitForExit();   ```Het codevoorbeeld een deadlock voorkomt door aan te roepen `p.StandardError.ReadToEnd` voordat `p.WaitForExit`. Een deadlock kan optreden als de bovenliggende aanroepen verwerken `p.WaitForExit` voordat `p.StandardError.ReadToEnd` en het onderliggende proces schrijft voldoende tekst in om aan te vullen van de omgeleide stroom. Het bovenliggende proces zou voor onbepaalde tijd wachten op het onderliggende proces om af te sluiten. Het onderliggende proces voor onbepaalde tijd wilt wachten op het bovenliggende item te lezen van de volledige <xref:System.Diagnostics.Process.StandardError%2A>stream.</xref:System.Diagnostics.Process.StandardError%2A>       Er is een soortgelijk probleem bij het lezen van alle tekst in de standaarduitvoer en de standaardfout stromen. Bijvoorbeeld, voert de volgende C#-code een leesbewerking op beide stromen.      ```   // Do not perform a synchronous read to the end of both   // redirected streams.   // string output = p.StandardOutput.ReadToEnd();   // string error = p.StandardError.ReadToEnd();   // p.WaitForExit();   // Use asynchronous read operations on at least one of the streams.   p.BeginOutputReadLine();   string error = p.StandardError.ReadToEnd();   p.WaitForExit();   ```In het voorbeeld wordt de impassesituatie voorkomen door het uitvoeren van asynchrone leesbewerkingen op de <xref:System.Diagnostics.Process.StandardOutput%2A>stream.</xref:System.Diagnostics.Process.StandardOutput%2A> Een deadlock resulteert als het bovenliggende proces aanroepen `p.StandardOutput.ReadToEnd` gevolgd door `p.StandardError.ReadToEnd` en het onderliggende proces schrijft voldoende tekst in om aan te vullen van de foutstroom. Het bovenliggende proces voor onbepaalde tijd wilt wachten op het onderliggende proces sluit de <xref:System.Diagnostics.Process.StandardOutput%2A>stream.</xref:System.Diagnostics.Process.StandardOutput%2A> Het onderliggende proces voor onbepaalde tijd wilt wachten op het bovenliggende item te lezen van de volledige <xref:System.Diagnostics.Process.StandardError%2A>stream.</xref:System.Diagnostics.Process.StandardError%2A>       U kunt de asynchrone leesbewerkingen gebruiken om te voorkomen dat deze afhankelijkheden en hun mogelijke impasse. U kunt ook de impassesituatie voorkomen door het maken van twee threads en het lezen van de uitvoer van elke stroom op een afzonderlijke thread."
  example:
  - "The following example uses the `net use` command together with a user-supplied argument to map a network resource. It then reads the standard error stream of the net command and writes it to console.  \n  \n [!code-cs[Process_StandardError#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_31_1.cs)]\n [!code-cpp[Process_StandardError#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_31_1.cpp)]\n [!code-vb[Process_StandardError#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_31_1.vb)]"
  syntax:
    content: public bool RedirectStandardError { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de foutuitvoer moet worden geschreven naar &lt;xref:System.Diagnostics.Process.StandardError%2A?displayProperty=fullName&gt;; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.RedirectStandardError*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  id: RedirectStandardInput
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: RedirectStandardInput
  nameWithType: ProcessStartInfo.RedirectStandardInput
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of de invoer voor een toepassing is gelezen vanaf de &lt;xref:System.Diagnostics.Process.StandardInput%2A?displayProperty=fullName&gt; stroom."
  remarks: "Een <xref:System.Diagnostics.Process>invoertekst kunnen worden gelezen vanaf de Standaardinvoerstroom, meestal het toetsenbord.</xref:System.Diagnostics.Process> Door het omleiden van de <xref:System.Diagnostics.Process.StandardInput%2A>stream, kunt u de invoer van een proces programmatisch opgeven.</xref:System.Diagnostics.Process.StandardInput%2A> Bijvoorbeeld, in plaats van de invoer van het toetsenbord, kunt u opgeven tekst van de inhoud van een opgegeven bestand of de uitvoer van een andere toepassing.      > [!NOTE] > Moet u instellen <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>naar `false` als u RedirectStandardInput ingesteld wilt op `true`.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Anders schrijven naar de <xref:System.Diagnostics.Process.StandardInput%2A>stroom er een uitzondering gegenereerd.</xref:System.Diagnostics.Process.StandardInput%2A>"
  example:
  - "The following example illustrates how to redirect the <xref:System.Diagnostics.Process.StandardInput%2A> stream of a process. The `sort` command is a console application that reads and sorts text input.  \n  \n The example starts the `sort` command with redirected input. It then prompts the user for text, and passes the text to the `sort` process through the redirected <xref:System.Diagnostics.Process.StandardInput%2A> stream. The `sort` results are displayed to the user on the console.  \n  \n [!code-cs[Process_StandardInput#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_43_1.cs)]\n [!code-cpp[Process_StandardInput#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_43_1.cpp)]\n [!code-vb[Process_StandardInput#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_43_1.vb)]"
  syntax:
    content: public bool RedirectStandardInput { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de invoer moet worden gelezen vanuit &lt;xref:System.Diagnostics.Process.StandardInput%2A?displayProperty=fullName&gt;; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.RedirectStandardInput*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  id: RedirectStandardOutput
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: RedirectStandardOutput
  nameWithType: ProcessStartInfo.RedirectStandardOutput
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of de uitvoer van de tekst van een toepassing wordt geschreven naar de &lt;xref:System.Diagnostics.Process.StandardOutput%2A?displayProperty=fullName&gt; stroom."
  remarks: "Wanneer een <xref:System.Diagnostics.Process>schrijft tekst naar de standaard stroom tekst wordt doorgaans weergegeven op de console.</xref:System.Diagnostics.Process> Door RedirectStandardOutput in te stellen op `true` omleiden van de <xref:System.Diagnostics.Process.StandardOutput%2A>stream, u kunt bewerken of de uitvoer van een proces te onderdrukken.</xref:System.Diagnostics.Process.StandardOutput%2A> U kunt bijvoorbeeld de tekst filteren, anders opmaken of de uitvoer naar zowel de console en een aangewezen logboekbestand schrijven.      > [!NOTE] > Moet u instellen <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>aan `false` als u RedirectStandardOutput ingesteld wilt op `true`.</xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> Anders lezen van de <xref:System.Diagnostics.Process.StandardOutput%2A>stroom er een uitzondering gegenereerd.</xref:System.Diagnostics.Process.StandardOutput%2A>       De omgeleide <xref:System.Diagnostics.Process.StandardOutput%2A>stroom kan worden gelezen synchroon of asynchroon.</xref:System.Diagnostics.Process.StandardOutput%2A> Methoden zoals <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, en <xref:System.IO.StreamReader.ReadToEnd%2A>synchrone leesbewerkingen op de uitvoerstroom van het proces uitvoeren.</xref:System.IO.StreamReader.ReadToEnd%2A> </xref:System.IO.StreamReader.ReadLine%2A> </xref:System.IO.StreamReader.Read%2A> Deze synchrone lezen bewerkingen niet voltooit tot de bijbehorende <xref:System.Diagnostics.Process>schrijft naar de <xref:System.Diagnostics.Process.StandardOutput%2A>streamen of de stroom wordt gesloten.</xref:System.Diagnostics.Process.StandardOutput%2A> </xref:System.Diagnostics.Process>       Daarentegen <xref:System.Diagnostics.Process.BeginOutputReadLine%2A>begint asynchrone leesbewerkingen op de <xref:System.Diagnostics.Process.StandardOutput%2A>stream.</xref:System.Diagnostics.Process.StandardOutput%2A> </xref:System.Diagnostics.Process.BeginOutputReadLine%2A> Deze methode kan een aangewezen gebeurtenis-handler (Zie <xref:System.Diagnostics.Process.OutputDataReceived>) voor de Stroomuitvoer en onmiddellijk retourneert naar de aanroeper, die andere taken kunt uitvoeren terwijl de Stroomuitvoer van de is omgeleid naar de gebeurtenis-handler.</xref:System.Diagnostics.Process.OutputDataReceived>      > [!NOTE] > De toepassing die wordt verwerkt door de uitvoer van de asynchrone aanroep moet de <xref:System.Diagnostics.Process.WaitForExit%2A>methode om ervoor te zorgen dat de uitvoerbuffer is leeggemaakt.</xref:System.Diagnostics.Process.WaitForExit%2A>       Synchroon lezen bewerkingen introduceren een afhankelijkheid tussen de aanroeper lezen van de <xref:System.Diagnostics.Process.StandardOutput%2A>stroom en de onderliggende proces schrijven naar deze stroom.</xref:System.Diagnostics.Process.StandardOutput%2A> Deze afhankelijkheden kunnen voorwaarden impasse veroorzaken. Wanneer de aanroeper is gelezen uit de omgeleide stroom van een onderliggend proces, is afhankelijk van de onderliggende. De leesbewerking wacht de aanroeper totdat de onderliggende naar de stroom schrijft of de stroom wordt gesloten. Wanneer het onderliggende proces voldoende gegevens schrijft voor het vervullen van de omgeleide stroom, is afhankelijk van het bovenliggende item. De volgende schrijfbewerking het onderliggende proces wordt gewacht totdat de bovenliggende van de volledige stroom leest of de stroom wordt gesloten. De impassesituatie treedt op wanneer de aanroeper en het onderliggende proces wacht tot elkaar om een bewerking te voltooien en geen van beide kan worden voortgezet. U kunt impassen voorkomen door het evalueren van afhankelijkheden tussen de aanroeper en het onderliggende proces.       De volgende C#-code ziet u bijvoorbeeld het lezen van een omgeleide stroom en wacht tot het onderliggende proces om af te sluiten.      ```   Process p = new Process();   p.StartInfo.UseShellExecute = false;   p.StartInfo.RedirectStandardOutput = true;   p.StartInfo.FileName = &quot;Write500Lines.exe&quot;;   p.Start();      // To avoid deadlocks, always read the output stream first and then wait.   string output = p.StandardOutput.ReadToEnd();   p.WaitForExit();   ```Het codevoorbeeld een deadlock voorkomt door aan te roepen `p.StandardOutput.ReadToEnd` voordat `p.WaitForExit`. Een deadlock kan optreden als de bovenliggende aanroepen verwerken `p.WaitForExit` voordat `p.StandardOutput.ReadToEnd` en het onderliggende proces schrijft voldoende tekst in om aan te vullen van de omgeleide stroom. Het bovenliggende proces zou voor onbepaalde tijd wachten op het onderliggende proces om af te sluiten. Het onderliggende proces voor onbepaalde tijd wilt wachten op het bovenliggende item te lezen van de volledige <xref:System.Diagnostics.Process.StandardOutput%2A>stream.</xref:System.Diagnostics.Process.StandardOutput%2A>       Er is een soortgelijk probleem bij het lezen van alle tekst in de standaarduitvoer en de standaardfout stromen. Bijvoorbeeld, voert de volgende C#-code een leesbewerking op beide stromen.      ```   // To avoid deadlocks, use asynchronous read operations on at least one of the streams.   // Do not perform a synchronous read to the end of both redirected streams.   p.BeginOutputReadLine();   string error = p.StandardError.ReadToEnd();   p.WaitForExit();   ```In het voorbeeld wordt de impassesituatie voorkomen door het uitvoeren van asynchrone leesbewerkingen op de <xref:System.Diagnostics.Process.StandardOutput%2A>stream.</xref:System.Diagnostics.Process.StandardOutput%2A> Een deadlock resulteert als het bovenliggende proces aanroepen `p.StandardOutput.ReadToEnd` gevolgd door `p.StandardError.ReadToEnd` en het onderliggende proces schrijft voldoende tekst in om aan te vullen van de foutstroom. Het bovenliggende proces voor onbepaalde tijd wilt wachten op het onderliggende proces sluit de <xref:System.Diagnostics.Process.StandardOutput%2A>stream.</xref:System.Diagnostics.Process.StandardOutput%2A> Het onderliggende proces voor onbepaalde tijd wilt wachten op het bovenliggende item te lezen van de volledige <xref:System.Diagnostics.Process.StandardError%2A>stream.</xref:System.Diagnostics.Process.StandardError%2A>       U kunt de asynchrone leesbewerkingen gebruiken om te voorkomen dat deze afhankelijkheden en hun mogelijke impasse. U kunt ook de impassesituatie voorkomen door het maken van twee threads en het lezen van de uitvoer van elke stroom op een afzonderlijke thread."
  example:
  - >-
    [!code-cpp[ProcessOneStream#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_20_1.cpp)]
     [!code-cs[ProcessOneStream#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_20_1.cs)]
     [!code-vb[ProcessOneStream#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_20_1.vb)]
  syntax:
    content: public bool RedirectStandardOutput { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de uitvoer moet worden geschreven naar &lt;xref:System.Diagnostics.Process.StandardOutput%2A?displayProperty=fullName&gt;; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  id: StandardErrorEncoding
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: StandardErrorEncoding
  nameWithType: ProcessStartInfo.StandardErrorEncoding
  fullName: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van de gewenste codering voor foutuitvoer."
  remarks: "Als de waarde van de eigenschap StandardErrorEncoding `null`, het proces gebruikt de standaardfout standaardversleuteling voor foutuitvoer. De eigenschap StandardErrorEncoding moet worden ingesteld voordat het proces wordt gestart. Als u deze eigenschap kan niet garanderen dat het proces wordt gebruikt de opgegeven codering; het proces wordt alleen de coderingen die deze ondersteuning biedt voor gebruik. De toepassing moet worden getest om te bepalen welke coderingen worden ondersteund."
  syntax:
    content: public System.Text.Encoding StandardErrorEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "Een object met de gewenste codering voor foutuitvoer. De standaardwaarde is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  id: StandardOutputEncoding
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: StandardOutputEncoding
  nameWithType: ProcessStartInfo.StandardOutputEncoding
  fullName: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van de gewenste codering voor standaarduitvoer."
  remarks: "Als de waarde van de eigenschap StandardOutputEncoding `null`, het proces wordt gebruikt in de standaarduitvoer standaardversleuteling aan voor de standaarduitvoer. De eigenschap StandardOutputEncoding moet worden ingesteld voordat het proces wordt gestart. Als u deze eigenschap wordt niet gegarandeerd dat het proces wordt gebruikt de opgegeven codering. De toepassing moet worden getest om te bepalen welke coderingen die het proces ondersteunt."
  syntax:
    content: public System.Text.Encoding StandardOutputEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "Een object dat de voorkeur codering voor standaarduitvoer vertegenwoordigt. De standaardwaarde is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.UserName
  id: UserName
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: UserName
  nameWithType: ProcessStartInfo.UserName
  fullName: System.Diagnostics.ProcessStartInfo.UserName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van de gebruikersnaam moet worden gebruikt wanneer het proces wordt gestart."
  remarks: "> [!IMPORTANT]\n>  The <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> property must be set if UserName and <xref:System.Diagnostics.ProcessStartInfo.Password%2A> are provided. If the property is not set, the default working directory is %SYSTEMROOT%\\system32.  \n  \n If the UserName property is not `null` or an empty string, the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> property must be `false`, or an <xref:System.InvalidOperationException> will be thrown when the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName> method is called."
  syntax:
    content: public string UserName { get; set; }
    return:
      type: System.String
      description: "De gebruikersnaam moet worden gebruikt wanneer het proces wordt gestart."
  overload: System.Diagnostics.ProcessStartInfo.UserName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.UseShellExecute
  id: UseShellExecute
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: UseShellExecute
  nameWithType: ProcessStartInfo.UseShellExecute
  fullName: System.Diagnostics.ProcessStartInfo.UseShellExecute
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld waarmee wordt aangegeven of de shell besturingssysteem gebruiken om het proces te starten."
  remarks: "Deze eigenschap instelt op `false` kunt u de omleidings-invoer, uitvoer en fout stromen.      > [!NOTE] > UseShellExecute moet `false` als de <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>eigenschap is niet `null` of een lege tekenreeks of een <xref:System.InvalidOperationException>gegenereerd wanneer de <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName>methode wordt aangeroepen.</xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName> </xref:System.InvalidOperationException> </xref:System.Diagnostics.ProcessStartInfo.UserName%2A>       Wanneer u de shell besturingssysteem processen te starten, kunt u het starten van elk document (dit is geregistreerde bestandstype die zijn gekoppeld aan een uitvoerbaar bestand met een open standaardactie) en bewerkingen uitvoeren op het bestand, zoals af te drukken, met behulp van de <xref:System.Diagnostics.Process>object.</xref:System.Diagnostics.Process> Wanneer UseShellExecute is `false`, kunt u alleen uitvoerbare bestanden starten via de <xref:System.Diagnostics.Process>object.</xref:System.Diagnostics.Process>      > [!NOTE] > UseShellExecute moet `true` als u de <xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A>eigenschap `true`.</xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A>       De <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A>eigenschap gedraagt zich anders, afhankelijk van de waarde van de eigenschap UseShellExecute.</xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> Wanneer UseShellExecute is `true`, wordt de <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A>-eigenschap geeft op de locatie van het uitvoerbare bestand.</xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> Als <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A>is een lege tekenreeks, wordt ervan uitgegaan dat de huidige map het uitvoerbare bestand bevat.</xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A>       Wanneer UseShellExecute is `false`, wordt de <xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A>eigenschap wordt niet gebruikt om het uitvoerbare bestand vinden.</xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A> In plaats daarvan wordt deze alleen door het proces dat wordt gestart en is alleen nuttig binnen de context van het nieuwe proces gebruikt. Wanneer UseShellExecute is `false`, wordt de <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>eigenschap kan bestaan uit een volledig gekwalificeerde pad naar het uitvoerbare bestand of een eenvoudige uitvoerbare naam die wordt geprobeerd om te zoeken in mappen die zijn opgegeven door de omgevingsvariabele PATH.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A>"
  example:
  - >-
    [!code-cpp[ProcessOneStream#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_44_1.cpp)]
     [!code-cs[ProcessOneStream#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_44_1.cs)]
     [!code-vb[ProcessOneStream#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_44_1.vb)]
  syntax:
    content: public bool UseShellExecute { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de shell moet worden gebruikt bij het starten van het proces; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> als het proces rechtstreeks vanuit het uitvoerbare bestand moet worden gemaakt. De standaardwaarde is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.UseShellExecute*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Verb
  id: Verb
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Verb
  nameWithType: ProcessStartInfo.Verb
  fullName: System.Diagnostics.ProcessStartInfo.Verb
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van de term moet worden gebruikt bij het openen van de toepassing of het document dat is opgegeven door de <xref:System.Diagnostics.ProcessStartInfo.FileName*>eigenschap.</xref:System.Diagnostics.ProcessStartInfo.FileName*>"
  remarks: "Elke extensie heeft een eigen set van termen die kunnen worden verkregen met behulp van de <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A>eigenschap.</xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> Bijvoorbeeld, de &quot;`print`&quot; term wordt een document dat is opgegeven met behulp van <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> afdrukken De standaardactie kan worden opgegeven met behulp van een lege tekenreeks (&quot;&quot;). Voorbeelden van woorden zijn &quot;Bewerken&quot;, &quot;Openen&quot;, &quot;OpenAsReadOnly&quot;, &quot;Print&quot; en &quot;Printto&quot;. Alleen termen die worden weergegeven in de reeks bewerkingen die door het resultaat moet u de <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A>eigenschap.</xref:System.Diagnostics.ProcessStartInfo.Verbs%2A>       Wanneer u de eigenschap bewerking gebruikt, moet u de bestandsnaamextensie opnemen wanneer u de waarde van de <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>eigenschap.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> De bestandsnaam hoeft niet te hebben de extensie als u handmatig een waarde voor de eigenschap term opgeeft."
  example:
  - "The following code example starts a new process by using the specified verb and file name. This code example is part of a larger example provided for the <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> property.  \n  \n [!code-vb[ProcessVerbs_Diagnostics#4](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_9_1.vb)]\n [!code-cs[ProcessVerbs_Diagnostics#4](~/add/codesnippet/csharp/p-system.diagnostics.pro_9_1.cs)]"
  syntax:
    content: public string Verb { get; set; }
    return:
      type: System.String
      description: "De actie die moet worden uitgevoerd op het bestand dat het proces wordt geopend. De standaardwaarde is een lege tekenreeks (&quot;&quot;), die geeft aan dat er geen actie."
  overload: System.Diagnostics.ProcessStartInfo.Verb*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.Verbs
  id: Verbs
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: Verbs
  nameWithType: ProcessStartInfo.Verbs
  fullName: System.Diagnostics.ProcessStartInfo.Verbs
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald van de reeks bewerkingen die zijn gekoppeld aan het type dat is opgegeven door de <xref:System.Diagnostics.ProcessStartInfo.FileName*>eigenschap.</xref:System.Diagnostics.ProcessStartInfo.FileName*>"
  remarks: "De eigenschap termen kunt u bepalen van de termen die kunnen worden gebruikt met het bestand dat is opgegeven door de <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>eigenschap.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> U kunt instellen de <xref:System.Diagnostics.ProcessStartInfo.Verb%2A>eigenschap met de waarde van elke bewerking in de set.</xref:System.Diagnostics.ProcessStartInfo.Verb%2A> Voorbeelden van woorden zijn &quot;Bewerken&quot;, &quot;Openen&quot;, &quot;OpenAsReadOnly&quot;, &quot;Print&quot; en &quot;Printto&quot;.       Wanneer u de eigenschap termen gebruikt, moet u de bestandsnaamextensie opnemen wanneer u de waarde van de <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>eigenschap.</xref:System.Diagnostics.ProcessStartInfo.FileName%2A> De bestandsnaamextensie bepaalt de reeks mogelijke termen."
  example:
  - "The following code example displays the defined verbs for the chosen file name. If the user selects one of the defined verbs, the example starts a new process using the selected verb and the input file name.  \n  \n [!code-vb[ProcessVerbs_Diagnostics#3](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_7_1.vb)]\n [!code-cs[ProcessVerbs_Diagnostics#3](~/add/codesnippet/csharp/p-system.diagnostics.pro_7_1.cs)]"
  syntax:
    content: public string[] Verbs { get; }
    return:
      type: System.String[]
      description: "De acties die het systeem op het bestand toepassen kunt aangegeven door de <xref:System.Diagnostics.ProcessStartInfo.FileName*>eigenschap.</xref:System.Diagnostics.ProcessStartInfo.FileName*>"
  overload: System.Diagnostics.ProcessStartInfo.Verbs*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.WindowStyle
  id: WindowStyle
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: WindowStyle
  nameWithType: ProcessStartInfo.WindowStyle
  fullName: System.Diagnostics.ProcessStartInfo.WindowStyle
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van de status van het venster moet worden gebruikt wanneer het proces wordt gestart."
  remarks: ''
  example:
  - >-
    [!code-vb[Process.Start_static#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_42_1.vb)]
     [!code-cs[Process.Start_static#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_42_1.cs)]
     [!code-cpp[Process.Start_static#1](~/add/codesnippet/cpp/p-system.diagnostics.pro_42_1.cpp)]
  syntax:
    content: public System.Diagnostics.ProcessWindowStyle WindowStyle { get; set; }
    return:
      type: System.Diagnostics.ProcessWindowStyle
      description: "Een van de opsommingswaarden die aangeeft of het proces wordt gestart in een venster dat wordt gemaximaliseerd geminimaliseerd, normaal (geen van beide gemaximaliseerd of geminimaliseerd), of niet zichtbaar. De standaardwaarde is <xref uid=&quot;langword_csharp_Normal&quot; name=&quot;Normal&quot; href=&quot;&quot;> </xref>."
  overload: System.Diagnostics.ProcessStartInfo.WindowStyle*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "De vensterstijl is niet een van de <xref href=&quot;System.Diagnostics.ProcessWindowStyle&quot;> </xref> leden van de opsomming."
  platform:
  - net462
- uid: System.Diagnostics.ProcessStartInfo.WorkingDirectory
  id: WorkingDirectory
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  name: WorkingDirectory
  nameWithType: ProcessStartInfo.WorkingDirectory
  fullName: System.Diagnostics.ProcessStartInfo.WorkingDirectory
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Wanneer de <> </> *> eigenschap is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, opgehaald of ingesteld van de werkmap voor het proces moet worden gestart. Wanneer <> </> *> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, opgehaald of ingesteld van de map waarin het proces moet worden gestart."
  remarks: "> [!IMPORTANT]\n>  The WorkingDirectory property must be set if <xref:System.Diagnostics.ProcessStartInfo.UserName%2A> and <xref:System.Diagnostics.ProcessStartInfo.Password%2A> are provided. If the property is not set, the default working directory is %SYSTEMROOT%\\system32.  \n  \n If the directory is already part of the system path variable, you do not have to repeat the directory's location in this property.  \n  \n The WorkingDirectory property behaves differently when <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` than when <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `false`. When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, the WorkingDirectory property specifies the location of the executable. If WorkingDirectory is an empty string, the current directory is understood to contain the executable.  \n  \n> [!NOTE]\n>  When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true`, the working directory of the application that starts the executable is also the working directory of the executable.  \n  \n When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `false`, the WorkingDirectory property is not used to find the executable. Instead, its value applies to the process that is started and only has meaning within the context of the new process."
  syntax:
    content: public string WorkingDirectory { get; set; }
    return:
      type: System.String
      description: "Wanneer <> </> *> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, de volledig gekwalificeerde naam van de map waarin het proces moet worden gestart. Wanneer de <> </> *> eigenschap is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>, de werkmap voor het proces moet worden gestart. De standaardwaarde is een lege tekenreeks (&quot;&quot;)."
  overload: System.Diagnostics.ProcessStartInfo.WorkingDirectory*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Diagnostics.ProcessStartInfo.#ctor
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ProcessStartInfo()
  nameWithType: ProcessStartInfo.ProcessStartInfo()
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo()
- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String)
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ProcessStartInfo(String)
  nameWithType: ProcessStartInfo.ProcessStartInfo(String)
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ProcessStartInfo(String,String)
  nameWithType: ProcessStartInfo.ProcessStartInfo(String,String)
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(String,String)
- uid: System.Diagnostics.ProcessStartInfo.Arguments
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Arguments
  nameWithType: ProcessStartInfo.Arguments
  fullName: System.Diagnostics.ProcessStartInfo.Arguments
- uid: System.Diagnostics.ProcessStartInfo.CreateNoWindow
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: CreateNoWindow
  nameWithType: ProcessStartInfo.CreateNoWindow
  fullName: System.Diagnostics.ProcessStartInfo.CreateNoWindow
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.ProcessStartInfo.Domain
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Domain
  nameWithType: ProcessStartInfo.Domain
  fullName: System.Diagnostics.ProcessStartInfo.Domain
- uid: System.Diagnostics.ProcessStartInfo.Environment
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Environment
  nameWithType: ProcessStartInfo.Environment
  fullName: System.Diagnostics.ProcessStartInfo.Environment
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Diagnostics.ProcessStartInfo.EnvironmentVariables
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: EnvironmentVariables
  nameWithType: ProcessStartInfo.EnvironmentVariables
  fullName: System.Diagnostics.ProcessStartInfo.EnvironmentVariables
- uid: System.Collections.Specialized.StringDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: System.Collections.Specialized.StringDictionary
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialog
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ErrorDialog
  nameWithType: ProcessStartInfo.ErrorDialog
  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialog
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ErrorDialogParentHandle
  nameWithType: ProcessStartInfo.ErrorDialogParentHandle
  fullName: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Diagnostics.ProcessStartInfo.FileName
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: FileName
  nameWithType: ProcessStartInfo.FileName
  fullName: System.Diagnostics.ProcessStartInfo.FileName
- uid: System.Diagnostics.ProcessStartInfo.LoadUserProfile
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: LoadUserProfile
  nameWithType: ProcessStartInfo.LoadUserProfile
  fullName: System.Diagnostics.ProcessStartInfo.LoadUserProfile
- uid: System.Diagnostics.ProcessStartInfo.Password
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Password
  nameWithType: ProcessStartInfo.Password
  fullName: System.Diagnostics.ProcessStartInfo.Password
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Diagnostics.ProcessStartInfo.PasswordInClearText
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: PasswordInClearText
  nameWithType: ProcessStartInfo.PasswordInClearText
  fullName: System.Diagnostics.ProcessStartInfo.PasswordInClearText
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardError
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardError
  nameWithType: ProcessStartInfo.RedirectStandardError
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardError
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardInput
  nameWithType: ProcessStartInfo.RedirectStandardInput
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardInput
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardOutput
  nameWithType: ProcessStartInfo.RedirectStandardOutput
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
- uid: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: StandardErrorEncoding
  nameWithType: ProcessStartInfo.StandardErrorEncoding
  fullName: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: StandardOutputEncoding
  nameWithType: ProcessStartInfo.StandardOutputEncoding
  fullName: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
- uid: System.Diagnostics.ProcessStartInfo.UserName
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: UserName
  nameWithType: ProcessStartInfo.UserName
  fullName: System.Diagnostics.ProcessStartInfo.UserName
- uid: System.Diagnostics.ProcessStartInfo.UseShellExecute
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: UseShellExecute
  nameWithType: ProcessStartInfo.UseShellExecute
  fullName: System.Diagnostics.ProcessStartInfo.UseShellExecute
- uid: System.Diagnostics.ProcessStartInfo.Verb
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Verb
  nameWithType: ProcessStartInfo.Verb
  fullName: System.Diagnostics.ProcessStartInfo.Verb
- uid: System.Diagnostics.ProcessStartInfo.Verbs
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Verbs
  nameWithType: ProcessStartInfo.Verbs
  fullName: System.Diagnostics.ProcessStartInfo.Verbs
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.ProcessStartInfo.WindowStyle
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: WindowStyle
  nameWithType: ProcessStartInfo.WindowStyle
  fullName: System.Diagnostics.ProcessStartInfo.WindowStyle
- uid: System.Diagnostics.ProcessWindowStyle
  parent: System.Diagnostics
  isExternal: false
  name: ProcessWindowStyle
  nameWithType: ProcessWindowStyle
  fullName: System.Diagnostics.ProcessWindowStyle
- uid: System.Diagnostics.ProcessStartInfo.WorkingDirectory
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: WorkingDirectory
  nameWithType: ProcessStartInfo.WorkingDirectory
  fullName: System.Diagnostics.ProcessStartInfo.WorkingDirectory
- uid: System.Diagnostics.ProcessStartInfo.#ctor*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ProcessStartInfo
  nameWithType: ProcessStartInfo.ProcessStartInfo
- uid: System.Diagnostics.ProcessStartInfo.Arguments*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Arguments
  nameWithType: ProcessStartInfo.Arguments
- uid: System.Diagnostics.ProcessStartInfo.CreateNoWindow*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: CreateNoWindow
  nameWithType: ProcessStartInfo.CreateNoWindow
- uid: System.Diagnostics.ProcessStartInfo.Domain*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Domain
  nameWithType: ProcessStartInfo.Domain
- uid: System.Diagnostics.ProcessStartInfo.Environment*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Environment
  nameWithType: ProcessStartInfo.Environment
- uid: System.Diagnostics.ProcessStartInfo.EnvironmentVariables*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: EnvironmentVariables
  nameWithType: ProcessStartInfo.EnvironmentVariables
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialog*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ErrorDialog
  nameWithType: ProcessStartInfo.ErrorDialog
- uid: System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: ErrorDialogParentHandle
  nameWithType: ProcessStartInfo.ErrorDialogParentHandle
- uid: System.Diagnostics.ProcessStartInfo.FileName*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: FileName
  nameWithType: ProcessStartInfo.FileName
- uid: System.Diagnostics.ProcessStartInfo.LoadUserProfile*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: LoadUserProfile
  nameWithType: ProcessStartInfo.LoadUserProfile
- uid: System.Diagnostics.ProcessStartInfo.Password*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Password
  nameWithType: ProcessStartInfo.Password
- uid: System.Diagnostics.ProcessStartInfo.PasswordInClearText*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: PasswordInClearText
  nameWithType: ProcessStartInfo.PasswordInClearText
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardError*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardError
  nameWithType: ProcessStartInfo.RedirectStandardError
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardInput*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardInput
  nameWithType: ProcessStartInfo.RedirectStandardInput
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: RedirectStandardOutput
  nameWithType: ProcessStartInfo.RedirectStandardOutput
- uid: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: StandardErrorEncoding
  nameWithType: ProcessStartInfo.StandardErrorEncoding
- uid: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: StandardOutputEncoding
  nameWithType: ProcessStartInfo.StandardOutputEncoding
- uid: System.Diagnostics.ProcessStartInfo.UserName*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: UserName
  nameWithType: ProcessStartInfo.UserName
- uid: System.Diagnostics.ProcessStartInfo.UseShellExecute*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: UseShellExecute
  nameWithType: ProcessStartInfo.UseShellExecute
- uid: System.Diagnostics.ProcessStartInfo.Verb*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Verb
  nameWithType: ProcessStartInfo.Verb
- uid: System.Diagnostics.ProcessStartInfo.Verbs*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: Verbs
  nameWithType: ProcessStartInfo.Verbs
- uid: System.Diagnostics.ProcessStartInfo.WindowStyle*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: WindowStyle
  nameWithType: ProcessStartInfo.WindowStyle
- uid: System.Diagnostics.ProcessStartInfo.WorkingDirectory*
  parent: System.Diagnostics.ProcessStartInfo
  isExternal: false
  name: WorkingDirectory
  nameWithType: ProcessStartInfo.WorkingDirectory
