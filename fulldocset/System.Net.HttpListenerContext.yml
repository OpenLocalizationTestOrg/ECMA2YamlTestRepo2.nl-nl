### YamlMime:ManagedReference
items:
- uid: System.Net.HttpListenerContext
  id: HttpListenerContext
  children:
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  - System.Net.HttpListenerContext.Request
  - System.Net.HttpListenerContext.Response
  - System.Net.HttpListenerContext.User
  langs:
  - csharp
  name: HttpListenerContext
  nameWithType: HttpListenerContext
  fullName: System.Net.HttpListenerContext
  type: Class
  summary: "Biedt toegang tot de aanvraag en antwoord-objecten die worden gebruikt door de <xref href=&quot;System.Net.HttpListener&quot;> </xref> klasse. Deze klasse kan niet worden overgenomen."
  remarks: "Deze klasse bevat de informatie die betrekking hebben op verzoek van een client-Hypertext Transfer Protocol (HTTP) dat wordt verwerkt door een <xref:System.Net.HttpListener>object.</xref:System.Net.HttpListener> Deze klasse heeft ook methoden toe waarmee een <xref:System.Net.HttpListener>object te accepteren van WebSocket-verbinding.</xref:System.Net.HttpListener>       De <xref:System.Net.HttpListener.GetContext%2A>methode retourneert exemplaren van de klasse HttpListenerContext.</xref:System.Net.HttpListener.GetContext%2A> Als u het object waarmee de clientaanvraag, gebruikt de <xref:System.Net.HttpListenerContext.Request%2A>eigenschap.</xref:System.Net.HttpListenerContext.Request%2A> Ophalen van het object waarmee de reactie die wordt verzonden naar de client door de <xref:System.Net.HttpListener>, gebruiken de <xref:System.Net.HttpListenerContext.Response%2A>eigenschap.</xref:System.Net.HttpListenerContext.Response%2A> </xref:System.Net.HttpListener> Gebruiker informatie over de client verzenden van de aanvraag, zoals de aanmeldingsnaam en dit of het is geverifieerd, u kunt de eigenschappen in een query de <xref:System.Security.Principal.IPrincipal>object dat wordt geretourneerd door de <xref:System.Net.HttpListenerContext.User%2A>eigenschap.</xref:System.Net.HttpListenerContext.User%2A> </xref:System.Security.Principal.IPrincipal>       Sluiten van een object HttpListenerContext verzendt het antwoord op de client en alle resources die worden gebruikt door de HttpListenerContext maakt. Een object HttpListenerContext wordt afgebroken, wordt het antwoord op de client verwijderd als deze niet al is verzonden en worden alle bronnen die wordt gebruikt door de HttpListenerContext vrijgemaakt. Na het sluiten of afbreken van een object HttpListenerContext, kan niet u verwijzen naar de methoden of eigenschappen. Als u doet dit, ontvangt u een <xref:System.ObjectDisposedException>uitzondering.</xref:System.ObjectDisposedException>"
  example:
  - "The following code example displays the user information for a client request.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/t-system.net.httplistene_0_1.cs)]"
  syntax:
    content: public sealed class HttpListenerContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  id: AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "WebSocket-verbinding als een asynchrone bewerking accepteren."
  remarks: "Deze bewerking wordt niet geblokkeerd. De geretourneerde <xref:System.Threading.Tasks.Task%601>object wordt voltooid nadat de WebSocket-verbinding is geaccepteerd.</xref:System.Threading.Tasks.Task%601>       De grootte van de ontvangstbuffer is 16,385 bytes. De WebSocket-keepalive-interval is ingesteld op de standaardwaarde van 30.000 (30 seconden)."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol);
    parameters:
    - id: subProtocol
      type: System.String
      description: "De ondersteunde WebSocket-subprotocol."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Retourneert &lt;xref:System.Threading.Tasks.Task%601&gt;.       Het taakobject dat de asynchrone bewerking vertegenwoordigt. De &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; eigenschap voor het taakobject retourneert een <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> object."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>een lege tekenreeks - of - <code>subProtocol</code> bevat ongeldige tekens."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Er is een fout opgetreden bij het verzenden van het antwoord op de WebSocket-handshake te voltooien."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "De ondersteunde WebSocket-subprotocol en keepalive-interval van WebSocket opgeven als een asynchrone bewerking WebSocket verbinding accepteren."
  remarks: "Deze bewerking wordt niet geblokkeerd. De geretourneerde <xref:System.Threading.Tasks.Task%601>object wordt voltooid nadat de WebSocket-verbinding is geaccepteerd.</xref:System.Threading.Tasks.Task%601>       De grootte van de ontvangstbuffer is 16,385 bytes."
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "De ondersteunde WebSocket-subprotocol."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "Het WebSocket-protocol keepalive-interval in milliseconden."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Retourneert &lt;xref:System.Threading.Tasks.Task%601&gt;.       Het taakobject dat de asynchrone bewerking vertegenwoordigt. De &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; eigenschap voor het taakobject retourneert een <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> object."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>een lege tekenreeks - of - <code>subProtocol</code> bevat ongeldige tekens."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>is te klein."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Er is een fout opgetreden bij het verzenden van het antwoord op de WebSocket-handshake te voltooien."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Een WebSocket-verbinding voor het opgeven van de ondersteunde WebSocket-subprotocol accepteren, ontvangen buffergrootte en keepalive-interval van de WebSocket als een asynchrone bewerking."
  remarks: "Deze bewerking wordt niet geblokkeerd. De geretourneerde <xref:System.Threading.Tasks.Task%601>> object wordt voltooid nadat de WebSocket-verbinding is geaccepteerd.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "De ondersteunde WebSocket-subprotocol."
    - id: receiveBufferSize
      type: System.Int32
      description: "Grootte van de ontvangstbuffers in bytes."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "Het WebSocket-protocol keepalive-interval in milliseconden."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Retourneert &lt;xref:System.Threading.Tasks.Task%601&gt;.       Het taakobject dat de asynchrone bewerking vertegenwoordigt. De &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; eigenschap voor het taakobject retourneert een <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> object."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>een lege tekenreeks - of - <code>subProtocol</code> bevat ongeldige tekens."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>is te klein.       - of - <code>receiveBufferSize</code> is minder dan 16 bytes - of - <code>receiveBufferSize</code> is groter dan 64 kB."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Er is een fout opgetreden bij het verzenden van het antwoord op de WebSocket-handshake te voltooien."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Een WebSocket-verbinding voor het opgeven van de ondersteunde WebSocket-subprotocol accepteren, ontvangen buffergrootte WebSocket keepalive-interval en de interne buffer als een asynchrone bewerking."
  remarks: "Deze bewerking wordt niet geblokkeerd. De geretourneerde <xref:System.Threading.Tasks.Task%601>object wordt voltooid nadat de WebSocket-verbinding is geaccepteerd.</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment<byte> internalBuffer);
    parameters:
    - id: subProtocol
      type: System.String
      description: "De ondersteunde WebSocket-subprotocol."
    - id: receiveBufferSize
      type: System.Int32
      description: "Grootte van de ontvangstbuffers in bytes."
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "Het WebSocket-protocol keepalive-interval in milliseconden."
    - id: internalBuffer
      type: System.ArraySegment{System.Byte}
      description: "Een interne buffer voor deze bewerking."
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "Retourneert &lt;xref:System.Threading.Tasks.Task%601&gt;.       Het taakobject dat de asynchrone bewerking vertegenwoordigt. De &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; eigenschap voor het taakobject retourneert een <xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;> </xref> object."
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>een lege tekenreeks - of - <code>subProtocol</code> bevat ongeldige tekens."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>is te klein.       - of - <code>receiveBufferSize</code> is minder dan 16 bytes - of - <code>receiveBufferSize</code> is groter dan 64 kB."
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "Er is een fout opgetreden bij het verzenden van het antwoord op de WebSocket-handshake te voltooien."
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Request
  id: Request
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Haalt de <xref href=&quot;System.Net.HttpListenerRequest&quot;> </xref> die staat voor een clientaanvraag voor een resource."
  remarks: "Als u dit sluit <xref:System.Net.HttpListenerContext>, stuurt het antwoord op de client, sluit de <xref:System.Net.HttpListenerResponse>die bevat het antwoord en sluit de <xref:System.Net.HttpListenerRequest>object dat wordt geretourneerd door deze eigenschap.</xref:System.Net.HttpListenerRequest> </xref:System.Net.HttpListenerResponse> </xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example demonstrates calling this method. The `listener` variable holds an <xref:System.Net.HttpListener> object.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_16_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerRequest Request { get; }
    return:
      type: System.Net.HttpListenerRequest
      description: "Een <xref href=&quot;System.Net.HttpListenerRequest&quot;> </xref> -object met de clientaanvraag."
  overload: System.Net.HttpListenerContext.Request*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Response
  id: Response
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Haalt de <xref href=&quot;System.Net.HttpListenerResponse&quot;> </xref> -object dat wordt verzonden naar de client in reactie op aanvraag van de client."
  remarks: "Uw toepassing configureert het antwoord door het instellen van eigenschappen in de <xref:System.Net.HttpListenerResponse>object dat wordt geretourneerd door deze eigenschap.</xref:System.Net.HttpListenerResponse> Na het configureren van het antwoord u verzenden naar de client door het sluiten van het antwoord of sluit dit <xref:System.Net.HttpListenerContext>object.</xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example demonstrates getting the response to a client's request and adding the response body.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_35_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerResponse Response { get; }
    return:
      type: System.Net.HttpListenerResponse
      description: "Een <xref href=&quot;System.Net.HttpListenerResponse&quot;> </xref> object dat wordt gebruikt om een antwoord terug naar de client te verzenden."
  overload: System.Net.HttpListenerContext.Response*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.User
  id: User
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Haalt een object dat wordt gebruikt voor het verkrijgen van identiteit, verificatie-informatie en beveiligingsrollen voor de client met een verzoek wordt vertegenwoordigd door dit <xref href=&quot;System.Net.HttpListenerContext&quot;> </xref> object."
  remarks: "Een <xref:System.Net.HttpListener>geeft aan dat verificatie met behulp van vereist de <xref:System.Net.HttpListener.AuthenticationSchemes%2A>eigenschap of geef een <xref:System.Net.AuthenticationSchemeSelector>delegeren met behulp van de <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>eigenschap.</xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> </xref:System.Net.AuthenticationSchemeSelector> </xref:System.Net.HttpListener.AuthenticationSchemes%2A> </xref:System.Net.HttpListener>       Aanmeldingsnaam van de client en de verificatie-informatie wilt vaststellen, Controleer de <xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>eigenschap in het object dat wordt geretourneerd door deze eigenschap.</xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates accessing identity and authentication information about the client, and returning it to the client in the response.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/p-system.net.httplistene_19_1.cs)]"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "Een <xref:System.Security.Principal.IPrincipal>object die worden beschreven van de client of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als de <xref href=&quot;System.Net.HttpListener&quot;> </xref> die dit opgegeven <xref href=&quot;System.Net.HttpListenerContext&quot;> </xref> geen verificatie vereist.</xref:System.Security.Principal.IPrincipal>"
  overload: System.Net.HttpListenerContext.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.WebSockets.WebSocketException
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketException
  nameWithType: WebSocketException
  fullName: System.Net.WebSockets.WebSocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpListenerWebSocketContext>
  nameWithType: Task<HttpListenerWebSocketContext>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.HttpListenerWebSocketContext
    name: HttpListenerWebSocketContext
    nameWithType: HttpListenerWebSocketContext
    fullName: HttpListenerWebSocketContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.HttpListenerContext.Request
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
- uid: System.Net.HttpListenerRequest
  parent: System.Net
  isExternal: false
  name: HttpListenerRequest
  nameWithType: HttpListenerRequest
  fullName: System.Net.HttpListenerRequest
- uid: System.Net.HttpListenerContext.Response
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
- uid: System.Net.HttpListenerResponse
  parent: System.Net
  isExternal: false
  name: HttpListenerResponse
  nameWithType: HttpListenerResponse
  fullName: System.Net.HttpListenerResponse
- uid: System.Net.HttpListenerContext.User
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync
  nameWithType: HttpListenerContext.AcceptWebSocketAsync
- uid: System.Net.HttpListenerContext.Request*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
- uid: System.Net.HttpListenerContext.Response*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
- uid: System.Net.HttpListenerContext.User*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
