### YamlMime:ManagedReference
items:
- uid: System.Messaging.Message
  id: Message
  children:
  - System.Messaging.Message.#ctor
  - System.Messaging.Message.#ctor(System.Object)
  - System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  - System.Messaging.Message.AcknowledgeType
  - System.Messaging.Message.Acknowledgment
  - System.Messaging.Message.AdministrationQueue
  - System.Messaging.Message.AppSpecific
  - System.Messaging.Message.ArrivedTime
  - System.Messaging.Message.AttachSenderId
  - System.Messaging.Message.Authenticated
  - System.Messaging.Message.AuthenticationProviderName
  - System.Messaging.Message.AuthenticationProviderType
  - System.Messaging.Message.Body
  - System.Messaging.Message.BodyStream
  - System.Messaging.Message.BodyType
  - System.Messaging.Message.ConnectorType
  - System.Messaging.Message.CorrelationId
  - System.Messaging.Message.DestinationQueue
  - System.Messaging.Message.DestinationSymmetricKey
  - System.Messaging.Message.DigitalSignature
  - System.Messaging.Message.EncryptionAlgorithm
  - System.Messaging.Message.Extension
  - System.Messaging.Message.Formatter
  - System.Messaging.Message.HashAlgorithm
  - System.Messaging.Message.Id
  - System.Messaging.Message.InfiniteTimeout
  - System.Messaging.Message.IsFirstInTransaction
  - System.Messaging.Message.IsLastInTransaction
  - System.Messaging.Message.Label
  - System.Messaging.Message.LookupId
  - System.Messaging.Message.MessageType
  - System.Messaging.Message.Priority
  - System.Messaging.Message.Recoverable
  - System.Messaging.Message.ResponseQueue
  - System.Messaging.Message.SecurityContext
  - System.Messaging.Message.SenderCertificate
  - System.Messaging.Message.SenderId
  - System.Messaging.Message.SenderVersion
  - System.Messaging.Message.SentTime
  - System.Messaging.Message.SourceMachine
  - System.Messaging.Message.TimeToBeReceived
  - System.Messaging.Message.TimeToReachQueue
  - System.Messaging.Message.TransactionId
  - System.Messaging.Message.TransactionStatusQueue
  - System.Messaging.Message.UseAuthentication
  - System.Messaging.Message.UseDeadLetterQueue
  - System.Messaging.Message.UseEncryption
  - System.Messaging.Message.UseJournalQueue
  - System.Messaging.Message.UseTracing
  langs:
  - csharp
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
  type: Class
  summary: "Biedt toegang tot de eigenschappen voor het definiëren van een Message Queuing-bericht."
  remarks: "Gebruik de berichtklasse inspecteren of ontvangen van berichten uit een wachtrij of hebben berichteigenschappen nauwkeurig bepalen wanneer een bericht verzenden naar een wachtrij.       <xref:System.Messaging.MessageQueue>de berichtklasse gebruikt wanneer het geeft weer of berichten van wachtrijen ontvangt, omdat zowel de <xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName>en <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName>methoden maken van een nieuw exemplaar van de berichtklassen en stel de eigenschappen van het exemplaar.</xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=fullName></xref:System.Messaging.MessageQueue> De berichtklasse alleen-lezen eigenschappen van toepassing op het ophalen van berichten uit een wachtrij, terwijl de lezen/schrijven-eigenschappen gelden voor het verzenden en ophalen van berichten. Wanneer <xref:System.Messaging.MessageQueue>geeft weer of een bericht van een wachtrij ontvangt de <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A>eigenschap bepaalt welke van de eigenschappen van het bericht worden opgehaald.</xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> </xref:System.Messaging.MessageQueue>       De <xref:System.Messaging.MessageQueue>van de klasse <xref:System.Messaging.MessageQueue.Send%2A>methode kunt u elk objecttype voor een bericht dat wordt verzonden naar die wachtrij opgeven.</xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.MessageQueue> U kunt de <xref:System.Messaging.MessageQueue>van het exemplaar <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>eigenschap instellingen opgeven voor algemene berichten die worden verzonden naar de wachtrij.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> </xref:System.Messaging.MessageQueue> De typen instellingen bevatten indelingsfunctie, label, versleuteling en verificatie. U kunt ook waarden opgeven voor de juiste <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>leden wanneer u uw toepassing messaging te reageren op de bevestigings- en berichten coördineren.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> Met behulp van een Message-exemplaar een bericht te verzenden naar de wachtrij biedt u de flexibiliteit om te openen en te wijzigen van veel van deze eigenschappen: voor één bericht of op basis van door bericht. Eigenschappen van berichten, hebben voorrang boven <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>       Berichtgegevens worden opgeslagen in de <xref:System.Messaging.Message.Body%2A>eigenschap en mindere mate, de <xref:System.Messaging.Message.AppSpecific%2A>en <xref:System.Messaging.Message.Extension%2A>Eigenschappen.</xref:System.Messaging.Message.Extension%2A> </xref:System.Messaging.Message.AppSpecific%2A> </xref:System.Messaging.Message.Body%2A> Wanneer berichtgegevens is versleuteld, geserialiseerd of gedeserialiseerd, alleen de inhoud van de <xref:System.Messaging.Message.Body%2A>eigenschap worden beïnvloed.</xref:System.Messaging.Message.Body%2A>       De inhoud van de <xref:System.Messaging.Message.Body%2A>eigenschap worden geserialiseerd wanneer het bericht wordt verzonden, met behulp van de <xref:System.Messaging.Message.Formatter%2A>eigenschap die u opgeeft.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.Body%2A> De geserialiseerde inhoud vindt u in de <xref:System.Messaging.Message.BodyStream%2A>eigenschap.</xref:System.Messaging.Message.BodyStream%2A> U kunt ook instellen de <xref:System.Messaging.Message.BodyStream%2A>eigenschap rechtstreeks, bijvoorbeeld om een bestand als de gegevensinhoud van een bericht verzenden.</xref:System.Messaging.Message.BodyStream%2A> U kunt de wijzigen <xref:System.Messaging.Message.Body%2A>of <xref:System.Messaging.Message.Formatter%2A>Eigenschappen op elk gewenst moment voordat het bericht en de gegevens worden verzonden, op de juiste wijze worden geserialiseerd wanneer u <xref:System.Messaging.MessageQueue.Send%2A>.</xref:System.Messaging.MessageQueue.Send%2A> aanroepen</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.Body%2A>       De eigenschappen gedefinieerd door de <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName>eigenschap alleen van toepassing op berichten die niet van het type Message.</xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=fullName> Als u opgeeft de <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>eigenschap voor een <xref:System.Messaging.MessageQueue>, exact dezelfde naam eigenschappen in een Message-exemplaar dat is verzonden naar die wachtrij ervoor zorgen dat deze standaardeigenschappen worden genegeerd.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>       Zie voor een lijst met eerste eigenschapswaarden voor een exemplaar van het bericht, de <xref:System.Messaging.Message.%23ctor%2A>constructor.</xref:System.Messaging.Message.%23ctor%2A>"
  example:
  - "The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \n  \n [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/t-system.messaging.message_1.cpp)]\n [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/t-system.messaging.message_1.cs)]\n [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/t-system.messaging.message_1.vb)]  \n  \n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/t-system.messaging.message_2.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/t-system.messaging.message_2.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/t-system.messaging.message_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public class Message : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.Message.#ctor
  id: '#ctor'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message()
  nameWithType: Message.Message()
  fullName: System.Messaging.Message.Message()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Messaging.Message&quot;> </xref> klasse met een lege hoofdtekst."
  remarks: "Deze overbelasting gebruiken voor het maken van een nieuw exemplaar van de <xref:System.Messaging.Message>klasse met een lege hoofdtekst.</xref:System.Messaging.Message>       Geef ofwel de <xref:System.Messaging.Message.Body%2A>eigenschap of de <xref:System.Messaging.Message.BodyStream%2A>eigenschap voor het verzenden van de <xref:System.Messaging.Message>object.</xref:System.Messaging.Message> </xref:System.Messaging.Message.BodyStream%2A> </xref:System.Messaging.Message.Body%2A> De <xref:System.Messaging.Message.Body%2A>eigenschap zijn alle objecten die kan worden geserialiseerd, zoals een tekenreeks, een structure-object, een klasse-instantie of een ingesloten object.</xref:System.Messaging.Message.Body%2A>       Tenzij u rechtstreeks naar de inhoud van het bericht schrijft de <xref:System.Messaging.Message.BodyStream%2A>eigenschap ingesteld de <xref:System.Messaging.Message.Formatter%2A>eigenschap voordat u het bericht verzendt.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.BodyStream%2A> De hoofdtekst is geserialiseerd met de <xref:System.Messaging.Message.Formatter%2A>waarde van de eigenschap op het moment dat de <xref:System.Messaging.MessageQueue.Send%2A>methode wordt aangeroepen voor de <xref:System.Messaging.MessageQueue>exemplaar.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.Message.Formatter%2A>       De <xref:System.Messaging.XmlMessageFormatter>los is gekoppeld, dus niet hetzelfde object typt u op de verzender en ontvanger bij gebruik van deze indeling hebben.</xref:System.Messaging.XmlMessageFormatter> De <xref:System.Messaging.ActiveXMessageFormatter>en <xref:System.Messaging.BinaryMessageFormatter>serialiseren van de gegevens in een binaire voorstelling.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> De <xref:System.Messaging.ActiveXMessageFormatter>wordt gebruikt bij het verzenden of ontvangen van de COM-onderdelen.</xref:System.Messaging.ActiveXMessageFormatter>       De volgende tabel toont de eerste waarden voor een exemplaar van <xref:System.Messaging.Message>.</xref:System.Messaging.Message>      | Eigenschap | Initiële waarde |   |--------------|-------------------|   | <xref:System.Messaging.Message.AcknowledgeType%2A>| `AcknowledgeType.None`|   | <xref:System.Messaging.Message.AdministrationQueue%2A>| `null`|   | <xref:System.Messaging.Message.AppSpecific%2A>|0|   | <xref:System.Messaging.Message.AttachSenderId%2A>| `true`|   | <xref:System.Messaging.Message.AuthenticationProviderName%2A>| Microsoft Base Cryptographic Provider versie 1.0 |   | <xref:System.Messaging.Message.AuthenticationProviderType%2A>| `CryptoProviderType.RSA_FULL`|   | <xref:System.Messaging.Message.Body%2A>| `null`|   | <xref:System.Messaging.Message.BodyStream%2A>| `Stream.null`|   | <xref:System.Messaging.Message.BodyType%2A>|0|   | <xref:System.Messaging.Message.ConnectorType%2A>| `Guid.Empty`|   | <xref:System.Messaging.Message.CorrelationId%2A>| Een lege tekenreeks (&quot;&quot;) |   | <xref:System.Messaging.Message.DestinationSymmetricKey%2A>| Een lengte van nul bytematrix |   | <xref:System.Messaging.Message.DigitalSignature%2A>| Een lengte van nul bytematrix |   | <xref:System.Messaging.Message.EncryptionAlgorithm%2A>| `EncryptionAlgorithm.RC2`|   | <xref:System.Messaging.Message.Extension%2A>| Een lengte van nul bytematrix |   | <xref:System.Messaging.Message.Formatter%2A>| `XmlMessageFormatter`|   | <xref:System.Messaging.Message.HashAlgorithm%2A>| `HashAlgorithm.MD5`|   | <xref:System.Messaging.Message.Label%2A>| Een lege tekenreeks (&quot;&quot;) |   | <xref:System.Messaging.Message.Priority%2A>| `MessagePriority.Normal`|   | <xref:System.Messaging.Message.Recoverable%2A>| `false`|   | <xref:System.Messaging.Message.ResponseQueue%2A>| `null`|   | <xref:System.Messaging.Message.SenderCertificate%2A>| Een lengte van nul bytematrix |   | <xref:System.Messaging.Message.TimeToBeReceived%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TimeToReachQueue%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TransactionStatusQueue%2A>| `null`|   | <xref:System.Messaging.Message.UseAuthentication%2A>| `false`|   | <xref:System.Messaging.Message.UseDeadLetterQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseEncryption%2A>| `false`|   | <xref:System.Messaging.Message.UseJournalQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseTracing%2A>| `false`|</xref:System.Messaging.Message.UseTracing%2A></xref:System.Messaging.Message.UseJournalQueue%2A></xref:System.Messaging.Message.UseEncryption%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A></xref:System.Messaging.Message.UseAuthentication%2A></xref:System.Messaging.Message.TransactionStatusQueue%2A></xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.SenderCertificate%2A></xref:System.Messaging.Message.ResponseQueue%2A></xref:System.Messaging.Message.Recoverable%2A></xref:System.Messaging.Message.Priority%2A></xref:System.Messaging.Message.Label%2A></xref:System.Messaging.Message.HashAlgorithm%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.EncryptionAlgorithm%2A></xref:System.Messaging.Message.DigitalSignature%2A></xref:System.Messaging.Message.DestinationSymmetricKey%2A></xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message.ConnectorType%2A></xref:System.Messaging.Message.BodyType%2A></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.AuthenticationProviderType%2A></xref:System.Messaging.Message.AuthenticationProviderName%2A></xref:System.Messaging.Message.AttachSenderId%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.AdministrationQueue%2A></xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/m-system.messaging.messa_16_1.cpp)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/m-system.messaging.messa_16_1.vb)]\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/m-system.messaging.messa_16_1.cs)]"
  syntax:
    content: public Message ();
    parameters: []
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message(Object)
  nameWithType: Message.Message(Object)
  fullName: System.Messaging.Message.Message(Object)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Messaging.Message&quot;> </xref> klasse, met behulp van de <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref> voor het serialiseren van het opgegeven object in de hoofdtekst van het bericht."
  remarks: "Deze overbelasting gebruiken voor het maken van een nieuw exemplaar van de <xref:System.Messaging.Message>klasse met de <xref:System.Messaging.Message.Body%2A>opgegeven door de `body` parameter.</xref:System.Messaging.Message.Body%2A> </xref:System.Messaging.Message> De `body` parameter kan bestaan uit elk object dat kan worden geserialiseerd, zoals een tekenreeks, een structure-object, een klasse-instantie of een ingesloten object. De hoofdtekst is geserialiseerd met de <xref:System.Messaging.XmlMessageFormatter>tenzij u wijzigt de <xref:System.Messaging.Message.Formatter%2A>-eigenschap voordat de <xref:System.Messaging.Message>wordt verzonden.</xref:System.Messaging.Message> </xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.XmlMessageFormatter> Als u wijzigt de <xref:System.Messaging.Message.Body%2A>of <xref:System.Messaging.Message.Formatter%2A>op elk gewenst moment voordat u de eigenschap <xref:System.Messaging.MessageQueue.Send%2A>, het bericht, volgens de waarde van de nieuwe eigenschap worden geserialiseerd.</xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.Body%2A>       De <xref:System.Messaging.XmlMessageFormatter>los is gekoppeld, dus niet hetzelfde object typt u op de verzender en ontvanger bij gebruik van deze indeling hebben.</xref:System.Messaging.XmlMessageFormatter> De <xref:System.Messaging.ActiveXMessageFormatter>en <xref:System.Messaging.BinaryMessageFormatter>serialiseren van de gegevens in een binaire voorstelling.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> De <xref:System.Messaging.ActiveXMessageFormatter>wordt gebruikt bij het verzenden of ontvangen van de COM-onderdelen.</xref:System.Messaging.ActiveXMessageFormatter>       De volgende tabel toont de eerste waarden voor een exemplaar van <xref:System.Messaging.Message>.</xref:System.Messaging.Message>      | Eigenschap | Initiële waarde |   |--------------|-------------------|   | <xref:System.Messaging.Message.AcknowledgeType%2A>| `AcknowledgeType.None`|   | <xref:System.Messaging.Message.AdministrationQueue%2A>| `null`|   | <xref:System.Messaging.Message.AppSpecific%2A>|0|   | <xref:System.Messaging.Message.AttachSenderId%2A>| `true`|   | <xref:System.Messaging.Message.AuthenticationProviderName%2A>| Microsoft Base Cryptographic Provider versie 1.0 |   | <xref:System.Messaging.Message.AuthenticationProviderType%2A>| `CryptoProviderType.RSA_FULL`|   | <xref:System.Messaging.Message.Body%2A>| De `body` parameter. |   | <xref:System.Messaging.Message.BodyStream%2A>| `Stream.null`|   | <xref:System.Messaging.Message.BodyType%2A>|0|   | <xref:System.Messaging.Message.ConnectorType%2A>| `Guid.Empty`|   | <xref:System.Messaging.Message.CorrelationId%2A>| Een lege tekenreeks (&quot;&quot;) |   | <xref:System.Messaging.Message.DestinationSymmetricKey%2A>| Een lengte van nul bytematrix |   | <xref:System.Messaging.Message.DigitalSignature%2A>| Een lengte van nul bytematrix |   | <xref:System.Messaging.Message.EncryptionAlgorithm%2A>| `EncryptionAlgorithm.RC2`|   | <xref:System.Messaging.Message.Extension%2A>| Een lengte van nul bytematrix |   | <xref:System.Messaging.Message.Formatter%2A>| `XmlMessageFormatter`|   | <xref:System.Messaging.Message.HashAlgorithm%2A>| `HashAlgorithm.MD5`|   | <xref:System.Messaging.Message.Label%2A>| Een lege tekenreeks (&quot;&quot;) |   | <xref:System.Messaging.Message.Priority%2A>| `MessagePriority.Normal`|   | <xref:System.Messaging.Message.Recoverable%2A>| `false`|   | <xref:System.Messaging.Message.ResponseQueue%2A>| `null`|   | <xref:System.Messaging.Message.SenderCertificate%2A>| Een lengte van nul bytematrix |   | <xref:System.Messaging.Message.TimeToBeReceived%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TimeToReachQueue%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TransactionStatusQueue%2A>| `null`|   | <xref:System.Messaging.Message.UseAuthentication%2A>| `false`|   | <xref:System.Messaging.Message.UseDeadLetterQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseEncryption%2A>| `false`|   | <xref:System.Messaging.Message.UseJournalQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseTracing%2A>| `false`|</xref:System.Messaging.Message.UseTracing%2A></xref:System.Messaging.Message.UseJournalQueue%2A></xref:System.Messaging.Message.UseEncryption%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A></xref:System.Messaging.Message.UseAuthentication%2A></xref:System.Messaging.Message.TransactionStatusQueue%2A></xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.SenderCertificate%2A></xref:System.Messaging.Message.ResponseQueue%2A></xref:System.Messaging.Message.Recoverable%2A></xref:System.Messaging.Message.Priority%2A></xref:System.Messaging.Message.Label%2A></xref:System.Messaging.Message.HashAlgorithm%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.EncryptionAlgorithm%2A></xref:System.Messaging.Message.DigitalSignature%2A></xref:System.Messaging.Message.DestinationSymmetricKey%2A></xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message.ConnectorType%2A></xref:System.Messaging.Message.BodyType%2A></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.AuthenticationProviderType%2A></xref:System.Messaging.Message.AuthenticationProviderName%2A></xref:System.Messaging.Message.AttachSenderId%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.AdministrationQueue%2A></xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - "The following code example creates a new queue, sends a message that contains an order to it, and then retrieves it.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/m-system.messaging.messa_33_1.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/m-system.messaging.messa_33_1.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/m-system.messaging.messa_33_1.vb)]"
  syntax:
    content: public Message (object body);
    parameters:
    - id: body
      type: System.Object
      description: "Het object wordt geserialiseerd in de hoofdtekst van het bericht."
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  id: '#ctor(System.Object,System.Messaging.IMessageFormatter)'
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Message(Object,IMessageFormatter)
  nameWithType: Message.Message(Object,IMessageFormatter)
  fullName: System.Messaging.Message.Message(Object,IMessageFormatter)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Messaging.Message&quot;> </xref> klasse met behulp van de opgegeven indelingsfunctie voor het serialiseren van het opgegeven object in de hoofdtekst van het bericht."
  remarks: "Deze overbelasting gebruiken voor het maken van een nieuw exemplaar van de <xref:System.Messaging.Message>klasse met de <xref:System.Messaging.Message.Body%2A>opgegeven door de `body` parameter en die gebruikmaakt van een geldige indelingsfunctie voor het serialiseren van de hoofdtekst.</xref:System.Messaging.Message.Body%2A> </xref:System.Messaging.Message> De `body` parameter is object dat kan worden geserialiseerd, zoals een tekenreeks, een structure-object, een klasse-instantie of een ingesloten object. Als u wijzigt de <xref:System.Messaging.Message.Body%2A>of <xref:System.Messaging.Message.Formatter%2A>op elk gewenst moment voordat u de eigenschap <xref:System.Messaging.MessageQueue.Send%2A>, het bericht, volgens de waarde van de nieuwe eigenschap worden geserialiseerd.</xref:System.Messaging.MessageQueue.Send%2A> </xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.Body%2A>       De <xref:System.Messaging.XmlMessageFormatter>los is gekoppeld, dus niet hetzelfde object typt u op de verzender en ontvanger bij gebruik van deze indeling hebben.</xref:System.Messaging.XmlMessageFormatter> De <xref:System.Messaging.ActiveXMessageFormatter>en <xref:System.Messaging.BinaryMessageFormatter>serialiseren van de gegevens in een binaire voorstelling.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> De <xref:System.Messaging.ActiveXMessageFormatter>wordt gebruikt bij het verzenden of ontvangen van de COM-onderdelen.</xref:System.Messaging.ActiveXMessageFormatter>       De volgende tabel toont de eerste waarden voor een exemplaar van <xref:System.Messaging.Message>.</xref:System.Messaging.Message>      | Eigenschap | Initiële waarde |   |--------------|-------------------|   | <xref:System.Messaging.Message.AcknowledgeType%2A>| `AcknowledgeType.None`|   | <xref:System.Messaging.Message.AdministrationQueue%2A>| `null`|   | <xref:System.Messaging.Message.AppSpecific%2A>|0|   | <xref:System.Messaging.Message.AttachSenderId%2A>| `true`|   | <xref:System.Messaging.Message.AuthenticationProviderName%2A>| Microsoft Base Cryptographic Provider versie 1.0 |   | <xref:System.Messaging.Message.AuthenticationProviderType%2A>| `CryptoProviderType.RSA_FULL`|   | <xref:System.Messaging.Message.Body%2A>| De `body` parameter. |   | <xref:System.Messaging.Message.BodyStream%2A>| `Stream.null`|   | <xref:System.Messaging.Message.BodyType%2A>|0|   | <xref:System.Messaging.Message.ConnectorType%2A>| `Guid.Empty`|   | <xref:System.Messaging.Message.CorrelationId%2A>| Een lege tekenreeks (&quot;&quot;) |   | <xref:System.Messaging.Message.DestinationSymmetricKey%2A>| Een lengte van nul bytematrix |   | <xref:System.Messaging.Message.DigitalSignature%2A>| Een lengte van nul bytematrix |   | <xref:System.Messaging.Message.EncryptionAlgorithm%2A>| `EncryptionAlgorithm.RC2`|   | <xref:System.Messaging.Message.Extension%2A>| Een lengte van nul bytematrix |   | <xref:System.Messaging.Message.Formatter%2A>| De `formatter` parameter. |   | <xref:System.Messaging.Message.HashAlgorithm%2A>| `HashAlgorithm.MD5`|   | <xref:System.Messaging.Message.Label%2A>| Een lege tekenreeks (&quot;&quot;) |   | <xref:System.Messaging.Message.Priority%2A>| `MessagePriority.Normal`|   | <xref:System.Messaging.Message.Recoverable%2A>| `false`|   | <xref:System.Messaging.Message.ResponseQueue%2A>| `null`|   | <xref:System.Messaging.Message.SenderCertificate%2A>| Een lengte van nul bytematrix |   | <xref:System.Messaging.Message.TimeToBeReceived%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TimeToReachQueue%2A>| `Message.InfiniteTimeout`|   | <xref:System.Messaging.Message.TransactionStatusQueue%2A>| `null`|   | <xref:System.Messaging.Message.UseAuthentication%2A>| `false`|   | <xref:System.Messaging.Message.UseDeadLetterQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseEncryption%2A>| `false`|   | <xref:System.Messaging.Message.UseJournalQueue%2A>| `false`|   | <xref:System.Messaging.Message.UseTracing%2A>| `false`|</xref:System.Messaging.Message.UseTracing%2A></xref:System.Messaging.Message.UseJournalQueue%2A></xref:System.Messaging.Message.UseEncryption%2A></xref:System.Messaging.Message.UseDeadLetterQueue%2A></xref:System.Messaging.Message.UseAuthentication%2A></xref:System.Messaging.Message.TransactionStatusQueue%2A></xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A></xref:System.Messaging.Message.SenderCertificate%2A></xref:System.Messaging.Message.ResponseQueue%2A></xref:System.Messaging.Message.Recoverable%2A></xref:System.Messaging.Message.Priority%2A></xref:System.Messaging.Message.Label%2A></xref:System.Messaging.Message.HashAlgorithm%2A></xref:System.Messaging.Message.Formatter%2A></xref:System.Messaging.Message.Extension%2A></xref:System.Messaging.Message.EncryptionAlgorithm%2A></xref:System.Messaging.Message.DigitalSignature%2A></xref:System.Messaging.Message.DestinationSymmetricKey%2A></xref:System.Messaging.Message.CorrelationId%2A></xref:System.Messaging.Message.ConnectorType%2A></xref:System.Messaging.Message.BodyType%2A></xref:System.Messaging.Message.BodyStream%2A></xref:System.Messaging.Message.Body%2A></xref:System.Messaging.Message.AuthenticationProviderType%2A></xref:System.Messaging.Message.AuthenticationProviderName%2A></xref:System.Messaging.Message.AttachSenderId%2A></xref:System.Messaging.Message.AppSpecific%2A></xref:System.Messaging.Message.AdministrationQueue%2A></xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - >-
    [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/6734a59e-0a86-49d1-96b9-_1.cpp)]
     [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/6734a59e-0a86-49d1-96b9-_1.cs)]
     [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/6734a59e-0a86-49d1-96b9-_1.vb)]
  syntax:
    content: public Message (object body, System.Messaging.IMessageFormatter formatter);
    parameters:
    - id: body
      type: System.Object
      description: "Het object wordt geserialiseerd in de hoofdtekst van het bericht."
    - id: formatter
      type: System.Messaging.IMessageFormatter
      description: "Een <xref href=&quot;System.Messaging.IMessageFormatter&quot;> </xref> Hiermee worden de indelingsfunctie die voor het serialiseren van de berichttekst."
  overload: System.Messaging.Message.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.AcknowledgeType
  id: AcknowledgeType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
  fullName: System.Messaging.Message.AcknowledgeType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van het type bevestigingsbericht wordt geretourneerd naar de betreffende toepassing."
  remarks: "De eigenschap AcknowledgeType geeft het type bevestigingsberichten aangevraagd door de betreffende toepassing. Stel de eigenschap AcknowledgeType voordat het verzenden van het bericht om aan te vragen van de melding van bepaalde gevallen, bijvoorbeeld een bericht de doelwachtrij is bereikt, een bericht worden opgehaald, of er is een time-out zo wordt voorkomen dat een bericht bereiken of worden opgehaald uit de doelwachtrij.       Message Queuing retourneert melding door bevestigingsberichten verzenden naar de <xref:System.Messaging.Message.AdministrationQueue%2A>eigenschap die is opgegeven door het oorspronkelijke bericht.</xref:System.Messaging.Message.AdministrationQueue%2A> Een bevestigingsbericht <xref:System.Messaging.Message.Acknowledgment%2A>eigenschap geeft het type van de bevestiging die erdoor.</xref:System.Messaging.Message.Acknowledgment%2A> Bijvoorbeeld, als een bevestigingsbericht is verzonden, omdat er een bericht niet is bereikt de bestemming voordat de <xref:System.Messaging.Message.TimeToReachQueue%2A>interval is verstreken, de <xref:System.Messaging.Message.Acknowledgment%2A>eigenschap van het bevestigingsbericht zou de waarde bevatten `ReachQueueTimeout`.</xref:System.Messaging.Message.Acknowledgment%2A> </xref:System.Messaging.Message.TimeToReachQueue%2A>"
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_11_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_11_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_11_1.vb)]"
  syntax:
    content: public System.Messaging.AcknowledgeTypes AcknowledgeType { get; set; }
    return:
      type: System.Messaging.AcknowledgeTypes
      description: "Een van de <xref href=&quot;System.Messaging.AcknowledgeTypes&quot;> </xref> waarden die staan voor bestandstypen van het systeem berichten in de beheerwachtrij en de voorwaarden waaronder bevestigingen worden geretourneerd naar de verzendende toepassing bevestigingsberichten. De standaardwaarde is <xref uid=&quot;langword_csharp_None&quot; name=&quot;None&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.AcknowledgeType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is gefilterd, zodat de eigenschap AcknowledgeType negeren."
  platform:
  - net462
- uid: System.Messaging.Message.Acknowledgment
  id: Acknowledgment
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
  fullName: System.Messaging.Message.Acknowledgment
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Hiermee haalt u de classificatie van de bevestiging die dit bericht vertegenwoordigt."
  remarks: "Wanneer u een bericht van beheerwachtrij ontvangt, moet u de eigenschap bevestiging om te controleren of de status van het oorspronkelijke bericht lezen.       Wanneer een bericht is verzonden naar de doelwachtrij, kan Message Queuing worden aangevraagd voor de publicatie van een bevestigingsbericht. Het bericht kan bijvoorbeeld aangeven of het bericht is aangekomen en binnen de opgegeven time-outs is opgehaald, of het kan erop wijzen wat is een fout opgetreden in het geval van storing levering. De doelwachtrij retourneert bevestiging van berichten en ze de beheerwachtrij die is opgegeven in het oorspronkelijke bericht geboekt <xref:System.Messaging.Message.AdministrationQueue%2A>eigenschap.</xref:System.Messaging.Message.AdministrationQueue%2A> De <xref:System.Messaging.Message.Id%2A>eigenschap van een bevestigingsbericht identificeert het bevestigingsbericht, niet het oorspronkelijke bericht.</xref:System.Messaging.Message.Id%2A> U vindt de id van het oorspronkelijke bericht in de bevestiging <xref:System.Messaging.Message>van het exemplaar <xref:System.Messaging.Message.CorrelationId%2A>eigenschap.</xref:System.Messaging.Message.CorrelationId%2A> </xref:System.Messaging.Message>       Als dit <xref:System.Messaging.Message>exemplaar vertegenwoordigt een bevestigingsbericht, de bevestiging-eigenschap geeft u het type bevestigingsberichten.</xref:System.Messaging.Message> Anders wordt de bevestiging van de eigenschap de waarde bevat `Normal`.       Gebruik de <xref:System.Messaging.Message.AcknowledgeType%2A>eigenschap van het oorspronkelijke bericht om op te geven van de omstandigheden waaronder de bevestigingen worden geretourneerd.</xref:System.Messaging.Message.AcknowledgeType%2A>"
  syntax:
    content: public System.Messaging.Acknowledgment Acknowledgment { get; }
    return:
      type: System.Messaging.Acknowledgment
      description: "Een van de <xref href=&quot;System.Messaging.Acknowledgment&quot;> </xref> opsommingswaarden."
  overload: System.Messaging.Message.Acknowledgment*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is niet verzonden. Deze eigenschap kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       - of - de berichtenwachtrij is gefilterd, zodat het negeren van de <xref:System.Messaging.MessagePropertyFilter.Acknowledgment*>eigenschap.</xref:System.Messaging.MessagePropertyFilter.Acknowledgment*>"
  platform:
  - net462
- uid: System.Messaging.Message.AdministrationQueue
  id: AdministrationQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
  fullName: System.Messaging.Message.AdministrationQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van de wachtrij die de bevestigingsberichten die Message Queuing genereert ontvangt."
  remarks: "De wachtrij dat is opgegeven in de eigenschap AdministrationQueue kan elke niet-transactionele wachtrij zijn. De bevestigingsberichten die worden verzonden naar de beheerwachtrij kunnen aangeven of het oorspronkelijke bericht de doelwachtrij is bereikt en of het is verwijderd uit de wachtrij.       Wanneer de <xref:System.Messaging.Message.AcknowledgeType%2A>eigenschap heeft de waarde van een andere waarde dan `None`, de verzendende toepassing de wachtrij om te gebruiken als de beheerwachtrij moet opgeven.</xref:System.Messaging.Message.AcknowledgeType%2A>"
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_47_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_47_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_47_1.vb)]"
  syntax:
    content: public System.Messaging.MessageQueue AdministrationQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: "De <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> Hiermee worden de beheerwachtrij gebruikt voor het systeem gegenereerde bevestigingsberichten. De standaardwaarde is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.AdministrationQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap AdministrationQueue negeren."
  platform:
  - net462
- uid: System.Messaging.Message.AppSpecific
  id: AppSpecific
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AppSpecific
  nameWithType: Message.AppSpecific
  fullName: System.Messaging.Message.AppSpecific
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van aanvullende, toepassingsspecifieke informatie."
  remarks: "De eigenschap AppSpecific bevat toepassingsspecifieke gegevens die u kunt verschillende soorten berichten indelen. U kunt bijvoorbeeld toepassingsspecifieke indexen. Het is de verantwoordelijkheid van de toepassing AppSpecific eigenschapsgegevens interpreteren.       Indien mogelijk moet u de berichtgegevens opnemen in de hoofdtekst van het bericht in plaats van de eigenschap AppSpecific.       Als u werkt met externe wachtrijen, gebruiken de <xref:System.Messaging.Message.Extension%2A>eigenschap om de eigenschappen van de berichten die niet bestaan in Message Queuing.</xref:System.Messaging.Message.Extension%2A> Als met de eigenschap AppSpecific de verantwoordelijkheid van de toepassing is dat u begrijpt de inhoud van de <xref:System.Messaging.Message.Extension%2A>eigenschap.</xref:System.Messaging.Message.Extension%2A>"
  syntax:
    content: public int AppSpecific { get; set; }
    return:
      type: System.Int32
      description: "De informatie die specifiek is voor de toepassing. De standaardwaarde is nul."
  overload: System.Messaging.Message.AppSpecific*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap AppSpecific negeren."
  platform:
  - net462
- uid: System.Messaging.Message.ArrivedTime
  id: ArrivedTime
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
  fullName: System.Messaging.Message.ArrivedTime
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Hiermee haalt u de tijd die het bericht in de doelwachtrij is aangekomen."
  remarks: "Het bericht <xref:System.Messaging.Message.TimeToBeReceived%2A>eigenschap geeft aan hoe snel het bericht moet worden ontvangen van de doelwachtrij.</xref:System.Messaging.Message.TimeToBeReceived%2A> De <xref:System.Messaging.Message.TimeToBeReceived%2A>eigenschap timer wordt gestart wanneer het bericht wordt verzonden, niet als het bericht wordt ontvangen in de wachtrij.</xref:System.Messaging.Message.TimeToBeReceived%2A>"
  example:
  - "The following code example displays the value of a message's ArrivedTime property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public DateTime ArrivedTime { get; }
    return:
      type: System.DateTime
      description: "Een <xref:System.DateTime>die staat voor de aankomsttijd van het bericht in de doelwachtrij.</xref:System.DateTime> De tijd is aangepast van GMT naar de lokale tijd van de computer waarop de doelwachtrij zich bevindt."
  overload: System.Messaging.Message.ArrivedTime*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is niet verzonden. Deze eigenschap kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap ArrivedTime negeren."
  platform:
  - net462
- uid: System.Messaging.Message.AttachSenderId
  id: AttachSenderId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
  fullName: System.Messaging.Message.AttachSenderId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of de afzender-ID moet worden gekoppeld aan het bericht."
  remarks: "De <xref:System.Messaging.Message.SenderId%2A>eigenschap is een bytematrix die de id van de verzendende gebruiker vertegenwoordigt.</xref:System.Messaging.Message.SenderId%2A> De afzender-ID wordt ingesteld door de Message Queuing en door het ontvangende wachtrijbeheer wordt gebruikt om te controleren of de afzender toegangsrechten voor een wachtrij heeft.       Het ontbreken van de afzender-ID een indicatie van de verzendende toepassing is dat Message Queuing moet niet valideren van de afzender het bericht niet controleren of de toegang van de afzender rechten aan de ontvangende wachtrij. De <xref:System.Messaging.Message.SenderId%2A>betrouwbaar alleen als het bericht is geverifieerd wanneer de doelwachtrij is bereikt.</xref:System.Messaging.Message.SenderId%2A> Het bericht is geweigerd wanneer het de doelwachtrij is bereikt als de wachtrij alleen geverifieerde berichten en een accepteert de <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>of de <xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A>eigenschap is `false`.</xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A> </xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>      > [!CAUTION] > Als een bericht is geweigerd, wordt een verzonden naar de wachtrij voor onbestelbare berichten (als <xref:System.Messaging.Message.UseDeadLetterQueue%2A>is `true`), of wordt dit genegeerd.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> U kunt bevestigingen aanvragen als een bericht is mislukt om een wachtrij te bereiken. Anders wordt wanneer <xref:System.Messaging.Message.UseDeadLetterQueue%2A>is `false` het bericht zijn mogelijk verloren gegaan zonder waarschuwing.</xref:System.Messaging.Message.UseDeadLetterQueue%2A>"
  example:
  - "The following code example gets and sets the value of a message's AttachSenderId property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool AttachSenderId { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref:System.Messaging.Message.SenderId*>moet worden gekoppeld aan het bericht, anders wordt <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Messaging.Message.SenderId*> De standaardwaarde is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.AttachSenderId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap AttachSenderId negeren."
  platform:
  - net462
- uid: System.Messaging.Message.Authenticated
  id: Authenticated
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Authenticated
  nameWithType: Message.Authenticated
  fullName: System.Messaging.Message.Authenticated
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Haalt een waarde die aangeeft of het bericht is geverifieerd."
  remarks: "De eigenschap geverifieerd wordt alleen gebruikt door de toepassing terwijl deze wordt interactie met het bericht en de poging om te bepalen of verificatie is gevraagd. Als het bericht in de wachtrij is, wordt het bericht is geverifieerd. Als u daarentegen als de eigenschap geverifieerde `true`, het ontvangende wachtrijbeheer het bericht geverifieerd wanneer het bericht ontvangen.       U kan niet als een bericht niet kan worden geverifieerd door te kijken in de eigenschappen ervan bepalen. Message Queuing verwijdert-berichten dat niet door de verificatie voordat ze worden gedownload naar de wachtrij. U kunt aanvragen dat een bevestigingsbericht worden verzonden als een fout levering voorkomt u dat het bericht in de wachtrij die binnenkomen."
  example:
  - "The following code example displays the value of a message's Authenticated property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool Authenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als verificatie is gevraagd voor het bericht wanneer het de wachtrij; ingevoerd anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.Authenticated*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is niet verzonden. Deze eigenschap kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       - of - de berichtenwachtrij is gefilterd, zodat het negeren van de eigenschap geverifieerd."
  platform:
  - net462
- uid: System.Messaging.Message.AuthenticationProviderName
  id: AuthenticationProviderName
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
  fullName: System.Messaging.Message.AuthenticationProviderName
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van de naam van de cryptografieprovider die wordt gebruikt voor het genereren van de digitale handtekening van het bericht."
  remarks: "Doorgaans gebruikt u de AuthenticationProviderName bij het werken met afwijkende wachtrijen. Message Queuing vereist de verificatie-providernaam en providertype voor verificatie van de cryptografieprovider (verificatieprovider) voor het valideren van de digitale handtekeningen van berichten die worden verzonden naar een afwijkende wachtrij en de berichten van een afwijkende wachtrij met Message Queuing wordt doorgegeven.       Wanneer een bericht verzendt, altijd de AuthenticationProviderName ingesteld en <xref:System.Messaging.Message.ConnectorType%2A>Eigenschappen samen.</xref:System.Messaging.Message.ConnectorType%2A> Wanneer het bericht wordt verzonden, negeert Message Queuing-de naam van de verificatie-provider als het type van de connector niet ook is ingesteld.       De eigenschap AuthenticationProviderName kan niet `null`, maar het kan een lege tekenreeks (&quot;&quot;)."
  syntax:
    content: public string AuthenticationProviderName { get; set; }
    return:
      type: System.String
      description: "De naam van de cryptografieprovider die wordt gebruikt voor het genereren van de digitale handtekening van het bericht. De standaardwaarde is Microsoft Base Cryptographic Provider versie 1.0."
  overload: System.Messaging.Message.AuthenticationProviderName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De eigenschap AuthenticationProviderName kan niet worden ingesteld.       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap AuthenticationProviderName negeren."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De AuthenticationProviderName is ingesteld op <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.AuthenticationProviderType
  id: AuthenticationProviderType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
  fullName: System.Messaging.Message.AuthenticationProviderType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van het type cryptografieprovider die wordt gebruikt voor het genereren van de digitale handtekening van het bericht."
  remarks: "U doorgaans de AuthenticationProviderType eigenschap gebruiken bij het werken met afwijkende wachtrijen om op te geven welke cryptographic service provider is gekoppeld aan een bericht. Message Queuing vereist de verificatie-providernaam en providertype voor verificatie van de cryptografieprovider (verificatieprovider) voor het valideren van de digitale handtekeningen van berichten die worden verzonden naar een afwijkende wachtrij en de berichten van een afwijkende wachtrij met Message Queuing wordt doorgegeven.       Alleen `RsaFull` is bedoeld om te worden gebruikt met messaging.       Wanneer een bericht verzendt, altijd de AuthenticationProviderType ingesteld en <xref:System.Messaging.Message.ConnectorType%2A>Eigenschappen samen.</xref:System.Messaging.Message.ConnectorType%2A> Wanneer het bericht wordt verzonden, negeert Message Queuing het verificatietype provider als het type van de connector niet ook is ingesteld."
  syntax:
    content: public System.Messaging.CryptographicProviderType AuthenticationProviderType { get; set; }
    return:
      type: System.Messaging.CryptographicProviderType
      description: "Een van de <xref href=&quot;System.Messaging.CryptographicProviderType&quot;> </xref> waarden. De standaardwaarde is <xref uid=&quot;langword_csharp_RSA_FULL&quot; name=&quot;RSA_FULL&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.AuthenticationProviderType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De eigenschap AuthenticationProviderType kan niet worden ingesteld.       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap AuthenticationProviderType negeren."
  platform:
  - net462
- uid: System.Messaging.Message.Body
  id: Body
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Body
  nameWithType: Message.Body
  fullName: System.Messaging.Message.Body
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van de inhoud van het bericht."
  remarks: "De eigenschap Body van het bericht bevat meestal de gegevens die zijn gekoppeld aan het bericht. Hoewel u kunt ook toepassingsspecifieke gegevens verzenden de <xref:System.Messaging.Message.AppSpecific%2A>en <xref:System.Messaging.Message.Extension%2A>Eigenschappen, moet u berichtgegevens opnemen in de hoofdtekst van het bericht indien mogelijk.</xref:System.Messaging.Message.Extension%2A> </xref:System.Messaging.Message.AppSpecific%2A> Alleen de inhoud van de eigenschap die zijn geserialiseerd of versleuteld.       De eigenschap Body kan een object waarvan de grootte niet langer zijn dan 4 MB bevatten. Als u <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName>een object dat is niet van het type <xref:System.Messaging.Message> <xref:System.Messaging.MessageQueue>dat het object bevindt zich in de eigenschap Body van het <xref:System.Messaging.Message>exemplaar wordt geretourneerd door <xref:System.Messaging.MessageQueue.Peek%2A>of <xref:System.Messaging.MessageQueue.Receive%2A>.</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue.Peek%2A> </xref:System.Messaging.Message> </xref:System.Messaging.MessageQueue> </xref:System.Messaging.Message> verzenden</xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName>       Het tekenreeksargument in `MessageQueue.Send(&quot;hello.&quot;)` is een voorbeeld van een algemeen object.       De <xref:System.Messaging.Message.BodyType%2A>eigenschap geeft het type informatie die is opgeslagen in de berichttekst.</xref:System.Messaging.Message.BodyType%2A> Message Queuing gebruikt deze informatie om te identificeren van het type van de inhoud van de eigenschap.       De eigenschap Body opgeven of de <xref:System.Messaging.Message.BodyStream%2A>eigenschap voor het verzenden van de <xref:System.Messaging.Message>object.</xref:System.Messaging.Message> </xref:System.Messaging.Message.BodyStream%2A> De eigenschap Body mag elk serialiseerbaar object, zoals een tekenreeks, structuur, klasse-instantie, of ingesloten object.       Tenzij u rechtstreeks naar de inhoud van het bericht schrijft de <xref:System.Messaging.Message.BodyStream%2A>eigenschap ingesteld de <xref:System.Messaging.Message.Formatter%2A>eigenschap voordat u het bericht verzendt.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.Message.BodyStream%2A> Wanneer de <xref:System.Messaging.MessageQueue.Send%2A>methode wordt aangeroepen voor de <xref:System.Messaging.MessageQueue>exemplaar, de hoofdtekst is geserialiseerd met de indelingsfunctie die is opgenomen in de <xref:System.Messaging.Message.Formatter%2A>eigenschap.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> Als u het bericht verzendt zonder een waarde opgeeft voor de <xref:System.Messaging.Message.Formatter%2A>eigenschap, de standaardwaarde is de indelingsfunctie <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.Message.Formatter%2A>      > [!NOTE] > Probeert in te stellen de hoofdtekst van een bericht naar <xref:System.Decimal.MaxValue>, wordt een <xref:System.OverflowException>wanneer de `Send` methode van de <xref:System.Messaging.MessageQueue>klasse wordt aangeroepen en de <xref:System.Messaging.ActiveXMessageFormatter>wordt gebruikt.</xref:System.Messaging.ActiveXMessageFormatter> </xref:System.Messaging.MessageQueue> </xref:System.OverflowException> </xref:System.Decimal.MaxValue>"
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/p-system.messaging.messa_13_1.cpp)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_13_1.vb)]\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/p-system.messaging.messa_13_1.cs)]"
  syntax:
    content: public object Body { get; set; }
    return:
      type: System.Object
      description: "Een object dat de inhoud van het bericht aangeeft. Het object is een tekenreeks, een datum, een valuta, een getal, een bytematrix of een beheerd object."
  overload: System.Messaging.Message.Body*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De <xref:System.Messaging.Message.Formatter*>eigenschap is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Messaging.Message.Formatter*>       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap Body negeren."
  platform:
  - net462
- uid: System.Messaging.Message.BodyStream
  id: BodyStream
  parent: System.Messaging.Message
  langs:
  - csharp
  name: BodyStream
  nameWithType: Message.BodyStream
  fullName: System.Messaging.Message.BodyStream
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van de informatie in de hoofdtekst van het bericht."
  remarks: "De hoofdtekst van een bericht van elk type informatie kan bestaan, bijvoorbeeld een tekenreeks, een datum, een valuta, een getal, een bytematrix of een beheerd object. Deze informatie wordt omgezet in een <xref:System.IO.Stream>worden doorgegeven aan de wachtrij.</xref:System.IO.Stream>       Geef ofwel de <xref:System.Messaging.Message.Body%2A>eigenschap of de eigenschap BodyStream voor het verzenden van de <xref:System.Messaging.Message>object.</xref:System.Messaging.Message> </xref:System.Messaging.Message.Body%2A> Als u de <xref:System.Messaging.Message.Body%2A>eigenschap, de inhoud in de eigenschap BodyStream worden geserialiseerd.</xref:System.Messaging.Message.Body%2A> U kunt echter de eigenschap BodyStream direct te schrijven. Dit is bijvoorbeeld handig als u wilt een verbinding met een bestand openen en de inhoud als de hoofdtekst van uw bericht streamen.       Tenzij u de inhoud van het bericht rechtstreeks naar de eigenschap BodyStream schrijft, stel de <xref:System.Messaging.Message.Formatter%2A>eigenschap voordat u het bericht verzendt.</xref:System.Messaging.Message.Formatter%2A> Wanneer de <xref:System.Messaging.MessageQueue.Send%2A>methode wordt aangeroepen voor de <xref:System.Messaging.MessageQueue>exemplaar, de hoofdtekst is geserialiseerd met de indelingsfunctie die is opgenomen in de <xref:System.Messaging.Message.Formatter%2A>eigenschap.</xref:System.Messaging.Message.Formatter%2A> </xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> Als u het bericht verzendt zonder een waarde opgeeft voor de <xref:System.Messaging.Message.Formatter%2A>eigenschap, de standaardwaarde is de indelingsfunctie <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.Message.Formatter%2A>       Als u de <xref:System.Messaging.Message.UseEncryption%2A>eigenschap `true` voor de hoofdtekst van dit bericht, het bericht wordt versleuteld wanneer deze wordt verzonden, niet bij het instellen van de <xref:System.Messaging.Message.Body%2A>eigenschap.</xref:System.Messaging.Message.Body%2A> </xref:System.Messaging.Message.UseEncryption%2A> De eigenschap BodyStream is daarom nooit gecodeerd."
  syntax:
    content: public System.IO.Stream BodyStream { get; set; }
    return:
      type: System.IO.Stream
      description: "Een <xref:System.IO.Stream>waarin de geserialiseerde gegevens die zijn opgenomen in de <xref:System.Messaging.Message.Body*>van het bericht.</xref:System.Messaging.Message.Body*> </xref:System.IO.Stream>"
  overload: System.Messaging.Message.BodyStream*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat het negeren van de <xref:System.Messaging.Message.Body*>eigenschap.</xref:System.Messaging.Message.Body*>"
  platform:
  - net462
- uid: System.Messaging.Message.BodyType
  id: BodyType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: BodyType
  nameWithType: Message.BodyType
  fullName: System.Messaging.Message.BodyType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van het type gegevens dat de berichttekst bevat."
  remarks: "Message Queuing herkent de inhoud als een object of als een geserialiseerde stroom. De berichteigenschap-eigenschap geeft het type van het object in de <xref:System.Messaging.Message.Body%2A>eigenschap van het bericht.</xref:System.Messaging.Message.Body%2A>       De <xref:System.Messaging.XmlMessageFormatter>voert binding tussen systeemeigen typen en het object in een berichttekst.</xref:System.Messaging.XmlMessageFormatter> Als u de <xref:System.Messaging.XmlMessageFormatter>, de indelingsfunctie stelt de eigenschap berichteigenschap voor u.</xref:System.Messaging.XmlMessageFormatter>       Andere formatters kunnen ook, zoals weergegeven in de volgende C#-code binding functionaliteit bieden.      ```   message.Formatter = new ActiveXMessageFormatter();   object myObject message.Body;   if (myObject is string) {   }   if (myObject is int) {   }   if (myObject is float) {   }   ```"
  example:
  - "The following code example displays the value of a message's BodyType property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public int BodyType { get; set; }
    return:
      type: System.Int32
      description: "De berichttekst true type, zoals een tekenreeks, een datum, een valuta of een getal."
  overload: System.Messaging.Message.BodyType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat het negeren van de <xref:System.Messaging.Message.Body*>eigenschap.</xref:System.Messaging.Message.Body*>"
  platform:
  - net462
- uid: System.Messaging.Message.ConnectorType
  id: ConnectorType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ConnectorType
  nameWithType: Message.ConnectorType
  fullName: System.Messaging.Message.ConnectorType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of bepaalde berichteigenschappen die normaliter door Message Queuing worden ingesteld door de betreffende toepassing zijn ingesteld."
  remarks: "Message Queuing moet de eigenschap ConnectorType worden ingesteld wanneer een toepassing een berichteigenschap die meestal wordt ingesteld door Message Queuing wordt ingesteld. Een toepassing maakt meestal gebruik van een ConnectorType in de volgende twee gevallen: - als een connectortoepassing een bericht wordt geplaatst. Het ConnectorType vertelt de verzendende en ontvangende toepassingen het interpreteren van de beveiligings- en bevestigingseigenschappen eigenschappen van het bericht.      -De betreffende toepassing, in plaats van Message Queuing, versleutelt wanneer een bericht. Het ConnectorType vertelt Message Queuing gebruik van de <xref:System.Messaging.Message.DestinationSymmetricKey%2A>waarde van de eigenschap voor het ontsleutelen van het bericht.</xref:System.Messaging.Message.DestinationSymmetricKey%2A>       U moet de eigenschap ConnectorType instellen als u een van de volgende eigenschappen instellen (anders wordt de wachtrij negeert deze eigenschappen wanneer het bericht is verzonden):- <xref:System.Messaging.Message.AuthenticationProviderName%2A>- <xref:System.Messaging.Message.AuthenticationProviderType%2A>- <xref:System.Messaging.Message.DestinationSymmetricKey%2A>- <xref:System.Messaging.Message.DigitalSignature%2A>- <xref:System.Messaging.Message.MessageType%2A>- <xref:System.Messaging.Message.SenderId%2A></xref:System.Messaging.Message.SenderId%2A> </xref:System.Messaging.Message.MessageType%2A> </xref:System.Messaging.Message.DigitalSignature%2A> </xref:System.Messaging.Message.DestinationSymmetricKey%2A> </xref:System.Messaging.Message.AuthenticationProviderType%2A> </xref:System.Messaging.Message.AuthenticationProviderName%2A>"
  syntax:
    content: public Guid ConnectorType { get; set; }
    return:
      type: System.Guid
      description: "Een <xref:System.Guid>gedefinieerd door de toepassing en gebruikt in combinatie met de connector-toepassingen of de berichtcodering.</xref:System.Guid> Dit <xref:System.Guid>kan een ontvangende toepassing interpreteren berichteigenschappen die zijn ingesteld door de betreffende toepassing, maar die worden meestal ingesteld door de Message Queuing.</xref:System.Guid>"
  overload: System.Messaging.Message.ConnectorType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap ConnectorType negeren."
  platform:
  - net462
- uid: System.Messaging.Message.CorrelationId
  id: CorrelationId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: CorrelationId
  nameWithType: Message.CorrelationId
  fullName: System.Messaging.Message.CorrelationId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van de bericht-id door bevestiging, rapport en antwoordberichten gebruikt om te verwijzen naar het oorspronkelijke bericht."
  remarks: "Als een bericht bevestigings- of Message Queuing wordt gegenereerd, wordt de correlatie-id-eigenschap gebruikt om op te geven van de bericht-id van het oorspronkelijke bericht. De correlatie-id bindt op deze manier kan het rapport of een bevestiging weergegeven op het oorspronkelijke bericht.       De verzendende toepassing kunt komt overeen met de bevestigings- of rapport met het oorspronkelijke bericht met behulp van de eigenschap CorrelationId voor het identificeren van het oorspronkelijke bericht <xref:System.Messaging.Message.Id%2A>eigenschap.</xref:System.Messaging.Message.Id%2A>       Connector-toepassingen moeten ook de eigenschap CorrelationId van de bevestigings- en berichten ingesteld op de bericht-id van het oorspronkelijke bericht.       Als uw toepassing een antwoordbericht naar de betreffende toepassing verzendt, kunt u de eigenschap CorrelationId van het antwoordbericht instellen op de bericht-id van het oorspronkelijke bericht. De verzendende toepassing kunt komt overeen met het antwoordbericht in op het bericht dat is verzonden."
  example:
  - "The following code example sends and receives a message that contains an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_95_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_95_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_95_1.vb)]"
  syntax:
    content: public string CorrelationId { get; set; }
    return:
      type: System.String
      description: "De bericht-id die is opgegeven door de <xref:System.Messaging.Message.Id*>eigenschap van het oorspronkelijke bericht.</xref:System.Messaging.Message.Id*> De correlatie-id wordt gebruikt door Message Queuing wanneer een bevestigings- of -bericht wordt gegenereerd en door een toepassing bij het genereren van een antwoordbericht."
  overload: System.Messaging.Message.CorrelationId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap CorrelationId negeren."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De CorrelationId wordt <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.DestinationQueue
  id: DestinationQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
  fullName: System.Messaging.Message.DestinationQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Hiermee wordt de bestemmingswachtrij voor een bericht."
  remarks: "De eigenschap doelwachtrij wordt meestal gebruikt om te bepalen van het oorspronkelijke doel van een bericht dat is ontvangen in een logboek of de wachtrij voor onbestelbare berichten. Normaal gesproken hoeft niet te onderzoeken van deze eigenschap, omdat u het bericht meestal worden opgehaald uit de doelwachtrij."
  example:
  - "The following code example displays the value of a message's DestinationQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageQueue DestinationQueue { get; }
    return:
      type: System.Messaging.MessageQueue
      description: "Een <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> dat de bestemmingswachtrij voor het bericht aangeeft."
  overload: System.Messaging.Message.DestinationQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is niet verzonden. Deze eigenschap kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap doelwachtrij negeren."
  platform:
  - net462
- uid: System.Messaging.Message.DestinationSymmetricKey
  id: DestinationSymmetricKey
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
  fullName: System.Messaging.Message.DestinationSymmetricKey
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van de symmetrische sleutel gebruikt om toepassingen versleutelde berichten te versleutelen of berichten die worden verzonden naar externe wachtrijen."
  remarks: "Twee scenario&quot;s moeten u de eigenschap DestinationSymmetricKey gebruiken. De eerste is bij uw toepassing, in plaats van Message Queuing, versleutelt een bericht. De tweede is wanneer u een gecodeerd bericht naar een queueing-systeem dan Message Queuing verzendt.       Voordat u deze eigenschap instelt, moet u de symmetrische sleutel met de openbare sleutel van het ontvangende wachtrijbeheer versleutelen. Wanneer u een toepassing versleuteld bericht verzendt, het ontvangende wachtrijbeheer maakt gebruik van de symmetrische sleutel voor het ontsleutelen van het bericht voordat deze wordt verzonden naar de doelwachtrij.       Als u een bericht naar een afwijkende wachtrij verzendt, wordt het bericht wordt eerst ontvangen door de juiste connector-toepassing die het gecodeerde bericht met de gekoppelde symmetrische sleutel aan de ontvangende toepassing doorstuurt. Dit is de verantwoordelijkheid van de ontvangende toepassing het bericht met behulp van de symmetrische sleutel te decoderen.       Als u de eigenschap DestinationSymmetricKey instelt, moet u ook instellen de <xref:System.Messaging.Message.ConnectorType%2A>eigenschap.</xref:System.Messaging.Message.ConnectorType%2A> Wanneer het bericht wordt verzonden, Message Queuing DestinationSymmetricKey wordt de eigenschap genegeerd als de <xref:System.Messaging.Message.ConnectorType%2A>eigenschap niet ook is ingesteld.</xref:System.Messaging.Message.ConnectorType%2A>       De eigenschap DestinationSymmetricKey heeft een maximale matrixgrootte van 256."
  syntax:
    content: public byte[] DestinationSymmetricKey { get; set; }
    return:
      type: System.Byte[]
      description: "Een matrix met byte-waarden die de bestemming symmetrische sleutel gebruikt voor het versleutelen van het bericht aangeeft. De standaardwaarde is een matrix van lengte van nul."
  overload: System.Messaging.Message.DestinationSymmetricKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap DestinationSymmetricKey negeren."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De DestinationSymmetricKey is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.DigitalSignature
  id: DigitalSignature
  parent: System.Messaging.Message
  langs:
  - csharp
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
  fullName: System.Messaging.Message.DigitalSignature
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van de digitale handtekening dat Message Queuing gebruikt om het bericht te verifiëren."
  remarks: "Message Queuing gebruikt de digitale handtekening bij het verifiëren van berichten die zijn verzonden door de Message Queuing-versie 1.0. In de meeste gevallen Message Queuing wordt gegenereerd en de eigenschap DigitalSignature ingesteld wanneer de betreffende toepassing verificatie vraagt. Deze eigenschap wordt door de ontvangende toepassing gebruikt voor het ophalen van de digitale handtekening die is gekoppeld aan het bericht.       U kunt de eigenschap DigitalSignature alleen gebruiken bij het uitvoeren van Message Queuing-versie 2.0. De verzendende toepassing moet Message Queuing-versie 1.0 handtekeningen opgeven bij het aanvragen van verificatie. Als de betreffende toepassing een handtekening van Message Queuing-versie 2.0 verstuurt, bevat deze eigenschap een buffer van vier bytes, elk met nul.       De eigenschap DigitalSignature, samen met de <xref:System.Messaging.Message.SenderCertificate%2A>eigenschap, wordt ook gebruikt door de connector-toepassingen wanneer een bericht wordt verzonden.</xref:System.Messaging.Message.SenderCertificate%2A> In dit scenario wordt de connector-toepassing, in plaats van Message Queuing, genereert de digitale handtekening, wordt gebaseerd op het certificaat van de gebruiker het bericht te verzenden.       De eigenschap DigitalSignature heeft een maximale matrixgrootte van 256.       Als u de DigitalSignature-eigenschap instelt, moet u ook instellen de <xref:System.Messaging.Message.ConnectorType%2A>eigenschap.</xref:System.Messaging.Message.ConnectorType%2A> Wanneer een bericht wordt verzonden, Message Queuing DigitalSignature wordt de eigenschap genegeerd als de <xref:System.Messaging.Message.ConnectorType%2A>eigenschap niet ook is ingesteld.</xref:System.Messaging.Message.ConnectorType%2A>"
  syntax:
    content: public byte[] DigitalSignature { get; set; }
    return:
      type: System.Byte[]
      description: "Een matrix met byte-waarden die de digitale handtekening van Message Queuing 1.0 wordt gebruikt voor het verifiëren van het bericht aangeeft. De standaardwaarde is een matrix van lengte van nul."
  overload: System.Messaging.Message.DigitalSignature*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap DigitalSignature negeren."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De eigenschap DigitalSignature is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.EncryptionAlgorithm
  id: EncryptionAlgorithm
  parent: System.Messaging.Message
  langs:
  - csharp
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
  fullName: System.Messaging.Message.EncryptionAlgorithm
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van het versleutelingsalgoritme gebruikt voor het versleutelen van de hoofdtekst van een persoonlijk bericht."
  remarks: "Als een bericht persoonlijke (versleuteld), wordt het versleuteld voordat deze worden verzonden en ontsleuteld na ontvangst. De eigenschap EncryptionAlgorithm geeft de algoritme gebruikt om de hoofdtekst van een persoonlijk bericht te coderen.       Een wachtrij kan vereisen dat binnenkomende berichten worden gecodeerd. Als een toepassing een (niet-persoonlijke) niet-versleutelde bericht verzendt naar een wachtrij die alleen persoonlijke berichten accepteert, of als het een persoonlijk bericht naar een wachtrij verzendt die alleen niet-persoonlijke berichten accepteert, wordt het bericht geweigerd in de wachtrij. De verzendende toepassing kunt aanvragen dat een negatief bevestigingsbericht in dat geval worden geretourneerd."
  syntax:
    content: public System.Messaging.EncryptionAlgorithm EncryptionAlgorithm { get; set; }
    return:
      type: System.Messaging.EncryptionAlgorithm
      description: "Een van de <xref href=&quot;System.Messaging.EncryptionAlgorithm&quot;> </xref> opsommingswaarden. De standaardwaarde is <xref uid=&quot;langword_csharp_RC2&quot; name=&quot;RC2&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.EncryptionAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap EncryptionAlgorithm negeren."
  platform:
  - net462
- uid: System.Messaging.Message.Extension
  id: Extension
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Extension
  nameWithType: Message.Extension
  fullName: System.Messaging.Message.Extension
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van aanvullende, door toepassingen gedefinieerde informatie die is gekoppeld aan het bericht."
  remarks: "De eigenschap Extension biedt voor toepassingsspecifieke gegevens, zoals een grote binaire object, dat is gekoppeld aan het bericht. Het is de verantwoordelijkheid van de ontvangende toepassing interpreteren van de inhoud van de eigenschap Extension.       Waar mogelijk, moet u ook opnemen berichtgegevens in de <xref:System.Messaging.Message.Body%2A>eigenschap van het bericht in plaats van de eigenschap Extension.</xref:System.Messaging.Message.Body%2A>       Als u werkt met externe wachtrijen, gebruik de eigenschap Extension berichteigenschappen die niet aanwezig zijn in Message Queuing opgeven.       Er bestaat een afwijkende wachtrij in een wachtrij plaatsen dan Microsoft Message Queuing-systeem. Message Queuing communiceert met dergelijke wachtrijen via een connectortoepassing."
  syntax:
    content: public byte[] Extension { get; set; }
    return:
      type: System.Byte[]
      description: "Een matrix met byte-waarden die door toepassingen gedefinieerde informatie die is gekoppeld aan het bericht bevat. De standaardwaarde is een matrix van lengte van nul."
  overload: System.Messaging.Message.Extension*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de uitbreidingseigenschap negeren."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De eigenschap Extension is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.Formatter
  id: Formatter
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Formatter
  nameWithType: Message.Formatter
  fullName: System.Messaging.Message.Formatter
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van de indelingsfunctie die wordt gebruikt voor een object in serialiseren of deserialiseren van een object van de berichttekst."
  remarks: "Gebruik de eigenschap Formatter bij het lezen en schrijven van een bericht. Wanneer een bericht wordt verzonden naar de wachtrij, de indelingsfunctie serialiseert de <xref:System.Messaging.Message.Body%2A>eigenschap in een stroom die kan worden verzonden naar de berichtenwachtrij.</xref:System.Messaging.Message.Body%2A> Bij het lezen van een wachtrij, de indelingsfunctie deserializes de berichtgegevens in de <xref:System.Messaging.Message.Body%2A>eigenschap.</xref:System.Messaging.Message.Body%2A>       Tenzij u rechtstreeks naar de inhoud van het bericht schrijft de <xref:System.Messaging.Message.BodyStream%2A>eigenschap, stel de eigenschap Formatter voordat u het bericht verzendt.</xref:System.Messaging.Message.BodyStream%2A> Wanneer de <xref:System.Messaging.MessageQueue.Send%2A>methode wordt aangeroepen voor de <xref:System.Messaging.MessageQueue>exemplaar, de hoofdtekst is geserialiseerd met de indelingsfunctie die is opgenomen in de Formatter-eigenschap.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueue.Send%2A> Als u het bericht zonder een waarde opgeeft voor de eigenschap Formatter verzendt, standaard de indelingsfunctie <xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter>       De <xref:System.Messaging.XmlMessageFormatter>los is gekoppeld, dus niet hetzelfde object typt u op de verzender en ontvanger bij gebruik van deze indeling hebben.</xref:System.Messaging.XmlMessageFormatter> De <xref:System.Messaging.ActiveXMessageFormatter>en <xref:System.Messaging.BinaryMessageFormatter>serialiseren van de gegevens in een binaire voorstelling.</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter> De <xref:System.Messaging.ActiveXMessageFormatter>wordt gebruikt bij het verzenden of ontvangen van de COM-onderdelen.</xref:System.Messaging.ActiveXMessageFormatter>"
  example:
  - "The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.  \n  \n [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/p-system.messaging.messa_5_1.cpp)]\n [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/p-system.messaging.messa_5_1.cs)]\n [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_5_1.vb)]  \n  \n The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/p-system.messaging.messa_5_2.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/p-system.messaging.messa_5_2.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_5_2.vb)]"
  syntax:
    content: public System.Messaging.IMessageFormatter Formatter { get; set; }
    return:
      type: System.Messaging.IMessageFormatter
      description: "De <xref href=&quot;System.Messaging.IMessageFormatter&quot;> </xref> die resulteert in een stroom moet worden geschreven naar of gelezen uit de berichttekst. De standaardwaarde is <xref href=&quot;System.Messaging.XmlMessageFormatter&quot;> </xref>."
  overload: System.Messaging.Message.Formatter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De eigenschap Formatter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Messaging.Message.HashAlgorithm
  id: HashAlgorithm
  parent: System.Messaging.Message
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
  fullName: System.Messaging.Message.HashAlgorithm
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van het hash-algoritme dat Message Queuing gebruikt bij het verifiëren van een bericht of een digitale handtekening voor een bericht te maken."
  remarks: "Op de broncomputer Message Queuing-hash-algoritme gebruikt bij het maken van een digitale handtekening voor een bericht. Het doel Queue Manager gebruikt vervolgens hetzelfde hash-algoritme voor het verifiëren van het bericht wanneer het is ontvangen."
  syntax:
    content: public System.Messaging.HashAlgorithm HashAlgorithm { get; set; }
    return:
      type: System.Messaging.HashAlgorithm
      description: "Een van de <xref href=&quot;System.Messaging.HashAlgorithm&quot;> </xref> opsommingswaarden. Voor Windows XP, de standaardwaarde is <xref uid=&quot;langword_csharp_SHA&quot; name=&quot;SHA&quot; href=&quot;&quot;> </xref>. Anders wordt de standaardwaarde is <xref uid=&quot;langword_csharp_MD5&quot; name=&quot;MD5&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.HashAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap HashAlgorithm negeren."
  platform:
  - net462
- uid: System.Messaging.Message.Id
  id: Id
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Id
  nameWithType: Message.Id
  fullName: System.Messaging.Message.Id
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Hiermee wordt de bericht-id opgehaald."
  remarks: "Message Queuing wordt een bericht-id gegenereerd wanneer het bericht wordt verzonden. De id bestaat uit 20 bytes en bevat twee onderdelen: de machine <xref:System.Guid>van de verzendende computer en een unieke id voor het bericht op de computer.</xref:System.Guid> De combinatie van de twee items produceert een bericht-id die uniek is in het netwerk.       Message Queuing genereert bericht-id&quot;s voor alle berichten, inclusief de bevestigings- en -berichten. Een bevestigingsbericht in reactie op de aankomst of falen van een oorspronkelijke, verzonden bericht in het algemeen verzonden door Message Queuing. U vindt de waarde van de Id-eigenschap van het oorspronkelijke bericht in de <xref:System.Messaging.Message.CorrelationId%2A>eigenschap van een bevestigingsbericht.</xref:System.Messaging.Message.CorrelationId%2A>       U kunt ook de eigenschap Id gebruiken bij het verzenden van een antwoordbericht naar een antwoordwachtrij. Om de id van het oorspronkelijke bericht opnemen in een antwoordbericht, stel de <xref:System.Messaging.Message.CorrelationId%2A>eigenschap van het antwoordbericht voor de eigenschap Id van het oorspronkelijke bericht.</xref:System.Messaging.Message.CorrelationId%2A> De toepassing die het antwoordbericht leest kunt vervolgens de correlatie-id van het antwoordbericht gebruiken voor het identificeren van het oorspronkelijke bericht."
  example:
  - "The following code example sends and receives a message containing an order to and from a queue. It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.  \n  \n [!code-cs[Message.Acknowledgment#1](~/add/codesnippet/csharp/p-system.messaging.messa_19_1.cs)]\n [!code-cpp[Message.Acknowledgment#1](~/add/codesnippet/cpp/p-system.messaging.messa_19_1.cpp)]\n [!code-vb[Message.Acknowledgment#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_19_1.vb)]"
  syntax:
    content: public string Id { get; }
    return:
      type: System.String
      description: "Het bericht de unieke id, die wordt gegenereerd door de Message Queuing."
  overload: System.Messaging.Message.Id*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is niet verzonden. Deze eigenschap kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap Id negeren."
  platform:
  - net462
- uid: System.Messaging.Message.InfiniteTimeout
  id: InfiniteTimeout
  parent: System.Messaging.Message
  langs:
  - csharp
  name: InfiniteTimeout
  nameWithType: Message.InfiniteTimeout
  fullName: System.Messaging.Message.InfiniteTimeout
  type: Field
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Geeft aan dat er geen time-out bestaat."
  remarks: "<xref:System.Messaging.Message.TimeToBeReceived%2A>en <xref:System.Messaging.Message.TimeToReachQueue%2A>vereisen een waarde die is een time-out aangeeft.</xref:System.Messaging.Message.TimeToReachQueue%2A></xref:System.Messaging.Message.TimeToBeReceived%2A> Voor het eerste de time-outwaarde is de maximale tijd die is toegestaan voor een bericht te ontvangen uit de wachtrij. Voor de laatste is de time-out voor de tijd die is toegestaan voor een bericht in de wachtrij moet bereiken. In beide gevallen kunt u de time-outwaarde als een aantal seconden opgeven of InfiniteTimeout gebruiken om aan te geven dat er geen time-out bestaat."
  example:
  - "The following code example demonstrates the use of the InfiniteTimeout field.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public static readonly TimeSpan InfiniteTimeout;
    return:
      type: System.TimeSpan
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.IsFirstInTransaction
  id: IsFirstInTransaction
  parent: System.Messaging.Message
  langs:
  - csharp
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
  fullName: System.Messaging.Message.IsFirstInTransaction
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Haalt een waarde die aangeeft of het bericht het eerste bericht in een transactie verzonden is."
  remarks: "De eigenschap IsFirstInTransaction ontvangende toepassingen gebruiken om te controleren of een bericht het eerste verzonden bericht in een enkele transactie naar een enkele wachtrij is.       Deze eigenschap is alleen beschikbaar voor Message Queuing-versie 2.0 en hoger.       Om te controleren of de grenzen van de transactie, kunt u de eigenschap IsFirstInTransaction samen met twee andere eigenschappen: <xref:System.Messaging.Message.IsLastInTransaction%2A>en <xref:System.Messaging.Message.TransactionId%2A>.</xref:System.Messaging.Message.TransactionId%2A> </xref:System.Messaging.Message.IsLastInTransaction%2A> Gebruik de voormalige om te controleren of een bericht het laatste verzonden bericht in de transactie is en deze gebruiken voor het ophalen van de id van de transactie.       Als er slechts één bericht wordt verzonden in een transactie, de IsFirstInTransaction en <xref:System.Messaging.Message.IsLastInTransaction%2A>eigenschappen beide zijn ingesteld op `true`.</xref:System.Messaging.Message.IsLastInTransaction%2A>"
  example:
  - "The following code example displays the value of a message's IsFirstInTransaction property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool IsFirstInTransaction { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het bericht het eerste verzonden bericht in een transactie is. anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.IsFirstInTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is niet verzonden. Deze eigenschap kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap IsFirstInTransaction negeren."
  platform:
  - net462
- uid: System.Messaging.Message.IsLastInTransaction
  id: IsLastInTransaction
  parent: System.Messaging.Message
  langs:
  - csharp
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
  fullName: System.Messaging.Message.IsLastInTransaction
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Haalt een waarde die aangeeft of het bericht het laatste bericht in een transactie verzonden is."
  remarks: "De eigenschap IsLastInTransaction ontvangende toepassingen gebruiken om te controleren of een bericht het laatste verzonden bericht in een enkele transactie naar een enkele wachtrij is.       Deze eigenschap is alleen beschikbaar voor Message Queuing-versie 2.0 en hoger.       Om te controleren of de grenzen van de transactie, kunt u de eigenschap IsLastInTransaction samen met twee andere eigenschappen: <xref:System.Messaging.Message.IsFirstInTransaction%2A>en <xref:System.Messaging.Message.TransactionId%2A>.</xref:System.Messaging.Message.TransactionId%2A> </xref:System.Messaging.Message.IsFirstInTransaction%2A> Gebruik de voormalige om te controleren of een bericht het eerste verzonden bericht in de transactie is en deze gebruiken voor het ophalen van de id van de transactie.       Als er slechts één bericht wordt verzonden in een transactie de <xref:System.Messaging.Message.IsFirstInTransaction%2A>en IsLastInTransaction eigenschappen beide zijn ingesteld op `true`.</xref:System.Messaging.Message.IsFirstInTransaction%2A>"
  example:
  - "The following code example displays the value of a message's IsLastInTransaction property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool IsLastInTransaction { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het bericht het laatste verzonden bericht in een enkele transactie is; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.IsLastInTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is niet verzonden. Deze eigenschap kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap IsLastInTransaction negeren."
  platform:
  - net462
- uid: System.Messaging.Message.Label
  id: Label
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Label
  nameWithType: Message.Label
  fullName: System.Messaging.Message.Label
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van een toepassing gedefinieerde Unicode-tekenreeks die in het bericht worden beschreven."
  remarks: "U kunt een berichtlabel gebruiken voor verschillende doeleinden worden gebruikt. U kunt deze bijvoorbeeld gebruiken om weer te geven of selectief om berichten te verwerken op basis van de labelwaarde. Het label hoeft niet te moeten uniek zijn binnen berichten.       Identificeer berichtenwachtrij en het bericht labels vertegenwoordigen een waarde voor de toepassing die kan helpen bij de wachtrij of het bericht in leesbare voorwaarden. Het is de verantwoordelijkheid van de toepassing de labelinhoud, die geen ingebouwde betekenis om de Message Queuing-toepassing te hebben interpreteren."
  example:
  - "The following code example gets and sets the value of a message's Label property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string Label { get; set; }
    return:
      type: System.String
      description: "Het label van het bericht. De standaardwaarde is een lege tekenreeks (&quot;&quot;)."
  overload: System.Messaging.Message.Label*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap Label negeren."
  platform:
  - net462
- uid: System.Messaging.Message.LookupId
  id: LookupId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: LookupId
  nameWithType: Message.LookupId
  fullName: System.Messaging.Message.LookupId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Geïntroduceerd in MSMQ 3.0. Hiermee wordt het bericht lookup-id opgehaald."
  remarks: "De eigenschap LookupId geeft alleen-lezen toegang tot een bericht lookup-id. De lookup-id die is geïntroduceerd in MSMQ 3.0 is een 64-bits-id die is gegenereerd door de Message Queuing en toegewezen aan elk bericht wanneer het bericht in de wachtrij is geplaatst. De lookup-id is niet hetzelfde zijn als de bericht-id die wordt gegenereerd wanneer het bericht wordt verzonden.       Message Queuing genereert een lookup-id voor alle berichten die worden geplaatst in een wachtrij, met inbegrip van de toepassing gegenereerde bestemming, beheer en rapportenwachtrijen, evenals onbestelbare, van het systeem gegenereerde journaal-connector, en op uitgaande wachtrijen. Met andere woorden, omvat dit zowel verzonden door de verzendende toepassingen en Message Queuing-berichten. De lookup-id is uniek voor de wachtrij en heeft geen betekenis buiten de wachtrij.       Als een bericht wordt verzonden naar verschillende wachtrijen van de bestemming, of als een kopie van een bericht is opgeslagen in een computerlogboek of wachtrijlogboek, elk exemplaar van het bericht zijn eigen lookup-id heeft die is opgeslagen in de desbetreffende wachtrij.       De eigenschap LookupId kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       Een lookup-id wordt gebruikt om een specifieke bericht in de wachtrij te lezen. Wanneer de lookup-id van een bericht bekend is, de ontvangende toepassing kunt aanroepen de <xref:System.Messaging.MessageQueue.PeekByLookupId%2A>of <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A>werkt als u wilt gaan rechtstreeks naar dat bericht en inspecteren of ophalen uit de wachtrij, in tegenstelling tot cursors die moet beginnen aan het begin van de wachtrij en gaat u naar het einde van de wachtrij, het verkrijgen van de lookup-id&quot;s van de berichten in de wachtrij is de verantwoordelijkheid van de toepassing.</xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> </xref:System.Messaging.MessageQueue.PeekByLookupId%2A> Een mogelijke manier om op te halen van de lookup-id&quot;s is het maken van een trigger voor de doelwachtrij die een onderdeel dat in de cache de id&quot;s van elk bericht roept opgeslagen als ze in de wachtrij zijn geplaatst."
  syntax:
    content: public long LookupId { get; }
    return:
      type: System.Int64
      description: "Het bericht lookup-id, die wordt gegenereerd door de Message Queuing en uniek is voor de wachtrij waarin het bericht zich bevindt."
  overload: System.Messaging.Message.LookupId*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "MSMQ 3.0 is niet geïnstalleerd."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is niet verzonden. Deze eigenschap kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap LookupId negeren."
  platform:
  - net462
- uid: System.Messaging.Message.MessageType
  id: MessageType
  parent: System.Messaging.Message
  langs:
  - csharp
  name: MessageType
  nameWithType: Message.MessageType
  fullName: System.Messaging.Message.MessageType
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: 'Gets the message type: <xref uid=&quot;langword_csharp_Normal&quot; name=&quot;Normal&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Acknowledgment&quot; name=&quot;Acknowledgment&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Report&quot; name=&quot;Report&quot; href=&quot;&quot;></xref>.'
  remarks: "Deze eigenschap Message Queuing meestal ingesteld wanneer het bericht wordt verzonden. Een Message Queuing-bericht kan een van de volgende typen zijn:- `Normal`, die is een typisch bericht verzonden vanuit een toepassing naar een wachtrij of een antwoordbericht geretourneerd naar de betreffende toepassing.      - `Acknowledgement`, die Message Queuing wordt gegenereerd wanneer de betreffende toepassing aanvraagt. Bijvoorbeeld het Message Queuing-berichten positief of negatief om aan te geven dat het oorspronkelijke bericht aangekomen of is gelezen genereren. Message Queuing retourneert de juiste bevestigingsbericht naar de beheerwachtrij die is opgegeven door de betreffende toepassing.      - `Report`, die Message Queuing wordt gegenereerd wanneer een rapportenwachtrij is gedefinieerd op het bronwachtrijbeheer. Wanneer tracering is ingeschakeld, verzendt Message Queuing een rapportbericht naar de rapportenwachtrij Message Queuing telkens wanneer het oorspronkelijke bericht binnengaat of verlaat, een Message Queuing-server."
  example:
  - "The following code example displays the value of a message's MessageType property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageType MessageType { get; }
    return:
      type: System.Messaging.MessageType
      description: "Een van de waarden MessageType."
  overload: System.Messaging.Message.MessageType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is niet verzonden. Deze eigenschap kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap MessageType negeren."
  platform:
  - net462
- uid: System.Messaging.Message.Priority
  id: Priority
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Priority
  nameWithType: Message.Priority
  fullName: System.Messaging.Message.Priority
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van de prioriteit van bericht, waarmee wordt bepaald wanneer het bericht in de wachtrij is geplaatst."
  remarks: "De eigenschap prioriteit bepaalt hoe Message Queuing het bericht behandelt terwijl het onderweg is en wanneer deze de bestemming bereikt. Berichten met een hogere prioriteit zijn voorrang bij routering en ingevoegd aan het begin van de doelwachtrij. Berichten met dezelfde prioriteit worden geplaatst in de wachtrij op basis van tijd van binnenkomst.       U kunt instellen dat een stukje zinvolle prioriteit alleen voor niet-transactionele berichten. Message Queuing stelt automatisch de prioriteit voor transactionele berichten naar `Lowest`, waardoor de prioriteit van de transactionele bericht moet worden genegeerd."
  example:
  - "The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.  \n  \n [!code-cpp[Message.DefaultPropertiesToSend#1](~/add/codesnippet/cpp/p-system.messaging.messa_87_1.cpp)]\n [!code-vb[Message.DefaultPropertiesToSend#1](~/add/codesnippet/visualbasic/p-system.messaging.messa_87_1.vb)]\n [!code-cs[Message.DefaultPropertiesToSend#1](~/add/codesnippet/csharp/p-system.messaging.messa_87_1.cs)]"
  syntax:
    content: public System.Messaging.MessagePriority Priority { get; set; }
    return:
      type: System.Messaging.MessagePriority
      description: "Een van de <xref href=&quot;System.Messaging.MessagePriority&quot;> </xref> waarden die de prioriteitsniveaus van niet-transactionele berichten vertegenwoordigen. De standaardwaarde is <xref uid=&quot;langword_csharp_Normal&quot; name=&quot;Normal&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.Priority*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de prioriteitseigenschap negeren."
  platform:
  - net462
- uid: System.Messaging.Message.Recoverable
  id: Recoverable
  parent: System.Messaging.Message
  langs:
  - csharp
  name: Recoverable
  nameWithType: Message.Recoverable
  fullName: System.Messaging.Message.Recoverable
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of het bericht wordt bezorgd in het geval van een computer is mislukt of netwerk probleem kan worden gegarandeerd."
  remarks: "De herstelbare eigenschap geeft aan of de levering van een bericht wordt gewaarborgd, zelfs als een computer vastloopt terwijl het bericht onderweg naar de doelwachtrij is.       Als de bezorging van een bericht wordt gewaarborgd, wordt het bericht lokaal opgeslagen bij elke stap langs de route totdat het bericht zijn doorgestuurd naar de volgende computer. De herstelbare eigenschap instelt op `true` kan invloed hebben op de doorvoer.       Als het bericht transactioneel is, Message Queuing wordt het bericht automatisch beschouwd als herstelbare, ongeacht de waarde van de eigenschap hersteld."
  example:
  - "The following code example gets and sets the value of a message's Recoverable property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool Recoverable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de bezorging van het bericht wordt gewaarborgd (via het opslaan van het bericht naar schijf tijdens en route); <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> als levering niet gewaarborgd. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.Recoverable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de herstelbare eigenschap negeren."
  platform:
  - net462
- uid: System.Messaging.Message.ResponseQueue
  id: ResponseQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
  fullName: System.Messaging.Message.ResponseQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van de wachtrij die door toepassingen gegenereerde antwoordberichten ontvangt."
  remarks: "De eigenschap ResponseQueue geeft de wachtrij die door toepassingen gegenereerde antwoordberichten, waardoor de ontvangende toepassing geretourneerd naar de verzendende toepassing ontvangt. De verzendende toepassing geeft antwoordwachtrijen als de toepassing de berichten verzendt. Elke beschikbare wachtrij kan worden opgegeven als een antwoordwachtrij.       Berichten die zijn geretourneerd naar de antwoordwachtrij zijn toepassingsspecifiek. De toepassing moet de inhoud van de berichten, evenals de actie te ondernemen na ontvangst van een bericht te definiëren."
  example:
  - "The following code example gets and sets the value of a message's ResponseQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageQueue ResponseQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: "De <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> aan welke antwoord toepassing gegenereerde berichten worden geretourneerd. De standaardwaarde is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.ResponseQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap ResponseQueue negeren."
  platform:
  - net462
- uid: System.Messaging.Message.SecurityContext
  id: SecurityContext
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SecurityContext
  nameWithType: Message.SecurityContext
  fullName: System.Messaging.Message.SecurityContext
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van de beveiligingscontext voor een bericht."
  syntax:
    content: public System.Messaging.SecurityContext SecurityContext { get; set; }
    return:
      type: System.Messaging.SecurityContext
      description: "Een <xref href=&quot;System.Messaging.SecurityContext&quot;> </xref> -object dat de beveiligingscontext voor een bericht bevat als de eigenschap eerder is ingesteld; anders is NULL."
  overload: System.Messaging.Message.SecurityContext*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.Message.SenderCertificate
  id: SenderCertificate
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
  fullName: System.Messaging.Message.SenderCertificate
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van het beveiligingscertificaat dat is gebruikt om berichten te verifiëren."
  remarks: "De ontvangende toepassing gebruikt de eigenschap SenderCertificate wanneer het bericht een externe beveiligingscertificaat bevat.       Message Queuing kan een bericht met behulp van een interne of externe beveiligingscertificaat verifiëren. Message Queuing biedt een interne certificaten die worden gebruikt om te controleren of de integriteit van berichten. Een certificeringsinstantie (CA) biedt een extern certificaat dat u via de eigenschap SenderCertificate van het bericht openen kunt. Naast de mogelijkheid het bericht wordt geverifieerd met Message Queuing, kan een extern certificaat de ontvangende toepassing verder verifiëren van de afzender. Een intern certificaat heeft geen bruikbare waarde aan een ontvangende toepassing.       Een extern certificaat moet zijn geregistreerd met de directoryservice van de Message Queuing-systeem. Een extern certificaat bevat informatie over de certificeringsinstantie (CA), de gebruiker van het certificaat, de geldigheidsperiode van het certificaat, de openbare sleutel van de gebruiker van het certificaat en de handtekening van de certificeringsinstantie."
  syntax:
    content: public byte[] SenderCertificate { get; set; }
    return:
      type: System.Byte[]
      description: "Een matrix met byte-waarden die een beveiligingscertificaat, Message Queuing gebruikt om te controleren of de afzender van het bericht aangeeft. De standaardwaarde is een matrix van lengte van nul."
  overload: System.Messaging.Message.SenderCertificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap SenderCertificate negeren."
  platform:
  - net462
- uid: System.Messaging.Message.SenderId
  id: SenderId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderId
  nameWithType: Message.SenderId
  fullName: System.Messaging.Message.SenderId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Hiermee haalt u de id van de gebruiker verzenden."
  remarks: "Als de <xref:System.Messaging.Message.AttachSenderId%2A>eigenschap is `false`, de afzender-id opgegeven in de eigenschap SenderId is niet gekoppeld aan het bericht wanneer deze wordt verzonden.</xref:System.Messaging.Message.AttachSenderId%2A> Hiermee geeft u aan de Message Queuing dat de afzender niet worden gevalideerd wanneer het bericht wordt verzonden naar de doelwachtrij. Als de <xref:System.Messaging.Message.AttachSenderId%2A>eigenschap is `true`, de waarde van de eigenschap SenderId is betrouwbaar alleen als het bericht is geverifieerd.</xref:System.Messaging.Message.AttachSenderId%2A> Gebruik de <xref:System.Messaging.Message.Authenticated%2A>eigenschap in combinatie met de eigenschap SenderId om te controleren of de rechten van de afzender.</xref:System.Messaging.Message.Authenticated%2A>       Een connectortoepassing is een toepassing die gebruikmaakt van een server-connector voor communicatie tussen de Message Queuing- en andere queuing systemen. Message Queuing vereist connectortoepassingen over afzender-id. U moet instellen de <xref:System.Messaging.Message.ConnectorType%2A>eigenschap bij het verzenden van een bericht via een connectortoepassing.</xref:System.Messaging.Message.ConnectorType%2A>"
  syntax:
    content: public byte[] SenderId { get; }
    return:
      type: System.Byte[]
      description: "Een matrix met byte-waarden die de afzender identificeert. Het ontvangende wachtrijbeheer maakt gebruik van de id tijdens de verificatie van het bericht om te controleren of de afzender van het bericht en de toegangsrechten van de afzender naar de wachtrij."
  overload: System.Messaging.Message.SenderId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is niet verzonden. Deze eigenschap kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap SenderId negeren."
  platform:
  - net462
- uid: System.Messaging.Message.SenderVersion
  id: SenderVersion
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SenderVersion
  nameWithType: Message.SenderVersion
  fullName: System.Messaging.Message.SenderVersion
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Hiermee haalt u de versie van Message Queuing gebruikt om het bericht te verzenden."
  remarks: "De eigenschap SenderVersion is belangrijk voor bepaalde functies. Bijvoorbeeld, transactieverwerking wordt ondersteund door Message Queuing 2.0 of hoger en digitale handtekeningen worden gebruikt voor verificatie van berichten is verzonden door MSMQ 1.0.       De verzendende wachtrijbeheerder stelt de eigenschap SenderVersion wanneer het bericht is verzonden."
  example:
  - "The following code example displays the value of a message's SenderVersion property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public long SenderVersion { get; }
    return:
      type: System.Int64
      description: "De versie van Message Queuing gebruikt om het bericht te verzenden."
  overload: System.Messaging.Message.SenderVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is niet verzonden. Deze eigenschap kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap SenderVersion negeren."
  platform:
  - net462
- uid: System.Messaging.Message.SentTime
  id: SentTime
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SentTime
  nameWithType: Message.SentTime
  fullName: System.Messaging.Message.SentTime
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Hiermee haalt de datum en tijd op de verzendende computer waarop het bericht is verzonden door de wachtrijbeheerder van de bron."
  remarks: "De eigenschap SentTime wordt aangepast aan de lokale tijd van de computer waarop dit exemplaar van de <xref:System.Messaging.Message>klasse is gemaakt.</xref:System.Messaging.Message> Deze tijdzone kan afwijken van die van de bron- en doelserver wachtrijen."
  example:
  - "The following code example displays the value of a message's SentTime property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public DateTime SentTime { get; }
    return:
      type: System.DateTime
      description: "Een <xref:System.DateTime>die staat voor de tijd die het bericht is verzonden.</xref:System.DateTime>"
  overload: System.Messaging.Message.SentTime*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is niet verzonden. Deze eigenschap kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap SentTime negeren."
  platform:
  - net462
- uid: System.Messaging.Message.SourceMachine
  id: SourceMachine
  parent: System.Messaging.Message
  langs:
  - csharp
  name: SourceMachine
  nameWithType: Message.SourceMachine
  fullName: System.Messaging.Message.SourceMachine
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Hiermee haalt u de computer van waaruit het bericht afkomstig is."
  remarks: "De indeling van de eigenschap SourceMachine bevat geen voorafgaand aan twee slashes (\\\\\\\\). Bijvoorbeeld: `myServer` is een geldige SourceMachine."
  example:
  - "The following code example displays the value of a message's SourceMachine property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string SourceMachine { get; }
    return:
      type: System.String
      description: "De naam van de computer van waaruit het bericht is verzonden."
  overload: System.Messaging.Message.SourceMachine*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is niet verzonden. Deze eigenschap kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap SourceMachine negeren."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "De computer informatie of directory service is niet toegankelijk."
  platform:
  - net462
- uid: System.Messaging.Message.TimeToBeReceived
  id: TimeToBeReceived
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
  fullName: System.Messaging.Message.TimeToBeReceived
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van de maximale tijdsduur voor het bericht te ontvangen uit de doelwachtrij."
  remarks: "De eigenschap TimeToBeReceived geeft de totale tijd voor een verzonden bericht te ontvangen uit de doelwachtrij. De tijdslimiet bevat de tijd besteed aan de doelwachtrij en de tijd in de wachtrij heeft bevonden voordat het bericht wordt ontvangen.      > [!CAUTION] > Wanneer u de afhankelijke clients, zorg ervoor dat de klok op de clientcomputer is gesynchroniseerd met de klok op de server met Message Queuing. Anders onvoorspelbaar gedrag kan leiden bij het verzenden van een bericht waarvan de eigenschap TimeToBeReceived is niet <xref:System.Messaging.Message.InfiniteTimeout>.</xref:System.Messaging.Message.InfiniteTimeout>       Als het interval dat is opgegeven door de eigenschap TimeToBeReceived is verlopen voordat het bericht is verwijderd uit de wachtrij, verwijdert Message Queuing het bericht op twee manieren. Als het bericht <xref:System.Messaging.Message.UseDeadLetterQueue%2A>eigenschap is `true`, het bericht wordt verzonden naar de wachtrij voor onbestelbare berichten.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> Als <xref:System.Messaging.Message.UseDeadLetterQueue%2A>is `false`, het bericht wordt genegeerd.</xref:System.Messaging.Message.UseDeadLetterQueue%2A>       U kunt het bericht instellen <xref:System.Messaging.Message.AcknowledgeType%2A>eigenschap om aan te vragen of een negatief bevestigingsbericht Message Queuing verzenden terug naar de betreffende toepassing als het bericht is niet opgehaald voordat de timer verloopt.</xref:System.Messaging.Message.AcknowledgeType%2A>       Als de waarde gespecificeerd door de eigenschap TimeToBeReceived minder dan de waarde gespecificeerd is door de <xref:System.Messaging.Message.TimeToReachQueue%2A>-eigenschap TimeToBeReceived voorrang.</xref:System.Messaging.Message.TimeToReachQueue%2A>       Wanneer meerdere berichten worden verzonden in één transactie, Message Queuing gebruikt de eigenschap TimeToBeReceived van het eerste bericht."
  example:
  - "The following code example gets and sets the value of a message's TimeToBeReceived property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public TimeSpan TimeToBeReceived { get; set; }
    return:
      type: System.TimeSpan
      description: "De totale tijd voor een verzonden bericht te ontvangen uit de doelwachtrij. De standaardwaarde is <xref href=&quot;System.Messaging.Message.InfiniteTimeout&quot;> </xref>."
  overload: System.Messaging.Message.TimeToBeReceived*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap TimeToBeReceived negeren."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De opgegeven waarde voor TimeToBeReceived is ongeldig."
  platform:
  - net462
- uid: System.Messaging.Message.TimeToReachQueue
  id: TimeToReachQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
  fullName: System.Messaging.Message.TimeToReachQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van de maximale tijdsduur voor het bericht de wachtrij moet bereiken."
  remarks: "Als het door de eigenschap TimeToReachQueue opgegeven interval is verstreken voordat het bericht de bestemming bereikt, verwijdert Message Queuing het bericht op twee manieren. Als het bericht <xref:System.Messaging.Message.UseDeadLetterQueue%2A>eigenschap is `true`, het bericht wordt verzonden naar de wachtrij voor onbestelbare berichten.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> Als <xref:System.Messaging.Message.UseDeadLetterQueue%2A>is `false`, het bericht wordt genegeerd, kunt u e-mailbericht instellen <xref:System.Messaging.Message.AcknowledgeType%2A>eigenschap om aan te vragen of een negatief bevestigingsbericht Message Queuing verzenden terug naar de betreffende toepassing als het bericht niet heeft bereikt voordat de timer verloopt.</xref:System.Messaging.Message.AcknowledgeType%2A> </xref:System.Messaging.Message.UseDeadLetterQueue%2A>       Als de eigenschap TimeToReachQueue is ingesteld op 0 seconden, Message Queuing keren probeert te verzenden van het bericht naar de bestemming: als de wachtrij wordt gewacht op het bericht. Als de wachtrij lokale is, het bericht altijd heeft bereikt.       Als de waarde gespecificeerd door de eigenschap TimeToReachQueue groter dan de waarde gespecificeerd is door de <xref:System.Messaging.Message.TimeToBeReceived%2A>-eigenschap <xref:System.Messaging.Message.TimeToBeReceived%2A>voorrang.</xref:System.Messaging.Message.TimeToBeReceived%2A> </xref:System.Messaging.Message.TimeToBeReceived%2A>       Wanneer meerdere berichten worden verzonden in één transactie, Message Queuing gebruikt de eigenschap TimeToReachQueue van het eerste bericht."
  example:
  - "The following code example gets and sets the value of a message's TimeToReachQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public TimeSpan TimeToReachQueue { get; set; }
    return:
      type: System.TimeSpan
      description: "De tijdslimiet voor het bericht om de doelwachtrij te bereiken, beginnend vanaf het moment dat het bericht wordt verzonden. De standaardwaarde is <xref href=&quot;System.Messaging.Message.InfiniteTimeout&quot;> </xref>."
  overload: System.Messaging.Message.TimeToReachQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap TimeToReachQueue negeren."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De opgegeven waarde voor TimeToReachQueue is ongeldig. Er kan geen negatief getal vertegenwoordigen."
  platform:
  - net462
- uid: System.Messaging.Message.TransactionId
  id: TransactionId
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TransactionId
  nameWithType: Message.TransactionId
  fullName: System.Messaging.Message.TransactionId
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Hiermee wordt de id voor de transactie waarvan het bericht een onderdeel is."
  remarks: "De eigenschap TransactionId ontvangende toepassingen gebruiken om te controleren dat een bericht is verzonden als onderdeel van een bepaalde transactie. De transactie-id bevat de id van de verzendende computer (eerste 16-bits), gevolgd door een volgnummer 4-bytes transactie.       Deze eigenschap is alleen beschikbaar voor Message Queuing-versie 2.0 en hoger.       Transactie-id&quot;s zijn niet noodzakelijkerwijs uniek zijn, omdat de volgnummers transactie niet permanent zijn en ze via opnieuw op 2 starten <sup>20</sup>. Message Queuing garandeert alleen verdere transacties heeft volgnummers andere transactie.       U kunt de eigenschap TransactionId samen met de <xref:System.Messaging.Message.IsFirstInTransaction%2A>en <xref:System.Messaging.Message.IsLastInTransaction%2A>Eigenschappen om te controleren of de grenzen van de transactie.</xref:System.Messaging.Message.IsLastInTransaction%2A> </xref:System.Messaging.Message.IsFirstInTransaction%2A>"
  example:
  - "The following code example displays the value of a message's TransactionId property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public string TransactionId { get; }
    return:
      type: System.String
      description: "De id voor de transactie die is gekoppeld aan het bericht."
  overload: System.Messaging.Message.TransactionId*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is niet verzonden. Deze eigenschap kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap TransactionId negeren."
  platform:
  - net462
- uid: System.Messaging.Message.TransactionStatusQueue
  id: TransactionStatusQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
  fullName: System.Messaging.Message.TransactionStatusQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Hiermee haalt u de transactiestatuswachtrij op de broncomputer."
  remarks: "De eigenschap TransactionStatusQueue geeft de transactionele wachtrij op de broncomputer die lezen ontvangst bevestigingen van connector-toepassingen ontvangt. Message Queuing stelt de eigenschap en de eigenschap connector-toepassingen gebruiken bij het ophalen van transactionele berichten die worden verzonden naar externe wachtrijen.       Er bestaat een afwijkende wachtrij in een wachtrij plaatsen dan Microsoft Message Queuing-systeem. Message Queuing communiceert met dergelijke wachtrijen via een connectortoepassing.       De connector-toepassing kunt de transactiestatuswachtrij verzenden bevestigingsberichten terug naar de betreffende toepassing. De transactiestatuswachtrij ontvangt deze bevestigingen zelfs als de verzendende toepassing geen andere bevestigingen aanvraagt."
  example:
  - "The following code example displays the value of a message's TransactionStatusQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.Messaging.MessageQueue TransactionStatusQueue { get; set; }
    return:
      type: System.Messaging.MessageQueue
      description: "De transactiestatuswachtrij van de broncomputer, dat wordt gebruikt voor het verzenden van bevestigingsberichten terug naar de betreffende toepassing. De standaardwaarde is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.TransactionStatusQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Het bericht is niet verzonden. Deze eigenschap kan alleen worden gelezen op berichten die zijn opgehaald uit een wachtrij.       - of - de berichtenwachtrij is gefilterd, zodat de eigenschap TransactionStatusQueue negeren."
  platform:
  - net462
- uid: System.Messaging.Message.UseAuthentication
  id: UseAuthentication
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
  fullName: System.Messaging.Message.UseAuthentication
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of het bericht is (of moet) geverifieerde voordat wordt verzonden."
  remarks: "De eigenschap UseAuthentication geeft aan of het bericht moet worden geverifieerd. Als de verzendende toepassing verificatie vraagt, Message Queuing maakt een digitale handtekening en gebruikt deze om het bericht ondertekend wanneer deze wordt verzonden en het bericht te verifiëren wanneer het is ontvangen.       Als UseAuthentication `false` en een bericht wordt verzonden naar een wachtrij alleen geverifieerde berichten accepteert, wordt het bericht geweigerd wanneer het de wachtrij bereikt.       U kan niet als een bericht niet kan worden geverifieerd door te kijken in de eigenschappen ervan bepalen. Message Queuing wordt dergelijke berichten verwijderd voordat ze worden gedownload naar de wachtrij. U kunt aanvragen dat een bevestigingsbericht worden verzonden als een fout levering wordt voorkomen dat een bericht in de wachtrij die binnenkomen."
  syntax:
    content: public bool UseAuthentication { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de betreffende toepassing aangevraagd verificatie voor het bericht. anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.UseAuthentication*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap UseAuthentication negeren."
  platform:
  - net462
- uid: System.Messaging.Message.UseDeadLetterQueue
  id: UseDeadLetterQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
  fullName: System.Messaging.Message.UseDeadLetterQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of een kopie van het bericht kan niet worden bezorgd moet worden verzonden naar een wachtrij met onbestelbare berichten."
  remarks: "De <xref:System.Messaging.Message.UseJournalQueue%2A>en UseDeadLetterQueue eigenschappen opgeven hoe Message Queuing houdt een bericht.</xref:System.Messaging.Message.UseJournalQueue%2A> Als UseDeadLetterQueue `true`, levering fout (van een niet-transactionele bericht), zorgt ervoor dat het bericht wordt verzonden naar de niet-transactionele wachtrij voor onbestelbare berichten op de computer waarop het bericht kan niet worden bezorgd. Levering fout kan worden veroorzaakt door een bericht timer verloopt, bijvoorbeeld.       In het geval van levering mislukt voor een transactionele berichten verzendt Message Queuing het bericht naar de transactionele wachtrij voor onbestelbare berichten in alle gevallen voor negatieve en onzekere op de bronmachine.       Wanneer u berichten in een wachtrij met onbestelbare berichten opslaat, moet u de wachtrij periodiek om het verwijderen van berichten die nodig zijn niet meer uitschakelen. Berichten die zijn opgeslagen in aantal wachtrijen voor onbestelbare berichten op het quotum van de grootte voor de computer waarop de wachtrij zich bevindt. Het quotum is ingesteld door de beheerder en verwijst naar de grootte die voor het opslaan van berichten op de hele computer, niet alleen in een enkele wachtrij is toegewezen.       U maakt geen netwerkverkeersregel een logboek of de wachtrij voor onbestelbare berichten. Dit zijn beide systeemwachtrijen die Message Queuing wordt gegenereerd."
  example:
  - "The following code example gets and sets the value of a message's UseDeadLetterQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseDeadLetterQueue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de levering van berichten fout moet resulteren in een kopie van het bericht wordt verzonden naar een wachtrij met onbestelbare berichten; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.UseDeadLetterQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap UseDeadLetterQueue negeren."
  platform:
  - net462
- uid: System.Messaging.Message.UseEncryption
  id: UseEncryption
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseEncryption
  nameWithType: Message.UseEncryption
  fullName: System.Messaging.Message.UseEncryption
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of het bericht privé maken."
  remarks: "Als een bericht particulier is, wordt de instantie versleuteld voordat deze worden verzonden en ontsleuteld wanneer het is ontvangen. Voor het verzenden van een persoonlijk bericht, de verzendende toepassing moet opgeven dat versleuteling worden gebruikt en, desgewenst het versleutelingsalgoritme.       Bij het verzenden van privéberichten hoeft uw toepassing niet naar de berichtversleuteling wordt uitgevoerd. Message Queuing kunt versleutelen de berichttekst voor u als uw toepassing verzendt berichten in een bedrijf met Microsoft Windows 2000, die toegang tot Active Directory heeft. Wanneer privé-berichten ontvangt, ontsleutelt het ontvangende wachtrijbeheer altijd de berichttekst."
  example:
  - "The following code example gets and sets the value of a message's UseEncryption property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseEncryption { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>om te vereisen Message Queuing voor het versleutelen van het bericht. anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.UseEncryption*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap UseEncryption negeren."
  platform:
  - net462
- uid: System.Messaging.Message.UseJournalQueue
  id: UseJournalQueue
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
  fullName: System.Messaging.Message.UseJournalQueue
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of een kopie van het bericht moet worden bewaard in een systeemlogboek op de oorspronkelijke computer."
  remarks: "De UseJournalQueue en <xref:System.Messaging.Message.UseDeadLetterQueue%2A>eigenschappen opgeven hoe Message Queuing houdt een bericht.</xref:System.Messaging.Message.UseDeadLetterQueue%2A> Als UseJournalQueue `true`, en vervolgens een kopie wordt opgeslagen in het computerlogboek op de oorspronkelijke computer bij elke stap dat een bericht wordt verzonden.       De verzonden bericht is alleen gekopieerd naar de logboekwachtrij als de doelwachtrij op een externe computer is. Als het doel op de lokale computer, wordt het bericht rechtstreeks naar de wachtrij; Er zijn geen tussenliggende stappen voor het vereisen van de logboekniveaus in.       Wanneer u berichten in een logboekwachtrij opslaat, schakelt u de wachtrij periodiek om het verwijderen van berichten die niet langer nodig zijn. Berichten die zijn opgeslagen in wachtrijen tellen mee voor het quotum voor de computer waarop de wachtrij zich bevindt. (Het quotum is ingesteld door de beheerder.)       U maakt geen netwerkverkeersregel een logboek of de wachtrij voor onbestelbare berichten. Dit zijn beide systeemwachtrijen die Message Queuing wordt gegenereerd."
  example:
  - "The following code example gets and sets the value of a message's UseJournalQueue property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseJournalQueue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>om ervoor te zorgen dat een kopie van een bericht wordt gehandhaafd in de oorspronkelijke computer machine journaal na het bericht is met succes verzonden (van de oorspronkelijke computer naar de volgende server); anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.UseJournalQueue*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap UseJournalQueue negeren."
  platform:
  - net462
- uid: System.Messaging.Message.UseTracing
  id: UseTracing
  parent: System.Messaging.Message
  langs:
  - csharp
  name: UseTracing
  nameWithType: Message.UseTracing
  fullName: System.Messaging.Message.UseTracing
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Opgehaald of ingesteld van een waarde die of u aangeeft wilt traceren van een bericht als u deze verplaatst naar de doelwachtrij."
  remarks: "De eigenschap UseTracing geeft aan of de route van een bericht bijhouden zoals naar de doelwachtrij verplaatst. Als `true`, een rapportbericht (gegenereerd door de Message Queuing) naar een rapportenwachtrij verzonden, elke keer dat het bericht een Message Queuing-routeringsserver passeert. De rapportenwachtrij wordt opgegeven door het bronwachtrijbeheer. Rapportenwachtrijen zijn niet beperkt tot rapportberichten die gegenereerd worden door Message Queuing; uw toepassing gegenereerde berichten kunnen ook worden verzonden naar de rapportenwachtrij.       Met behulp van de tracering omvat het instellen van Active Directory en een rapportenwachtrij voor de Message Queuing-onderneming op te geven. De beheerder configureert deze instellingen."
  example:
  - "The following code example gets and sets the value of a message's UseTracing property.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool UseTracing { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als u elke door het oorspronkelijke bericht onderweg is aangebracht in de doelwachtrij tussenstap genereert een rapport moet worden verzonden naar de rapportenwachtrij van het systeem; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Messaging.Message.UseTracing*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De berichtenwachtrij is gefilterd, zodat de eigenschap UseTracing negeren."
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Messaging.Message.#ctor
  parent: System.Messaging.Message
  isExternal: false
  name: Message()
  nameWithType: Message.Message()
  fullName: System.Messaging.Message.Message()
- uid: System.Messaging.Message.#ctor(System.Object)
  parent: System.Messaging.Message
  isExternal: false
  name: Message(Object)
  nameWithType: Message.Message(Object)
  fullName: System.Messaging.Message.Message(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)
  parent: System.Messaging.Message
  isExternal: false
  name: Message(Object,IMessageFormatter)
  nameWithType: Message.Message(Object,IMessageFormatter)
  fullName: System.Messaging.Message.Message(Object,IMessageFormatter)
- uid: System.Messaging.IMessageFormatter
  parent: System.Messaging
  isExternal: false
  name: IMessageFormatter
  nameWithType: IMessageFormatter
  fullName: System.Messaging.IMessageFormatter
- uid: System.Messaging.Message.AcknowledgeType
  parent: System.Messaging.Message
  isExternal: false
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
  fullName: System.Messaging.Message.AcknowledgeType
- uid: System.Messaging.AcknowledgeTypes
  parent: System.Messaging
  isExternal: false
  name: AcknowledgeTypes
  nameWithType: AcknowledgeTypes
  fullName: System.Messaging.AcknowledgeTypes
- uid: System.Messaging.Message.Acknowledgment
  parent: System.Messaging.Message
  isExternal: false
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
  fullName: System.Messaging.Message.Acknowledgment
- uid: System.Messaging.Acknowledgment
  parent: System.Messaging
  isExternal: false
  name: Acknowledgment
  nameWithType: Acknowledgment
  fullName: System.Messaging.Acknowledgment
- uid: System.Messaging.Message.AdministrationQueue
  parent: System.Messaging.Message
  isExternal: false
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
  fullName: System.Messaging.Message.AdministrationQueue
- uid: System.Messaging.MessageQueue
  parent: System.Messaging
  isExternal: false
  name: MessageQueue
  nameWithType: MessageQueue
  fullName: System.Messaging.MessageQueue
- uid: System.Messaging.Message.AppSpecific
  parent: System.Messaging.Message
  isExternal: false
  name: AppSpecific
  nameWithType: Message.AppSpecific
  fullName: System.Messaging.Message.AppSpecific
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Messaging.Message.ArrivedTime
  parent: System.Messaging.Message
  isExternal: false
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
  fullName: System.Messaging.Message.ArrivedTime
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Messaging.Message.AttachSenderId
  parent: System.Messaging.Message
  isExternal: false
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
  fullName: System.Messaging.Message.AttachSenderId
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message.Authenticated
  parent: System.Messaging.Message
  isExternal: false
  name: Authenticated
  nameWithType: Message.Authenticated
  fullName: System.Messaging.Message.Authenticated
- uid: System.Messaging.Message.AuthenticationProviderName
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
  fullName: System.Messaging.Message.AuthenticationProviderName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Messaging.Message.AuthenticationProviderType
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
  fullName: System.Messaging.Message.AuthenticationProviderType
- uid: System.Messaging.CryptographicProviderType
  parent: System.Messaging
  isExternal: false
  name: CryptographicProviderType
  nameWithType: CryptographicProviderType
  fullName: System.Messaging.CryptographicProviderType
- uid: System.Messaging.Message.Body
  parent: System.Messaging.Message
  isExternal: false
  name: Body
  nameWithType: Message.Body
  fullName: System.Messaging.Message.Body
- uid: System.Messaging.Message.BodyStream
  parent: System.Messaging.Message
  isExternal: false
  name: BodyStream
  nameWithType: Message.BodyStream
  fullName: System.Messaging.Message.BodyStream
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Messaging.Message.BodyType
  parent: System.Messaging.Message
  isExternal: false
  name: BodyType
  nameWithType: Message.BodyType
  fullName: System.Messaging.Message.BodyType
- uid: System.Messaging.Message.ConnectorType
  parent: System.Messaging.Message
  isExternal: false
  name: ConnectorType
  nameWithType: Message.ConnectorType
  fullName: System.Messaging.Message.ConnectorType
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Messaging.Message.CorrelationId
  parent: System.Messaging.Message
  isExternal: false
  name: CorrelationId
  nameWithType: Message.CorrelationId
  fullName: System.Messaging.Message.CorrelationId
- uid: System.Messaging.Message.DestinationQueue
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
  fullName: System.Messaging.Message.DestinationQueue
- uid: System.Messaging.Message.DestinationSymmetricKey
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
  fullName: System.Messaging.Message.DestinationSymmetricKey
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.Message.DigitalSignature
  parent: System.Messaging.Message
  isExternal: false
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
  fullName: System.Messaging.Message.DigitalSignature
- uid: System.Messaging.Message.EncryptionAlgorithm
  parent: System.Messaging.Message
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
  fullName: System.Messaging.Message.EncryptionAlgorithm
- uid: System.Messaging.EncryptionAlgorithm
  parent: System.Messaging
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: EncryptionAlgorithm
  fullName: System.Messaging.EncryptionAlgorithm
- uid: System.Messaging.Message.Extension
  parent: System.Messaging.Message
  isExternal: false
  name: Extension
  nameWithType: Message.Extension
  fullName: System.Messaging.Message.Extension
- uid: System.Messaging.Message.Formatter
  parent: System.Messaging.Message
  isExternal: false
  name: Formatter
  nameWithType: Message.Formatter
  fullName: System.Messaging.Message.Formatter
- uid: System.Messaging.Message.HashAlgorithm
  parent: System.Messaging.Message
  isExternal: false
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
  fullName: System.Messaging.Message.HashAlgorithm
- uid: System.Messaging.HashAlgorithm
  parent: System.Messaging
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Messaging.HashAlgorithm
- uid: System.Messaging.Message.Id
  parent: System.Messaging.Message
  isExternal: false
  name: Id
  nameWithType: Message.Id
  fullName: System.Messaging.Message.Id
- uid: System.Messaging.Message.InfiniteTimeout
  parent: System.Messaging.Message
  isExternal: false
  name: InfiniteTimeout
  nameWithType: Message.InfiniteTimeout
  fullName: System.Messaging.Message.InfiniteTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Messaging.Message.IsFirstInTransaction
  parent: System.Messaging.Message
  isExternal: false
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
  fullName: System.Messaging.Message.IsFirstInTransaction
- uid: System.Messaging.Message.IsLastInTransaction
  parent: System.Messaging.Message
  isExternal: false
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
  fullName: System.Messaging.Message.IsLastInTransaction
- uid: System.Messaging.Message.Label
  parent: System.Messaging.Message
  isExternal: false
  name: Label
  nameWithType: Message.Label
  fullName: System.Messaging.Message.Label
- uid: System.Messaging.Message.LookupId
  parent: System.Messaging.Message
  isExternal: false
  name: LookupId
  nameWithType: Message.LookupId
  fullName: System.Messaging.Message.LookupId
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Messaging.Message.MessageType
  parent: System.Messaging.Message
  isExternal: false
  name: MessageType
  nameWithType: Message.MessageType
  fullName: System.Messaging.Message.MessageType
- uid: System.Messaging.MessageType
  parent: System.Messaging
  isExternal: false
  name: MessageType
  nameWithType: MessageType
  fullName: System.Messaging.MessageType
- uid: System.Messaging.Message.Priority
  parent: System.Messaging.Message
  isExternal: false
  name: Priority
  nameWithType: Message.Priority
  fullName: System.Messaging.Message.Priority
- uid: System.Messaging.MessagePriority
  parent: System.Messaging
  isExternal: false
  name: MessagePriority
  nameWithType: MessagePriority
  fullName: System.Messaging.MessagePriority
- uid: System.Messaging.Message.Recoverable
  parent: System.Messaging.Message
  isExternal: false
  name: Recoverable
  nameWithType: Message.Recoverable
  fullName: System.Messaging.Message.Recoverable
- uid: System.Messaging.Message.ResponseQueue
  parent: System.Messaging.Message
  isExternal: false
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
  fullName: System.Messaging.Message.ResponseQueue
- uid: System.Messaging.Message.SecurityContext
  parent: System.Messaging.Message
  isExternal: false
  name: SecurityContext
  nameWithType: Message.SecurityContext
  fullName: System.Messaging.Message.SecurityContext
- uid: System.Messaging.SecurityContext
  parent: System.Messaging
  isExternal: false
  name: SecurityContext
  nameWithType: SecurityContext
  fullName: System.Messaging.SecurityContext
- uid: System.Messaging.Message.SenderCertificate
  parent: System.Messaging.Message
  isExternal: false
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
  fullName: System.Messaging.Message.SenderCertificate
- uid: System.Messaging.Message.SenderId
  parent: System.Messaging.Message
  isExternal: false
  name: SenderId
  nameWithType: Message.SenderId
  fullName: System.Messaging.Message.SenderId
- uid: System.Messaging.Message.SenderVersion
  parent: System.Messaging.Message
  isExternal: false
  name: SenderVersion
  nameWithType: Message.SenderVersion
  fullName: System.Messaging.Message.SenderVersion
- uid: System.Messaging.Message.SentTime
  parent: System.Messaging.Message
  isExternal: false
  name: SentTime
  nameWithType: Message.SentTime
  fullName: System.Messaging.Message.SentTime
- uid: System.Messaging.Message.SourceMachine
  parent: System.Messaging.Message
  isExternal: false
  name: SourceMachine
  nameWithType: Message.SourceMachine
  fullName: System.Messaging.Message.SourceMachine
- uid: System.Messaging.Message.TimeToBeReceived
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
  fullName: System.Messaging.Message.TimeToBeReceived
- uid: System.Messaging.Message.TimeToReachQueue
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
  fullName: System.Messaging.Message.TimeToReachQueue
- uid: System.Messaging.Message.TransactionId
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionId
  nameWithType: Message.TransactionId
  fullName: System.Messaging.Message.TransactionId
- uid: System.Messaging.Message.TransactionStatusQueue
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
  fullName: System.Messaging.Message.TransactionStatusQueue
- uid: System.Messaging.Message.UseAuthentication
  parent: System.Messaging.Message
  isExternal: false
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
  fullName: System.Messaging.Message.UseAuthentication
- uid: System.Messaging.Message.UseDeadLetterQueue
  parent: System.Messaging.Message
  isExternal: false
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
  fullName: System.Messaging.Message.UseDeadLetterQueue
- uid: System.Messaging.Message.UseEncryption
  parent: System.Messaging.Message
  isExternal: false
  name: UseEncryption
  nameWithType: Message.UseEncryption
  fullName: System.Messaging.Message.UseEncryption
- uid: System.Messaging.Message.UseJournalQueue
  parent: System.Messaging.Message
  isExternal: false
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
  fullName: System.Messaging.Message.UseJournalQueue
- uid: System.Messaging.Message.UseTracing
  parent: System.Messaging.Message
  isExternal: false
  name: UseTracing
  nameWithType: Message.UseTracing
  fullName: System.Messaging.Message.UseTracing
- uid: System.Messaging.Message.#ctor*
  parent: System.Messaging.Message
  isExternal: false
  name: Message
  nameWithType: Message.Message
- uid: System.Messaging.Message.AcknowledgeType*
  parent: System.Messaging.Message
  isExternal: false
  name: AcknowledgeType
  nameWithType: Message.AcknowledgeType
- uid: System.Messaging.Message.Acknowledgment*
  parent: System.Messaging.Message
  isExternal: false
  name: Acknowledgment
  nameWithType: Message.Acknowledgment
- uid: System.Messaging.Message.AdministrationQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: AdministrationQueue
  nameWithType: Message.AdministrationQueue
- uid: System.Messaging.Message.AppSpecific*
  parent: System.Messaging.Message
  isExternal: false
  name: AppSpecific
  nameWithType: Message.AppSpecific
- uid: System.Messaging.Message.ArrivedTime*
  parent: System.Messaging.Message
  isExternal: false
  name: ArrivedTime
  nameWithType: Message.ArrivedTime
- uid: System.Messaging.Message.AttachSenderId*
  parent: System.Messaging.Message
  isExternal: false
  name: AttachSenderId
  nameWithType: Message.AttachSenderId
- uid: System.Messaging.Message.Authenticated*
  parent: System.Messaging.Message
  isExternal: false
  name: Authenticated
  nameWithType: Message.Authenticated
- uid: System.Messaging.Message.AuthenticationProviderName*
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderName
  nameWithType: Message.AuthenticationProviderName
- uid: System.Messaging.Message.AuthenticationProviderType*
  parent: System.Messaging.Message
  isExternal: false
  name: AuthenticationProviderType
  nameWithType: Message.AuthenticationProviderType
- uid: System.Messaging.Message.Body*
  parent: System.Messaging.Message
  isExternal: false
  name: Body
  nameWithType: Message.Body
- uid: System.Messaging.Message.BodyStream*
  parent: System.Messaging.Message
  isExternal: false
  name: BodyStream
  nameWithType: Message.BodyStream
- uid: System.Messaging.Message.BodyType*
  parent: System.Messaging.Message
  isExternal: false
  name: BodyType
  nameWithType: Message.BodyType
- uid: System.Messaging.Message.ConnectorType*
  parent: System.Messaging.Message
  isExternal: false
  name: ConnectorType
  nameWithType: Message.ConnectorType
- uid: System.Messaging.Message.CorrelationId*
  parent: System.Messaging.Message
  isExternal: false
  name: CorrelationId
  nameWithType: Message.CorrelationId
- uid: System.Messaging.Message.DestinationQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationQueue
  nameWithType: Message.DestinationQueue
- uid: System.Messaging.Message.DestinationSymmetricKey*
  parent: System.Messaging.Message
  isExternal: false
  name: DestinationSymmetricKey
  nameWithType: Message.DestinationSymmetricKey
- uid: System.Messaging.Message.DigitalSignature*
  parent: System.Messaging.Message
  isExternal: false
  name: DigitalSignature
  nameWithType: Message.DigitalSignature
- uid: System.Messaging.Message.EncryptionAlgorithm*
  parent: System.Messaging.Message
  isExternal: false
  name: EncryptionAlgorithm
  nameWithType: Message.EncryptionAlgorithm
- uid: System.Messaging.Message.Extension*
  parent: System.Messaging.Message
  isExternal: false
  name: Extension
  nameWithType: Message.Extension
- uid: System.Messaging.Message.Formatter*
  parent: System.Messaging.Message
  isExternal: false
  name: Formatter
  nameWithType: Message.Formatter
- uid: System.Messaging.Message.HashAlgorithm*
  parent: System.Messaging.Message
  isExternal: false
  name: HashAlgorithm
  nameWithType: Message.HashAlgorithm
- uid: System.Messaging.Message.Id*
  parent: System.Messaging.Message
  isExternal: false
  name: Id
  nameWithType: Message.Id
- uid: System.Messaging.Message.IsFirstInTransaction*
  parent: System.Messaging.Message
  isExternal: false
  name: IsFirstInTransaction
  nameWithType: Message.IsFirstInTransaction
- uid: System.Messaging.Message.IsLastInTransaction*
  parent: System.Messaging.Message
  isExternal: false
  name: IsLastInTransaction
  nameWithType: Message.IsLastInTransaction
- uid: System.Messaging.Message.Label*
  parent: System.Messaging.Message
  isExternal: false
  name: Label
  nameWithType: Message.Label
- uid: System.Messaging.Message.LookupId*
  parent: System.Messaging.Message
  isExternal: false
  name: LookupId
  nameWithType: Message.LookupId
- uid: System.Messaging.Message.MessageType*
  parent: System.Messaging.Message
  isExternal: false
  name: MessageType
  nameWithType: Message.MessageType
- uid: System.Messaging.Message.Priority*
  parent: System.Messaging.Message
  isExternal: false
  name: Priority
  nameWithType: Message.Priority
- uid: System.Messaging.Message.Recoverable*
  parent: System.Messaging.Message
  isExternal: false
  name: Recoverable
  nameWithType: Message.Recoverable
- uid: System.Messaging.Message.ResponseQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: ResponseQueue
  nameWithType: Message.ResponseQueue
- uid: System.Messaging.Message.SecurityContext*
  parent: System.Messaging.Message
  isExternal: false
  name: SecurityContext
  nameWithType: Message.SecurityContext
- uid: System.Messaging.Message.SenderCertificate*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderCertificate
  nameWithType: Message.SenderCertificate
- uid: System.Messaging.Message.SenderId*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderId
  nameWithType: Message.SenderId
- uid: System.Messaging.Message.SenderVersion*
  parent: System.Messaging.Message
  isExternal: false
  name: SenderVersion
  nameWithType: Message.SenderVersion
- uid: System.Messaging.Message.SentTime*
  parent: System.Messaging.Message
  isExternal: false
  name: SentTime
  nameWithType: Message.SentTime
- uid: System.Messaging.Message.SourceMachine*
  parent: System.Messaging.Message
  isExternal: false
  name: SourceMachine
  nameWithType: Message.SourceMachine
- uid: System.Messaging.Message.TimeToBeReceived*
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToBeReceived
  nameWithType: Message.TimeToBeReceived
- uid: System.Messaging.Message.TimeToReachQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: TimeToReachQueue
  nameWithType: Message.TimeToReachQueue
- uid: System.Messaging.Message.TransactionId*
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionId
  nameWithType: Message.TransactionId
- uid: System.Messaging.Message.TransactionStatusQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: TransactionStatusQueue
  nameWithType: Message.TransactionStatusQueue
- uid: System.Messaging.Message.UseAuthentication*
  parent: System.Messaging.Message
  isExternal: false
  name: UseAuthentication
  nameWithType: Message.UseAuthentication
- uid: System.Messaging.Message.UseDeadLetterQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: UseDeadLetterQueue
  nameWithType: Message.UseDeadLetterQueue
- uid: System.Messaging.Message.UseEncryption*
  parent: System.Messaging.Message
  isExternal: false
  name: UseEncryption
  nameWithType: Message.UseEncryption
- uid: System.Messaging.Message.UseJournalQueue*
  parent: System.Messaging.Message
  isExternal: false
  name: UseJournalQueue
  nameWithType: Message.UseJournalQueue
- uid: System.Messaging.Message.UseTracing*
  parent: System.Messaging.Message
  isExternal: false
  name: UseTracing
  nameWithType: Message.UseTracing
