### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.RegistryAccessRule
  id: RegistryAccessRule
  children:
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistryAccessRule.RegistryRights
  langs:
  - csharp
  name: RegistryAccessRule
  nameWithType: RegistryAccessRule
  fullName: System.Security.AccessControl.RegistryAccessRule
  type: Class
  summary: "Vertegenwoordigt een verzameling van toegangsrechten toegestaan of geweigerd voor een gebruiker of groep. Deze klasse kan niet worden overgenomen."
  remarks: "De klasse RegistryAccessRule is een van de klassen die het .NET Framework biedt voor het beheren van Windows-toegangsbeveiliging voor registersleutels. Zie voor een overzicht van deze klassen en hun relatie tot de onderliggende Windows access control-structuren, <xref:System.Security.AccessControl.RegistrySecurity>.</xref:System.Security.AccessControl.RegistrySecurity>      > [!NOTE] > Toegangsbeveiliging van Windows kan alleen worden toegepast op de registersleutels. Deze kan niet worden toegepast op afzonderlijke sleutel/waarde-paren die zijn opgeslagen in een sleutel.       Als u een lijst van de regels die momenteel wordt toegepast op een registersleutel, gebruikt de <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>methode om op te halen een <xref:System.Security.AccessControl.RegistrySecurity>object en gebruik vervolgens de <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>methode voor het verkrijgen van een verzameling objecten RegistryAccessRule.</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> </xref:System.Security.AccessControl.RegistrySecurity> </xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>       RegistryAccessRule objecten niet zijn toegewezen-op-een met vermeldingen voor toegangsbeheer in de onderliggende discretionary access toegangsbeheerlijst (DACL&quot;s). Als u de set met alle regels voor toegang voor een registersleutel krijgt, wordt in de set het minimum aantal regels dat momenteel is vereist voor alle de vermeldingen voor toegangsbeheer express bevat.      > [!NOTE] > De onderliggende vermeldingen voor toegangsbeheer wijzigen bij het toepassen en regels te verwijderen. De informatie in de regels samengevoegd, indien mogelijk, zodat het kleinste aantal vermeldingen voor toegangsbeheer. Dus bij het lezen van de huidige lijst met regels deze mogelijk niet precies hetzelfde uitzien als de lijst met alle regels die u hebt toegevoegd.       RegistryAccessRule objecten gebruiken om op te geven van de rechten voor het toestaan of weigeren aan een gebruiker of groep. Een RegistryAccessRule object altijd vertegenwoordigt toegang hebben of geen toegang hebben, niet beide.       Een regel in een registersleutel toepassen, gebruikt u de <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>methode voor het ophalen van de <xref:System.Security.AccessControl.RegistrySecurity>object.</xref:System.Security.AccessControl.RegistrySecurity> </xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> Wijzig de <xref:System.Security.AccessControl.RegistrySecurity>object met behulp van de bijbehorende methoden toevoegen van de regel en gebruik vervolgens de <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>methode voor opnieuw koppelen van het object.</xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.RegistrySecurity>      > [!IMPORTANT] > Wijzigingen die u aanbrengt in een <xref:System.Security.AccessControl.RegistrySecurity>object hebben geen invloed op de toegangsniveaus van de registersleutel totdat u de <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>methode het gewijzigde object toewijzen aan de registersleutel.</xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.RegistrySecurity>       RegistryAccessRule objecten zijn niet-wijzigbaar. Beveiliging voor een registersleutel worden gewijzigd met de methoden van de <xref:System.Security.AccessControl.RegistrySecurity>klasse toevoegen of verwijderen van regels; als u dit doet, de onderliggende vermeldingen voor toegangsbeheer zijn gewijzigd.</xref:System.Security.AccessControl.RegistrySecurity>"
  example:
  - "The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags> flag. The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags> and <xref:System.Security.AccessControl.PropagationFlags>.  \n  \n The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the object to create a subkey. The program creates a child subkey and a grandchild subkey, and then displays the security for each subkey. Finally, the program deletes the test keys.  \n  \n [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/visualbasic/t-system.security.access_11_1.vb)]\n [!code-cs[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/csharp/t-system.security.access_11_1.cs)]"
  syntax:
    content: 'public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule'
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> klasse, geven de gebruiker of groep die de regel voor de toegangsrechten geldt en of de opgegeven toegangsrechten worden toegestaan of geweigerd."
  remarks: "Deze constructor geeft standaard doorgeven en overname. Dat wil zeggen <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>en <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName>.</xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName> </xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>"
  syntax:
    content: public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "De gebruiker of groep die de regel van toepassing op. Moet van het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> of een type zoals <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> die kunnen worden omgezet naar het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> waarden van de rechten die worden toegestaan of geweigerd."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Een van de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> waarden die aangeeft of de rechten zijn toegestaan of geweigerd."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>Hiermee geeft u een ongeldige waarde.       - of - <code>type</code> bevat een ongeldige waarde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - of - <code>eventRights</code> gelijk is aan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is geen van beide van het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> of van een type zoals <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> die kunnen worden omgezet naar het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(String,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> klasse, geven de naam van de gebruiker of groep die de regel voor de toegangsrechten geldt en of de opgegeven toegangsrechten worden toegestaan of geweigerd."
  remarks: "Deze constructor geeft standaard doorgeven en overname. Dat wil zeggen <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>en <xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName>.</xref:System.Security.AccessControl.PropagationFlags?displayProperty=fullName> </xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>       Deze constructor is gelijk aan het maken van een <xref:System.Security.Principal.NTAccount>object door `identity` naar de <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>constructor en het doorgeven van het zojuist gemaakte <xref:System.Security.Principal.NTAccount>object toe aan de <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29>constructor.</xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount>"
  example:
  - "The following code example creates registry access rules and adds them to a <xref:System.Security.AccessControl.RegistrySecurity> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.  \n  \n [!code-cs[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/add/codesnippet/csharp/cf7d2ba9-37b1-4239-a52a-_1.cs)]\n [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/cf7d2ba9-37b1-4239-a52a-_1.vb)]"
  syntax:
    content: public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "De naam van de gebruiker of groep die de regel van toepassing op."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> waarden van de rechten die worden toegestaan of geweigerd."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Een van de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> waarden die aangeeft of de rechten zijn toegestaan of geweigerd."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>Hiermee geeft u een ongeldige waarde.       - of - <code>type</code> bevat een ongeldige waarde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>registryRights</code>is gelijk aan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - of - <code>identity</code> is een tekenreeks met lengte nul.       - of - <code>identity</code> is langer dan 512 tekens."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> klasse, geven de gebruiker of groep die de regel voor de toegangsrechten, de Overnamevlaggen geldt de doorgifte van vlaggen en of de opgegeven toegangsrechten worden toegestaan of geweigerd."
  remarks: "All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.  \n  \n|Propagation flags|S|CS|GS|  \n|-----------------------|-------|--------|--------|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X||  \n|<xref:System.Security.AccessControl.PropagationFlags>||X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>||X||  \n  \n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \n  \n For example, if the <xref:System.Security.AccessControl.InheritanceFlags> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules."
  syntax:
    content: public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "De gebruiker of groep die de regel van toepassing op. Moet van het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> of een type zoals <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> die kunnen worden omgezet naar het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> waarden opgeven van de rechten toegestaan of geweigerd."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;> </xref> vlaggen die bepalen hoe de toegangsrechten zijn overgenomen van andere objecten."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.PropagationFlags&quot;> </xref> vlaggen opgeven hoe de toegangsrechten zijn doorgegeven aan andere objecten."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Een van de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> waarden opgeven of de rechten zijn toegestaan of geweigerd."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>Hiermee geeft u een ongeldige waarde.       - of - <code>type</code> bevat een ongeldige waarde.       - of - <code>inheritanceFlags</code> bevat een ongeldige waarde.       - of - <code>propagationFlags</code> bevat een ongeldige waarde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - of - <code>registryRights</code> gelijk is aan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is geen van beide van het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, noch van een type zoals <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> die kunnen worden omgezet naar het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> klasse, de naam van de gebruiker of groep die de regel voor de toegangsrechten, de Overnamevlaggen geldt geven de doorgifte vlaggen en of de opgegeven toegangsrechten worden toegestaan of geweigerd."
  remarks: "All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag. If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected. If the flag is present, the rule is propagated as shown in the following table. The table assumes there is a subkey S with child subkey CS and grandchild subkey GS. That is, the path for the grandchild subkey is S\\CS\\GS.  \n  \n|Propagation flags|S|CS|GS|  \n|-----------------------|-------|--------|--------|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>|X|X||  \n|<xref:System.Security.AccessControl.PropagationFlags>||X|X|  \n|<xref:System.Security.AccessControl.PropagationFlags>, <xref:System.Security.AccessControl.PropagationFlags>||X||  \n  \n The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.  \n  \n For example, if the <xref:System.Security.AccessControl.InheritanceFlags> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.  \n  \n> [!NOTE]\n>  Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> flag for `inheritanceFlags`, there is no point in doing so. For the purposes of access control, the name/value pairs in a subkey are not separate objects. The access rights to name/value pairs are controlled by the rights of the subkey. Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags> flag. Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules.  \n  \n This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> constructor."
  example:
  - "The following code example demonstrates access rules with inheritance and propagation. The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, and then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags> flag. The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags> and <xref:System.Security.AccessControl.PropagationFlags>.  \n  \n The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the <xref:System.Security.AccessControl.RegistrySecurity> object to create a subkey. The program creates a child subkey and a grandchild subkey, and then displays the rules for each subkey. Finally, the program deletes the test keys.  \n  \n [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/visualbasic/43217ff3-f8bd-4a0e-bd95-_1.vb)]\n [!code-cs[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/csharp/43217ff3-f8bd-4a0e-bd95-_1.cs)]"
  syntax:
    content: public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "De naam van de gebruiker of groep die de regel van toepassing op."
    - id: registryRights
      type: System.Security.AccessControl.RegistryRights
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> waarden van de rechten die worden toegestaan of geweigerd."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;> </xref> vlaggen die bepalen hoe de toegangsrechten zijn overgenomen van andere objecten."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.PropagationFlags&quot;> </xref> vlaggen opgeven hoe de toegangsrechten zijn doorgegeven aan andere objecten."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Een van de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> waarden opgeven of de rechten zijn toegestaan of geweigerd."
  overload: System.Security.AccessControl.RegistryAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>registryRights</code>Hiermee geeft u een ongeldige waarde.       - of - <code>type</code> bevat een ongeldige waarde.       - of - <code>inheritanceFlags</code> bevat een ongeldige waarde.       - of - <code>propagationFlags</code> bevat een ongeldige waarde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>is gelijk aan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - of - <code>identity</code> is een tekenreeks met lengte nul.       - of - <code>identity</code> is langer dan 512 tekens."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  id: RegistryRights
  parent: System.Security.AccessControl.RegistryAccessRule
  langs:
  - csharp
  name: RegistryRights
  nameWithType: RegistryAccessRule.RegistryRights
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee haalt u de rechten die door de toegangsregel toegestaan of geweigerd."
  remarks: "<xref:System.Security.AccessControl.RegistryAccessRule>objecten zijn niet-wijzigbaar.</xref:System.Security.AccessControl.RegistryAccessRule> Kunt u een nieuwe toegangsregel die een andere gebruiker, verschillende rechten of een andere <xref:System.Security.AccessControl.AccessControlType>, maar u kunt een bestaande toegangsregel niet wijzigen.</xref:System.Security.AccessControl.AccessControlType>"
  syntax:
    content: public System.Security.AccessControl.RegistryRights RegistryRights { get; }
    return:
      type: System.Security.AccessControl.RegistryRights
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> waarden van de rechten die toegestaan of geweigerd door de toegangsregel."
  overload: System.Security.AccessControl.RegistryAccessRule.RegistryRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.RegistryRights
  parent: System.Security.AccessControl
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryRights
  fullName: System.Security.AccessControl.RegistryRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(String,RegistryRights,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(IdentityReference,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(String,RegistryRights,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryAccessRule.RegistryRights
  fullName: System.Security.AccessControl.RegistryAccessRule.RegistryRights
- uid: System.Security.AccessControl.RegistryAccessRule.#ctor*
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryAccessRule
  nameWithType: RegistryAccessRule.RegistryAccessRule
- uid: System.Security.AccessControl.RegistryAccessRule.RegistryRights*
  parent: System.Security.AccessControl.RegistryAccessRule
  isExternal: false
  name: RegistryRights
  nameWithType: RegistryAccessRule.RegistryRights
