### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.RegistrySecurity
  id: RegistrySecurity
  children:
  - System.Security.AccessControl.RegistrySecurity.#ctor
  - System.Security.AccessControl.RegistrySecurity.AccessRightType
  - System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.RegistrySecurity.AccessRuleType
  - System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)
  - System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)
  - System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.RegistrySecurity.AuditRuleType
  - System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)
  - System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)
  - System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)
  - System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)
  - System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)
  - System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)
  - System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  - System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  - System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)
  langs:
  - csharp
  name: RegistrySecurity
  nameWithType: RegistrySecurity
  fullName: System.Security.AccessControl.RegistrySecurity
  type: Class
  summary: "Hiermee geeft u de Windows-toegangsbeveiliging voor een registersleutel. Deze klasse kan niet worden overgenomen."
  remarks: "Een object RegistrySecurity toegangsrechten voor een registersleutel, en bepaalt ook hoe toegangspogingen worden gecontroleerd. Toegangsrechten tot de registersleutel worden uitgedrukt als regels met elke toegangsregel dat wordt vertegenwoordigd door een <xref:System.Security.AccessControl.RegistryAccessRule>object.</xref:System.Security.AccessControl.RegistryAccessRule> Elke regel controle wordt vertegenwoordigd door een <xref:System.Security.AccessControl.RegistryAuditRule>object.</xref:System.Security.AccessControl.RegistryAuditRule>       Dit komt overeen met het onderliggende Windows beveiligingssysteem, waarin elk beveiligbaar object hooguit één discretionaire ACL&quot;s (DACL&quot;s heeft) waarmee de toegang tot het beveiligde object, en mag maximaal één system access control list (SACL) die aangeeft welke toegangspogingen worden gecontroleerd. De DACL&quot;s en SACL zijn gerangschikt lijsten met vermeldingen voor toegangsbeheer (ACE) die toegang tot en controle-instellingen voor gebruikers en groepen opgeven. Een <xref:System.Security.AccessControl.RegistryAccessRule>of <xref:System.Security.AccessControl.RegistryAuditRule>object mogelijk meer dan één ACE vertegenwoordigen.</xref:System.Security.AccessControl.RegistryAuditRule> </xref:System.Security.AccessControl.RegistryAccessRule>      > [!NOTE] > Toegangsbeveiliging van Windows kan alleen worden toegepast op de registersleutels. Deze kan niet worden toegepast op afzonderlijke sleutel/waarde-paren die zijn opgeslagen in een sleutel.       De RegistrySecurity <xref:System.Security.AccessControl.RegistryAccessRule>, en <xref:System.Security.AccessControl.RegistryAuditRule>klassen verbergen details over de implementatie van ACL&quot;s en ACE&quot;s.</xref:System.Security.AccessControl.RegistryAuditRule> </xref:System.Security.AccessControl.RegistryAccessRule> Hiermee kunt u de zestien verschillende ACE-typen en de complexiteit van het onderhouden van correct overname en doorgifte van toegangsrechten genegeerd. Deze objecten ook zijn ontworpen om te voorkomen dat de volgende algemene besturingselement toegangsfouten:-een security descriptor maken met een null DACL. Een null-verwijzing naar een DACL kan elke gebruiker toegangsregels toevoegen aan een object, een denial of service-aanval mogelijk te maken. Een nieuw object op RegistrySecurity begint altijd met een leeg DACL, die alle toegang voor alle gebruikers weigert.      -De canonieke volgorde van ACE&quot;s schenden. Als de ACE-lijst in de DACL is niet bewaard in de canonieke volgorde, gebruikers mogelijk per ongeluk toegang krijgen tot het beveiligde object. Geweigerde toegangsrechten moeten bijvoorbeeld altijd worden weergegeven vóór toegestane toegangsrechten. RegistrySecurity objecten onderhouden intern van de juiste volgorde.      -Security descriptor vlaggen, opgenomen in het resource manager-beheer alleen worden moeten bewerken.      -Ongeldige combinaties van ACE vlaggen wordt gemaakt.      -Overgenomen ACE&quot;s bewerken. Overname en doorgifte worden verwerkt door de resource manager, in reactie op wijzigingen in regels voor toegangsbeleid en controlebeleid.      -Nutteloos ACE&quot;s in de ACL&quot;s invoegen.       De enige mogelijkheden die niet wordt ondersteund door de .NET-objecten voor beveiliging zijn schadelijke activiteiten die moeten worden vermeden door de meerderheid van ontwikkelaars van toepassingen, zoals het volgende:-laag niveau taken die normaal gesproken worden uitgevoerd door de resourcemanager.      -Toevoegen of verwijderen van de vermeldingen voor toegangsbeheer op een manier die niet van de canonieke volgorde onderhouden.       Voor het Windows-toegangsbeveiliging voor een registersleutel wijzigen, gebruikt u de <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>methode voor het ophalen van het object RegistrySecurity.</xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> Het object wijzigen door het toevoegen en verwijderen van regels en gebruik vervolgens de <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>methode koppelt u deze opnieuw</xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>      > [!IMPORTANT] > Wijzigingen die u aan een object RegistrySecurity aanbrengt hebben geen invloed op de toegangsniveaus van de registersleutel totdat u de <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>methode het gewijzigde object toewijzen aan de registersleutel.</xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>       Om te kopiëren toegangsbeveiliging van een registersleutel naar een andere, gebruikt de <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName>methode voor het ophalen van een RegistrySecurity-object dat de regels van het toegangsbeleid en controlebeleid voor de eerste registersleutel vertegenwoordigt en gebruik vervolgens de <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>methode deze regels toewijzen aan de tweede registersleutel.</xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> </xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> U kunt ook de regels toewijzen aan een tweede registersleutel met een <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=fullName>of <xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=fullName>methode die een parameter van het object RegistrySecurity.</xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=fullName> </xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=fullName>       Gebruikers met een investering in de security descriptor definition language (SDDL) kunnen gebruiken de <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>methode toegangsregels voor een registersleutel instellen en de <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>methode voor het verkrijgen van een tekenreeks met de toegangsregels in SDDL-indeling.</xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> Dit wordt niet aanbevolen voor het ontwikkelen van nieuwe."
  example:
  - "This section contains two code examples. The first example shows how compatible rules merge when added and removed, and the second shows how inheritance and propagation flags affect the addition and deletion of rules.  \n  \n Example 1  \n  \n The following code example shows how the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method removes rights from a compatible rule, and how the <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method merges rights with compatible rules.  \n  \n The example creates a RegistrySecurity object and adds a rule that allows the current user <xref:System.Security.AccessControl.RegistryRights?displayProperty=fullName> rights. The example then creates a rule that grants the user <xref:System.Security.AccessControl.RegistryRights?displayProperty=fullName>, with the same inheritance and propagation rights as the first rule, and uses the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to remove this new rule from the RegistrySecurity object. <xref:System.Security.AccessControl.RegistryRights> is a constituent of <xref:System.Security.AccessControl.RegistryRights>, so it is removed from the compatible rule. The rules in the RegistrySecurity object are displayed, showing the remaining constituents of <xref:System.Security.AccessControl.RegistryRights>.  \n  \n The example code then calls the <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method to merge the <xref:System.Security.AccessControl.RegistryRights> right back into the rule in the RegistrySecurity object.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object. The second example in this section attaches a security object, and so do the examples in <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> and <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_15_1.vb)]\n [!code-cs[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_15_1.cs)]  \n  \n Example 2  \n  \n The following code example demonstrates access rules with inheritance and propagation. The example creates a RegistrySecurity object, then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags> flag. The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags> and <xref:System.Security.AccessControl.PropagationFlags>.  \n  \n The program displays the rules in the RegistrySecurity object, and then uses the RegistrySecurity object to create a subkey. The program creates a child subkey and a grandchild subkey, then displays the security for each subkey. Finally, the program deletes the test keys.  \n  \n [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/visualbasic/t-system.security.access_15_2.vb)]\n [!code-cs[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/add/codesnippet/csharp/t-system.security.access_15_2.cs)]"
  syntax:
    content: 'public sealed class RegistrySecurity : System.Security.AccessControl.NativeObjectSecurity'
  inheritance:
  - System.Object
  - System.Security.AccessControl.ObjectSecurity
  - System.Security.AccessControl.CommonObjectSecurity
  - System.Security.AccessControl.NativeObjectSecurity
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.GroupModified
  - System.Security.AccessControl.ObjectSecurity.IsContainer
  - System.Security.AccessControl.ObjectSecurity.IsDS
  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.OwnerModified
  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.ReadLock
  - System.Security.AccessControl.ObjectSecurity.ReadUnlock
  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.WriteLock
  - System.Security.AccessControl.ObjectSecurity.WriteUnlock
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: RegistrySecurity()
  nameWithType: RegistrySecurity.RegistrySecurity()
  fullName: System.Security.AccessControl.RegistrySecurity.RegistrySecurity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.AccessControl.RegistrySecurity&quot;> </xref> klasse met standaardwaarden."
  remarks: "Een nieuwe <xref:System.Security.AccessControl.RegistrySecurity>object begint altijd met een leeg DACL (Discretionary access list), die alle toegang voor alle gebruikers weigert.</xref:System.Security.AccessControl.RegistrySecurity>"
  syntax:
    content: public RegistrySecurity ();
    parameters: []
  overload: System.Security.AccessControl.RegistrySecurity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.AccessRightType
  id: AccessRightType
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: AccessRightType
  nameWithType: RegistrySecurity.AccessRightType
  fullName: System.Security.AccessControl.RegistrySecurity.AccessRightType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Het opsommingstype opgehaald die de <xref href=&quot;System.Security.AccessControl.RegistrySecurity&quot;> </xref> klasse wordt gebruikt om aan te duiden toegangsrechten."
  remarks: "Klassen die zijn afgeleid van de <xref:System.Security.AccessControl.ObjectSecurity>klasse overschrijven de <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A>eigenschap in en keer terug op het type dat ze gebruiken om aan te duiden toegangsrechten.</xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Wanneer u met matrices of verzamelingen die meerdere typen beveiligingsobjecten bevatten werkt, moet u deze eigenschap gebruiken om te bepalen van het juiste opsommingstype voor gebruik met elke beveiligingsobject."
  syntax:
    content: public override Type AccessRightType { get; }
    return:
      type: System.Type
      description: "Een <xref:System.Type>object voor de <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> opsomming.</xref:System.Type>"
  overload: System.Security.AccessControl.RegistrySecurity.AccessRightType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistrySecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Maakt een nieuwe toegangsregel voor de opgegeven gebruiker met de opgegeven toegangsrechten, toegangsbeheer en vlaggen."
  remarks: "De aanbevolen manier om toegangsregels voor beheer maken is met de constructors van de <xref:System.Security.AccessControl.RegistryAccessRule>klasse.</xref:System.Security.AccessControl.RegistryAccessRule>      > [!NOTE] > Hoewel kunt u de <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>vlag, wordt er geen punt gaf hiervoor</xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> opgeven Voor de toepassing van toegangsbeheer zijn de naam/waarde-paren in een subsleutel niet afzonderlijke objecten. De toegangsrechten voor de naam/waarde-paren worden beheerd door de rechten van de subsleutel. Bovendien, omdat alle subsleutels containers zijn (dat wil zeggen, ze kunnen ook bevatten andere subsleutels), niet worden beïnvloed door de <xref:System.Security.AccessControl.InheritanceFlags>vlag.</xref:System.Security.AccessControl.InheritanceFlags> Ten slotte geven de <xref:System.Security.AccessControl.InheritanceFlags>vlag ingewikkelder onnodig het onderhoud van regels, omdat deze de normale combinatie van compatibele regels verstoort.</xref:System.Security.AccessControl.InheritanceFlags>"
  syntax:
    content: public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "Een <xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref> waarin de gebruiker of groep de regel van toepassing op."
    - id: accessMask
      type: System.Int32
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> waarden opgeven van de rechten voor het toestaan of weigeren, is geconverteerd naar een geheel getal."
    - id: isInherited
      type: System.Boolean
      description: "Een Booleaanse waarde die aangeeft of de regel wordt overgenomen."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;> </xref> waarden die aangeven hoe de regel wordt overgenomen door subsleutels."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.PropagationFlags&quot;> </xref> waarden die de manier waarop de regel wordt overgenomen door subsleutels wijzigen. Rangschikking als de waarde van `inheritanceFlags` is <xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;> </xref>."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Een van de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> waarden opgeven of de rechten zijn toegestaan of geweigerd."
    return:
      type: System.Security.AccessControl.AccessRule
      description: "Een <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> -object dat de opgegeven rechten voor de opgegeven gebruiker vertegenwoordigt."
  overload: System.Security.AccessControl.RegistrySecurity.AccessRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, of <code>type</code> bevat een ongeldige waarde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - of - <code>accessMask</code> gelijk is aan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>is geen van beide van het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, noch van een type zoals <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> die kunnen worden omgezet naar het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.AccessRuleType
  id: AccessRuleType
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: AccessRuleType
  nameWithType: RegistrySecurity.AccessRuleType
  fullName: System.Security.AccessControl.RegistrySecurity.AccessRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee wordt het type dat de <xref href=&quot;System.Security.AccessControl.RegistrySecurity&quot;> </xref> gebruikt om aan te duiden toegangsregels klasse."
  remarks: "Klassen die zijn afgeleid van de <xref:System.Security.AccessControl.ObjectSecurity>klasse overschrijven de <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A>eigenschap in en keer terug op het type dat ze gebruiken om aan te duiden toegangsregels.</xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Wanneer u met matrices of verzamelingen die meerdere typen beveiligingsobjecten bevatten werkt, moet u deze eigenschap gebruiken om te bepalen van de juiste toegang regeltype voor gebruik met elke beveiligingsobject."
  syntax:
    content: public override Type AccessRuleType { get; }
    return:
      type: System.Type
      description: "Een <xref:System.Type>object voor de <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> klasse</xref:System.Type>"
  overload: System.Security.AccessControl.RegistrySecurity.AccessRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)
  id: AddAccessRule(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: AddAccessRule(RegistryAccessRule)
  nameWithType: RegistrySecurity.AddAccessRule(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.AddAccessRule(RegistryAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee zoekt u naar een overeenkomende toegangsbeheer waaraan de nieuwe regel kan worden samengevoegd. Als er geen wordt gevonden, voegt de nieuwe regel."
  remarks: "De methode AddAccessRule wordt gezocht naar regels met dezelfde gebruiker of groep en dezelfde <xref:System.Security.AccessControl.AccessControlType>Als `rule`.</xref:System.Security.AccessControl.AccessControlType> Als er geen wordt gevonden, `rule` wordt toegevoegd. Als een vergelijkingsregel wordt gevonden, wordt de rechten in `rule` worden samengevoegd met de bestaande regel.       Regels kunnen niet worden samengevoegd als ze verschillende Overnamevlaggen hebben. Bijvoorbeeld, als een gebruiker mag leestoegang met geen Overnamevlaggen en AddAccessRule wordt gebruikt voor het toevoegen van een regel die de gebruiker schrijftoegang met overname voor subsleutels (<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>), de twee regels kunnen niet worden samengevoegd.</xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>       Regels met verschillende <xref:System.Security.AccessControl.AccessControlType>waarden worden nooit samengevoegd.</xref:System.Security.AccessControl.AccessControlType>       Regels snelle rechten in de meest voordelige manier. Als een gebruiker heeft bijvoorbeeld <xref:System.Security.AccessControl.RegistryRights>, <xref:System.Security.AccessControl.RegistryRights>en <xref:System.Security.AccessControl.RegistryRights>rechten en u een regel voor toestaan toevoegen <xref:System.Security.AccessControl.RegistryRights>rechten, de gebruiker heeft de samenstellende delen van <xref:System.Security.AccessControl.RegistryRights>rights.</xref:System.Security.AccessControl.RegistryRights> </xref:System.Security.AccessControl.RegistryRights> </xref:System.Security.AccessControl.RegistryRights> </xref:System.Security.AccessControl.RegistryRights> </xref:System.Security.AccessControl.RegistryRights> Als u de gebruikersrechten query uitvoert, ziet u een regel met <xref:System.Security.AccessControl.RegistryRights>rights.</xref:System.Security.AccessControl.RegistryRights> Op dezelfde manier als u verwijdert <xref:System.Security.AccessControl.RegistryRights>rechten, de andere onderdelen van <xref:System.Security.AccessControl.RegistryRights>rechten wordt opnieuw geopend.</xref:System.Security.AccessControl.RegistryRights> </xref:System.Security.AccessControl.RegistryRights>"
  example:
  - "The following code example creates registry access rules and adds them to a <xref:System.Security.AccessControl.RegistrySecurity> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object. Examples that attach security objects can be found in <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> and <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>.  \n  \n A code example that demonstrates inheritance and propagation flags can be found in the <xref:System.Security.AccessControl.RegistryAccessRule> class.  \n  \n [!code-cs[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/add/codesnippet/csharp/0595520c-e456-4072-a959-_1.cs)]\n [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/0595520c-e456-4072-a959-_1.vb)]"
  syntax:
    content: public void AddAccessRule (System.Security.AccessControl.RegistryAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAccessRule
      description: "De toegangsregel om toe te voegen."
  overload: System.Security.AccessControl.RegistrySecurity.AddAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)
  id: AddAuditRule(System.Security.AccessControl.RegistryAuditRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: AddAuditRule(RegistryAuditRule)
  nameWithType: RegistrySecurity.AddAuditRule(RegistryAuditRule)
  fullName: System.Security.AccessControl.RegistrySecurity.AddAuditRule(RegistryAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee zoekt u naar een audit-regel waarmee de nieuwe regel kan worden samengevoegd. Als er geen wordt gevonden, voegt de nieuwe regel."
  remarks: "De methode AddAuditRule wordt gezocht naar regels met dezelfde gebruiker of groep als `rule`. Als er geen wordt gevonden, `rule` wordt toegevoegd. Als een vergelijkingsregel wordt gevonden, wordt de vlaggen in `rule` worden samengevoegd in de bestaande regel.       Regels kunnen niet worden samengevoegd als ze verschillende Overnamevlaggen hebben. Bijvoorbeeld, als de mislukte pogingen om te schrijven naar een sleutel moeten worden gecontroleerd voor een bepaalde gebruiker, met geen Overnamevlaggen en AddAuditRule wordt gebruikt voor het toevoegen van een regel opgeven die zijn mislukt probeert te wijzigen machtigingen zijn moeten worden gecontroleerd voor dezelfde gebruiker, maar met overname voor subsleutels (<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>), de twee regels kunnen niet worden samengevoegd.</xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>"
  syntax:
    content: public void AddAuditRule (System.Security.AccessControl.RegistryAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAuditRule
      description: "De controleregel om toe te voegen. De gebruiker die is opgegeven door deze regel bepaalt de zoekopdracht."
  overload: System.Security.AccessControl.RegistrySecurity.AddAuditRule*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: RegistrySecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Maakt een nieuwe controleregel, geven de gebruiker die de regel geldt voor de toegangsrechten voor de controle- en de overname en doorgifte van de regel en het resultaat dat de regel wordt geactiveerd."
  remarks: "De aanbevolen manier om audit regels te maken is met de constructors van de <xref:System.Security.AccessControl.RegistryAuditRule>klasse.</xref:System.Security.AccessControl.RegistryAuditRule>      > [!NOTE] > Hoewel kunt u de <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName>vlag, wordt er geen punt gaf hiervoor</xref:System.Security.AccessControl.InheritanceFlags?displayProperty=fullName> opgeven De naam/waarde-paren in een subsleutel zijn voor de doeleinden van audit-besturingselement niet afzonderlijke objecten. De controle-rechten voor naam/waarde-paren worden beheerd door de rechten van de subsleutel. Bovendien, omdat alle subsleutels containers zijn (dat wil zeggen, ze kunnen ook bevatten andere subsleutels), niet worden beïnvloed door de <xref:System.Security.AccessControl.InheritanceFlags>vlag.</xref:System.Security.AccessControl.InheritanceFlags> Ten slotte geven de <xref:System.Security.AccessControl.InheritanceFlags>vlag ingewikkelder onnodig het onderhoud van regels, omdat deze de normale combinatie van compatibele regels verstoort.</xref:System.Security.AccessControl.InheritanceFlags>"
  syntax:
    content: public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "Een <xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref> waarin de gebruiker of groep de regel van toepassing op."
    - id: accessMask
      type: System.Int32
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.RegistryRights&quot;> </xref> waarden opgeven van de toegangsrechten wilt controleren, geconverteerd naar een geheel getal."
    - id: isInherited
      type: System.Boolean
      description: "Een Booleaanse waarde die aangeeft of de regel wordt overgenomen."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;> </xref> waarden die aangeven hoe de regel wordt overgenomen door subsleutels."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.PropagationFlags&quot;> </xref> waarden die de manier waarop de regel wordt overgenomen door subsleutels wijzigen. Rangschikking als de waarde van `inheritanceFlags` is <xref href=&quot;System.Security.AccessControl.InheritanceFlags&quot;> </xref>."
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;> </xref> waarden die aangeeft of geslaagde of mislukte toegang controleren."
    return:
      type: System.Security.AccessControl.AuditRule
      description: "Een <xref href=&quot;System.Security.AccessControl.RegistryAuditRule&quot;> </xref> -object dat de opgegeven controleregel voor de opgegeven gebruiker, met de opgegeven vlaggen vertegenwoordigt. Het retourtype van de methode is de basisklasse <xref href=&quot;System.Security.AccessControl.AuditRule&quot;> </xref>, maar de retourwaarde veilig kan worden geconverteerd naar de afgeleide klasse."
  overload: System.Security.AccessControl.RegistrySecurity.AuditRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, of <code>flags</code> bevat een ongeldige waarde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - of - <code>accessMask</code> gelijk is aan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>is geen van beide van het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, noch van een type zoals <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> die kunnen worden omgezet naar het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.AuditRuleType
  id: AuditRuleType
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: AuditRuleType
  nameWithType: RegistrySecurity.AuditRuleType
  fullName: System.Security.AccessControl.RegistrySecurity.AuditRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee wordt het type dat de <xref href=&quot;System.Security.AccessControl.RegistrySecurity&quot;> </xref> klasse wordt gebruikt om aan te duiden audit-regels."
  remarks: "Klassen die zijn afgeleid van de <xref:System.Security.AccessControl.ObjectSecurity>klasse overschrijven de <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A>eigenschap in en keer terug op het type dat ze gebruiken om aan te duiden audit rights.</xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Wanneer u met matrices of verzamelingen die meerdere typen beveiligingsobjecten bevatten werkt, moet u deze eigenschap gebruiken om te bepalen van het type van de regel juist audit voor gebruik met elke beveiligingsobject."
  syntax:
    content: public override Type AuditRuleType { get; }
    return:
      type: System.Type
      description: "Een <xref:System.Type>object voor de <xref href=&quot;System.Security.AccessControl.RegistryAuditRule&quot;> </xref> klasse</xref:System.Type>"
  overload: System.Security.AccessControl.RegistrySecurity.AuditRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)
  id: RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: RemoveAccessRule(RegistryAccessRule)
  nameWithType: RegistrySecurity.RemoveAccessRule(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(RegistryAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee zoekt u een regel voor het beheer van toegang aan dezelfde gebruiker en <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (toestaan of weigeren) als de opgegeven toegangsregel en met compatibel overname en doorgifte van vlaggen; als deze regel wordt gevonden, de rechten die zijn opgenomen in de opgegeven toegangsregel ervan worden verwijderd."
  remarks: "De huidige <xref:System.Security.AccessControl.RegistrySecurity>wordt gezocht naar een regel met dezelfde gebruiker en dezelfde <xref:System.Security.AccessControl.AccessControlType>waarde als `rule`.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.RegistrySecurity> Als er geen dergelijke regels wordt gevonden, er geen actie ondernomen en de methode retourneert `false`. Als vergelijkingsregels zijn gevonden, hun compatibiliteit en overname vlaggen worden gecontroleerd voor compatibiliteit met markeringen die zijn opgegeven `rule`. Als er geen compatibel regel is gevonden, geen actie ondernomen is en de methode retourneert `false`. Als een regel met compatibel vlaggen wordt gevonden, de rechten opgegeven in `rule` worden verwijderd uit de compatibel regel en retourneert de methode `true`. Als `rule` bevat rechten niet is opgenomen in de regel compatibel, er geen actie ondernomen met betrekking tot deze rechten. Als alle rechten worden verwijderd uit de compatibel regel, de volledige regel wordt verwijderd uit de huidige <xref:System.Security.AccessControl.RegistrySecurity>object.</xref:System.Security.AccessControl.RegistrySecurity>"
  example:
  - "The following code example shows how the RemoveAccessRule method removes rights from a compatible rule, and how the <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A> method merges rights with compatible rules.  \n  \n The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds a rule that allows the current user <xref:System.Security.AccessControl.RegistryRights?displayProperty=fullName> rights. The example then creates a rule that grants the user <xref:System.Security.AccessControl.RegistryRights?displayProperty=fullName>, with the same inheritance and propagation rights as the first rule, and uses the RemoveAccessRule method to remove this new rule from the <xref:System.Security.AccessControl.RegistrySecurity> object. <xref:System.Security.AccessControl.RegistryRights> is a constituent of <xref:System.Security.AccessControl.RegistryRights>, so it is removed from the compatible rule. The rules in the <xref:System.Security.AccessControl.RegistrySecurity> object are displayed, showing the remaining constituents of <xref:System.Security.AccessControl.RegistryRights>.  \n  \n The example code then calls the RemoveAccessRule method to merge the <xref:System.Security.AccessControl.RegistryRights> right back into the rule in the <xref:System.Security.AccessControl.RegistrySecurity> object.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object. The second example in this section attaches a security object, and so do the examples in <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName><xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/add/codesnippet/visualbasic/797f5ef0-d4da-43dd-bbe9-_1.vb)]\n [!code-cs[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/add/codesnippet/csharp/797f5ef0-d4da-43dd-bbe9-_1.cs)]"
  syntax:
    content: public bool RemoveAccessRule (System.Security.AccessControl.RegistryAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAccessRule
      description: "Een <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> die aangeeft dat de gebruiker en <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> zoeken en een set overname en doorgifte vlaggen die de bijbehorende regel als kan worden gevonden, moet compatibel zijn met. Hiermee geeft u de rechten voor het verwijderen van de compatibel regel als gevonden."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als een compatibel regel wordt gevonden; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.RegistrySecurity.RemoveAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)
  id: RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: RemoveAccessRuleAll(RegistryAccessRule)
  nameWithType: RegistrySecurity.RemoveAccessRuleAll(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(RegistryAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee zoekt u alle regels met dezelfde gebruiker toegang tot en <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (toestaan of weigeren) als de opgegeven regel en, indien gevonden, verwijdert deze."
  remarks: "De huidige <xref:System.Security.AccessControl.RegistrySecurity>wordt gezocht naar regels met dezelfde gebruiker en dezelfde <xref:System.Security.AccessControl.AccessControlType>waarde als `rule`.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.RegistrySecurity> Alle rechten, Overnamevlaggen of doorgifte van vlaggen is opgegeven door `rule` worden genegeerd tijdens het uitvoeren van deze zoekopdracht. Als er geen overeenkomende regels gevonden zijn, wordt geen actie ondernomen.       Bijvoorbeeld, als een gebruiker meerdere regels waarmee verschillende rechten met verschillende overname en doorgifte van vlaggen heeft, kunt u alle regels die door het maken van een <xref:System.Security.AccessControl.RegistryAccessRule>object waarmee de gebruiker en <xref:System.Security.AccessControl.AccessControlType?displayProperty=fullName>, met een willekeurige rechten vlaggen en geven die de regel voor de methode RemoveAccessRuleAll.</xref:System.Security.AccessControl.AccessControlType?displayProperty=fullName> </xref:System.Security.AccessControl.RegistryAccessRule>"
  example:
  - "The following code example shows that the RemoveAccessRuleAll method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights and flags.  \n  \n The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags. The example then creates a new rule that allows the current user to take ownership, and passes that rule to the RemoveAccessRuleAll method to remove the two rules that allow access.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object. See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method.  \n  \n [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/add/codesnippet/visualbasic/2ba6e9de-1f41-4d05-af76-_1.vb)]\n [!code-cs[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/add/codesnippet/csharp/2ba6e9de-1f41-4d05-af76-_1.cs)]"
  syntax:
    content: public void RemoveAccessRuleAll (System.Security.AccessControl.RegistryAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAccessRule
      description: "Een <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> die aangeeft dat de gebruiker en <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> om naar te zoeken. Alle rechten, Overnamevlaggen of propagation-markeringen die zijn opgegeven door deze regel worden genegeerd."
  overload: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)
  id: RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: RemoveAccessRuleSpecific(RegistryAccessRule)
  nameWithType: RegistrySecurity.RemoveAccessRuleSpecific(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(RegistryAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Zoekt naar een toegangsregel die exact overeenkomt met de opgegeven regel en, indien gevonden, verwijdert het."
  remarks: "De regel wordt verwijderd, alleen als het exact overeenkomt met `rule` in alle gegevens, inclusief vlaggen. Andere regels met dezelfde gebruiker en <xref:System.Security.AccessControl.AccessControlType>worden niet beïnvloed.</xref:System.Security.AccessControl.AccessControlType>      > [!IMPORTANT] > Een regel vertegenwoordigt een of meer onderliggende vermeldingen voor toegangsbeheer (ACE) en deze vermeldingen worden gesplitst of gecombineerd zo nodig wanneer u de beveiliging toegangsregels voor een gebruiker wijzigt. Dus een regel bestaat mogelijk niet meer in het formulier was toen deze werd toegevoegd, en in dat geval de methode RemoveAccessRuleSpecific niet kunt verwijderen."
  example:
  - "The following code example shows that the RemoveAccessRuleSpecific method removes a rule only if it matches exactly.  \n  \n The example creates two rules that allow different rights. The rules have compatible inheritance and propagation flags, so when the second rule is added it merges with the first. The example calls the RemoveAccessRuleSpecific method, specifying the first rule, but because the rules are merged there is no rule that matches. The example then calls the <xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A> method to the remove the second rule from the merged rule, and finally calls the RemoveAccessRuleSpecific method to remove the first rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object. See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method.  \n  \n [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/visualbasic/9819c0cd-2b26-4472-a333-_1.vb)]\n [!code-cs[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/csharp/9819c0cd-2b26-4472-a333-_1.cs)]"
  syntax:
    content: public void RemoveAccessRuleSpecific (System.Security.AccessControl.RegistryAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAccessRule
      description: "De <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;> </xref> te verwijderen."
  overload: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)
  id: RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: RemoveAuditRule(RegistryAuditRule)
  nameWithType: RegistrySecurity.RemoveAuditRule(RegistryAuditRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(RegistryAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Zoekt naar een audit regel met dezelfde gebruiker die de opgegeven regel en met compatibel overname en doorgifte van vlaggen; Als een compatibel regel wordt gevonden, worden de rechten die zijn opgenomen in de opgegeven regel verwijderd uit het."
  remarks: "De huidige <xref:System.Security.AccessControl.RegistrySecurity>wordt gezocht naar een controleregel met dezelfde gebruiker `rule`.</xref:System.Security.AccessControl.RegistrySecurity> Als er geen dergelijke regels wordt gevonden, er geen actie ondernomen en de methode retourneert `false`. Als vergelijkingsregels zijn gevonden, hun compatibiliteit en overname vlaggen worden gecontroleerd voor compatibiliteit met markeringen die zijn opgegeven `rule`. Als er geen compatibel regel is gevonden, geen actie ondernomen is en de methode retourneert `false`. Als een regel met compatibel vlaggen wordt gevonden, de rechten opgegeven in `rule` worden verwijderd uit de compatibel regel en retourneert de methode `true`. Als `rule` bevat rechten niet is opgenomen in de regel compatibel, er geen actie ondernomen met betrekking tot deze rechten. Als alle rechten worden verwijderd uit de compatibel regel, de volledige regel wordt verwijderd uit de huidige <xref:System.Security.AccessControl.RegistrySecurity>object.</xref:System.Security.AccessControl.RegistrySecurity>"
  syntax:
    content: public bool RemoveAuditRule (System.Security.AccessControl.RegistryAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAuditRule
      description: "Een <xref href=&quot;System.Security.AccessControl.RegistryAuditRule&quot;> </xref> die de gebruiker om te zoeken naar en een set overname en doorgifte vlaggen die de regel een overeenkomende, geeft als kan worden gevonden, moet compatibel zijn met. Hiermee geeft u de rechten voor het verwijderen van de compatibel regel als gevonden."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als een compatibel regel wordt gevonden; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.RegistrySecurity.RemoveAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)
  id: RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: RemoveAuditRuleAll(RegistryAuditRule)
  nameWithType: RegistrySecurity.RemoveAuditRuleAll(RegistryAuditRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(RegistryAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Zoekt u alle regels met dezelfde gebruiker die de opgegeven regel controleren en, indien gevonden, worden deze verwijderd."
  remarks: "De huidige <xref:System.Security.AccessControl.RegistrySecurity>wordt gezocht naar audit regels met dezelfde gebruiker `rule`.</xref:System.Security.AccessControl.RegistrySecurity> Alle rechten, Overnamevlaggen of doorgifte van vlaggen is opgegeven door `rule` worden genegeerd tijdens het uitvoeren van deze zoekopdracht. Als er geen overeenkomende regels gevonden zijn, wordt geen actie ondernomen."
  syntax:
    content: public void RemoveAuditRuleAll (System.Security.AccessControl.RegistryAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAuditRule
      description: "Een <xref href=&quot;System.Security.AccessControl.RegistryAuditRule&quot;> </xref> die aangeeft dat de gebruiker om te zoeken. Alle rechten, Overnamevlaggen of propagation-markeringen die zijn opgegeven door deze regel worden genegeerd."
  overload: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)
  id: RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: RemoveAuditRuleSpecific(RegistryAuditRule)
  nameWithType: RegistrySecurity.RemoveAuditRuleSpecific(RegistryAuditRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(RegistryAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Zoekt naar een controleregel die exact overeenkomt met de opgegeven regel en, indien gevonden, verwijdert het."
  remarks: "De regel wordt verwijderd, alleen als het exact overeenkomt met `rule` in alle gegevens, inclusief vlaggen. Andere regels audit voor dezelfde gebruiker worden niet getroffen.      > [!IMPORTANT] > Een regel vertegenwoordigt een of meer onderliggende vermeldingen voor toegangsbeheer (ACE) en deze vermeldingen worden gesplitst of gecombineerd zo nodig wanneer u de audit-beveiligingsregels voor een gebruiker wijzigt. Dus een regel bestaat mogelijk niet meer in het formulier was toen deze werd toegevoegd, en in dat geval de methode RemoveAuditRuleSpecific niet kunt verwijderen."
  syntax:
    content: public void RemoveAuditRuleSpecific (System.Security.AccessControl.RegistryAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAuditRule
      description: "De <xref href=&quot;System.Security.AccessControl.RegistryAuditRule&quot;> </xref> worden verwijderd."
  overload: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  id: ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: ResetAccessRule(RegistryAccessRule)
  nameWithType: RegistrySecurity.ResetAccessRule(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.ResetAccessRule(RegistryAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee verwijdert u alle regels voor toegang met dezelfde gebruiker die de opgegeven regel ongeacht <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>, en worden de opgegeven regel toegevoegd."
  remarks: "Als er geen toegangsregels waarvan de gebruiker overeenkomt met de opgegeven regel `rule` wordt toegevoegd."
  example:
  - "The following code example shows how the ResetAccessRule method replaces all rules for the matching user with the rule specified for the match.  \n  \n The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags. The example then creates a new rule that allows the current user only to read the key, and uses the ResetAccessRule method to remove the all rules for the user and replace them with the new rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object. See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method.  \n  \n [!code-cs[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/add/codesnippet/csharp/80c97a6c-33e0-43c8-8894-_1.cs)]\n [!code-vb[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/add/codesnippet/visualbasic/80c97a6c-33e0-43c8-8894-_1.vb)]"
  syntax:
    content: public void ResetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;></xref> to add. De gebruiker die is opgegeven door deze regel bepaalt de regels te verwijderen voordat deze regel wordt toegevoegd."
  overload: System.Security.AccessControl.RegistrySecurity.ResetAccessRule*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  id: SetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: SetAccessRule(RegistryAccessRule)
  nameWithType: RegistrySecurity.SetAccessRule(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.SetAccessRule(RegistryAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee verwijdert u alle regels voor toegang met dezelfde gebruiker en <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (toestaan of weigeren) als de opgegeven regel en vervolgens wordt de opgegeven regel toegevoegd."
  remarks: "Als de opgegeven regel heeft <xref:System.Security.AccessControl.AccessControlType>, het effect van deze methode is het verwijderen van alle <xref:System.Security.AccessControl.AccessControlType>regels voor de opgegeven gebruiker, vervangen door de opgegeven regel.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.AccessControlType> Als de opgegeven regel heeft <xref:System.Security.AccessControl.AccessControlType>, worden alle <xref:System.Security.AccessControl.AccessControlType>regels voor de opgegeven gebruiker worden vervangen door de opgegeven regel.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.AccessControlType>       Als er geen regels waarvan de gebruiker zijn en <xref:System.Security.AccessControl.AccessControlType>overeenkomen met de opgegeven regel `rule` wordt toegevoegd.</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example shows that the SetAccessRule method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, ignoring rights and flags, and replaces them with `rule`.  \n  \n The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object and adds rules that allow and deny various rights for the current user, with different inheritance and propagation flags. The example then creates a new rule that allows the current user only to read the key, and uses the SetAccessRule method to remove the two rules that allow access and to replace them with the new rule. The rule that denies access is not affected.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:Microsoft.Win32.RegistryKey> object. See the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=fullName> method and the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=fullName> method.  \n  \n [!code-vb[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/add/codesnippet/visualbasic/908f14bb-fbc5-4e71-ac82-_1.vb)]\n [!code-cs[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/add/codesnippet/csharp/908f14bb-fbc5-4e71-ac82-_1.cs)]"
  syntax:
    content: public void SetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.RegistryAccessRule&quot;></xref> to add. De gebruiker en <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> van deze regel bepalen de regels te verwijderen voordat deze regel wordt toegevoegd."
  overload: System.Security.AccessControl.RegistrySecurity.SetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)
  id: SetAuditRule(System.Security.AccessControl.RegistryAuditRule)
  parent: System.Security.AccessControl.RegistrySecurity
  langs:
  - csharp
  name: SetAuditRule(RegistryAuditRule)
  nameWithType: RegistrySecurity.SetAuditRule(RegistryAuditRule)
  fullName: System.Security.AccessControl.RegistrySecurity.SetAuditRule(RegistryAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee verwijdert u alle regels met dezelfde gebruiker die de opgegeven regel ongeacht audit de <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;> </xref> waarde en vervolgens voegt de opgegeven regel."
  remarks: "Als er zijn geen audit regels waarvan de gebruiker overeenkomt met de opgegeven regel `rule` wordt toegevoegd."
  syntax:
    content: public void SetAuditRule (System.Security.AccessControl.RegistryAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.RegistryAuditRule
      description: "The <xref href=&quot;System.Security.AccessControl.RegistryAuditRule&quot;></xref> to add. De gebruiker die is opgegeven door deze regel bepaalt de regels te verwijderen voordat deze regel wordt toegevoegd."
  overload: System.Security.AccessControl.RegistrySecurity.SetAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.AccessControl.NativeObjectSecurity
  isExternal: false
  name: System.Security.AccessControl.NativeObjectSecurity
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.RegistrySecurity.#ctor
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: RegistrySecurity()
  nameWithType: RegistrySecurity.RegistrySecurity()
  fullName: System.Security.AccessControl.RegistrySecurity.RegistrySecurity()
- uid: System.Security.AccessControl.RegistrySecurity.AccessRightType
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: AccessRightType
  nameWithType: RegistrySecurity.AccessRightType
  fullName: System.Security.AccessControl.RegistrySecurity.AccessRightType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: RegistrySecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  nameWithType: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.RegistrySecurity.AccessRuleType
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: RegistrySecurity.AccessRuleType
  fullName: System.Security.AccessControl.RegistrySecurity.AccessRuleType
- uid: System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: AddAccessRule(RegistryAccessRule)
  nameWithType: RegistrySecurity.AddAccessRule(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.AddAccessRule(RegistryAccessRule)
- uid: System.Security.AccessControl.RegistryAccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: RegistryAccessRule
  nameWithType: RegistryAccessRule
  fullName: System.Security.AccessControl.RegistryAccessRule
- uid: System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: AddAuditRule(RegistryAuditRule)
  nameWithType: RegistrySecurity.AddAuditRule(RegistryAuditRule)
  fullName: System.Security.AccessControl.RegistrySecurity.AddAuditRule(RegistryAuditRule)
- uid: System.Security.AccessControl.RegistryAuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: RegistryAuditRule
  nameWithType: RegistryAuditRule
  fullName: System.Security.AccessControl.RegistryAuditRule
- uid: System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: RegistrySecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
- uid: System.Security.AccessControl.AuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditRule
  nameWithType: AuditRule
  fullName: System.Security.AccessControl.AuditRule
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  nameWithType: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.RegistrySecurity.AuditRuleType
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: RegistrySecurity.AuditRuleType
  fullName: System.Security.AccessControl.RegistrySecurity.AuditRuleType
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: RemoveAccessRule(RegistryAccessRule)
  nameWithType: RegistrySecurity.RemoveAccessRule(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(RegistryAccessRule)
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: RemoveAccessRuleAll(RegistryAccessRule)
  nameWithType: RegistrySecurity.RemoveAccessRuleAll(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(RegistryAccessRule)
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: RemoveAccessRuleSpecific(RegistryAccessRule)
  nameWithType: RegistrySecurity.RemoveAccessRuleSpecific(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(RegistryAccessRule)
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: RemoveAuditRule(RegistryAuditRule)
  nameWithType: RegistrySecurity.RemoveAuditRule(RegistryAuditRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(RegistryAuditRule)
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: RemoveAuditRuleAll(RegistryAuditRule)
  nameWithType: RegistrySecurity.RemoveAuditRuleAll(RegistryAuditRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(RegistryAuditRule)
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: RemoveAuditRuleSpecific(RegistryAuditRule)
  nameWithType: RegistrySecurity.RemoveAuditRuleSpecific(RegistryAuditRule)
  fullName: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(RegistryAuditRule)
- uid: System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: ResetAccessRule(RegistryAccessRule)
  nameWithType: RegistrySecurity.ResetAccessRule(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.ResetAccessRule(RegistryAccessRule)
- uid: System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: SetAccessRule(RegistryAccessRule)
  nameWithType: RegistrySecurity.SetAccessRule(RegistryAccessRule)
  fullName: System.Security.AccessControl.RegistrySecurity.SetAccessRule(RegistryAccessRule)
- uid: System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: SetAuditRule(RegistryAuditRule)
  nameWithType: RegistrySecurity.SetAuditRule(RegistryAuditRule)
  fullName: System.Security.AccessControl.RegistrySecurity.SetAuditRule(RegistryAuditRule)
- uid: System.Security.AccessControl.RegistrySecurity.#ctor*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: RegistrySecurity
  nameWithType: RegistrySecurity.RegistrySecurity
- uid: System.Security.AccessControl.RegistrySecurity.AccessRightType*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: AccessRightType
  nameWithType: RegistrySecurity.AccessRightType
- uid: System.Security.AccessControl.RegistrySecurity.AccessRuleFactory*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: AccessRuleFactory
  nameWithType: RegistrySecurity.AccessRuleFactory
- uid: System.Security.AccessControl.RegistrySecurity.AccessRuleType*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: RegistrySecurity.AccessRuleType
- uid: System.Security.AccessControl.RegistrySecurity.AddAccessRule*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: AddAccessRule
  nameWithType: RegistrySecurity.AddAccessRule
- uid: System.Security.AccessControl.RegistrySecurity.AddAuditRule*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: AddAuditRule
  nameWithType: RegistrySecurity.AddAuditRule
- uid: System.Security.AccessControl.RegistrySecurity.AuditRuleFactory*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: AuditRuleFactory
  nameWithType: RegistrySecurity.AuditRuleFactory
- uid: System.Security.AccessControl.RegistrySecurity.AuditRuleType*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: RegistrySecurity.AuditRuleType
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRule*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: RemoveAccessRule
  nameWithType: RegistrySecurity.RemoveAccessRule
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: RemoveAccessRuleAll
  nameWithType: RegistrySecurity.RemoveAccessRuleAll
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: RemoveAccessRuleSpecific
  nameWithType: RegistrySecurity.RemoveAccessRuleSpecific
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRule*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: RemoveAuditRule
  nameWithType: RegistrySecurity.RemoveAuditRule
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: RemoveAuditRuleAll
  nameWithType: RegistrySecurity.RemoveAuditRuleAll
- uid: System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: RemoveAuditRuleSpecific
  nameWithType: RegistrySecurity.RemoveAuditRuleSpecific
- uid: System.Security.AccessControl.RegistrySecurity.ResetAccessRule*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: ResetAccessRule
  nameWithType: RegistrySecurity.ResetAccessRule
- uid: System.Security.AccessControl.RegistrySecurity.SetAccessRule*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: SetAccessRule
  nameWithType: RegistrySecurity.SetAccessRule
- uid: System.Security.AccessControl.RegistrySecurity.SetAuditRule*
  parent: System.Security.AccessControl.RegistrySecurity
  isExternal: false
  name: SetAuditRule
  nameWithType: RegistrySecurity.SetAuditRule
