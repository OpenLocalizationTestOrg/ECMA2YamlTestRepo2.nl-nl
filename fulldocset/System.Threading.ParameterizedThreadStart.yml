### YamlMime:ManagedReference
items:
- uid: System.Threading.ParameterizedThreadStart
  id: ParameterizedThreadStart
  langs:
  - csharp
  name: ParameterizedThreadStart
  nameWithType: ParameterizedThreadStart
  fullName: System.Threading.ParameterizedThreadStart
  type: Delegate
  summary: "Hiermee geeft u de methode die wordt uitgevoerd op een <xref href=&quot;System.Threading.Thread&quot;> </xref>."
  remarks: "Wanneer een beheerde thread is gemaakt, de methode die wordt uitgevoerd op de thread wordt vertegenwoordigd door: - A <xref:System.Threading.ThreadStart>gemachtigde die wordt doorgegeven aan de <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName>constructor.</xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> </xref:System.Threading.ThreadStart>  Een methode die geen parameters heeft en dat retourneert `void` in C# of is een `Sub` procedure in Visual Basic kunt vertegenwoordigen de gemachtigde.      -Een ParameterizedThreadStart-gemachtigde die wordt doorgegeven aan de <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName>constructor.</xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> Een methode met een enkele parameter van het type <xref:System.Object>en die als resultaat gegeven void in C# of is een Sub-procedure in Visual Basic kunt vertegenwoordigen de gemachtigde.</xref:System.Object>       De thread begint niet uitvoeren totdat de <xref:System.Threading.Thread.Start%2A?displayProperty=fullName>methode wordt aangeroepen.</xref:System.Threading.Thread.Start%2A?displayProperty=fullName> De <xref:System.Threading.ThreadStart>of ParameterizedThreadStart gemachtigde wordt aangeroepen op de thread en kan worden uitgevoerd, begint op de eerste regel van de methode die wordt vertegenwoordigd door de gemachtigde.</xref:System.Threading.ThreadStart> In het geval van de gemachtigde ParameterizedThreadStart, het object dat wordt doorgegeven aan de <xref:System.Threading.Thread.Start%28System.Object%29>methode wordt doorgegeven aan de gemachtigde.</xref:System.Threading.Thread.Start%28System.Object%29>      > [!NOTE] > Visual Basic en C#-gebruikers kunnen weglaten de <xref:System.Threading.ThreadStart>of ParameterizedThreadStart gemachtigden-constructor bij het maken van een thread.</xref:System.Threading.ThreadStart> In Visual Basic, gebruikt de `AddressOf` operator bij het doorgeven van de methode voor de <xref:System.Threading.Thread.%23ctor%2A>constructor, bijvoorbeeld `Dim t As New Thread(AddressOf ThreadProc)`.</xref:System.Threading.Thread.%23ctor%2A> Geef in C#, gewoon de naam van de thread-procedure. De compiler selecteert de juiste gemachtigden-constructor.      > [!NOTE] > Wanneer u een gemachtigde ParameterizedThreadStart voor een exemplaarmethode in C++ maakt, de eerste parameter van de constructor de variabele voor het exemplaar is. Voor een statische methode is de eerste parameter van de constructor nul. Voor een statische methode vereist de gemachtigdenconstructor slechts één parameter: het adres van de retouraanroepmethode gekwalificeerd door de naam van de klasse.       De gemachtigde ParameterizedThreadStart en de <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>methode-overload maken het gemakkelijk doorgeven van gegevens naar een thread-procedure, maar deze techniek is niet veilig type omdat een object kan worden doorgegeven aan <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>.</xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> </xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> Een krachtigere manier gegevens moeten worden doorgegeven aan een thread-procedure is zowel de thread-procedure en de gegevensvelden in een object worker plaatsen. Zie voor meer informatie [Threads maken en het doorgeven van gegevens op tijd starten](~/add/includes/ajax-current-ext-md.md).       De gemachtigde ParameterizedThreadStart ondersteunt slechts één parameter. U kunt meerdere gegevensitems doorgeven aan de ParameterizedThreadStart door het maken van een van de volgende parameter:: een matrix.      -Een verzamelingstype als alle gegevensitems van hetzelfde type zijn.      -Er is een tuple-type, zoals <xref:System.Tuple%602>of <xref:System.Tuple%604>.</xref:System.Tuple%604> </xref:System.Tuple%602>"
  example:
  - "The following code example uses a ParameterizedThreadStart delegate with to execute a static method and an instance method. The first ParameterizedThreadStart delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method. Both methods match the ParameterizedThreadStart delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.  \n  \n> [!NOTE]\n>  The Visual Basic and C# compilers infer the ParameterizedThreadStart delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor. Thus, there is no explicit constructor call in the code.  \n  \n [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/cpp/t-system.threading.param_1.cpp)]\n [!code-vb[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/visualbasic/t-system.threading.param_1.vb)]\n [!code-cs[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/csharp/t-system.threading.param_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public delegate void ParameterizedThreadStart(object obj);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
