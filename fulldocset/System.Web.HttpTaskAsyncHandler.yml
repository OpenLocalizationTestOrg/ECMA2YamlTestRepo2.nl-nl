### YamlMime:ManagedReference
items:
- uid: System.Web.HttpTaskAsyncHandler
  id: HttpTaskAsyncHandler
  children:
  - System.Web.HttpTaskAsyncHandler.#ctor
  - System.Web.HttpTaskAsyncHandler.IsReusable
  - System.Web.HttpTaskAsyncHandler.ProcessRequest(System.Web.HttpContext)
  - System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(System.Web.HttpContext)
  - System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  - System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  langs:
  - csharp
  name: HttpTaskAsyncHandler
  nameWithType: HttpTaskAsyncHandler
  fullName: System.Web.HttpTaskAsyncHandler
  type: Class
  summary: "Biedt methoden die een afgeleide taak handler-klasse om te kunnen verwerken van een asynchrone taak kunt implementeren."
  remarks: "TheHttpTaskAsyncHandler klasse biedt een vereenvoudigde manier voor het verwerken van asynchrone taken te implementeren zonder de <xref:System.Web.IHttpAsyncHandler.BeginProcessRequest%2A>en <xref:System.Web.IHttpAsyncHandler.EndProcessRequest%2A>methoden.</xref:System.Web.IHttpAsyncHandler.EndProcessRequest%2A> </xref:System.Web.IHttpAsyncHandler.BeginProcessRequest%2A>  Als u wilt een handler voor een asynchrone taak hebt gemaakt, kunt u overschrijven de <xref:System.Web.HttpTaskAsyncHandler.ProcessRequestAsync%2A>methode en implementeer aangepaste taak afhandeling van code.</xref:System.Web.HttpTaskAsyncHandler.ProcessRequestAsync%2A>"
  syntax:
    content: 'public abstract class HttpTaskAsyncHandler : System.Web.IHttpAsyncHandler'
  inheritance:
  - System.Object
  implements:
  - System.Web.IHttpAsyncHandler
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.HttpTaskAsyncHandler.#ctor
  id: '#ctor'
  parent: System.Web.HttpTaskAsyncHandler
  langs:
  - csharp
  name: HttpTaskAsyncHandler()
  nameWithType: HttpTaskAsyncHandler.HttpTaskAsyncHandler()
  fullName: System.Web.HttpTaskAsyncHandler.HttpTaskAsyncHandler()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Aangeroepen vanuit een constructors in afgeleide klassen initialiseren de <xref href=&quot;System.Web.HttpTaskAsyncHandler&quot;> </xref> klasse."
  syntax:
    content: protected HttpTaskAsyncHandler ();
    parameters: []
  overload: System.Web.HttpTaskAsyncHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpTaskAsyncHandler.IsReusable
  id: IsReusable
  parent: System.Web.HttpTaskAsyncHandler
  langs:
  - csharp
  name: IsReusable
  nameWithType: HttpTaskAsyncHandler.IsReusable
  fullName: System.Web.HttpTaskAsyncHandler.IsReusable
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Wanneer in een afgeleide klasse genegeerd, krijgt een waarde die aangeeft of de taak handler klasse-instantie van een andere asynchrone taak kan worden hergebruikt."
  syntax:
    content: public virtual bool IsReusable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als u de handler kan worden hergebruikt; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.  De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.HttpTaskAsyncHandler.IsReusable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpTaskAsyncHandler.ProcessRequest(System.Web.HttpContext)
  id: ProcessRequest(System.Web.HttpContext)
  parent: System.Web.HttpTaskAsyncHandler
  langs:
  - csharp
  name: ProcessRequest(HttpContext)
  nameWithType: HttpTaskAsyncHandler.ProcessRequest(HttpContext)
  fullName: System.Web.HttpTaskAsyncHandler.ProcessRequest(HttpContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Wanneer in een afgeleide klasse genegeerd, biedt de code die verantwoordelijk is voor een synchrone taak."
  syntax:
    content: public virtual void ProcessRequest (System.Web.HttpContext context);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "De HTTP-context."
  overload: System.Web.HttpTaskAsyncHandler.ProcessRequest*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De methode is ge√Ømplementeerd, maar biedt geen een standaard verwerking voor synchrone taken."
  platform:
  - net462
- uid: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(System.Web.HttpContext)
  id: ProcessRequestAsync(System.Web.HttpContext)
  parent: System.Web.HttpTaskAsyncHandler
  langs:
  - csharp
  name: ProcessRequestAsync(HttpContext)
  nameWithType: HttpTaskAsyncHandler.ProcessRequestAsync(HttpContext)
  fullName: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(HttpContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Wanneer in een afgeleide klasse genegeerd, biedt de code die verantwoordelijk is voor een asynchrone taak."
  remarks: "Overschrijf de ProcessRequestAsync-methode voor het maken van een aangepaste handler voor een asynchrone taak."
  syntax:
    content: public abstract System.Threading.Tasks.Task ProcessRequestAsync (System.Web.HttpContext context);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "De HTTP-context."
    return:
      type: System.Threading.Tasks.Task
      description: "De asynchrone taak."
  overload: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  id: System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  isEii: true
  parent: System.Web.HttpTaskAsyncHandler
  langs:
  - csharp
  name: System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  fullName: System.Web.HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Initieert asynchrone verwerking van een taak in een HTTP-handler van de taak."
  remarks: "Dit lid is een expliciete interface lid-implementatie. Het kan worden gebruikt alleen wanneer de <xref:System.Web.HttpTaskAsyncHandler>exemplaar is geconverteerd naar een <xref:System.Web.IHttpAsyncHandler>interface.</xref:System.Web.IHttpAsyncHandler> </xref:System.Web.HttpTaskAsyncHandler>"
  syntax:
    content: IAsyncResult IHttpAsyncHandler.BeginProcessRequest (System.Web.HttpContext context, AsyncCallback cb, object extraData);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "De HTTP-context."
    - id: cb
      type: System.AsyncCallback
      description: "De callback-methode aan te roepen wanneer de methode retourneert."
    - id: extraData
      type: System.Object
      description: "Extra gegevens voor het verwerken van de taak."
    return:
      type: System.IAsyncResult
      description: "Een object met de van statusgegevens over de asynchrone bewerking."
  overload: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  id: System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  isEii: true
  parent: System.Web.HttpTaskAsyncHandler
  langs:
  - csharp
  name: System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  fullName: System.Web.HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "Ends asynchrone verwerking van een taak in een HTTP-handler van de taak."
  remarks: "Dit lid is een expliciete interface lid-implementatie. Het kan worden gebruikt alleen wanneer de <xref:System.Web.HttpTaskAsyncHandler>exemplaar is geconverteerd naar een <xref:System.Web.IHttpAsyncHandler>interface.</xref:System.Web.IHttpAsyncHandler> </xref:System.Web.HttpTaskAsyncHandler>"
  syntax:
    content: void IHttpAsyncHandler.EndProcessRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "De status van de asynchrone bewerking."
  overload: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Web.HttpTaskAsyncHandler.#ctor
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: HttpTaskAsyncHandler()
  nameWithType: HttpTaskAsyncHandler.HttpTaskAsyncHandler()
  fullName: System.Web.HttpTaskAsyncHandler.HttpTaskAsyncHandler()
- uid: System.Web.HttpTaskAsyncHandler.IsReusable
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: IsReusable
  nameWithType: HttpTaskAsyncHandler.IsReusable
  fullName: System.Web.HttpTaskAsyncHandler.IsReusable
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.HttpTaskAsyncHandler.ProcessRequest(System.Web.HttpContext)
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: ProcessRequest(HttpContext)
  nameWithType: HttpTaskAsyncHandler.ProcessRequest(HttpContext)
  fullName: System.Web.HttpTaskAsyncHandler.ProcessRequest(HttpContext)
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(System.Web.HttpContext)
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: ProcessRequestAsync(HttpContext)
  nameWithType: HttpTaskAsyncHandler.ProcessRequestAsync(HttpContext)
  fullName: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync(HttpContext)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  fullName: System.Web.HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  fullName: System.Web.HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
- uid: System.Web.HttpTaskAsyncHandler.#ctor*
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: HttpTaskAsyncHandler
  nameWithType: HttpTaskAsyncHandler.HttpTaskAsyncHandler
- uid: System.Web.HttpTaskAsyncHandler.IsReusable*
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: IsReusable
  nameWithType: HttpTaskAsyncHandler.IsReusable
- uid: System.Web.HttpTaskAsyncHandler.ProcessRequest*
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: ProcessRequest
  nameWithType: HttpTaskAsyncHandler.ProcessRequest
- uid: System.Web.HttpTaskAsyncHandler.ProcessRequestAsync*
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: ProcessRequestAsync
  nameWithType: HttpTaskAsyncHandler.ProcessRequestAsync
- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#BeginProcessRequest*
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: System.Web.IHttpAsyncHandler.BeginProcessRequest
  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.BeginProcessRequest
- uid: System.Web.HttpTaskAsyncHandler.System#Web#IHttpAsyncHandler#EndProcessRequest*
  parent: System.Web.HttpTaskAsyncHandler
  isExternal: false
  name: System.Web.IHttpAsyncHandler.EndProcessRequest
  nameWithType: HttpTaskAsyncHandler.System.Web.IHttpAsyncHandler.EndProcessRequest
