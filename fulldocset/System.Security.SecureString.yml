### YamlMime:ManagedReference
items:
- uid: System.Security.SecureString
  id: SecureString
  children:
  - System.Security.SecureString.#ctor
  - System.Security.SecureString.#ctor(System.Char*,System.Int32)
  - System.Security.SecureString.AppendChar(System.Char)
  - System.Security.SecureString.Clear
  - System.Security.SecureString.Copy
  - System.Security.SecureString.Dispose
  - System.Security.SecureString.InsertAt(System.Int32,System.Char)
  - System.Security.SecureString.IsReadOnly
  - System.Security.SecureString.Length
  - System.Security.SecureString.MakeReadOnly
  - System.Security.SecureString.RemoveAt(System.Int32)
  - System.Security.SecureString.SetAt(System.Int32,System.Char)
  langs:
  - csharp
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
  type: Class
  summary: "Vertegenwoordigt de tekst die moet vertrouwelijk worden behandeld, zoals door dit te verwijderen uit het computergeheugen wanneer deze niet langer nodig is. Deze klasse kan niet worden overgenomen."
  remarks: "SecureString is een tekenreeks die u een zekere mate van beveiliging biedt. Er wordt geprobeerd om te voorkomen dat mogelijk gevoelige tekenreeksen opslaan in het procesgeheugen als tekst zonder opmaak.  (Voor beperkingen, Zie de [hoe veilig is SecureString?](#HowSecure) sectie.) De waarde van een exemplaar van SecureString automatisch is beveiligd met een mechanisme dat wordt ondersteund door het onderliggende platform als het exemplaar is geïnitialiseerd of wanneer de waarde wordt gewijzigd. Uw toepassing kan het exemplaar niet-wijzigbaar geven en te voorkomen dat verdere wijzigingen door aan te roepen de <xref:System.Security.SecureString.MakeReadOnly%2A>methode.</xref:System.Security.SecureString.MakeReadOnly%2A>       De maximale lengte van een exemplaar SecureString is 65.536 tekens.      > [!IMPORTANT] > Dit type implementeert de <xref:System.IDisposable>interface.</xref:System.IDisposable> Wanneer u klaar bent met een exemplaar van het type, moet u beschikken over het direct of indirect. Aanroepen voor het rechtstreeks verwijderen van het type ervan <xref:System.IDisposable.Dispose%2A>methode in een `try` / `catch` blok.</xref:System.IDisposable.Dispose%2A> Gebruiken om de buitengebruikstelling van het indirect, een taal constructie zoals `using` (in C#) of `Using` (in Visual Basic). Zie voor meer informatie de sectie &quot;Met behulp van een Object dat wordt geïmplementeerd IDisposable&quot; in de <xref:System.IDisposable>interface onderwerp.</xref:System.IDisposable>       De klasse SecureString en de bijbehorende leden zijn niet zichtbaar voor COM. Zie voor meer informatie <xref:System.Runtime.InteropServices.ComVisibleAttribute>.</xref:System.Runtime.InteropServices.ComVisibleAttribute>       In deze sectie: [tegenover de tekenreeks. SecureString](#vsString)[SecureString operations](#Ops)[SecureString en interop](#interop)[hoe veilig is SecureString?               ](#HowSecure)      <a name=&quot;vsString&quot;></a>## String versus SecureString een exemplaar van de <xref:System.String?displayProperty=fullName>klasse is onveranderbaar en wanneer deze niet langer nodig is, kan niet via programmacode worden gepland voor garbagecollection; dat wil zeggen, het exemplaar is alleen-lezen nadat deze is gemaakt en het is niet mogelijk om te voorspellen wanneer het exemplaar worden verwijderd uit het computergeheugen.</xref:System.String?displayProperty=fullName> Omdat <xref:System.String?displayProperty=fullName>instanties zijn niet-wijzigbaar, bewerkingen die worden weergegeven voor het wijzigen van een bestaand exemplaar daadwerkelijk maakt u een kopie van het te bewerken.</xref:System.String?displayProperty=fullName> Als gevolg daarvan kan als een <xref:System.String>object gevoelige informatie, zoals een wachtwoord, creditcardnummer of persoonlijke gegevens bevat, wordt er een risico dat de informatie wordt weergegeven nadat deze is gebruikt, omdat de toepassing de gegevens niet uit het computergeheugen verwijderen kan.</xref:System.String>       Een object SecureString is vergelijkbaar met een <xref:System.String>object in dat er een tekstwaarde.</xref:System.String> Echter de waarde van een object in het geheugen is vastgemaakt SecureString mag een beveiligingsmechanisme gebruiken, zoals versleuteling, wordt geleverd door het onderliggende besturingssysteem kan worden gewijzigd tot uw toepassing gemarkeerd als alleen-lezen en kan worden verwijderd uit het computergeheugen door het aanroepen van uw toepassing de <xref:System.Security.SecureString.Dispose%2A>methode of door de .NET Framework-garbagecollector.</xref:System.Security.SecureString.Dispose%2A>       Zie voor een beschrijving van de beperkingen van de klasse SecureString de [hoe veilig is SecureString?](#HowSecure) sectie.       [Terug naar boven](#top) <a name=&quot;Ops&quot;> </a> ## SecureString bewerkingen de SecureString klasse bevat leden waarmee u het volgende doen: exemplaar maken van een SecureString object instantiëren van een object SecureString door het aanroepen van de parameterloze constructor.             Voeg tekens dat u wilt een SecureString object dat u kunt een enkel teken tegelijk toevoegen aan een object SecureString door het aanroepen van de <xref:System.Security.SecureString.AppendChar%2A>of <xref:System.Security.SecureString.InsertAt%2A>methode.</xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      > [!IMPORTANT] > A SecureString-object moet nooit worden gemaakt van een <xref:System.String>omdat de gevoelige gegevens al onderworpen aan de gevolgen van het gebruikte geheugen van de niet-wijzigbaar <xref:System.String>klasse is.</xref:System.String> </xref:System.String> Is de beste manier om een object SecureString te maken van een niet-beheerde teken-op-een-time-bron, zoals de <xref:System.Console.ReadKey%2A?displayProperty=fullName>methode.</xref:System.Console.ReadKey%2A?displayProperty=fullName>       Tekens verwijderen uit een SecureString object kunt u een afzonderlijke teken vervangen door het aanroepen van de <xref:System.Security.SecureString.SetAt%2A>methode een afzonderlijke teken verwijderen door het aanroepen van de <xref:System.Security.SecureString.RemoveAt%2A>methode of verwijder alle tekens vanaf de SecureString exemplaar door het aanroepen van de <xref:System.Security.SecureString.Clear%2A>methode.</xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.SetAt%2A>       Maak het object SecureString alleen-lezen wanneer u de tekenreeks die staat voor het object SecureString hebt gedefinieerd, u aanroepen de <xref:System.Security.SecureString.MakeReadOnly%2A>methode voor het maken van de tekenreeks alleen-lezen.</xref:System.Security.SecureString.MakeReadOnly%2A>       Get-informatie over het object SecureString de SecureString klasse heeft slechts twee leden die informatie over de tekenreeks geven: de <xref:System.Security.SecureString.Length%2A>-eigenschap geeft het aantal eenheden code UTF16-codering in de tekenreeks; en de <xref:System.Security.SecureString.IsReadOnly%2A>, methode, waarmee wordt aangegeven of het exemplaar alleen-lezen is.</xref:System.Security.SecureString.IsReadOnly%2A> </xref:System.Security.SecureString.Length%2A>       Release van het geheugen toegewezen aan het SecureString-exemplaar omdat SecureString implementeert de <xref:System.IDisposable>interface, u het geheugen vrij door het aanroepen van de <xref:System.Security.SecureString.Dispose%2A>methode.</xref:System.Security.SecureString.Dispose%2A> </xref:System.IDisposable>       De klasse SecureString heeft geen leden die controleren, te vergelijken of de waarde van een SecureString converteren. Het ontbreken van deze leden beveiligt de waarde van het exemplaar van per ongeluk of schadelijke blootstelling. Gebruik de juiste leden van de <xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>klasse, zoals de <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A>methode voor het bewerken van de waarde van een object SecureString.</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> </xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>       .NET Framework Class Library SecureString exemplaren wordt vaak wordt gebruikt in de volgende manieren: - om wachtwoordinformatie te geven aan een proces met behulp van de <xref:System.Diagnostics.ProcessStartInfo>structuur, of door het aanroepen van een overbelasting van de <xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName>methode die een parameter van het type SecureString heeft.</xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName> </xref:System.Diagnostics.ProcessStartInfo>      -Netwerk wachtwoord om informatie te geven door het aanroepen van een <xref:System.Net.NetworkCredential>klassen-constructor die een parameter van het type SecureString of met behulp van heeft de <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName>eigenschap.</xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName> </xref:System.Net.NetworkCredential>      -Om wachtwoordinformatie te geven voor SQL Server-verificatie door het aanroepen van de <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>constructor of bij het ophalen van de waarde van de <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName>eigenschap.</xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName> </xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>      -Naar een tekenreeks worden doorgegeven aan onbegeleide code. Zie voor meer informatie de [SecureString en interop](#interop) sectie.       [Terug naar boven](#top) <a name=&quot;interop&quot;> </a> ## SecureString en interop omdat het besturingssysteem geen SecureString ondersteunt, moet u converteren de waarde van het object SecureString naar het tekenreekstype vereist voordat de reeks wordt doorgegeven aan een systeemeigen methode.        De <xref:System.Runtime.InteropServices.Marshal>klasse heeft vijf methoden die hiervoor:- <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>, die de tekenreekswaarde SecureString naar een binaire tekenreeks (BSTR) wordt herkend door COM. converteert</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal>      - <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>en <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>, die de tekenreekswaarde SecureString kopiëren naar een ANSI-tekenreeks in het geheugen niet-beheerde.</xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>      - <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>en <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>, die de tekenreekswaarde SecureString kopiëren naar een Unicode-tekenreeks in het geheugen niet-beheerde.</xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>       Elk van deze methoden maakt een niet-gecodeerde tekenreeks in niet-beheerde geheugen. Het is de verantwoordelijkheid van de ontwikkelaar van nul en die geheugen vrij te maken als deze niet meer nodig is. Elk van de tekenreeks conversie en geheugen toewijzingsmethoden heeft een bijbehorende methode nul uit en de toegewezen geheugen vrij te maken: | Toewijzings-en conversie | Nul en vrije methode |   |--------------------------------------|--------------------------|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName>|   | <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>| <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName>|       [Back to top](#top)      <a name=&quot;HowSecure&quot;></a>    ## How secure is SecureString?</xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>    Wanneer correct is gemaakt, biedt een exemplaar SecureString meer gegevensbescherming dan een <xref:System.String>.</xref:System.String> Bij het maken van een tekenreeks van een bron teken-op-een-time, <xref:System.String>meerdere tussenliggende maakt in het geheugen dat SecureString wordt slechts één exemplaar gemaakt.</xref:System.String>  Garbagecollection van <xref:System.String>objecten is niet-deterministisch.</xref:System.String> Bovendien, omdat het geheugen niet vastgemaakt is, de garbage collector wordt extra kopieën maken van <xref:System.String>waarden wanneer verplaatsen en comprimeren van geheugen.</xref:System.String> Daarentegen, het geheugen toegewezen aan een object SecureString is vastgemaakt en dat het geheugen kan worden vrijgemaakt door het aanroepen van de <xref:System.Security.SecureString.Dispose%2A>methode.</xref:System.Security.SecureString.Dispose%2A>       Hoewel de gegevens die zijn opgeslagen in een exemplaar van SecureString meer veilig is dan de gegevens die zijn opgeslagen in een <xref:System.String>exemplaar, zijn er belangrijke beperkingen met betrekking tot hoe veilig is. van een SecureString exemplaar</xref:System.String> Deze omvatten: Platform op de Windows-besturingssysteem, de inhoud van de interne tekenmatrix een SecureString-exemplaar is versleuteld. Of verbroken vanwege ontbrekende API&quot;s of problemen sleutelbeheer, is versleuteling echter niet beschikbaar op alle platforms. Als gevolg hiervan is de SecureString beschikbaar op het bureaublad (alleen Windows), en niet op .NET Core.       Duur Even als de implementatie van SecureString is kunnen profiteren van versleuteling, de tekst zonder opmaak is toegewezen aan het exemplaar kan op verschillende tijdstippen worden blootgesteld SecureString:: omdat Windows niet biedt een veilige tekenreeks implementatie op het niveau van het besturingssysteem, .NET Framework nog steeds heeft de waarde voor de beveiligde converteren naar de weergave van de tekst zonder opmaak om het te gebruiken.      -Wanneer de waarde van de beveiligde tekenreeks is gewijzigd door methoden zoals <xref:System.Security.SecureString.AppendChar%2A>of <xref:System.Security.SecureString.RemoveAt%2A>, moet worden ontsleuteld (dat wil zeggen, geconverteerde achter op tekst zonder opmaak), gewijzigd en worden nogmaals.</xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      -Als de beveiligde tekenreeks wordt gebruikt in een interop-aanroep, moet deze worden geconverteerd naar een ANSI-tekenreeks, een Unicode-tekenreeks of een binaire tekenreeks (BSTR). Zie voor meer informatie de [SecureString en interop](#interop) sectie.       Het tijdsinterval waarvoor de waarde van het exemplaar SecureString wordt blootgesteld alleen ingekort in vergelijking met de <xref:System.String>klasse.</xref:System.String>       Opslag versus gebruik meer in het algemeen de SecureString klasse definieert een opslagmechanisme tekenreeks waarden dat moet worden beveiligd of vertrouwelijk. Buiten de .NET Framework zelf ondersteunt geen mechanisme Gebruik echter SecureString. Dit betekent dat de beveiligde tekenreeks moet worden geconverteerd naar een bruikbaar formulier (meestal een formulier gewone tekst) die kan worden herkend door het doel en dat ontsleuteling en conversie moeten plaatsvinden in de gebruikersruimte.       Over het algemeen SecureString is veiliger dan <xref:System.String>omdat deze het risico dat gevoelige gegevens wordt beperkt.</xref:System.String> Deze tekenreeksen kunnen nog steeds worden blootgesteld aan een proces of de bewerking die toegang heeft tot onbewerkte geheugen, zoals een schadelijke proces dat wordt uitgevoerd op de hostcomputer, een Procesdump of een gebruiker worden bekeken wisselbestand. In plaats van SecureString wachtwoorden beveiligen, wordt het aanbevolen alternatief is het gebruik van een ondoorzichtige ingang naar de referenties die zijn opgeslagen buiten het proces.       [Terug naar boven](#top)"
  example:
  - "The following example demonstrates how to use a SecureString to secure a user’s password for use as a credential to start a new process.  \n  \n [!code-vb[System.Security.SecureString.Ctor#4](~/add/codesnippet/visualbasic/t-system.security.secure_1.vb)]\n [!code-cs[System.Security.SecureString.Ctor#4](~/add/codesnippet/csharp/t-system.security.secure_1.cs)]"
  syntax:
    content: 'public sealed class SecureString : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecureString.#ctor
  id: '#ctor'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.SecureString&quot;> </xref> klasse."
  remarks: ''
  example:
  - "The following example uses the default (or parameterless) constructor to instantiate a new <xref:System.Security.SecureString> object. It then calls the <xref:System.Security.SecureString.AppendChar%2A> method to add an array of characters to it.  \n  \n [!code-cs[System.Security.SecureString.Ctor#2](~/add/codesnippet/csharp/m-system.security.secure_7_1.cs)]\n [!code-cpp[System.Security.SecureString.Ctor#2](~/add/codesnippet/cpp/m-system.security.secure_7_1.cpp)]\n [!code-vb[System.Security.SecureString.Ctor#2](~/add/codesnippet/visualbasic/m-system.security.secure_7_1.vb)]  \n  \n The following example creates a <xref:System.Security.SecureString> object from the value of a <xref:System.String> object.  \n  \n [!code-vb[System.Security.SecureString.Ctor#3](~/add/codesnippet/visualbasic/m-system.security.secure_7_2.vb)]\n [!code-cpp[System.Security.SecureString.Ctor#3](~/add/codesnippet/cpp/m-system.security.secure_7_2.cpp)]\n [!code-cs[System.Security.SecureString.Ctor#3](~/add/codesnippet/csharp/m-system.security.secure_7_2.cs)]"
  syntax:
    content: public SecureString ();
    parameters: []
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Er is een fout opgetreden tijdens het beveiligen van of de waarde van dit exemplaar unprotecting."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Deze bewerking wordt niet ondersteund op dit platform."
  platform:
  - net462
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  id: '#ctor(System.Char*,System.Int32)'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.SecureString&quot;> </xref> klasse vanuit een subarray van &lt;xref:System.Char?displayProperty=fullName&gt; objecten.       Deze constructor is niet compatibel met CLS. Het alternatief voor CLS is &lt;xref:System.Security.SecureString.%23ctor?displayProperty=fullName&gt;."
  remarks: "Deze constructor initialiseert de nieuwe <xref:System.Security.SecureString>-object op voor het aantal tekens in `value` opgegeven door `length`; de waarde van het exemplaar wordt vervolgens versleuteld.</xref:System.Security.SecureString>       Deze constructor is gedefinieerd in C#, alleen in de context van onveilige programmacode."
  example:
  - "The following example instantiates a new <xref:System.Security.SecureString> object by passing its constructor a pointer to a character array.  \n  \n [!code-cpp[System.Security.SecureString.Ctor2#1](~/add/codesnippet/cpp/m-system.security.secure_3_1.cpp)]\n [!code-cs[System.Security.SecureString.Ctor2#1](~/add/codesnippet/csharp/securestringctor/ctor1.cs#1)]"
  syntax:
    content: public SecureString (char* value, int length);
    parameters:
    - id: value
      type: System.Char*
      description: "Een verwijzing naar een matrix van &lt;xref:System.Char?displayProperty=fullName&gt; objecten."
    - id: length
      type: System.Int32
      description: "Het aantal elementen van `value` moeten worden opgenomen in het nieuwe exemplaar."
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>length</code>is kleiner dan nul of groter zijn dan 65.536."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Er is een fout opgetreden tijdens het beveiligen van of de waarde van deze beveiligde tekenreeks unprotecting."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Deze bewerking wordt niet ondersteund op dit platform."
  platform:
  - net462
- uid: System.Security.SecureString.AppendChar(System.Char)
  id: AppendChar(System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Een teken toegevoegd aan het einde van de huidige veilige tekenreeks."
  remarks: "Als de uitvoering een beveiligingsmechanisme, zoals versleuteling, gebruikt is de waarde van deze beveiligde tekenreeks, indien van toepassing, beveiligd; `c` wordt toegevoegd, dan is de nieuwe waarde van de beveiligde tekenreeks opnieuw is beveiligd."
  example:
  - "The following example demonstrates how the AppendChar, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_6_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_6_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_1.vb)]  \n  \n The following example demonstrates how the AppendChar and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_6_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_6_2.cs)]"
  syntax:
    content: public void AppendChar (char c);
    parameters:
    - id: c
      type: System.Char
      description: "Een teken toe te voegen aan deze beveiligde tekenreeks."
  overload: System.Security.SecureString.AppendChar*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Deze beveiligde tekenreeks is al verwijderd."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Deze beveiligde tekenreeks is alleen-lezen."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Deze bewerking zou de lengte van deze beveiligde tekenreeks groter is dan 65.536 tekens maken."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Er is een fout opgetreden tijdens het beveiligen van of de waarde van deze beveiligde tekenreeks unprotecting."
  platform:
  - net462
- uid: System.Security.SecureString.Clear
  id: Clear
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hiermee verwijdert u de waarde van de huidige veilige tekenreeks."
  remarks: "De computergeheugen met de waarde van deze beveiligde tekenreeks is ingesteld op nul, wordt de lengte van de waarde van deze beveiligde tekenreeks is ingesteld op nul."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and Clear methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_5_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_5_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_5_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.SecureString.Clear*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Deze beveiligde tekenreeks is al verwijderd."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Deze beveiligde tekenreeks is alleen-lezen."
  platform:
  - net462
- uid: System.Security.SecureString.Copy
  id: Copy
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Maakt een kopie van de huidige veilige tekenreeks."
  remarks: "Als u een exemplaar van een <xref:System.Security.SecureString>is gemarkeerd als alleen-lezen, het exemplaar van dit exemplaar niet worden alleen-lezen.</xref:System.Security.SecureString>"
  syntax:
    content: public System.Security.SecureString Copy ();
    parameters: []
    return:
      type: System.Security.SecureString
      description: "Een kopie van deze beveiligde tekenreeks."
  overload: System.Security.SecureString.Copy*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Deze beveiligde tekenreeks is al verwijderd."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Er is een fout opgetreden tijdens het beveiligen van of de waarde van deze beveiligde tekenreeks unprotecting."
  platform:
  - net462
- uid: System.Security.SecureString.Dispose
  id: Dispose
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Alle resources die worden gebruikt door de huidige versies <xref href=&quot;System.Security.SecureString&quot;> </xref> object."
  remarks: "De methode Dispose schrijft het toegewezen geheugen met de waarde van deze binaire nullen <xref:System.Security.SecureString>object en vervolgens wordt het toegewezen geheugen vrijgemaakt.</xref:System.Security.SecureString>       Zie voor meer informatie [garbagecollection](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.SecureString.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  id: InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hiermee voegt een teken in deze beveiligde tekenreeks op de positie van de opgegeven index."
  remarks: "De index is gebaseerd op nul; het eerste teken in deze beveiligde tekenreeks is op indexpositie nul.       Als de uitvoering een beveiligingsmechanisme, zoals versleuteling, gebruikt is de waarde van de beveiligde tekenreeks, indien van toepassing, beveiligd; `c` wordt ingevoegd op de positie van de opgegeven index; en vervolgens de nieuwe waarde opnieuw is beveiligd is. De methode InsertAt levert hetzelfde resultaat als de <xref:System.Security.SecureString.AppendChar%2A>methode, waarmee een teken ingevoegd aan het einde van een beveiligde tekenreeks als de `index` parameter van InsertAt is ingesteld op de lengte van dit exemplaar.</xref:System.Security.SecureString.AppendChar%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, InsertAt, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_0_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_0_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_0_1.vb)]"
  syntax:
    content: public void InsertAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "De index plaats waar u de parameter `c` wordt ingevoegd."
    - id: c
      type: System.Char
      description: "Het teken om in te voegen."
  overload: System.Security.SecureString.InsertAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Deze beveiligde tekenreeks is al verwijderd."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Deze beveiligde tekenreeks is alleen-lezen."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul of groter dan de lengte van deze beveiligde tekenreeks.       - of - uitvoering van deze bewerking zou de lengte van deze beveiligde tekenreeks groter is dan 65.536 tekens."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Er is een fout opgetreden tijdens het beveiligen van of de waarde van deze beveiligde tekenreeks unprotecting."
  platform:
  - net462
- uid: System.Security.SecureString.IsReadOnly
  id: IsReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Geeft aan of deze beveiligde tekenreeks is gemarkeerd als alleen-lezen."
  remarks: "Nadat een exemplaar van het <xref:System.Security.SecureString>is gemarkeerd als alleen-lezen door de <xref:System.Security.SecureString.MakeReadOnly%2A>methode wordt elke poging om te wijzigen van de waarde van het exemplaar er wordt een <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Security.SecureString.MakeReadOnly%2A> </xref:System.Security.SecureString> Gebruik de methode IsReadOnly te controleren of een <xref:System.Security.SecureString>is alleen-lezen voordat u probeert te wijzigen.</xref:System.Security.SecureString>"
  syntax:
    content: public bool IsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als u deze veilige tekenreeks is gemarkeerd als alleen-lezen. anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecureString.IsReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Deze beveiligde tekenreeks is al verwijderd."
  platform:
  - net462
- uid: System.Security.SecureString.Length
  id: Length
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hiermee haalt het aantal tekens in de huidige veilige tekenreeks."
  remarks: "De eigenschap Length retourneert het aantal <xref:System.Char>objecten in dit exemplaar, niet het aantal Unicode-tekens.</xref:System.Char> Een Unicode-teken kan worden weergegeven met meer dan één <xref:System.Char>object.</xref:System.Char>       De maximale lengte van een <xref:System.Security.SecureString>exemplaar is 65.536 tekens.</xref:System.Security.SecureString>"
  syntax:
    content: public int Length { get; }
    return:
      type: System.Int32
      description: "Het aantal &lt;xref:System.Char?displayProperty=fullName&gt; objecten in deze tekenreeks beveiligen."
  overload: System.Security.SecureString.Length*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Deze beveiligde tekenreeks is al verwijderd."
  platform:
  - net462
- uid: System.Security.SecureString.MakeReadOnly
  id: MakeReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Maakt de tekstwaarde van deze beveiligde tekenreeks alleen-lezen."
  remarks: "Initialiseren van de tekstwaarde van een exemplaar van de <xref:System.Security.SecureString>klasse met de <xref:System.Security.SecureString.%23ctor%2A>constructors, en wijzig de waarde met de <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, en <xref:System.Security.SecureString.AppendChar%2A>methoden.</xref:System.Security.SecureString.AppendChar%2A> </xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.SetAt%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.%23ctor%2A> </xref:System.Security.SecureString>       Nadat u de laatste wijzigingen hebt aangebracht, de methode MakeReadOnly gebruiken waarmee de waarde van het exemplaar niet-wijzigbaar (alleen-lezen). Nadat de waarde is gemarkeerd als alleen-lezen, verdere pogingen aanpassen zodat deze een <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> genereert       Het effect van het aanroepen van MakeReadOnly aan kan worden hersteld omdat de <xref:System.Security.SecureString>klasse biedt geen manier om de beveiligde tekenreeks kunnen wijzigen opnieuw.</xref:System.Security.SecureString> Gebruik de <xref:System.Security.SecureString.IsReadOnly%2A>methode om te controleren of een exemplaar van <xref:System.Security.SecureString>is alleen-lezen.</xref:System.Security.SecureString> </xref:System.Security.SecureString.IsReadOnly%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password. After the password is collected, it is made read-only.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_1_1.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_1_1.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_1_1.cs)]"
  syntax:
    content: public void MakeReadOnly ();
    parameters: []
  overload: System.Security.SecureString.MakeReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Deze beveiligde tekenreeks is al verwijderd."
  platform:
  - net462
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hiermee verwijdert u het teken op de opgegeven index voor de positie van deze beveiligde tekenreeks."
  remarks: "De index is gebaseerd op nul; het eerste teken in dit geval is bij indexpositie nul.       Als de uitvoering een beveiligingsmechanisme, zoals versleuteling, gebruikt is de waarde van deze beveiligde tekenreeks, indien van toepassing, beveiligd; het teken op de positie van de opgegeven index verwijderd; de nieuwe waarde is vervolgens opnieuw is beveiligd."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, RemoveAt, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_2_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_2_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_1.vb)]  \n  \n The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and RemoveAt methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_2_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_2_2.cs)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "De indexpositie van een teken in deze beveiligde tekenreeks."
  overload: System.Security.SecureString.RemoveAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Deze beveiligde tekenreeks is al verwijderd."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Deze beveiligde tekenreeks is alleen-lezen."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul of groter dan of gelijk aan de lengte van deze beveiligde tekenreeks."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Er is een fout opgetreden tijdens het beveiligen van of de waarde van deze beveiligde tekenreeks unprotecting."
  platform:
  - net462
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  id: SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Het bestaande teken op de positie van de opgegeven index vervangen door een ander teken."
  remarks: "De index is gebaseerd op nul; het eerste teken in dit geval is bij indexpositie nul.       Als de uitvoering een beveiligingsmechanisme, zoals versleuteling, gebruikt is de waarde van de beveiligde tekenreeks, indien van toepassing, beveiligd; `c` is toegewezen aan de opgegeven indexpositie; en vervolgens de nieuwe waarde opnieuw is beveiligd is."
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, SetAt, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_4_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_4_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_4_1.vb)]"
  syntax:
    content: public void SetAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "De indexpositie van een bestaand teken in deze veilige tekenreeks"
    - id: c
      type: System.Char
      description: "Een teken dat de bestaande teken vervangt."
  overload: System.Security.SecureString.SetAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Deze beveiligde tekenreeks is al verwijderd."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Deze beveiligde tekenreeks is alleen-lezen."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul of groter dan of gelijk aan de lengte van deze beveiligde tekenreeks."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Er is een fout opgetreden tijdens het beveiligen van of de waarde van deze beveiligde tekenreeks unprotecting."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecureString.#ctor
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.SecureString.AppendChar(System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Security.SecureString.Clear
  parent: System.Security.SecureString
  isExternal: false
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
- uid: System.Security.SecureString.Copy
  parent: System.Security.SecureString
  isExternal: false
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.SecureString.Dispose
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
- uid: System.Security.SecureString.IsReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecureString.Length
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
- uid: System.Security.SecureString.#ctor*
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString
  nameWithType: SecureString.SecureString
- uid: System.Security.SecureString.AppendChar*
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar
  nameWithType: SecureString.AppendChar
- uid: System.Security.SecureString.Clear*
  parent: System.Security.SecureString
  isExternal: false
  name: Clear
  nameWithType: SecureString.Clear
- uid: System.Security.SecureString.Copy*
  parent: System.Security.SecureString
  isExternal: false
  name: Copy
  nameWithType: SecureString.Copy
- uid: System.Security.SecureString.Dispose*
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose
  nameWithType: SecureString.Dispose
- uid: System.Security.SecureString.InsertAt*
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt
  nameWithType: SecureString.InsertAt
- uid: System.Security.SecureString.IsReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly
  nameWithType: SecureString.IsReadOnly
- uid: System.Security.SecureString.Length*
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly
  nameWithType: SecureString.MakeReadOnly
- uid: System.Security.SecureString.RemoveAt*
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt
  nameWithType: SecureString.RemoveAt
- uid: System.Security.SecureString.SetAt*
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt
  nameWithType: SecureString.SetAt
