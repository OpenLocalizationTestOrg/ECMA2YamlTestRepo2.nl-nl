### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ICryptoTransform
  id: ICryptoTransform
  children:
  - System.Security.Cryptography.ICryptoTransform.CanReuseTransform
  - System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
  - System.Security.Cryptography.ICryptoTransform.InputBlockSize
  - System.Security.Cryptography.ICryptoTransform.OutputBlockSize
  - System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
  type: Interface
  summary: "Hiermee definieert u de basisbewerkingen van cryptografische transformaties."
  remarks: "Hash-algoritmen zijn een voorbeeld van cryptografische transformaties (<xref:System.Security.Cryptography.HashAlgorithm>).</xref:System.Security.Cryptography.HashAlgorithm>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ICryptoTransform : IDisposable
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: ICryptoTransform.CanReuseTransform
  fullName: System.Security.Cryptography.ICryptoTransform.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Haalt een waarde die aangeeft of de huidige transformatie opnieuw kan worden gebruikt."
  syntax:
    content: public bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de huidige transformatie opnieuw kan worden gebruikt; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ICryptoTransform.CanReuseTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: ICryptoTransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Haalt een waarde die aangeeft of meerdere blokken kunnen worden omgezet."
  syntax:
    content: public bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als meerdere blokken kunnen worden omgezet; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: ICryptoTransform.InputBlockSize
  fullName: System.Security.Cryptography.ICryptoTransform.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Hiermee haalt u de blokgrootte van de invoer."
  syntax:
    content: public int InputBlockSize { get; }
    return:
      type: System.Int32
      description: "De grootte van de invoergegevens gegevensblokken die zich in bytes."
  overload: System.Security.Cryptography.ICryptoTransform.InputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: ICryptoTransform.OutputBlockSize
  fullName: System.Security.Cryptography.ICryptoTransform.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Hiermee haalt u de blokgrootte van de uitvoer."
  syntax:
    content: public int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: "De grootte van de uitvoergegevens gegevensblokken die zich in bytes."
  overload: System.Security.Cryptography.ICryptoTransform.OutputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "De opgegeven regio van de invoer bytematrix transformeert en de resulterende transformatie gekopieerd naar de opgegeven regio van de uitvoer-byte-matrix."
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "De invoer waarvoor de transformatie berekenen."
    - id: inputOffset
      type: System.Int32
      description: "De offset in de invoer bytematrix waaruit de gegevens in gebruik neemt."
    - id: inputCount
      type: System.Int32
      description: "Het aantal bytes in de invoer bytematrix moet worden gebruikt als gegevens."
    - id: outputBuffer
      type: System.Byte[]
      description: "De uitvoer waarop de transformatie schrijven."
    - id: outputOffset
      type: System.Int32
      description: "De offset in de uitvoer bytematrix waaruit u wilt beginnen met het schrijven van gegevens."
    return:
      type: System.Int32
      description: "Het aantal geschreven bytes."
  overload: System.Security.Cryptography.ICryptoTransform.TransformBlock*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.ICryptoTransform
  langs:
  - csharp
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Hiermee transformeert u de opgegeven regio van de opgegeven byte-matrix."
  remarks: "TransformFinalBlock is een speciale functie voor het transformeren van het laatste blok of een gedeeltelijke blok in de stroom. Het resultaat een nieuwe matrix die de resterende getransformeerde bytes bevat. Een nieuwe array wordt geretourneerd, omdat de hoeveelheid gegevens geretourneerd aan het einde groter dan één blok zijn kan wanneer opvulling wordt toegevoegd."
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "De invoer waarvoor de transformatie berekenen."
    - id: inputOffset
      type: System.Int32
      description: "De offset in de bytematrix waaruit de gegevens in gebruik neemt."
    - id: inputCount
      type: System.Int32
      description: "Het aantal bytes in de bytematrix moet worden gebruikt als gegevens."
    return:
      type: System.Byte[]
      description: "De berekende transformatie."
  overload: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: ICryptoTransform.CanReuseTransform
  fullName: System.Security.Cryptography.ICryptoTransform.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: ICryptoTransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: InputBlockSize
  nameWithType: ICryptoTransform.InputBlockSize
  fullName: System.Security.Cryptography.ICryptoTransform.InputBlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: ICryptoTransform.OutputBlockSize
  fullName: System.Security.Cryptography.ICryptoTransform.OutputBlockSize
- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.ICryptoTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.ICryptoTransform.CanReuseTransform*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: ICryptoTransform.CanReuseTransform
- uid: System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: ICryptoTransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.ICryptoTransform.InputBlockSize*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: InputBlockSize
  nameWithType: ICryptoTransform.InputBlockSize
- uid: System.Security.Cryptography.ICryptoTransform.OutputBlockSize*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: ICryptoTransform.OutputBlockSize
- uid: System.Security.Cryptography.ICryptoTransform.TransformBlock*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: TransformBlock
  nameWithType: ICryptoTransform.TransformBlock
- uid: System.Security.Cryptography.ICryptoTransform.TransformFinalBlock*
  parent: System.Security.Cryptography.ICryptoTransform
  isExternal: false
  name: TransformFinalBlock
  nameWithType: ICryptoTransform.TransformFinalBlock
