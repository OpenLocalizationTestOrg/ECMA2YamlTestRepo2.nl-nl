### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlDocument
  id: XmlDocument
  children:
  - System.Xml.XmlDocument.#ctor
  - System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  - System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  - System.Xml.XmlDocument.BaseURI
  - System.Xml.XmlDocument.CloneNode(System.Boolean)
  - System.Xml.XmlDocument.CreateAttribute(System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateCDataSection(System.String)
  - System.Xml.XmlDocument.CreateComment(System.String)
  - System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateDocumentFragment
  - System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateEntityReference(System.String)
  - System.Xml.XmlDocument.CreateNavigator
  - System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)
  - System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  - System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  - System.Xml.XmlDocument.CreateTextNode(System.String)
  - System.Xml.XmlDocument.CreateWhitespace(System.String)
  - System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  - System.Xml.XmlDocument.DocumentElement
  - System.Xml.XmlDocument.DocumentType
  - System.Xml.XmlDocument.GetElementById(System.String)
  - System.Xml.XmlDocument.GetElementsByTagName(System.String)
  - System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  - System.Xml.XmlDocument.Implementation
  - System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  - System.Xml.XmlDocument.InnerText
  - System.Xml.XmlDocument.InnerXml
  - System.Xml.XmlDocument.IsReadOnly
  - System.Xml.XmlDocument.Load(System.IO.Stream)
  - System.Xml.XmlDocument.Load(System.IO.TextReader)
  - System.Xml.XmlDocument.Load(System.String)
  - System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  - System.Xml.XmlDocument.LoadXml(System.String)
  - System.Xml.XmlDocument.LocalName
  - System.Xml.XmlDocument.Name
  - System.Xml.XmlDocument.NameTable
  - System.Xml.XmlDocument.NodeChanged
  - System.Xml.XmlDocument.NodeChanging
  - System.Xml.XmlDocument.NodeInserted
  - System.Xml.XmlDocument.NodeInserting
  - System.Xml.XmlDocument.NodeRemoved
  - System.Xml.XmlDocument.NodeRemoving
  - System.Xml.XmlDocument.NodeType
  - System.Xml.XmlDocument.OwnerDocument
  - System.Xml.XmlDocument.ParentNode
  - System.Xml.XmlDocument.PreserveWhitespace
  - System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  - System.Xml.XmlDocument.Save(System.IO.Stream)
  - System.Xml.XmlDocument.Save(System.IO.TextWriter)
  - System.Xml.XmlDocument.Save(System.String)
  - System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.SchemaInfo
  - System.Xml.XmlDocument.Schemas
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  - System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  - System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.XmlResolver
  langs:
  - csharp
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
  type: Class
  summary: "Hiermee geeft u een XML-document. U kunt deze klasse gebruiken om te laden, te valideren, te bewerken, toevoegen en XML in een document te plaatsen."
  remarks: "<a name=\"Remarks\"></a> The XmlDocument class is an in-memory representation of an XML document. It implements the W3C [XML Document Object Model (DOM)](~/add/includes/ajax-current-ext-md.md) Level 1 Core and the Core DOM Level 2.  \n  \n *DOM* stands for *document object model*. To read more about it, see [XML Document Object Model (DOM)](../Topic/XML%20Document%20Object%20Model%20\\(DOM\\).md).  \n  \n You can load XML into the DOM by using the XmlDocument class, and then programmatically read, modify, and remove XML in the document.  \n  \n If you want to pry open the XmlDocument class and see how it’s implemented, see the [Reference Source](http://referencesource.microsoft.com/#System.Xml/Xml/System/Xml/Dom/XmlDocument.cs#f82a4c1bd1f0ee12).  \n  \n<a name=\"Common\"></a>   \n## Tasks  \n  \n-   [Load XML into the document object model](#Load)  \n  \n-   [Validate it against a schema](#Validation)  \n  \n-   [Navigate the document tree](#Navigate)  \n  \n-   [Find nodes](#Find)  \n  \n-   [Edit nodes](#Edit)  \n  \n-   [Add nodes](#Add)  \n  \n-   [Remove nodes](#Remove)  \n  \n-   [Position nodes](#Position)  \n  \n<a name=\"Load\"></a>   \n## Load XML into the document object model  \n Start with an XML document like this one. It’s just a few books in a collection. But it does contain the basic things that you’d find in any XML document; a namespace, elements that represent data and attributes that describe the data.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<books xmlns=\"http://www.contoso.com/books\">  \n  <book genre=\"novel\" ISBN=\"1-861001-57-8\" publicationdate=\"1823-01-28\">  \n    <title>Pride And Prejudice</title>  \n    <price>24.95</price>  \n  </book>  \n  <book genre=\"novel\" ISBN=\"1-861002-30-1\" publicationdate=\"1985-01-01\">  \n    <title>The Handmaid's Tale</title>  \n    <price>29.95</price>  \n  </book>  \n  <book genre=\"novel\" ISBN=\"1-861001-45-3\" publicationdate=\"1811-01-01\">  \n    <title>Sense and Sensibility</title>  \n    <price>19.95</price>  \n  </book>  \n</books>  \n```  \n  \n Next, load this data into the DOM so that you can work with it in memory. The most popular way to do this is refer to a file on your local computer or on a network.  \n  \n This example loads XML from a file. If the file doesn’t exist, it just generates some XML and loads that.  \n  \n [!code-cpp[XMLProcessingApp#1](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#1)]\n [!code-cs[XMLProcessingApp#1](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#1)]\n [!code-vb[XMLProcessingApp#1](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#1)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Reading an XML Document into the DOM](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Validation\"></a>   \n## Validate it against a schema  \n Start with an XML schema like this one. This schema defines the data types in the XML and which attributes are required.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"  \n  attributeFormDefault=\"unqualified\"   \n  elementFormDefault=\"qualified\"  \n  targetNamespace=\"http://www.contoso.com/books\">   \n  <xs:element name=\"books\">  \n    <xs:complexType>  \n      <xs:sequence>  \n        <xs:element maxOccurs=\"unbounded\" name=\"book\">  \n          <xs:complexType>  \n            <xs:sequence>  \n              <xs:element name=\"title\" type=\"xs:string\" />  \n              <xs:element name=\"price\" type=\"xs:decimal\" />  \n            </xs:sequence>  \n            <xs:attribute name=\"genre\" type=\"xs:string\" use=\"required\" />  \n            <xs:attribute name=\"ISBN\" type=\"xs:string\" use=\"required\" />  \n            <xs:attribute name=\"publicationdate\" type=\"xs:date\" use=\"required\" />  \n          </xs:complexType>  \n        </xs:element>  \n      </xs:sequence>  \n    </xs:complexType>  \n  </xs:element>  \n</xs:schema>  \n```  \n  \n Create an <xref:System.Xml.XmlReader> object by using your schema, and then load that object into the DOM. Create an event handler that executes when code attempts to modify your XML file in ways that violate the rules of the schema.  \n  \n These blocks of code show helper methods that do all of this.  \n  \n [!code-cpp[XMLProcessingApp#2](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#2)]\n [!code-cs[XMLProcessingApp#2](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#2)]\n [!code-vb[XMLProcessingApp#2](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#2)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Validating an XML Document in the DOM](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Navigate\"></a>   \n## Navigate the document tree  \n You can use properties to navigate around an XML document. But before you use any of them, let’s quickly review a few terms. Your document is composed of nodes. Each node has as single *parent* node directly above it. The only node that does not have a parent node is the document root, as it is the top-level node. Most nodes can have *child* nodes, which are nodes directly below them. Nodes that are at the same level are *siblings*.  \n  \n The following examples, show you how to obtain the root node, jump to the first child node of the root node, access any of its child nodes, get back out to the parent node, and then navigate across sibling nodes.  \n  \n **Start with the root node**  \n  \n This example gets the root node and then uses that node to output the contents of the document to the console.  \n  \n [!code-cs[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_3.cs)]\n [!code-cpp[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_3.cpp)]\n [!code-vb[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_3.vb)]  \n  \n **Get child nodes**  \n  \n This example jumps to the first child node of the root node and then iterates through the child nodes of that node if any exist.  \n  \n [!code-cs[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_4.cs)]\n [!code-cpp[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_4.cpp)]\n [!code-vb[Classic WebData XmlNode.HasChildNodes Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_4.vb)]  \n  \n **Get back to the parent node**  \n  \n Use the <xref:System.Xml.XmlDocument.ParentNode%2A> property.  \n  \n **Refer to the last child node**  \n  \n This example writes the price of a book to the console (which is the last child node of a book node).  \n  \n [!code-cpp[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_5.cpp)]\n [!code-cs[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_5.cs)]\n [!code-vb[Classic WebData XmlNode.LastChild Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_5.vb)]  \n  \n **Navigate forward across siblings**  \n  \n This example moves forward from book to book. Book nodes are siblings to one another.  \n  \n [!code-vb[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_6.vb)]\n [!code-cpp[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_6.cpp)]\n [!code-cs[Classic WebData XmlNode.NextSibling Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_6.cs)]  \n  \n **Navigate backwards across siblings**  \n  \n This example moves backwards from book to book.  \n  \n [!code-cs[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_7.cs)]\n [!code-cpp[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_7.cpp)]\n [!code-vb[Classic WebData XmlNode.PreviousSibling Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_7.vb)]  \n  \n<a name=\"Find\"></a>   \n## Find nodes  \n The most popular way to find one or more nodes of data is to use an XPath query string, but there are also methods that don’t require one.  \n  \n **Get a single node**  \n  \n This example locates a book by using the ISBN number.  \n  \n [!code-cpp[XMLProcessingApp#3](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#3)]\n [!code-cs[XMLProcessingApp#3](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#3)]\n [!code-vb[XMLProcessingApp#3](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#3)]  \n  \n The string used in this example is an Xpath query. You can find more examples of them here:   [XPath examples](https://msdn.microsoft.com/en-us/library/ms256086.aspx).  \n  \n You can also use the <xref:System.Xml.XmlDocument.GetElementById%2A> to retrieve nodes. To use this approach, you’ll have to define ID’s in the document type definition declarations of your XML file.  \n  \n After you get a node, you get the value of attributes or child nodes. This example does that with a book node.  \n  \n [!code-cpp[XMLProcessingApp#4](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#4)]\n [!code-cs[XMLProcessingApp#4](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#4)]\n [!code-vb[XMLProcessingApp#4](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#4)]  \n  \n **Get a collection of nodes**  \n  \n This example selects all books where the author's last name is **Austen**, and then changes the price of those books.  \n  \n [!code-cpp[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_10.cpp)]\n [!code-cs[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_10.cs)]\n [!code-vb[Classic WebData XmlNode.SelectNodes Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_10.vb)]  \n  \n You can also get a collection of nodes by using the name of the node. For example, this example gets a collection of all book titles.  \n  \n [!code-cs[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/csharp/t-system.xml.xmldocument_11.cs)]\n [!code-cpp[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/cpp/t-system.xml.xmldocument_11.cpp)]\n [!code-vb[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/visualbasic/t-system.xml.xmldocument_11.vb)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Select Nodes Using XPath Navigation](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Edit\"></a>   \n## Edit nodes  \n This example edits a book node and its attributes.  \n  \n [!code-cpp[XMLProcessingApp#7](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#7)]\n [!code-cs[XMLProcessingApp#7](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#7)]\n [!code-vb[XMLProcessingApp#7](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#7)]  \n  \n **Learn more:** [Modifying Nodes, Content, and Values in an XML Document](~/add/includes/ajax-current-ext-md.md)  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n<a name=\"Add\"></a>   \n## Add nodes  \n To add a node, use the <xref:System.Xml.XmlDocument.CreateElement%2A> method or the <xref:System.Xml.XmlDocument.CreateNode%2A> method.  \n  \n To add a data node such as a book, use the <xref:System.Xml.XmlDocument.CreateElement%2A> method.  \n  \n For any other type of node such as a comment, whitespace node, or CDATA node, use the <xref:System.Xml.XmlDocument.CreateNode%2A> method.  \n  \n This example creates a book node, adds attrubutes to that node, and then adds that node to the document.  \n  \n [!code-cpp[XMLProcessingApp#5](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#5)]\n [!code-cs[XMLProcessingApp#5](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#5)]\n [!code-vb[XMLProcessingApp#5](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#5)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Inserting Nodes into an XML Document](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Remove\"></a>   \n## Remove nodes  \n To remove a node, use the <xref:System.Xml.XmlNode.RemoveChild%2A> method.  \n  \n This example removes a book from the document and any whitespace that appears just before the book node.  \n  \n [!code-cpp[XMLProcessingApp#6](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#6)]\n [!code-cs[XMLProcessingApp#6](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#6)]\n [!code-vb[XMLProcessingApp#6](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#6)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)  \n  \n **Learn more:** [Removing Nodes, Content, and Values from an XML Document](~/add/includes/ajax-current-ext-md.md)  \n  \n<a name=\"Position\"></a>   \n## Position nodes  \n You can choose where you want a node to appear in your document by using the <xref:System.Xml.XmlNode.InsertBefore%2A> and <xref:System.Xml.XmlNode.InsertAfter%2A> methods.  \n  \n This example shows two helper methods. One of them moves a node higher in a list. The other one moves a node lower.  \n  \n These methods could be used in an application that enables users to move books up and down in a list of books. When a user chooses a book and presses an up or down button, your code could call methods like these to position the corresponding book node before or after other book nodes.  \n  \n [!code-cpp[XMLProcessingApp#8](~/add/codesnippet/cpp/xmldomprocessing/xmldomprocessing.cpp#8)]\n [!code-cs[XMLProcessingApp#8](~/add/codesnippet/csharp/xmlprocessingapp/xmlhelpermethods.cs#8)]\n [!code-vb[XMLProcessingApp#8](~/add/codesnippet/visualbasic/xmlprocessingappvb/xmlhelpermethods.vb#8)]  \n  \n **Complete sample:** [Manipulate XML in-Memory by using the XmlDocument class and other related types](https://code.msdn.microsoft.com/windowsdesktop/Manipulate-XML-in-memory-4b612d6b/view/SourceCode)"
  syntax:
    content: 'public class XmlDocument : System.Xml.XmlNode'
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  implements: []
  inheritedMembers:
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.NamespaceURI
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.Prefix
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  - System.Xml.XmlNode.Value
  platform:
  - net462
- uid: System.Xml.XmlDocument.#ctor
  id: '#ctor'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlDocument()
  nameWithType: XmlDocument.XmlDocument()
  fullName: System.Xml.XmlDocument.XmlDocument()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> klasse."
  remarks: ''
  example:
  - "The following is an example of load-time validation. A document type definition (DTD) validating <xref:System.Xml.XmlReader> is passed to the <xref:System.Xml.XmlDocument.Load%2A> method and a <xref:System.Xml.Schema.ValidationEventHandler> is provided to notify users of any validation errors. In this example a validation error is found, but the document is still loaded. Alternatively, you can define a validating <xref:System.Xml.XmlReader> to throw an exception and stop the load process when a validation error is found by not specifying the <xref:System.Xml.Schema.ValidationEventHandler>. For more information about validating XML data, see the Remarks section of the <xref:System.Xml.XmlReader> reference page.  \n  \n [!code-vb[XmlDocument.cctor#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_11_1.vb)]\n [!code-cs[XmlDocument.cctor#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_11_1.cs)]\n [!code-cpp[XmlDocument.cctor#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_11_1.cpp)]  \n  \n The example uses the `bookDTD.xml` file as input.  \n  \n [!code-xml[XmlDocument.cctor#2](~/add/codesnippet/xml/m-system.xml.xmldocument_11_2.xml)]"
  syntax:
    content: public XmlDocument ();
    parameters: []
  overload: System.Xml.XmlDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  id: '#ctor(System.Xml.XmlImplementation)'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlDocument(XmlImplementation)
  nameWithType: XmlDocument.XmlDocument(XmlImplementation)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlImplementation)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Initialiseert een nieuw exemplaar van de <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> klasse met de opgegeven <xref href=&quot;System.Xml.XmlImplementation&quot;> </xref>."
  syntax:
    content: protected XmlDocument (System.Xml.XmlImplementation imp);
    parameters:
    - id: imp
      type: System.Xml.XmlImplementation
      description: "The <xref uid=&quot;langword_csharp_XmlImplementation&quot; name=&quot;XmlImplementation&quot; href=&quot;&quot;></xref> to use."
  overload: System.Xml.XmlDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  id: '#ctor(System.Xml.XmlNameTable)'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlDocument(XmlNameTable)
  nameWithType: XmlDocument.XmlDocument(XmlNameTable)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlNameTable)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Initialiseert een nieuw exemplaar van de <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> klasse met de opgegeven <xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable>"
  syntax:
    content: public XmlDocument (System.Xml.XmlNameTable nt);
    parameters:
    - id: nt
      type: System.Xml.XmlNameTable
      description: "The <xref uid=&quot;langword_csharp_XmlNameTable&quot; name=&quot;XmlNameTable&quot; href=&quot;&quot;></xref> to use."
  overload: System.Xml.XmlDocument.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.BaseURI
  id: BaseURI
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: BaseURI
  nameWithType: XmlDocument.BaseURI
  fullName: System.Xml.XmlDocument.BaseURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hiermee haalt u de basis-URI van het huidige knooppunt."
  remarks: "Een netwerk XML-document bestaat uit gegevenssegmenten van geaggregeerd met verschillende W3C standard insluiting mechanismen en daarom bevat knooppunten die afkomstig uit verschillende plaatsen zijn. De `BaseURI` vertelt u waar deze knooppunten afkomstig is.       Voor documentknooppunten, `BaseURI` retourneert de locatie van het XML-document. Bijvoorbeeld, als de `XmlDocument` is geladen met de volgende aanroep-document. Laden (&quot;http://server/mydata.xml&quot;), de `BaseURI` voor het document knooppunt http://server/mydata.xml is. Echter, als de <xref:System.Xml.XmlDocument.Load%2A>methode door de server naar een andere URI wordt omgeleid `BaseURI` retourneert de oorspronkelijke URI die is doorgegeven aan de `Load` methode.</xref:System.Xml.XmlDocument.Load%2A>       Deze eigenschap is een Microsoft-extensie aan het Document Object Model (DOM). Voor meer informatie over `BaseURI` en hoe deze zich met andere knooppunttypen gedraagt, raadpleegt u <xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName>.</xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName>"
  syntax:
    content: public override string BaseURI { get; }
    return:
      type: System.String
      description: "De locatie van waaruit het knooppunt is geladen."
  overload: System.Xml.XmlDocument.BaseURI*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDocument.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een kopie van dit knooppunt."
  remarks: "Deze methode fungeert als een exemplaar-constructor voor knooppunten. Het gekloonde knooppunt heeft geen bovenliggend element (<xref:System.Xml.XmlNode.ParentNode%2A> retourneert `null`).</xref:System.Xml.XmlNode.ParentNode%2A>       Als `deep` is `true`, het gekloonde knooppunt bevat alle onderliggende knooppunten anders alleen de `XmlDocument` knooppunt wordt gekloond. Zie de <xref:System.Xml.XmlNode.CloneNode%2A?displayProperty=fullName>methode om te zien hoe deze methode werkt op andere knooppunttypen.</xref:System.Xml.XmlNode.CloneNode%2A?displayProperty=fullName>"
  example:
  - "The following example shows the difference between a deep and shallow clone.  \n  \n [!code-cpp[Classic WebData XmlDocument.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_13_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_13_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_13_1.vb)]"
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>om recursief te klonen de substructuur onder het opgegeven knooppunt. <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> alleen knooppunt zichzelf klonen."
    return:
      type: System.Xml.XmlNode
      description: "De gekloonde <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> knooppunt."
  overload: System.Xml.XmlDocument.CloneNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateAttribute(System.String)
  id: CreateAttribute(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateAttribute(String)
  nameWithType: XmlDocument.CreateAttribute(String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> met de opgegeven <xref:System.Xml.XmlDocument.Name*>.</xref:System.Xml.XmlDocument.Name*>"
  remarks: "De `XmlAttribute` kunnen worden toegevoegd aan een <xref:System.Xml.XmlElement>met behulp van de <xref:System.Xml.XmlElement.SetAttributeNode%2A>methode.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlElement>"
  example:
  - "The following creates an attribute and adds it to an XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_1_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.CreateAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_1_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_1_1.vb)]"
  syntax:
    content: public System.Xml.XmlAttribute CreateAttribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "De gekwalificeerde naam van het kenmerk. Als de naam een dubbele bevat de <> </> *> eigenschap weerspiegelt het deel van de naam van de voorafgaande aan de eerste dubbele punt en de <> </> *> eigenschap weerspiegelt het deel van de naam na de eerste dubbele punt. De <xref:System.Xml.XmlNode.NamespaceURI*>blijft leeg tenzij het voorvoegsel een erkende ingebouwde voorvoegsel zoals xmlns is.</xref:System.Xml.XmlNode.NamespaceURI*> In dit geval <xref uid=&quot;langword_csharp_NamespaceURI&quot; name=&quot;NamespaceURI&quot; href=&quot;&quot;> </xref> een waarde heeft van http://www.w3.org/2000/xmlns/."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  id: CreateAttribute(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateAttribute(String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> gekwalificeerd met de opgegeven naam en <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "De `XmlAttribute` kunnen worden toegevoegd aan een <xref:System.Xml.XmlElement>met behulp van de <xref:System.Xml.XmlElement.SetAttributeNode%2A>methode.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlElement>"
  syntax:
    content: public System.Xml.XmlAttribute CreateAttribute (string qualifiedName, string namespaceURI);
    parameters:
    - id: qualifiedName
      type: System.String
      description: "De gekwalificeerde naam van het kenmerk. Als de naam een dubbele punt bevat wordt de <> </> *> eigenschap geeft het deel van de naam van de voorafgaande aan de dubbele punt en de <> </> *> eigenschap bevatten het deel van de naam na de dubbele punt."
    - id: namespaceURI
      type: System.String
      description: "De namespaceURI van het kenmerk. Als de gekwalificeerde naam van het voorvoegsel xmlns bevat, moet deze parameter http://www.w3.org/2000/xmlns/ zijn."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  id: CreateAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateAttribute(String,String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlAttribute&quot;> </xref> met de opgegeven <> </> *>, <> </> *>, en <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "De `XmlAttribute` kunnen worden toegevoegd aan een <xref:System.Xml.XmlElement>met behulp van de <xref:System.Xml.XmlElement.SetAttributeNode%2A>methode.</xref:System.Xml.XmlElement.SetAttributeNode%2A> </xref:System.Xml.XmlElement>       Deze methode is een Microsoft-extensie aan het Document Object Model (DOM)."
  syntax:
    content: public virtual System.Xml.XmlAttribute CreateAttribute (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "Het voorvoegsel van het kenmerk (indien aanwezig). String.Empty en <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> equivalent zijn."
    - id: localName
      type: System.String
      description: "De lokale naam van het kenmerk."
    - id: namespaceURI
      type: System.String
      description: "De naamruimte-URI van het kenmerk (indien aanwezig). String.Empty en <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> equivalent zijn. Als `prefix` is xmlns, wordt deze parameter moet http://www.w3.org/2000/xmlns/; anders een uitzondering gegenereerd."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateCDataSection(System.String)
  id: CreateCDataSection(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateCDataSection(String)
  nameWithType: XmlDocument.CreateCDataSection(String)
  fullName: System.Xml.XmlDocument.CreateCDataSection(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlCDataSection&quot;> </xref> met de opgegeven gegevens."
  remarks: "Hoewel deze methode maakt u het nieuwe object in de context van het document, komt deze niet automatisch het nieuwe object toegevoegd aan de documentstructuur. Als u wilt toevoegen op het nieuwe object, moet u een van de insert-methoden van knooppunt expliciet aanroepen.       CDataSection knooppunten zijn volgens de aanbeveling W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) toegestaan in Element-knooppunten en in EntityReference-knooppunten wanneer het EntityReference-knooppunt geen onderliggend element van een kenmerkknooppunt is."
  example:
  - "The following example creates a CDATA node and adds it to the document.  \n  \n [!code-vb[Classic WebData XmlDocument.CreateCDataSection Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_9_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateCDataSection Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_9_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateCDataSection Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_9_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlCDataSection CreateCDataSection (string data);
    parameters:
    - id: data
      type: System.String
      description: "De inhoud van de nieuwe <xref uid=&quot;langword_csharp_XmlCDataSection&quot; name=&quot;XmlCDataSection&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlCDataSection
      description: "The new <xref uid=&quot;langword_csharp_XmlCDataSection&quot; name=&quot;XmlCDataSection&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateCDataSection*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateComment(System.String)
  id: CreateComment(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateComment(String)
  nameWithType: XmlDocument.CreateComment(String)
  fullName: System.Xml.XmlDocument.CreateComment(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlComment&quot;> </xref> met de opgegeven gegevens."
  remarks: "Hoewel deze methode maakt u het nieuwe object in de context van het document, komt deze niet automatisch het nieuwe object toegevoegd aan de documentstructuur. Als u wilt toevoegen op het nieuwe object, moet u een van de insert-methoden van knooppunt expliciet aanroepen.       Volgens de aanbeveling W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) zijn Opmerking knooppunten alleen toegestaan binnen een Document, Element en EntityReference-knooppunten, wanneer het EntityReference-knooppunt geen onderliggend element van een kenmerkknooppunt is."
  example:
  - "The following example creates a comment and adds it to an XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateComment Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_12_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateComment Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_12_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateComment Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_12_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlComment CreateComment (string data);
    parameters:
    - id: data
      type: System.String
      description: "De inhoud van de nieuwe <xref uid=&quot;langword_csharp_XmlComment&quot; name=&quot;XmlComment&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlComment
      description: "The new <xref uid=&quot;langword_csharp_XmlComment&quot; name=&quot;XmlComment&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateComment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  id: CreateDefaultAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateDefaultAttribute(String,String,String)
  nameWithType: XmlDocument.CreateDefaultAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateDefaultAttribute(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een standaard-kenmerk met de opgegeven voorvoegsel, een lokale naam en een naamruimte-URI."
  remarks: "Deze methode is een Microsoft-extensie aan het Document Object Model (DOM)."
  syntax:
    content: protected virtual System.Xml.XmlAttribute CreateDefaultAttribute (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "Het voorvoegsel van het kenmerk (indien aanwezig)."
    - id: localName
      type: System.String
      description: "De lokale naam van het kenmerk."
    - id: namespaceURI
      type: System.String
      description: "De naamruimte-URI van het kenmerk (indien aanwezig)."
    return:
      type: System.Xml.XmlAttribute
      description: "The new <xref href=&quot;System.Xml.XmlAttribute&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateDefaultAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateDocumentFragment
  id: CreateDocumentFragment
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateDocumentFragment()
  nameWithType: XmlDocument.CreateDocumentFragment()
  fullName: System.Xml.XmlDocument.CreateDocumentFragment()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlDocumentFragment&quot;> </xref>."
  remarks: "DocumentFragment knooppunten kunnen niet worden ingevoegd in een document. U kunt echter onderliggende elementen van het knooppunt DocumentFragment invoegen in een document."
  example:
  - "The following example adds new nodes to an XML document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_14_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_14_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateDocumentFragment Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_14_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlDocumentFragment CreateDocumentFragment ();
    parameters: []
    return:
      type: System.Xml.XmlDocumentFragment
      description: "The new <xref uid=&quot;langword_csharp_XmlDocumentFragment&quot; name=&quot;XmlDocumentFragment&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateDocumentFragment*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  id: CreateDocumentType(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateDocumentType(String,String,String,String)
  nameWithType: XmlDocument.CreateDocumentType(String,String,String,String)
  fullName: System.Xml.XmlDocument.CreateDocumentType(String,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Retourneert een nieuwe <xref href=&quot;System.Xml.XmlDocumentType&quot;> </xref> object."
  remarks: "Het geretourneerde knooppunt wordt hebben geparseerd <xref:System.Xml.XmlDocumentType.Entities%2A>en <xref:System.Xml.XmlDocumentType.Notations%2A>verzamelingen.</xref:System.Xml.XmlDocumentType.Notations%2A> </xref:System.Xml.XmlDocumentType.Entities%2A>       Hoewel deze methode maakt u het nieuwe object in de context van het document, komt deze niet automatisch het nieuwe object toegevoegd aan de documentstructuur. Als u wilt toevoegen op het nieuwe object, moet u een van de insert-methoden van knooppunt expliciet aanroepen.       Volgens de aanbeveling W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) zijn DocumentType knooppunten alleen toegestaan in documentknooppunten. Elke <xref:System.Xml.XmlDocument>slechts één DocumentType-knooppunt kan hebben.</xref:System.Xml.XmlDocument> Het DocumentType-knooppunt moet ook worden ingevoegd voordat het hoofdelement van de `XmlDocument` (als het document al een hoofdelement heeft, niet kunt u een DocumentType-knooppunt toevoegen).       Als de doorgegeven parameters niet combineren om samen te stellen van een geldige `XmlDocumentType`, er een uitzondering gegenereerd."
  example:
  - "The following example creates a DocumentType node and adds it to an XML document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateDocumentType Example#1](~/add/codesnippet/cpp/8d2758e1-ca32-4a6b-b7e7-_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateDocumentType Example#1](~/add/codesnippet/csharp/8d2758e1-ca32-4a6b-b7e7-_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateDocumentType Example#1](~/add/codesnippet/visualbasic/8d2758e1-ca32-4a6b-b7e7-_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlDocumentType CreateDocumentType (string name, string publicId, string systemId, string internalSubset);
    parameters:
    - id: name
      type: System.String
      description: "De naam van het documenttype."
    - id: publicId
      type: System.String
      description: "De openbare id van het documenttype of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>. U kunt een openbare URI en ook op een systeem-id voor het identificeren van de locatie van de externe DTD-subset opgeven."
    - id: systemId
      type: System.String
      description: "De systeem-id van het documenttype of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>. Hiermee geeft u de URL van de bestandslocatie voor de externe DTD-subset."
    - id: internalSubset
      type: System.String
      description: "De interne DTD-subset van het documenttype of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlDocumentType
      description: "The new <xref uid=&quot;langword_csharp_XmlDocumentType&quot; name=&quot;XmlDocumentType&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateDocumentType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateElement(System.String)
  id: CreateElement(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateElement(String)
  nameWithType: XmlDocument.CreateElement(String)
  fullName: System.Xml.XmlDocument.CreateElement(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hiermee maakt een element met de opgegeven naam."
  remarks: "Houd er rekening mee dat het exemplaar geretourneerd implementeert de `XmlElement` interface, zodat standaardkenmerken rechtstreeks op het geretourneerde object moeten worden gemaakt.       Hoewel deze methode maakt u het nieuwe object in de context van het document, komt deze niet automatisch het nieuwe object toegevoegd aan de documentstructuur. Als u wilt toevoegen op het nieuwe object, moet u een van de insert-methoden van knooppunt expliciet aanroepen.       Volgens de aanbeveling W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) elementknooppunten mogen tot documenten en Element-knooppunten, en in EntityReference-knooppunten wanneer de EntityReference-knooppunt niet een onderliggend element van een kenmerkknooppunt."
  example:
  - "The following example creates a new element and adds it to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_17_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_17_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_17_1.vb)]"
  syntax:
    content: public System.Xml.XmlElement CreateElement (string name);
    parameters:
    - id: name
      type: System.String
      description: "De gekwalificeerde naam van het element. Als de naam een dubbele punt bevat wordt de <> </> *> eigenschap weerspiegelt het deel van de naam van de voorafgaande aan de dubbele punt en de <> </> *> eigenschap weerspiegelt de deel van de naam na de dubbele punt. De gekwalificeerde naam kan geen een voorvoegsel of&quot;xmlns bevatten."
    return:
      type: System.Xml.XmlElement
      description: "The new <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String)
  id: CreateElement(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateElement(String,String)
  nameWithType: XmlDocument.CreateElement(String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlElement&quot;> </xref> door de gekwalificeerde naam en <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "De volgende C#-code ```   XmlElement elem;   elem=doc.CreateElement(&quot;xy:item&quot;, &quot;urn:abc&quot;);   ``` resulteert in een element dat gelijk is aan de volgende XML-tekst.      ```   <xy:item          xmlns:xy=&quot;urn:abc&quot;/>   ```Hoewel deze methode maakt u het nieuwe object in de context van het document, komt deze niet automatisch het nieuwe object toegevoegd aan de documentstructuur. Als u wilt toevoegen op het nieuwe object, moet u een van de insert-methoden van knooppunt expliciet aanroepen.       Volgens de aanbeveling W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) elementknooppunten mogen tot documenten en Element-knooppunten, en in EntityReference-knooppunten wanneer de EntityReference-knooppunt niet een onderliggend element van een kenmerkknooppunt."
  syntax:
    content: public System.Xml.XmlElement CreateElement (string qualifiedName, string namespaceURI);
    parameters:
    - id: qualifiedName
      type: System.String
      description: "De gekwalificeerde naam van het element. Als de naam een dubbele punt bevat wordt de <> </> *> eigenschap geeft het deel van de naam van de voorafgaande aan de dubbele punt en de <> </> *> eigenschap bevatten het deel van de naam na de dubbele punt. De gekwalificeerde naam kan geen een voorvoegsel of&quot;xmlns bevatten."
    - id: namespaceURI
      type: System.String
      description: "De naamruimte-URI van het element."
    return:
      type: System.Xml.XmlElement
      description: "The new <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  id: CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateElement(String,String,String)
  nameWithType: XmlDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hiermee maakt u een element met de opgegeven <> </> *>, <> </> *>, en <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*>"
  remarks: "De volgende C#-code ```   XmlElement elem;   elem=doc.CreateElement(&quot;xy&quot;, &quot;item&quot;, &quot;urn:abc&quot;);   ``` maakt u een element gelijk is aan de volgende XML-tekst: ```   <xy:item xmlns:xy=&quot;urn:abc&quot;/>   ``` Hoewel deze methode maakt u het nieuwe object in de context van het document, dit wordt niet automatisch toegevoegd het nieuwe object aan de documentstructuur. Als u wilt toevoegen op het nieuwe object, moet u een van de insert-methoden van knooppunt expliciet aanroepen.       Elementknooppunten zijn volgens de aanbeveling W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) toegestaan binnen een Document en Element-knooppunten en in EntityReference-knooppunten wanneer de EntityReference buiten een kenmerkknooppunt is.       Deze methode is een Microsoft-extensie aan het Document Object Model (DOM)."
  example:
  - "The following example adds a new element to the existing XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/csharp/9cc675fc-f986-4de5-bce9-_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/visualbasic/9cc675fc-f986-4de5-bce9-_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/cpp/9cc675fc-f986-4de5-bce9-_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlElement CreateElement (string prefix, string localName, string namespaceURI);
    parameters:
    - id: prefix
      type: System.String
      description: "Het voorvoegsel van het nieuwe element (indien aanwezig). String.Empty en <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> equivalent zijn."
    - id: localName
      type: System.String
      description: "De lokale naam van het nieuwe element."
    - id: namespaceURI
      type: System.String
      description: "De naamruimte-URI van het nieuwe element (indien aanwezig). String.Empty en <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> equivalent zijn."
    return:
      type: System.Xml.XmlElement
      description: "The new <xref href=&quot;System.Xml.XmlElement&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateEntityReference(System.String)
  id: CreateEntityReference(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateEntityReference(String)
  nameWithType: XmlDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDocument.CreateEntityReference(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlEntityReference&quot;> </xref> met de opgegeven naam."
  remarks: "Als de gerefereerde entiteit bekend is, de onderliggende lijst van de `XmlEntityReference` knooppunt is hetzelfde als die van de bijbehorende aangebracht <xref:System.Xml.XmlEntity>knooppunt.</xref:System.Xml.XmlEntity>       De naamruimten in de vervangende tekst voor de verwijzing naar entiteit zijn gekoppeld op het moment dat het bovenliggende item van het verwijzingsknooppunt entiteit eerst is ingesteld (bijvoorbeeld wanneer het verwijzingsknooppunt entiteit wordt ingevoegd in het document). Bijvoorbeeld, krijgt de volgende entiteit: ```   <!ENTITY a &quot;<b>test</b>&quot;>   ``` als u aanroept `CreateEntityReference(&quot;a&quot;)` u terughalen één knooppunt van het type EntityReference zonder onderliggende knooppunten. Als u dit knooppunt als een onderliggend element van het volgende knooppunt toevoegt ```   <item xmlns=&quot;urn:1&quot;/>   ``` klikt u vervolgens op het moment van aanroepen <xref:System.Xml.XmlNode.AppendChild%2A>, het bovenliggende item van het zojuist gemaakte entiteit verwijzingsknooppunt is ingesteld en de onderliggende leden in deze context naamruimte worden uitgevouwen.</xref:System.Xml.XmlNode.AppendChild%2A> Het onderliggende elementknooppunt `b` heeft NamespaceURI gelijk zijn aan `urn:1`. De onderliggende knooppunten van de entiteitsverwijzing blijven hetzelfde, zelfs als u de entiteitsverwijzing naar een plaats in het document dat uit een andere naamruimte standaardcontext verplaatsen. Dit gebeurt niet voor bestaande entiteit verwijzing naar knooppunten wanneer u verwijdert en plaats ze of entiteitverwijzingen die u met <xref:System.Xml.XmlDocument.CloneNode%2A>.</xref:System.Xml.XmlDocument.CloneNode%2A> klonen Alleen wordt uitgevoerd voor de zojuist gemaakte entiteitverwijzingen.       Als de overeenkomende entiteit is niet gedefinieerd in het DocumentType wanneer het verwijzingsknooppunt entiteit wordt toegevoegd, omdat de entiteitsverwijzing niet is gedefinieerd, wordt het enige onderliggende knooppunt een knooppunt van een lege tekenreeks zijn.       De ingebouwde entiteiten amp, lt gt, apos en quot zijn toegestaan en een onderliggende tekstknooppunt met de juiste uitgevouwen tekenwaarde hebben.       Hoewel deze methode maakt u het nieuwe object in de context van het document, komt deze niet automatisch het nieuwe object toegevoegd aan de documentstructuur. Als u wilt toevoegen op het nieuwe object, moet u een van de insert-methoden van knooppunt expliciet aanroepen.       Volgens de aanbeveling W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) zijn EntityReference-knooppunten alleen toegestaan in Element, kenmerk en EntityReference-knooppunten."
  example:
  - "The following example creates two entity reference nodes and inserts them into an XML document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateEntityReference Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_7_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateEntityReference Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_7_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateEntityReference Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_7_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlEntityReference CreateEntityReference (string name);
    parameters:
    - id: name
      type: System.String
      description: "De naam van de verwijzing naar entiteit."
    return:
      type: System.Xml.XmlEntityReference
      description: "The new <xref uid=&quot;langword_csharp_XmlEntityReference&quot; name=&quot;XmlEntityReference&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateEntityReference*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De naam is ongeldig (bijvoorbeeld namen die beginnen met &quot;#&quot; zijn ongeldig.)"
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNavigator
  id: CreateNavigator
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNavigator()
  nameWithType: XmlDocument.CreateNavigator()
  fullName: System.Xml.XmlDocument.CreateNavigator()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een nieuw <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> object voor het navigeren in dit document."
  remarks: "Deze methode is een Microsoft-extensie aan het Document Object Model (DOM)."
  example:
  - See <xref:System.Xml.XmlNode.CreateNavigator%2A?displayProperty=fullName> for an example using this method.
  syntax:
    content: public override System.Xml.XPath.XPathNavigator CreateNavigator ();
    parameters: []
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "Een <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> object."
  overload: System.Xml.XmlDocument.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)
  id: CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDocument.CreateNavigator(XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> object voor het navigeren in dit document geplaatst op de <xref href=&quot;System.Xml.XmlNode&quot;> </xref> opgegeven."
  remarks: "Deze methode is een Microsoft-extensie aan het Document Object Model (DOM)."
  example:
  - See <xref:System.Xml.XmlNode.CreateNavigator%2A?displayProperty=fullName> for an example using this method.
  syntax:
    content: protected virtual System.Xml.XPath.XPathNavigator CreateNavigator (System.Xml.XmlNode node);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "De <xref href=&quot;System.Xml.XmlNode&quot;> </xref> u wilt dat de navigator in eerste instantie op geplaatst."
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "Een <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref> object."
  overload: System.Xml.XmlDocument.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  id: CreateNode(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNode(String,String,String)
  nameWithType: XmlDocument.CreateNode(String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlNode&quot;> </xref> met het type opgegeven knooppunt <> </> *>, en <> </> *>."
  remarks: "The `nodeTypeString` parameter is case sensitive and must be one of the values in the following table.  \n  \n|nodeTypeString|XmlNodeType|  \n|--------------------|-----------------|  \n|attribute|Attribute|  \n|cdatasection|CDATA|  \n|comment|Comment|  \n|document|Document|  \n|documentfragment|DocumentFragment|  \n|documenttype|DocumentType|  \n|element|Element|  \n|entityreference|EntityReference|  \n|processinginstruction|ProcessingInstruction|  \n|significantwhitespace|SignificantWhitespace|  \n|text|Text|  \n|whitespace|Whitespace|  \n  \n Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  \n  \n The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  \n  \n||Document|DocumentType|XmlDeclaration|Element|Attribute|Text|CDATA|Markup|EntityReference|  \n|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  \n|`Document`|no|no|no|no|no|no|no|no|no|  \n|`DocumentType`|yes|no|no|no|no|no|no|no|no|  \n|`XmlDeclaration`|yes*|no|no|no|no|no|no|no|no|  \n|`Element`|yes|no|no|yes|no|no|no|no|yes***|  \n|`Attribute`|no|no|no|yes****|no|no|no|no|no|  \n|`Text`|no|no|no|yes|yes|no|no|no|yes|  \n|`CDATA`|no|no|no|yes|no|no|no|no|yes***|  \n|`Markup**`|yes|no|no|yes|no|no|no|no|no|  \n|`EntityReference`|no|no|no|yes|yes|no|no|no|yes|  \n  \n \\* The XmlDeclaration node must be the first child of the Document node.  \n  \n ** Markup includes ProcessingInstruction and Comment nodes.  \n  \n *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  \n  \n **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.  \n  \n This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example creates a new element and inserts it into the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateNode1 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_15_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateNode1 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_15_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateNode1 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_15_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlNode CreateNode (string nodeTypeString, string name, string namespaceURI);
    parameters:
    - id: nodeTypeString
      type: System.String
      description: "String-versie van de <xref:System.Xml.XmlNodeType>van het nieuwe knooppunt.</xref:System.Xml.XmlNodeType> Deze parameter moet een van de waarden die worden vermeld in de onderstaande tabel."
    - id: name
      type: System.String
      description: "De gekwalificeerde naam van het nieuwe knooppunt. Als de naam een dubbele punt bevat, worden verdeeld in <> </> *> en <> </> *> onderdelen."
    - id: namespaceURI
      type: System.String
      description: "De naamruimte-URI van het nieuwe knooppunt."
    return:
      type: System.Xml.XmlNode
      description: "The new <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De naam is niet opgegeven en de <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> moet een naam; of <code> nodeTypeString </code> is niet een van de hieronder vermelde tekenreeksen."
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  id: CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNode(XmlNodeType,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlNode&quot;> </xref> met de opgegeven <xref:System.Xml.XmlNodeType>, <> </> *>, en <> </> *>.</xref:System.Xml.XmlNodeType>"
  remarks: "Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  \n  \n The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  \n  \n||Document|DocumentType|XmlDeclaration|Element|Attribute|Text|CDATA|Markup|EntityReference|  \n|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  \n|`Document`|no|no|no|no|no|no|no|no|no|  \n|`DocumentType`|yes|no|no|no|no|no|no|no|no|  \n|`XmlDeclaration`|yes*|no|no|no|no|no|no|no|no|  \n|`Element`|yes|no|no|yes|no|no|no|no|yes***|  \n|`Attribute`|no|no|no|yes****|no|no|no|no|no|  \n|`Text`|no|no|no|yes|yes|no|no|no|yes|  \n|`CDATA`|no|no|no|yes|no|no|no|no|yes***|  \n|`Markup**`|yes|no|no|yes|no|no|no|no|no|  \n|`EntityReference`|no|no|no|yes|yes|no|no|no|yes|  \n  \n \\* The XmlDeclaration node must be the first child of the Document node.  \n  \n ** Markup includes ProcessingInstruction and Comment nodes.  \n  \n *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  \n  \n **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to an Element node.  \n  \n This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example creates a new element and inserts it into an XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateNode Example#1](~/add/codesnippet/csharp/5e223793-7104-464b-b797-_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.CreateNode Example#1](~/add/codesnippet/cpp/5e223793-7104-464b-b797-_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateNode Example#1](~/add/codesnippet/visualbasic/5e223793-7104-464b-b797-_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string name, string namespaceURI);
    parameters:
    - id: type
      type: System.Xml.XmlNodeType
      description: "De <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> van het nieuwe knooppunt."
    - id: name
      type: System.String
      description: "De gekwalificeerde naam van het nieuwe knooppunt. Als de naam een dubbele punt bevat wordt het moeten worden verdeeld in <> </> *> en <> </> *> onderdelen."
    - id: namespaceURI
      type: System.String
      description: "De naamruimte-URI van het nieuwe knooppunt."
    return:
      type: System.Xml.XmlNode
      description: "The new <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De naam is niet opgegeven en de <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> moet een naam opgeven."
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  id: CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateNode(XmlNodeType,String,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Creates a <xref href=&quot;System.Xml.XmlNode&quot;></xref> with the specified <xref:System.Xml.XmlNodeType>, <>*>, <>*>, and <xref:System.Xml.XmlNode.NamespaceURI*>.</xref:System.Xml.XmlNode.NamespaceURI*></xref:System.Xml.XmlNodeType>"
  remarks: "Although this method creates the new object in the context of the document, it does not automatically add the new object to the document tree. To add the new object, you must explicitly call one of the node insert methods.  \n  \n The following table shows you what NodeType[row] is allowed inside another NodeType[column] according to the W3C Extensible Markup Language (XML) 1.0 recommendation (www.w3.org/TR/1998/REC-xml-19980210).  \n  \n||Document|DocumentType|XmlDeclaration|Element|Attribute|Text|CDATA|Markup|EntityReference|  \n|------|--------------|------------------|--------------------|-------------|---------------|----------|-----------|------------|---------------------|  \n|`Document`|no|no|no|no|no|no|no|no|no|  \n|`DocumentType`|yes|no|no|no|no|no|no|no|no|  \n|`XmlDeclaration`|yes*|no|no|no|no|no|no|no|no|  \n|`Element`|yes|no|no|yes|no|no|no|no|yes***|  \n|`Attribute`|no|no|no|yes****|no|no|no|no|no|  \n|`Text`|no|no|no|yes|yes|no|no|no|yes|  \n|`CDATA`|no|no|no|yes|no|no|no|no|yes***|  \n|`Markup**`|yes|no|no|yes|no|no|no|no|no|  \n|`EntityReference`|no|no|no|yes|yes|no|no|no|yes|  \n  \n \\* The XmlDeclaration node must be the first child of the Document node.  \n  \n ** Markup includes ProcessingInstruction and Comment nodes.  \n  \n *** Element and CDATA nodes are only allowed in EntityReference nodes when the EntityReference node is not a child of an Attribute node.  \n  \n **** Attributes are not children of an Element node. Attributes are contained inside an attribute collection that belongs to the Element node.  \n  \n This method is a Microsoft extension to the Document Object Model (DOM)."
  example:
  - "The following example adds a new element to the document.  \n  \n [!code-vb[Classic WebData XmlDocument.CreateNode2 Example#1](~/add/codesnippet/visualbasic/9b485b37-d267-4da7-a8ac-_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateNode2 Example#1](~/add/codesnippet/cpp/9b485b37-d267-4da7-a8ac-_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateNode2 Example#1](~/add/codesnippet/csharp/9b485b37-d267-4da7-a8ac-_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlNode CreateNode (System.Xml.XmlNodeType type, string prefix, string name, string namespaceURI);
    parameters:
    - id: type
      type: System.Xml.XmlNodeType
      description: "De <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> van het nieuwe knooppunt."
    - id: prefix
      type: System.String
      description: "Het voorvoegsel van het nieuwe knooppunt."
    - id: name
      type: System.String
      description: "De lokale naam van het nieuwe knooppunt."
    - id: namespaceURI
      type: System.String
      description: "De naamruimte-URI van het nieuwe knooppunt."
    return:
      type: System.Xml.XmlNode
      description: "The new <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De naam is niet opgegeven en de <xref uid=&quot;langword_csharp_XmlNodeType&quot; name=&quot;XmlNodeType&quot; href=&quot;&quot;> </xref> moet een naam opgeven."
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  id: CreateProcessingInstruction(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateProcessingInstruction(String,String)
  nameWithType: XmlDocument.CreateProcessingInstruction(String,String)
  fullName: System.Xml.XmlDocument.CreateProcessingInstruction(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlProcessingInstruction&quot;> </xref> met de opgegeven naam en de gegevens."
  remarks: "Hoewel deze methode maakt u het nieuwe object in de context van het document, komt deze niet automatisch het nieuwe object toegevoegd aan de documentstructuur. Als u wilt toevoegen op het nieuwe object, moet u een van de insert-methoden van knooppunt expliciet aanroepen.       Volgens de aanbeveling W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) zijn ProcessingInstruction knooppunten alleen toegestaan binnen een Document, Element en EntityReference-knooppunten, wanneer de EntityReference-knooppunt niet een onderliggend element van een kenmerkknooppunt."
  example:
  - "The following example creates a ProcessingInstruction node and adds it to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/add/codesnippet/cpp/b628e59c-914d-4083-89f5-_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/add/codesnippet/visualbasic/b628e59c-914d-4083-89f5-_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateProcessingInstruction Example#1](~/add/codesnippet/csharp/b628e59c-914d-4083-89f5-_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlProcessingInstruction CreateProcessingInstruction (string target, string data);
    parameters:
    - id: target
      type: System.String
      description: "De naam van de verwerkingsinstructie."
    - id: data
      type: System.String
      description: "De gegevens voor de verwerkingsinstructie."
    return:
      type: System.Xml.XmlProcessingInstruction
      description: "The new <xref uid=&quot;langword_csharp_XmlProcessingInstruction&quot; name=&quot;XmlProcessingInstruction&quot; href=&quot;&quot;></xref>."
  overload: System.Xml.XmlDocument.CreateProcessingInstruction*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  id: CreateSignificantWhitespace(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateSignificantWhitespace(String)
  nameWithType: XmlDocument.CreateSignificantWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateSignificantWhitespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlSignificantWhitespace&quot;> </xref> knooppunt."
  remarks: "Deze methode is een Microsoft-extensie aan het Document Object Model (DOM). Wordt gebruikt wanneer u wilt uw document handmatig opmaken.       Hoewel deze methode maakt u het nieuwe object in de context van het document, komt deze niet automatisch het nieuwe object toegevoegd aan de documentstructuur. Als u wilt toevoegen op het nieuwe object, moet u een van de insert-methoden van knooppunt expliciet aanroepen."
  example:
  - "The following example adds significant white space to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_24_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_24_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateSignificantWhitespace Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_24_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlSignificantWhitespace CreateSignificantWhitespace (string text);
    parameters:
    - id: text
      type: System.String
      description: "De tekenreeks mag alleen de volgende tekens bevatten &amp;#20; &amp;#10; &amp;#13; and &amp;#9;"
    return:
      type: System.Xml.XmlSignificantWhitespace
      description: "A new <xref uid=&quot;langword_csharp_XmlSignificantWhitespace&quot; name=&quot;XmlSignificantWhitespace&quot; href=&quot;&quot;></xref> node."
  overload: System.Xml.XmlDocument.CreateSignificantWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateTextNode(System.String)
  id: CreateTextNode(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateTextNode(String)
  nameWithType: XmlDocument.CreateTextNode(String)
  fullName: System.Xml.XmlDocument.CreateTextNode(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlText&quot;> </xref> met de opgegeven tekst."
  remarks: "Hoewel deze methode maakt u het nieuwe object in de context van het document, komt deze niet automatisch het nieuwe object toegevoegd aan de documentstructuur. Als u wilt toevoegen op het nieuwe object, moet u een van de insert-methoden van knooppunt expliciet aanroepen.       Volgens de aanbeveling W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210) zijn tekstknooppunten alleen toegestaan in Element, kenmerk en EntityReference-knooppunten."
  example:
  - "The following example creates a new element and adds it to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_3_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_3_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_3_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlText CreateTextNode (string text);
    parameters:
    - id: text
      type: System.String
      description: "De tekst voor het tekstknooppunt."
    return:
      type: System.Xml.XmlText
      description: "De nieuwe <xref uid=&quot;langword_csharp_XmlText&quot; name=&quot;XmlText&quot; href=&quot;&quot;> </xref> knooppunt."
  overload: System.Xml.XmlDocument.CreateTextNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateWhitespace(System.String)
  id: CreateWhitespace(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateWhitespace(String)
  nameWithType: XmlDocument.CreateWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateWhitespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlWhitespace&quot;> </xref> knooppunt."
  remarks: "Deze methode is een Microsoft-extensie aan het Document Object Model (DOM). Wordt gebruikt wanneer u wilt uw document handmatig opmaken.       Hoewel deze methode maakt u het nieuwe object in de context van het document, komt deze niet automatisch het nieuwe object toegevoegd aan de documentstructuur. Als u wilt toevoegen op het nieuwe object, moet u een van de insert-methoden van knooppunt expliciet aanroepen."
  example:
  - "The following example adds white space to the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.CreateWhitespace Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_4_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateWhitespace Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_4_1.vb)]\n [!code-cs[Classic WebData XmlDocument.CreateWhitespace Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_4_1.cs)]"
  syntax:
    content: public virtual System.Xml.XmlWhitespace CreateWhitespace (string text);
    parameters:
    - id: text
      type: System.String
      description: "De tekenreeks mag alleen de volgende tekens bevatten &amp;#20; &amp;#10; &amp;#13; and &amp;#9;"
    return:
      type: System.Xml.XmlWhitespace
      description: "A new <xref uid=&quot;langword_csharp_XmlWhitespace&quot; name=&quot;XmlWhitespace&quot; href=&quot;&quot;></xref> node."
  overload: System.Xml.XmlDocument.CreateWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  id: CreateXmlDeclaration(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: CreateXmlDeclaration(String,String,String)
  nameWithType: XmlDocument.CreateXmlDeclaration(String,String,String)
  fullName: System.Xml.XmlDocument.CreateXmlDeclaration(String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlDeclaration&quot;> </xref> knooppunt met de opgegeven waarden."
  remarks: "De kenmerken worden weergegeven als speciale eigenschappen op de `XmlDeclaration` knooppunt, en niet als <xref:System.Xml.XmlAttribute>knooppunten.</xref:System.Xml.XmlAttribute>       Hoewel deze methode maakt u het nieuwe object in de context van het document, komt deze niet automatisch het nieuwe object toegevoegd aan de documentstructuur. Als u wilt toevoegen op het nieuwe object, moet u een van de insert-methoden van knooppunt expliciet aanroepen.       Volgens de aanbeveling W3C Extensible Markup Language (XML) 1.0 (www.w3.org/TR/1998/REC-xml-19980210), de `XmlDeclaration` -knooppunt moet het eerste knooppunt in het document.       Deze methode is een Microsoft-extensie aan het Document Object Model (DOM)."
  example:
  - "The following example creates an XML declaration and adds it to the document.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/add/codesnippet/csharp/89cf6f87-55c5-4c7d-9c11-_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/add/codesnippet/cpp/89cf6f87-55c5-4c7d-9c11-_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.CreateXmlDeclaration Example#1](~/add/codesnippet/visualbasic/89cf6f87-55c5-4c7d-9c11-_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlDeclaration CreateXmlDeclaration (string version, string encoding, string standalone);
    parameters:
    - id: version
      type: System.String
      description: "De versie moet &quot;1.0&quot;."
    - id: encoding
      type: System.String
      description: "De waarde van het kenmerk codering. Dit is de codering die wordt gebruikt bij het opslaan van de <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> naar een bestand of een stroom; daarom moet worden ingesteld in een tekenreeks die wordt ondersteund door de <xref:System.Text.Encoding>klasse, anders <xref:System.Xml.XmlDocument.Save*>is mislukt.</xref:System.Xml.XmlDocument.Save*> </xref:System.Text.Encoding> Als dit <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> of String.Empty, de <xref uid=&quot;langword_csharp_Save&quot; name=&quot;Save&quot; href=&quot;&quot;> </xref> methode schrijft een codering kenmerk niet in de XML-declaratie en kan daarom de standaardversleuteling, UTF-8 wordt gebruikt.       Opmerking: Als de <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> wordt opgeslagen op ofwel een <xref:System.IO.TextWriter>of een <xref:System.Xml.XmlTextWriter>, deze codering waarde wordt genegeerd.</xref:System.Xml.XmlTextWriter> </xref:System.IO.TextWriter> In plaats daarvan de codering van de <xref uid=&quot;langword_csharp_TextWriter&quot; name=&quot;TextWriter&quot; href=&quot;&quot;> </xref> of de <xref uid=&quot;langword_csharp_XmlTextWriter&quot; name=&quot;XmlTextWriter&quot; href=&quot;&quot;> </xref> wordt gebruikt. Dit zorgt ervoor dat het XML-bestand uitgeschreven terug met de juiste codering kan worden gelezen."
    - id: standalone
      type: System.String
      description: "De waarde moet &quot;Ja&quot; of &quot;Nee&quot;. Als dit <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> of String.Empty, de <xref uid=&quot;langword_csharp_Save&quot; name=&quot;Save&quot; href=&quot;&quot;> </xref> methode schrijft een standalone-kenmerk niet in de XML-declaratie."
    return:
      type: System.Xml.XmlDeclaration
      description: "De nieuwe <xref uid=&quot;langword_csharp_XmlDeclaration&quot; name=&quot;XmlDeclaration&quot; href=&quot;&quot;> </xref> knooppunt."
  overload: System.Xml.XmlDocument.CreateXmlDeclaration*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De waarden van <code> version </code> of <code> standalone </code> zijn iets anders dan de waarden die hierboven is opgegeven."
  platform:
  - net462
- uid: System.Xml.XmlDocument.DocumentElement
  id: DocumentElement
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: DocumentElement
  nameWithType: XmlDocument.DocumentElement
  fullName: System.Xml.XmlDocument.DocumentElement
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "De hoofdmap opgehaald <xref href=&quot;System.Xml.XmlElement&quot;> </xref> voor het document."
  remarks: ''
  example:
  - "The following example displays the root element of the XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_8_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_8_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.DocumentElement Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_8_1.vb)]  \n  \n **Output:**  \n  \n```  \n<book genre=\"novel\" ISBN=\"1-861001-57-5\"><title>Pride And Prejudice</title></book>   \n```"
  syntax:
    content: public System.Xml.XmlElement DocumentElement { get; }
    return:
      type: System.Xml.XmlElement
      description: "De <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> die staat voor de hoofdmap van de XML-document-structuur. Als er geen hoofdmap bestaat, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> wordt geretourneerd."
  overload: System.Xml.XmlDocument.DocumentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.DocumentType
  id: DocumentType
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: DocumentType
  nameWithType: XmlDocument.DocumentType
  fullName: System.Xml.XmlDocument.DocumentType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hiermee haalt u het knooppunt met de DOCTYPE-declaratie."
  remarks: "Een `XmlDocument` kan slechts één onderliggend element met hebben <xref:System.Xml.XmlNodeType>gelijk zijn aan DocumentType.</xref:System.Xml.XmlNodeType>      > [!NOTE] > Deze eigenschap is alleen-lezen. Als u wilt wijzigen van het DocumentType-knooppunt, het knooppunt bestaand verwijderen, maak een nieuw één met de <xref:System.Xml.XmlDocument.CreateDocumentType%2A>methode, en het nieuwe knooppunt toevoegen aan het document.</xref:System.Xml.XmlDocument.CreateDocumentType%2A>"
  example:
  - "The following example gets and displays the DOCTYPE declaration for the document.  \n  \n [!code-cpp[Classic WebData XmlDocument.DocumentType Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_4_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.DocumentType Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_4_1.cs)]\n [!code-vb[Classic WebData XmlDocument.DocumentType Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_4_1.vb)]"
  syntax:
    content: public virtual System.Xml.XmlDocumentType DocumentType { get; }
    return:
      type: System.Xml.XmlDocumentType
      description: "De <xref href=&quot;System.Xml.XmlNode&quot;> </xref> met het DocumentType (DOCTYPE-declaratie)."
  overload: System.Xml.XmlDocument.DocumentType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.GetElementById(System.String)
  id: GetElementById(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: GetElementById(String)
  nameWithType: XmlDocument.GetElementById(String)
  fullName: System.Xml.XmlDocument.GetElementById(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Haalt de <xref href=&quot;System.Xml.XmlElement&quot;> </xref> met de opgegeven ID."
  remarks: "Als het document meerdere elementen met de overeenkomende ID heeft, retourneert deze methode het eerste element in het document.      > [!NOTE] > De DOM-implementatie hebt informatie waarmee wordt gedefinieerd welke kenmerken zijn van het type-ID. Hoewel in XSD-schema&quot;s of DTD&quot;s kunnen kenmerken van het type ID worden gedefinieerd, ondersteunt deze versie van het product alleen die in DTD&quot;s worden gedefinieerd. Kenmerken met de naam &quot;ID&quot; niet van het zijn type ID tenzij dus gedefinieerd in de DTD. Implementaties waarbij is onbekend of de kenmerken van het type ID zijn naar verwachting retourneren `null`."
  example:
  - "The following example uses the `GetElementById` method.  \n  \n [!code-cs[Classic WebData XmlDocument.GetElementById Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_20_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.GetElementById Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_20_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.GetElementById Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_20_1.vb)]  \n  \n The example uses the file, `ids.xml`, as input.  \n  \n```xml  \n<!DOCTYPE root [  \n  <!ELEMENT root ANY>   \n  <!ELEMENT Person ANY>   \n  <!ELEMENT Customer EMPTY>  \n  <!ELEMENT Team EMPTY>  \n  <!ATTLIST Person SSN ID #REQUIRED>  \n  <!ATTLIST Customer id IDREF #REQUIRED >  \n  <!ATTLIST Team members IDREFS #REQUIRED>]>  \n<root>  \n  <Person SSN='A111' Name='Fred'/>  \n  <Person SSN='A222' Name='Tom'/>  \n  <Customer id='A222334444'/>  \n  <Team members='A222334444 A333445555'/>  \n</root>  \n```"
  syntax:
    content: public virtual System.Xml.XmlElement GetElementById (string elementId);
    parameters:
    - id: elementId
      type: System.String
      description: "De kenmerk-ID moet worden gezocht."
    return:
      type: System.Xml.XmlElement
      description: "De <xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref> met overeenkomende ID of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als er geen overeenkomend element wordt gevonden."
  overload: System.Xml.XmlDocument.GetElementById*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: XmlDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Retourneert een <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> met een lijst van alle onderliggende elementen die overeenkomen met de opgegeven <xref:System.Xml.XmlDocument.Name*>.</xref:System.Xml.XmlDocument.Name*>"
  remarks: "De knooppunten worden geplaatst in de volgorde waarin ze zouden worden aangetroffen in het document.      > [!NOTE] > Is het raadzaam dat u de <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>of <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName>methode in plaats van de methode GetElementsByTagName.</xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> </xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>"
  example:
  - "The following example creates a `XmlDocument` object and uses the `GetElementsByTagName` method and the resulting <xref:System.Xml.XmlNodeList> object to display all the book titles.  \n  \n [!code-cs[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_10_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_10_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.GetElementsByTagName Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_10_1.vb)]  \n  \n The example uses the `books.xml` file as input.  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_10_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNodeList GetElementsByTagName (string name);
    parameters:
    - id: name
      type: System.String
      description: "De gekwalificeerde naam moet worden gezocht. Het wordt vergeleken met de <xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref> eigenschap van het overeenkomende knooppunt. De speciale waarde &quot; * &quot; komt overeen met alle codes."
    return:
      type: System.Xml.XmlNodeList
      description: "Een <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> met een lijst van alle overeenkomende knooppunten. Als er geen knooppunten overeenkomen <code> name </code>, de geretourneerde verzameling is leeg."
  overload: System.Xml.XmlDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  id: GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: GetElementsByTagName(String,String)
  nameWithType: XmlDocument.GetElementsByTagName(String,String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Retourneert een <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> met een lijst van alle onderliggende elementen die overeenkomen met de opgegeven <> </> *> en <> </> *>."
  remarks: "De knooppunten worden geplaatst in de volgorde waarin ze zouden worden aangetroffen in de documentstructuur.      > [!NOTE] > Is het raadzaam dat u de <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>of <xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName>methode in plaats van de methode GetElementsByTagName.</xref:System.Xml.XmlNode.SelectSingleNode%2A?displayProperty=fullName> </xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Xml.XmlNodeList GetElementsByTagName (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "De LocalName moet worden gezocht. De speciale waarde &quot; * &quot; komt overeen met alle codes."
    - id: namespaceURI
      type: System.String
      description: "NamespaceURI moet worden gezocht."
    return:
      type: System.Xml.XmlNodeList
      description: "Een <xref href=&quot;System.Xml.XmlNodeList&quot;> </xref> met een lijst van alle overeenkomende knooppunten. Als er geen knooppunten overeenkomen met de opgegeven <code> localName </code> en <code> namespaceURI </code>, de geretourneerde verzameling is leeg."
  overload: System.Xml.XmlDocument.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Implementation
  id: Implementation
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Implementation
  nameWithType: XmlDocument.Implementation
  fullName: System.Xml.XmlDocument.Implementation
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Haalt de <xref href=&quot;System.Xml.XmlImplementation&quot;> </xref> object voor het huidige document."
  remarks: "`XmlDocument`objecten die zijn gemaakt op basis van dezelfde `XmlImplementation` delen de dezelfde <xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable> Hiermee kunnen gebruikers de namen van kenmerken en -elementen als objecten in plaats van tekenreeksen te vergelijken.       Hoewel de `XmlDocument` objecten delen de dezelfde implementatie, knooppunten uit één document te verplaatsen naar een andere moet u de <xref:System.Xml.XmlDocument.ImportNode%2A>methode.</xref:System.Xml.XmlDocument.ImportNode%2A>"
  example:
  - "The following example creates a new `XmlDocument` using another document's implementation.  \n  \n [!code-cs[Classic WebData XmlDocument.Implementation Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_11_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.Implementation Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_11_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.Implementation Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_11_1.vb)]"
  syntax:
    content: public System.Xml.XmlImplementation Implementation { get; }
    return:
      type: System.Xml.XmlImplementation
      description: "De <xref uid=&quot;langword_csharp_XmlImplementation&quot; name=&quot;XmlImplementation&quot; href=&quot;&quot;> </xref> object voor het huidige document."
  overload: System.Xml.XmlDocument.Implementation*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  id: ImportNode(System.Xml.XmlNode,System.Boolean)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: ImportNode(XmlNode,Boolean)
  nameWithType: XmlDocument.ImportNode(XmlNode,Boolean)
  fullName: System.Xml.XmlDocument.ImportNode(XmlNode,Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Importeert een knooppunt van een ander document op het huidige document."
  remarks: "Het geretourneerde knooppunt heeft geen bovenliggend element. Het bronknooppunt wordt niet gewijzigd of verwijderd uit het originele document; `ImportNode` maakt een kopie van de bronnode.       Een knooppunt importeert, maakt u een `XmlNode` object eigendom van het document importeren met <xref:System.Xml.XmlNode.Name%2A>en <xref:System.Xml.XmlNode.NodeType%2A>identiek aan de bronnode.</xref:System.Xml.XmlNode.NodeType%2A> </xref:System.Xml.XmlNode.Name%2A> Het nieuwe object heeft ook de kenmerken die betrekking hebben op naamruimten (<xref:System.Xml.XmlNode.Prefix%2A>, <xref:System.Xml.XmlNode.LocalName%2A>, en <xref:System.Xml.XmlNode.NamespaceURI%2A>).</xref:System.Xml.XmlNode.NamespaceURI%2A> </xref:System.Xml.XmlNode.LocalName%2A> </xref:System.Xml.XmlNode.Prefix%2A>       Afhankelijk van het knooppunttype van het geïmporteerde knooppunt en de waarde van de `deep` parameter, aanvullende informatie wordt gekopieerd zo nodig. Deze methode probeert het gedrag verwacht als een fragment van XML- of HTML-bron is gekopieerd uit een document naar een andere mirror (herkent dat in het geval is XML, de twee documenten verschillende DTD&quot;s hebben kunnen).       De volgende tabel beschrijft de specifiek gedrag voor elke <xref:System.Xml.XmlNodeType>.</xref:System.Xml.XmlNodeType>      | XmlNodeType | ImportNode(true) | ImportNode(false) |   |-----------------|------------------------|-------------------------|   | Kenmerk | De <xref:System.Xml.XmlAttribute.Specified%2A>eigenschap is ingesteld op `true` op de gegenereerde <xref:System.Xml.XmlAttribute>.</xref:System.Xml.XmlAttribute> </xref:System.Xml.XmlAttribute.Specified%2A> De afgeleide elementen van de bron `XmlAttribute` recursief geïmporteerd en de resulterende knooppunten samengevoegd zijn om de bijbehorende substructuur. | De `deep` parameter geldt niet voor `XmlAttribute` knooppunten; ze altijd voeren hun onderliggende objecten met hen wanneer geïmporteerd. |   | CData | Het knooppunt, met inbegrip van de gegevens worden gekopieerd. | Het knooppunt, met inbegrip van de gegevens worden gekopieerd. |   | Opmerking | Het knooppunt, met inbegrip van de gegevens worden gekopieerd. | Het knooppunt, met inbegrip van de gegevens worden gekopieerd. |   | DocumentFragment | De onderliggende objecten van het bronknooppunt zijn recursief geïmporteerd en de resulterende knooppunten opnieuw samengesteld om de bijbehorende substructuur. | Een lege <xref:System.Xml.XmlDocumentFragment>wordt gegenereerd. |   | DocumentType | Het knooppunt, met inbegrip van de gegevens opgehaald. *| Het knooppunt, met inbegrip van de gegevens opgehaald. *|   | Element | De onderliggende objecten van het bronelement en de knooppunten van het opgegeven kenmerk zijn recursief geïmporteerd en de resulterende knooppunten opnieuw samengesteld om de bijbehorende substructuur.</xref:System.Xml.XmlDocumentFragment><br /><br /> Opmerking: Standaardkenmerken worden niet gekopieerd. Als het document wordt geïmporteerd in standaardkenmerken voor deze elementnaam zijn gedefinieerd, die zijn toegewezen. | Opgegeven kenmerk knooppunten van het bronelement worden geïmporteerd en de gegenereerde `XmlAttribute` knooppunten zijn gekoppeld aan de gegenereerde <xref:System.Xml.XmlElement>.</xref:System.Xml.XmlElement><br /><br /> Opmerking: Standaardkenmerken worden niet gekopieerd. Als het document wordt geïmporteerd in standaardkenmerken voor deze elementnaam zijn gedefinieerd, die zijn toegewezen. |   | EntityReference | Omdat de bron- en doelserver documenten de entiteiten die anders gedefinieerd hebben kunnen, wordt deze methode alleen kopieert de <xref:System.Xml.XmlEntityReference>knooppunt.</xref:System.Xml.XmlEntityReference> De vervangende tekst is niet opgenomen. Als het doeldocument de entiteit die is gedefinieerd heeft, de waarde is toegewezen. | Omdat de bron- en doelserver documenten de entiteiten die anders gedefinieerd hebben kunnen, wordt deze methode alleen kopieert de <xref:System.Xml.XmlEntityReference>knooppunt.</xref:System.Xml.XmlEntityReference> De vervangende tekst is niet opgenomen. Als het doeldocument de entiteit die is gedefinieerd heeft, de waarde is toegewezen. |   | ProcessingInstruction | De doel- en opgehaald uit het geïmporteerde knooppunt. | De doel- en opgehaald uit het geïmporteerde knooppunt. |   | Tekst | Het knooppunt, met inbegrip van de gegevens worden gekopieerd. | Het knooppunt, met inbegrip van de gegevens worden gekopieerd. |   | SignificantWhitespace | Het knooppunt, met inbegrip van de gegevens worden gekopieerd. | Het knooppunt, met inbegrip van de gegevens worden gekopieerd. |   | Witruimte | Het knooppunt, met inbegrip van de gegevens worden gekopieerd. | Het knooppunt, met inbegrip van de gegevens worden gekopieerd. |   | XmlDeclaration | De doel- en opgehaald uit het geïmporteerde knooppunt. | De doel- en opgehaald uit het geïmporteerde knooppunt. |   | Alle andere knooppunttypen. | Deze knooppunttypen kunnen niet worden geïmporteerd. | Deze knooppunttypen kunnen niet worden geïmporteerd. |       * Hoewel DocumentType knooppunten kunnen worden geïmporteerd, kan een document slechts één DocumentType hebben. Als het document wordt momenteel een knooppunt DocumenType heeft, moet dit worden verwijderd voordat u een nieuwe toevoegt."
  example:
  - "The following example imports a book node from a second XML document into the original XML document.  \n  \n [!code-vb[Classic WebData XmlDocument.ImportNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_22_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.ImportNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_22_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.ImportNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_22_1.cs)]  \n  \n The example uses the file, `books.xml`, as input.  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_22_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNode ImportNode (System.Xml.XmlNode node, bool deep);
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "Het knooppunt wordt geïmporteerd."
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>uitvoeren van een grondige kloon; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Xml.XmlNode
      description: "De geïmporteerde <xref href=&quot;System.Xml.XmlNode&quot;> </xref>."
  overload: System.Xml.XmlDocument.ImportNode*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "U kunt deze methode aanroept voor een knooppunttype kan niet worden geïmporteerd."
  platform:
  - net462
- uid: System.Xml.XmlDocument.InnerText
  id: InnerText
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: InnerText
  nameWithType: XmlDocument.InnerText
  fullName: System.Xml.XmlDocument.InnerText
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Genereert een <xref:System.InvalidOperationException>in alle gevallen.</xref:System.InvalidOperationException>"
  remarks: "Deze eigenschap is niet geïmplementeerd."
  syntax:
    content: public override string InnerText { set; }
    return:
      type: System.String
      description: "De waarden van het knooppunt en alle onderliggende knooppunten."
  overload: System.Xml.XmlDocument.InnerText*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "In alle gevallen."
  platform:
  - net462
- uid: System.Xml.XmlDocument.InnerXml
  id: InnerXml
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: InnerXml
  nameWithType: XmlDocument.InnerXml
  fullName: System.Xml.XmlDocument.InnerXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Opgehaald of ingesteld van de markering die aangeeft van de onderliggende elementen van het huidige knooppunt."
  remarks: "Als u deze eigenschap instelt, wordt de onderliggende elementen van het knooppunt vervangen door de geparseerde inhoud van de opgegeven tekenreeks. Het parseren is uitgevoerd in de huidige context van de naamruimte.       `InnerXml`Hiermee verwijdert u redundante naamruimtedeclaraties. Als gevolg hiervan, talrijke knippen en plakken worden de grootte van het document met redundant naamruimtedeclaraties in bewerkingen niet vergroten. Houd rekening met het volgende XSL-document: ```   <xsl:stylesheet version=&quot;1.0&quot;          xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;>        <xsl:template match=&quot;stock&quot;>            ...        </xsl:template>       </xsl:stylesheet>   ``` de `InnerXml` eigenschap op het knooppunt opmaakmodel retourneert de volgende tekenreeks: ```   <xsl:template match=&quot;stock&quot;          xmlns:xsl=&quot;http://www.w3.org/1999/XSL/Transform&quot;>        ...       </xsl:template>   ``` u ziet de naamruimtedeclaratie extra xmlns:xsl die wordt gebruikt voor het behouden van de identiteit van het knooppunt. Als u deze interne XML-tekenreeks opnieuw invoegt, wordt u terug het originele document. Met andere woorden, `InnerXml` herkent dat de naamruimtedeclaratie xmlns:xsl overbodig, is gezien het feit dat het XSL: stylesheet bovenliggende element al de naamruimte xmlns:xsl delcaration is en daarom wordt deze verwijderd.       Als u verplaatst `InnerXml` uit een document met geen standaardnaamruimte aan een document met een standaardnaamruimte het gedrag is enigszins anders. Bekijk de volgende XML-tekenreeks: ```   <test>         <item>123</item>       </test>   ``` `InnerXml` retourneert een gewone XML-tekenreeks met geen naamruimtedeclaraties: ```   <item>123</item>   ``` als u deze tekenreeks vervolgens invoegen in een document dat u beschikt over een standaard-naamruimte, zoals het volgende: ```   <test2 xmlns=&quot;urn:1&quot;>       </test>   ``` `InnerXml` parseert de tekenreeks in de context en de nieuwe knooppunten kunnen worden opgepikt de naamruimte urn:&1;.               Het resultaat van dit ziet: ```   <test2 xmlns=&quot;urn:1&quot;>         <item>123</item>       </test>   ``` nu wanneer u vragen voor de `InnerXml` terughalen van de volgende: ```   <item xmlns=&quot;urn:1&quot;>123</item>   ``` als u expliciet het ingevoegde item wilt handhaven van het feit dat het afkomstig uit een document dat geen naamruimte had is, moet u handmatig toevoegen van een xmlns = &quot;&quot; declaratie en de resulterende tekenreeks invoegen: ```   <item xmlns=&quot;&quot;>123</item>   ``` het uiteindelijke resultaat van alle dit ziet er als volgt: 1.  Knippen en plakken `InnerXml` tussen documenten die geen gebruikmaken van naamruimten schoon en eenvoudige en maakt geen &quot;xmlns&quot; redundantie in uw tekenreeksen.      2.  `InnerXml`kan ook worden gebruikt om te knippen en plakken tussen documenten die meer dan één naamruimte (dat wil zeggen XSL stylesheets) hebben.      3.  xmlns:XSL declaraties automatisch weergegeven in uw tekenreeksen en verdwijnen in uw knooppunt hiërarchieën.      4.  In het geval waar u zich bewegende `InnerXml` uit een document dat heeft geen standaardnaamruimte naar een document dat u beschikt over een standaardnaamruimte, de nieuwe standaardnaamruimte nieuwe knooppunten opgehaald.       Als `InnerXml` is ingesteld door de tekst die entiteitverwijzingen die momenteel niet worden gedefinieerd in het document bevat, bevat de structuur van de resulterende leeg EntityReference-knooppunten.       Deze eigenschap is een Microsoft-extensie aan het Document Object Model (DOM)."
  syntax:
    content: public override string InnerXml { get; set; }
    return:
      type: System.String
      description: "De opmaak van de onderliggende leden van het huidige knooppunt."
  overload: System.Xml.XmlDocument.InnerXml*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Het XML-bestand opgegeven wanneer deze instelling is niet grammaticaal correct."
  platform:
  - net462
- uid: System.Xml.XmlDocument.IsReadOnly
  id: IsReadOnly
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: XmlDocument.IsReadOnly
  fullName: System.Xml.XmlDocument.IsReadOnly
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hiermee wordt een waarde die aangeeft of het huidige knooppunt alleen-lezen is."
  remarks: "Een alleen-lezen-knooppunt is een waarvan eigenschappen, kenmerken of onderliggende elementen kan niet worden gewijzigd. U kunt een alleen-lezen-knooppunt verwijderen uit de structuur en voeg deze ergens anders.       Deze eigenschap is een Microsoft-extensie aan het Document Object Model (DOM)."
  example:
  - "The following example shows how to use the `IsReadOnly` property.  \n  \n [!code-cs[Classic WebData XmlDocument.IsReadOnly Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_7_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.IsReadOnly Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_7_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.IsReadOnly Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_7_1.vb)]"
  syntax:
    content: public override bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het huidige knooppunt alleen-lezen is. anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;></xref>knooppunten altijd retourneren <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(Stream)
  nameWithType: XmlDocument.Load(Stream)
  fullName: System.Xml.XmlDocument.Load(Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Het XML-document laadt van de opgegeven stroom."
  remarks: "> [!NOTE]> De `Load` methode behoudt altijd significante witruimten. De <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>eigenschap bepaalt of verwaarlozen witruimte, dat wil zeggen witruimte in elementinhoud, behouden blijft.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> De standaardwaarde is `false`; witruimte in elementinhoud blijven niet behouden.       Als u wilt dat validatie moet worden toegepast, kunt u een valideren <xref:System.Xml.XmlReader>exemplaar met behulp van de <xref:System.Xml.XmlReaderSettings>klasse en de <xref:System.Xml.XmlReader.Create%2A>methode.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Zie voor meer informatie de sectie met opmerkingen van de <xref:System.Xml.XmlReader>-verwijzingspagina.</xref:System.Xml.XmlReader>       Deze methode is een Microsoft-extensie aan het Document Object Model (DOM).       Deze methode detecteert automatisch de indeling van de tekenreeks van de invoer-XML (bijvoorbeeld: UTF-8, ANSI, enzovoort). Als uw toepassing moet weten welke codering wordt gebruikt om te lezen van de stroom, overweeg dan een <xref:System.Xml.XmlTextReader>object om de stroom lezen en gebruik vervolgens de <xref:System.Xml.XmlTextReader.Encoding%2A?displayProperty=fullName>eigenschap om te bepalen de codering.</xref:System.Xml.XmlTextReader.Encoding%2A?displayProperty=fullName> </xref:System.Xml.XmlTextReader> Als u wilt gebruiken een <xref:System.Xml.XmlDocument>-object om te werken met XML, kunt u de <xref:System.Xml.XmlTextReader>object een maken.</xref:System.Xml.XmlTextReader> </xref:System.Xml.XmlDocument> Zie voor meer informatie [lezen van XML-gegevens met behulp van XPathDocument en XmlDocument](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public virtual void Load (System.IO.Stream inStream);
    parameters:
    - id: inStream
      type: System.IO.Stream
      description: "De stroom met het laden van XML-document."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Er is een fout worden geladen of parse in het XML-bestand. In dit geval een <xref:System.IO.FileNotFoundException>wordt gegenereerd.</xref:System.IO.FileNotFoundException>"
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.IO.TextReader)
  id: Load(System.IO.TextReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(TextReader)
  nameWithType: XmlDocument.Load(TextReader)
  fullName: System.Xml.XmlDocument.Load(TextReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Het XML-document van de opgegeven <xref:System.IO.TextReader>.</xref:System.IO.TextReader> geladen"
  remarks: "> [!NOTE]> De `Load` methode behoudt altijd significante witruimten. De <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>eigenschap bepaalt of verwaarlozen witruimte, dat wil zeggen witruimte in elementinhoud, behouden blijft.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> De standaardwaarde is `false`; witruimte in elementinhoud blijven niet behouden.       Als u wilt dat validatie moet worden toegepast, kunt u een valideren <xref:System.Xml.XmlReader>exemplaar met behulp van de <xref:System.Xml.XmlReaderSettings>klasse en de <xref:System.Xml.XmlReader.Create%2A>methode.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Zie voor meer informatie de sectie met opmerkingen van de <xref:System.Xml.XmlReader>-verwijzingspagina.</xref:System.Xml.XmlReader>       Deze methode is een Microsoft-extensie aan het Document Object Model (DOM)."
  example:
  - "The following example uses the <xref:System.IO.StringReader> class to load a string of XML data into the `XmlDocument` object.  \n  \n [!code-cs[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_8_1.cs)]\n [!code-vb[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_8_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.CreateElement2 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_8_1.cpp)]"
  syntax:
    content: public virtual void Load (System.IO.TextReader txtReader);
    parameters:
    - id: txtReader
      type: System.IO.TextReader
      description: "De <xref uid=&quot;langword_csharp_TextReader&quot; name=&quot;TextReader&quot; href=&quot;&quot;> </xref> gebruikt voor invoer van de XML-gegevens in het document."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Er is een fout worden geladen of parse in het XML-bestand. In dit geval wordt blijft het document leeg."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.String)
  id: Load(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(String)
  nameWithType: XmlDocument.Load(String)
  fullName: System.Xml.XmlDocument.Load(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Het XML-document geladen vanuit de opgegeven URL."
  remarks: "> [!NOTE]> De `Load` methode behoudt altijd significante witruimten. De <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>eigenschap bepaalt of verwaarlozen witruimte, dat wil zeggen witruimte in elementinhoud, behouden blijft.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> De standaardwaarde is `false`; witruimte in elementinhoud blijven niet behouden.       Als u wilt dat validatie moet worden toegepast, kunt u een valideren <xref:System.Xml.XmlReader>exemplaar met behulp van de <xref:System.Xml.XmlReaderSettings>klasse en de <xref:System.Xml.XmlReader.Create%2A>methode.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Zie voor meer informatie de sectie met opmerkingen van de <xref:System.Xml.XmlReader>-verwijzingspagina.</xref:System.Xml.XmlReader>       Deze methode is een Microsoft-extensie aan het Document Object Model (DOM)."
  syntax:
    content: public virtual void Load (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "De URL voor het bestand met het XML-document moet worden geladen. De URL kan niet een lokaal bestand of een HTTP-URL (een webadres)."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Er is een fout worden geladen of parse in het XML-bestand. In dit geval een <xref:System.IO.FileNotFoundException>wordt gegenereerd.</xref:System.IO.FileNotFoundException>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>filename</code>een tekenreeks met lengte nul is, bevat alleen witruimte of bevat een of meer ongeldige tekens zoals gedefinieerd door <xref:System.IO.Path.InvalidPathChars>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>filename</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "Het opgegeven pad, de bestandsnaam of beide groter zijn dan het systeem gedefinieerde maximumlengte. Bijvoorbeeld, op Windows-platforms, paden moet minder dan 248 tekens en bestandsnamen moet minder dan 260 tekens bevatten."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "Het opgegeven pad is ongeldig (bijvoorbeeld: dit is een niet-toegewezen schijf)."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "Er is een i/o-fout opgetreden tijdens het openen van het bestand."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code>filename</code>een bestand dat alleen-lezen is opgegeven.       - of - deze bewerking wordt niet ondersteund op het huidige platform.       - of - <code>filename</code> opgegeven van een map.       - of - de aanroeper heeft niet de vereiste machtiging."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Het opgegeven bestand in <code> filename </code> is niet gevonden."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>filename</code>is een ongeldige indeling."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "De aanroeper heeft niet de vereiste machtiging."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XmlDocument.Load(XmlReader)
  fullName: System.Xml.XmlDocument.Load(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Het XML-document van de opgegeven <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> geladen"
  remarks: "> [!NOTE]> De `Load` methode behoudt altijd significante witruimten. De <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>eigenschap bepaalt of verwaarlozen witruimte, dat wil zeggen witruimte in elementinhoud, behouden blijft.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A> De standaardwaarde is `false`; witruimte in elementinhoud blijven niet behouden.       Als het leesprogramma zich in de uitgangssituatie (<xref:System.Xml.XmlReader.ReadState%2A> = ReadState.Initial), `Load` verbruikt de volledige inhoud van de lezer en maakt het DOM van wat er is gevonden.</xref:System.Xml.XmlReader.ReadState%2A>       Als de lezer al op een bepaald knooppunt op diepte &quot;n&quot; geplaatst is, wordt deze methode laadt dat knooppunt en alle volgende elementen op hetzelfde niveau tot de eindcode waarmee wordt gesloten diepte &quot;n&quot;. Dit heeft de volgende resultaten.       Als de huidige node en de bijbehorende gelijke niveaus als het volgende eruitzien: ```   <!--comment--><element1>one</element1><element2>two</element2>   ``` `Load` er een uitzondering gegenereerd omdat een document kan niet twee niveau hoofdelementen hebben.        Als het huidige knooppunt en de bijbehorende gelijke niveaus zien er als volgt: ```   <!--comment--><?process instruction?><!--comment--></endtag>   ``` `Load` is geslaagd, maar u hebt een onvolledige DOM-structuur omdat er geen hoofdelement niveau.        Voordat u het document opslaat, moet u een hoofdelement niveau anders toevoegen <xref:System.Xml.XmlDocument.Save%2A>genereert een uitzondering.</xref:System.Xml.XmlDocument.Save%2A>       Als de lezer is geplaatst op een leafknooppunt is ongeldig voor het hoogste niveau van een document, bijvoorbeeld een spatie of kenmerkknooppunt, de lezer blijft lezen totdat deze wordt geplaatst op een knooppunt dat kan worden gebruikt voor de hoofdmap. Het document begint op dit moment laden.       Als u wilt dat validatie moet worden toegepast, kunt u een valideren <xref:System.Xml.XmlReader>exemplaar met behulp van de <xref:System.Xml.XmlReaderSettings>klasse en de <xref:System.Xml.XmlReader.Create%2A>methode.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Zie voor meer informatie de sectie met opmerkingen van de <xref:System.Xml.XmlReader>-verwijzingspagina.</xref:System.Xml.XmlReader>       Deze methode is een Microsoft-extensie aan het Document Object Model (DOM)."
  example:
  - "The following example loads the last book node of the `books.xml` file into the XML document.  \n  \n [!code-cs[Classic WebData XmlDocument.Load2 Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_23_1.cs)]\n [!code-vb[Classic WebData XmlDocument.Load2 Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_23_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.Load2 Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_23_1.cpp)]  \n  \n The example uses the file, `books.xml`, as input.  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_23_2.xml)]"
  syntax:
    content: public virtual void Load (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "De <xref uid=&quot;langword_csharp_XmlReader&quot; name=&quot;XmlReader&quot; href=&quot;&quot;> </xref> gebruikt voor invoer van de XML-gegevens in het document."
  overload: System.Xml.XmlDocument.Load*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Er is een fout worden geladen of parse in het XML-bestand. In dit geval wordt blijft het document leeg."
  platform:
  - net462
- uid: System.Xml.XmlDocument.LoadXml(System.String)
  id: LoadXml(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: LoadXml(String)
  nameWithType: XmlDocument.LoadXml(String)
  fullName: System.Xml.XmlDocument.LoadXml(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Het XML-document laadt van de opgegeven tekenreeks."
  remarks: "Standaard de `LoadXml` methode blijven niet behouden witruimte of significante witruimten.       Deze methode parseert DTD&quot;s, maar geen validatie DTD of het Schema. Als u wilt dat validatie moet worden toegepast, kunt u een valideren <xref:System.Xml.XmlReader>exemplaar met behulp van de <xref:System.Xml.XmlReaderSettings>klasse en de <xref:System.Xml.XmlReader.Create%2A>methode.</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReader> Zie voor meer informatie de sectie met opmerkingen van de <xref:System.Xml.XmlReader>-verwijzingspagina.</xref:System.Xml.XmlReader>       Als u laden wilt vanuit een <xref:System.IO.Stream>, <xref:System.String>, <xref:System.IO.TextReader>, of <xref:System.Xml.XmlReader>, de Load-methode gebruiken in plaats van deze methode.</xref:System.Xml.XmlReader> </xref:System.IO.TextReader> </xref:System.String> </xref:System.IO.Stream>       Deze methode is een Microsoft-extensie aan het Document Object Model (DOM)."
  example:
  - "The following example loads XML into an `XmlDocument` object and saves it out to a file.  \n  \n [!code-cpp[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_2_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_2_1.cs)]\n [!code-vb[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_2_1.vb)]"
  syntax:
    content: public virtual void LoadXml (string xml);
    parameters:
    - id: xml
      type: System.String
      description: "Tekenreeks met het laden van XML-document."
  overload: System.Xml.XmlDocument.LoadXml*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Er is een fout worden geladen of parse in het XML-bestand. In dit geval wordt blijft het document leeg."
  platform:
  - net462
- uid: System.Xml.XmlDocument.LocalName
  id: LocalName
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: LocalName
  nameWithType: XmlDocument.LocalName
  fullName: System.Xml.XmlDocument.LocalName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hiermee haalt u de lokale naam van het knooppunt."
  remarks: "De lokale naam die wordt geretourneerd is afhankelijk van de <xref:System.Xml.XmlDocument.NodeType%2A>van het knooppunt.</xref:System.Xml.XmlDocument.NodeType%2A> Een tabel met een beschrijving van de lokale naam die wordt geretourneerd voor elk van de knooppunttypen raadpleegt u de <xref:System.Xml.XmlNode.LocalName%2A>eigenschap in de <xref:System.Xml.XmlNode>klasse.</xref:System.Xml.XmlNode> </xref:System.Xml.XmlNode.LocalName%2A>"
  syntax:
    content: public override string LocalName { get; }
    return:
      type: System.String
      description: 'Voor <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> knooppunten, de lokale naam #document is.'
  overload: System.Xml.XmlDocument.LocalName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Name
  id: Name
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Name
  nameWithType: XmlDocument.Name
  fullName: System.Xml.XmlDocument.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hiermee haalt u de gekwalificeerde naam van het knooppunt."
  remarks: "De naam die wordt geretourneerd is afhankelijk van de <xref:System.Xml.XmlDocument.NodeType%2A>van het knooppunt.</xref:System.Xml.XmlDocument.NodeType%2A> Een tabel met een beschrijving van de naam die wordt geretourneerd voor elk van de knooppunttypen raadpleegt u de <xref:System.Xml.XmlNode.Name%2A>eigenschap in de <xref:System.Xml.XmlNode>klasse.</xref:System.Xml.XmlNode> </xref:System.Xml.XmlNode.Name%2A>"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: 'Voor <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> knooppunten, de naam van de #document is.'
  overload: System.Xml.XmlDocument.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NameTable
  id: NameTable
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NameTable
  nameWithType: XmlDocument.NameTable
  fullName: System.Xml.XmlDocument.NameTable
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Haalt de <xref:System.Xml.XmlNameTable>die zijn gekoppeld aan deze implementatie.</xref:System.Xml.XmlNameTable>"
  remarks: "Elke `XmlDocument` -object heeft een <xref:System.Xml.NameTable>object.</xref:System.Xml.NameTable> Namen van elementen en kenmerken worden opgeslagen in de `NameTable` als geatomiseerde tekenreeksen. Dit betekent dat zelfs als een naam in het document wordt verwezen meerdere keren wordt deze opgeslagen slechts eenmaal de `NameTable`. Als het document heeft meerdere elementen met de naam &quot;Klant&quot;, bijvoorbeeld `NameTable` hetzelfde object als resultaat gegeven wanneer er een aanvraag voor die naam ontvangt. Gebruikers kunnen hierdoor object vergelijkingen op deze tekenreeksen in plaats van de duurdere tekenreeksvergelijkingen met code te schrijven.       Zie voor meer informatie over geatomiseerde tekenreeksen <xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable>       Deze methode is een Microsoft-extensie aan het Document Object Model (DOM)."
  syntax:
    content: public System.Xml.XmlNameTable NameTable { get; }
    return:
      type: System.Xml.XmlNameTable
      description: "Een <xref uid=&quot;langword_csharp_XmlNameTable&quot; name=&quot;XmlNameTable&quot; href=&quot;&quot;> </xref> zodat u kunt de atomized versie van een tekenreeks in het document."
  overload: System.Xml.XmlDocument.NameTable*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeChanged
  id: NodeChanged
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeChanged
  nameWithType: XmlDocument.NodeChanged
  fullName: System.Xml.XmlDocument.NodeChanged
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Deze gebeurtenis treedt op wanneer de <xref:System.Xml.XmlNode.Value*>van een knooppunt uitmaken van dit document is gewijzigd.</xref:System.Xml.XmlNode.Value*>"
  remarks: "Deze gebeurtenis is alleen van toepassing op knooppunten die fungeren als een waarde hebben.       Alle knooppunten die zijn gemaakt door dit document, of ze zijn ingevoegd in het document of niet zijn opgenomen in deze gebeurtenis."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeChanged;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeChanging
  id: NodeChanging
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeChanging
  nameWithType: XmlDocument.NodeChanging
  fullName: System.Xml.XmlDocument.NodeChanging
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Deze gebeurtenis treedt op wanneer de <xref:System.Xml.XmlNode.Value*>van een knooppunt behorend bij dit document is punt te worden gewijzigd.</xref:System.Xml.XmlNode.Value*>"
  remarks: "Deze gebeurtenis kan de gebruiker extra controleren en, indien nodig, Veroorzaak een uitzondering als de bewerking wilt beëindigen. Als er een uitzondering gegenereerd de `XmlDocument` geretourneerd naar de oorspronkelijke staat. Deze gebeurtenis is alleen van toepassing op knooppunten die fungeren als een waarde hebben.       Alle knooppunten die zijn gemaakt door dit document, of ze zijn ingevoegd in het document of niet zijn opgenomen in deze gebeurtenis."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeChanging;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeInserted
  id: NodeInserted
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeInserted
  nameWithType: XmlDocument.NodeInserted
  fullName: System.Xml.XmlDocument.NodeInserted
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Treedt op wanneer een knooppunt die horen bij dit document is ingevoegd in een ander knooppunt."
  remarks: "Alle knooppunten die zijn gemaakt door dit document, of ze zijn ingevoegd in het document of niet zijn opgenomen in deze gebeurtenis."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeInserted;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeInserting
  id: NodeInserting
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeInserting
  nameWithType: XmlDocument.NodeInserting
  fullName: System.Xml.XmlDocument.NodeInserting
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Deze gebeurtenis treedt op wanneer een knooppunt die horen bij dit document wordt ingevoegd in een ander knooppunt."
  remarks: "Deze gebeurtenis kan de gebruiker extra controleren en, indien nodig, Veroorzaak een uitzondering als de bewerking wilt beëindigen. Als er een uitzondering gegenereerd de `XmlDocument` geretourneerd naar de oorspronkelijke staat.       Alle knooppunten die zijn gemaakt door dit document, of ze zijn ingevoegd in het document of niet zijn opgenomen in deze gebeurtenis."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeInserting;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeRemoved
  id: NodeRemoved
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeRemoved
  nameWithType: XmlDocument.NodeRemoved
  fullName: System.Xml.XmlDocument.NodeRemoved
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Deze gebeurtenis treedt op wanneer een knooppunt die horen bij dit document is verwijderd van de bovenliggende site."
  remarks: "Alle knooppunten die zijn gemaakt door dit document, of ze zijn ingevoegd in het document of niet zijn opgenomen in deze gebeurtenis."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeRemoved;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeRemoving
  id: NodeRemoving
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeRemoving
  nameWithType: XmlDocument.NodeRemoving
  fullName: System.Xml.XmlDocument.NodeRemoving
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Deze gebeurtenis treedt op wanneer een knooppunt die horen bij dit document wordt verwijderd uit het document."
  remarks: "Deze gebeurtenis kan de gebruiker extra controleren en, indien nodig, Veroorzaak een uitzondering als de bewerking wilt beëindigen. Als er een uitzondering gegenereerd de `XmlDocument` geretourneerd naar de oorspronkelijke staat.       Alle knooppunten die zijn gemaakt door dit document, of ze zijn ingevoegd in het document of niet zijn opgenomen in deze gebeurtenis."
  syntax:
    content: public event System.Xml.XmlNodeChangedEventHandler NodeRemoving;
    return:
      type: System.Xml.XmlNodeChangedEventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.NodeType
  id: NodeType
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: NodeType
  nameWithType: XmlDocument.NodeType
  fullName: System.Xml.XmlDocument.NodeType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hiermee wordt het type van het huidige knooppunt."
  syntax:
    content: public override System.Xml.XmlNodeType NodeType { get; }
    return:
      type: System.Xml.XmlNodeType
      description: "Het knooppunttype. Voor <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> knooppunten, deze waarde is XmlNodeType.Document."
  overload: System.Xml.XmlDocument.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.OwnerDocument
  id: OwnerDocument
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: OwnerDocument
  nameWithType: XmlDocument.OwnerDocument
  fullName: System.Xml.XmlDocument.OwnerDocument
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Haalt de <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> waartoe het huidige knooppunt behoort."
  syntax:
    content: public override System.Xml.XmlDocument OwnerDocument { get; }
    return:
      type: System.Xml.XmlDocument
      description: "Voor <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> knooppunten (<xref:System.Xml.XmlDocument.NodeType*> gelijk is aan XmlNodeType.Document), deze eigenschap retourneert altijd <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Xml.XmlDocument.NodeType*>"
  overload: System.Xml.XmlDocument.OwnerDocument*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.ParentNode
  id: ParentNode
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: ParentNode
  nameWithType: XmlDocument.ParentNode
  fullName: System.Xml.XmlDocument.ParentNode
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hiermee wordt het bovenliggende knooppunt van dit knooppunt (voor knooppunten waarvoor de ouders)."
  syntax:
    content: public override System.Xml.XmlNode ParentNode { get; }
    return:
      type: System.Xml.XmlNode
      description: "Retourneert altijd <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.ParentNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.PreserveWhitespace
  id: PreserveWhitespace
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: PreserveWhitespace
  nameWithType: XmlDocument.PreserveWhitespace
  fullName: System.Xml.XmlDocument.PreserveWhitespace
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of u wilt behouden witruimte in inhoud van element."
  remarks: "Deze eigenschap bepaalt hoe witruimte is verwerkt tijdens het laden en proces opslaan.       Als `PreserveWhitespace` is `true` voordat <xref:System.Xml.XmlDocument.Load%2A>of <xref:System.Xml.XmlDocument.LoadXml%2A>is aangeroepen, witruimte knooppunten worden behouden; anders, als deze eigenschap is `false`, significante witruimten blijft behouden, is geen spaties bevatten.</xref:System.Xml.XmlDocument.LoadXml%2A> </xref:System.Xml.XmlDocument.Load%2A>       Als `PreserveWhitespace` is `true` voordat <xref:System.Xml.XmlDocument.Save%2A>is aangeroepen, witruimte in het document wordt behouden in de uitvoer, anders, als deze eigenschap is `false`, `XmlDocument` automatisch inspringingen de uitvoer.</xref:System.Xml.XmlDocument.Save%2A>       Deze methode is een Microsoft-extensie aan het Document Object Model (DOM)."
  example:
  - "The following example shows how to strip white space from a file.  \n  \n [!code-cs[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_6_1.cs)]\n [!code-vb[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_6_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.PreserveWhitespace Example#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_6_1.cpp)]  \n  \n The example uses the file `book.xml` as input.  \n  \n [!code-xml[Classic WebData XmlDocument.PreserveWhitespace Example#2](~/add/codesnippet/xml/p-system.xml.xmldocument_6_2.xml)]"
  syntax:
    content: public bool PreserveWhitespace { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als u wilt behouden witruimte; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.PreserveWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  id: ReadNode(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: ReadNode(XmlReader)
  nameWithType: XmlDocument.ReadNode(XmlReader)
  fullName: System.Xml.XmlDocument.ReadNode(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Maakt een <xref href=&quot;System.Xml.XmlNode&quot;> </xref> object op basis van de informatie in de <xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader> De lezer moet worden geplaatst op een knooppunt of kenmerk."
  remarks: "Een leest `XmlNode` uit de opgegeven lezer en plaatst u de lezer op het volgende knooppunt. Deze methode maakt u het type `XmlNode` die overeenkomt met de <xref:System.Xml.XmlNode.NodeType%2A>op die de lezer momenteel is geplaatst.</xref:System.Xml.XmlNode.NodeType%2A> (Als het leesprogramma zich in de uitgangssituatie `ReadNode` de lezer verplaatst naar het eerste knooppunt en wordt vervolgens toegepast op dat knooppunt.)       Als de lezer is geplaatst op het begin van een element `ReadNode` leest de kenmerken en alle onderliggende knooppunten, tot en met de eindcode van het huidige knooppunt. De `XmlNode` geretourneerd bevat de substructuur dat alles lezen vertegenwoordigt. De lezer is geplaatst onmiddellijk na de eindcode.       `ReadNode`kenmerken kunnen ook worden gelezen, maar in dit geval de lezer niet biedt gaan naar het volgende kenmerk. Hiermee kunt u de volgende C#-code schrijft: ```   XmlDocument doc = new XmlDocument();   while (reader.MoveToNextAttribute())   {     XmlNode a = doc.ReadNode(reader);     // Do some more processing.   }   ``` `ReadNode` gebruiken de kenmerkwaarde, wat betekent dat na het aanroepen `ReadNode` van een kenmerk <xref:System.Xml.XmlReader.ReadAttributeValue%2A?displayProperty=fullName>retourneert `false`.</xref:System.Xml.XmlReader.ReadAttributeValue%2A?displayProperty=fullName>       "
  example:
  - "The following example uses `ReadNode` to create a new node and then inserts the new node into the document.  \n  \n [!code-cs[Classic WebData XmlDocument.ReadNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_21_1.cs)]\n [!code-cpp[Classic WebData XmlDocument.ReadNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_21_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.ReadNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_21_1.vb)]  \n  \n The example uses the file, `cd.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlDocument.ReadNode Example#2](~/add/codesnippet/xml/m-system.xml.xmldocument_21_2.xml)]"
  syntax:
    content: public virtual System.Xml.XmlNode ReadNode (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "De XML-bron"
    return:
      type: System.Xml.XmlNode
      description: "De nieuwe <xref uid=&quot;langword_csharp_XmlNode&quot; name=&quot;XmlNode&quot; href=&quot;&quot;> </xref> of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als er geen meer knooppunten bestaan."
  overload: System.Xml.XmlDocument.ReadNode*
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "De lezer is geplaatst op een knooppunttype dat niet wordt omgezet naar een geldige DOM-knooppunt (bijvoorbeeld EndElement of EndEntity)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.IO.Stream)
  id: Save(System.IO.Stream)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(Stream)
  nameWithType: XmlDocument.Save(Stream)
  fullName: System.Xml.XmlDocument.Save(Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hiermee slaat u het XML-document naar de opgegeven stroom."
  remarks: "Witruimte blijft behouden alleen als <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>is ingesteld op `true`.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>       De XmlDeclaration van het huidige `XmlDocument` object bepaalt het codering kenmerk in de opgeslagen document. De waarde van de codering kenmerk is afkomstig uit de <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>eigenschap.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Als de `XmlDocument` biedt geen een XmlDeclaration of als de XmlDeclaration geen een codering kenmerk heeft, het opgeslagen document geen een ofwel.       Als het document wordt opgeslagen, worden xmlns-kenmerken om te blijven behouden van de identiteit van het knooppunt (lokale naam + naamruimte-URI) correct gegenereerd. Bijvoorbeeld de volgende C#-code ```   XmlDocument doc = new XmlDocument();   doc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));   doc.Save(Console.Out);   ``` genereert dit kenmerk XML&quot;s `<item xmls=&quot;urn:1&quot;/>`.       Deze methode is een Microsoft-extensie aan het Document Object Model (DOM).       Uitsluitend de <xref:System.Xml.XmlDocument.Save%2A>methode dwingt een juist opgemaakte XML-document.</xref:System.Xml.XmlDocument.Save%2A> Alle andere `Save` overloads alleen een goed ingedeelde fragment garanderen."
  syntax:
    content: public virtual void Save (System.IO.Stream outStream);
    parameters:
    - id: outStream
      type: System.IO.Stream
      description: "De stroom die u wilt opslaan."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "De bewerking resulteert niet in een welgevormde XML-document (bijvoorbeeld: Er is geen document element of dubbel XML-declaraties)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.IO.TextWriter)
  id: Save(System.IO.TextWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(TextWriter)
  nameWithType: XmlDocument.Save(TextWriter)
  fullName: System.Xml.XmlDocument.Save(TextWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hiermee slaat u het XML-document op de opgegeven <xref:System.IO.TextWriter>.</xref:System.IO.TextWriter>"
  remarks: "De codering op de `TextWriter` bepaalt de codering die is geschreven (de codering van het XmlDeclaration-knooppunt wordt vervangen door de codering van de `TextWriter`). Als er geen codering opgegeven is op de `TextWriter`, wordt de `XmlDocument` zonder een kenmerk codering is opgeslagen.       Deze methode is een Microsoft-extensie aan het Document Object Model (DOM).       Uitsluitend de <xref:System.Xml.XmlDocument.Save%2A>methode dwingt een juist opgemaakte XML-document.</xref:System.Xml.XmlDocument.Save%2A> Alle andere `Save` overloads alleen een goed ingedeelde fragment garanderen."
  syntax:
    content: public virtual void Save (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "De <xref uid=&quot;langword_csharp_TextWriter&quot; name=&quot;TextWriter&quot; href=&quot;&quot;> </xref> waarop u wilt opslaan."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "De bewerking resulteert niet in een welgevormde XML-document (bijvoorbeeld: Er is geen document element of dubbel XML-declaraties)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.String)
  id: Save(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(String)
  nameWithType: XmlDocument.Save(String)
  fullName: System.Xml.XmlDocument.Save(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hiermee slaat u het XML-document in het opgegeven bestand. Als het opgegeven bestand bestaat, wordt het door deze methode overschrijft."
  remarks: "Witruimte blijft behouden in de uitvoer bestand alleen als <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>is ingesteld op `true`.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>       De XmlDeclaration van het huidige `XmlDocument` object bepaalt het codering kenmerk in de opgeslagen document. De waarde van de codering kenmerk is afkomstig uit de <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>eigenschap.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Als de `XmlDocument` biedt geen een XmlDeclaration of als de XmlDeclaration geen een codering kenmerk heeft, het opgeslagen document geen een ofwel.       Als het document wordt opgeslagen, worden xmlns-kenmerken om te blijven behouden van de identiteit van het knooppunt (lokale naam + naamruimte-URI) correct gegenereerd. Bijvoorbeeld de volgende C#-code ```   XmlDocument doc = new XmlDocument();   doc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));   doc.Save(Console.Out);   ``` genereert dit kenmerk XML&quot;s `<item xmls=&quot;urn:1&quot;/>`.       Deze methode is een Microsoft-extensie aan het Document Object Model (DOM).       Houd er rekening mee dat alleen de methode Save afdwingt dat een juist opgemaakte XML-document. Alle andere `Save` overloads alleen een goed ingedeelde fragment garanderen."
  example:
  - "The following example loads XML into an XmlDocument object, modifies it, and then saves it to a file named data.xml.  \n  \n [!code-cs[Classic WebData XmlDocument.Save Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_18_1.cs)]\n [!code-vb[Classic WebData XmlDocument.Save Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_18_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.Save Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_18_1.cpp)]  \n  \n The data.xml file will contain the following XML: `<item><name>wrench</name><price>10.95</price></item>`."
  syntax:
    content: public virtual void Save (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "De locatie van het bestand waar u het document."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "De bewerking resulteert niet in een welgevormde XML-document (bijvoorbeeld: Er is geen document element of dubbel XML-declaraties)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  id: Save(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Save(XmlWriter)
  nameWithType: XmlDocument.Save(XmlWriter)
  fullName: System.Xml.XmlDocument.Save(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hiermee slaat u het XML-document op de opgegeven <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Witruimte blijft behouden alleen als <xref:System.Xml.XmlDocument.PreserveWhitespace%2A>is ingesteld op `true`.</xref:System.Xml.XmlDocument.PreserveWhitespace%2A>       De codering op de `XmlWriter` bepaalt de codering die is geschreven (de codering van het XmlDeclaration-knooppunt wordt vervangen door de codering van de `XmlWriter`). Als er geen codering opgegeven is op de `XmlWriter`, wordt de `XmlDocument` zonder een kenmerk codering is opgeslagen.       Als het document wordt opgeslagen, worden xmlns-kenmerken om te blijven behouden van de identiteit van het knooppunt (LocalName + NamespaceURI) correct gegenereerd. Bijvoorbeeld de volgende C#-code ```   XmlDocument doc = new XmlDocument();   doc.AppendChild(doc.CreateElement(&quot;item&quot;,&quot;urn:1&quot;));   doc.Save(Console.Out);   ``` genereert dit kenmerk XML&quot;s: ```   <item       xmls=&quot;urn:1&quot;/>   ``` deze methode is een Microsoft-extensie aan het Document Object Model (DOM).       Uitsluitend de <xref:System.Xml.XmlDocument.Save%2A>methode dwingt een juist opgemaakte XML-document.</xref:System.Xml.XmlDocument.Save%2A> Alle andere `Save` overloads alleen een goed ingedeelde fragment garanderen."
  example:
  - "The following example loads XML into an `XmlDocument` object and saves it out to a file.  \n  \n [!code-cpp[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_5_1.cpp)]\n [!code-cs[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_5_1.cs)]\n [!code-vb[Classic WebData XmlDocument.LoadXml Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_5_1.vb)]"
  syntax:
    content: public virtual void Save (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "De <xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> waarop u wilt opslaan."
  overload: System.Xml.XmlDocument.Save*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "De bewerking resulteert niet in een welgevormde XML-document (bijvoorbeeld: Er is geen document element of dubbel XML-declaraties)."
  platform:
  - net462
- uid: System.Xml.XmlDocument.SchemaInfo
  id: SchemaInfo
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: SchemaInfo
  nameWithType: XmlDocument.SchemaInfo
  fullName: System.Xml.XmlDocument.SchemaInfo
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Retourneert de na-Schema-validatie-Infoset (PSVI) van het knooppunt."
  remarks: "De inhoud PSVI van deze eigenschap worden ingesteld nadat het knooppunt is gevalideerd.       Deze eigenschap is een Microsoft-extensie aan het Document Object Model (DOM)."
  syntax:
    content: public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "De <xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;> </xref> -object dat de PSVI van het knooppunt vertegenwoordigt."
  overload: System.Xml.XmlDocument.SchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Schemas
  id: Schemas
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Schemas
  nameWithType: XmlDocument.Schemas
  fullName: System.Xml.XmlDocument.Schemas
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Opgehaald of ingesteld de <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> die zijn gekoppeld aan dit object <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>."
  remarks: "De schema&quot;s die zijn opgenomen een <xref:System.Xml.Schema.XmlSchemaSet>object gekoppeld aan een <xref:System.Xml.XmlDocument>object worden gebruikt voor validatie wanneer de <xref:System.Xml.XmlDocument.Validate%2A>methode van een <xref:System.Xml.XmlDocument>wordt uitgevoerd.</xref:System.Xml.XmlDocument> </xref:System.Xml.XmlDocument.Validate%2A> </xref:System.Xml.XmlDocument> </xref:System.Xml.Schema.XmlSchemaSet>       Wanneer een <xref:System.Xml.XmlDocument>-object is geïnitialiseerd met XML-gegevens van een <xref:System.Xml.XmlReader>object, de <xref:System.Xml.Schema.XmlSchemaSet>-object is geladen vanuit de <xref:System.Xml.XmlReaderSettings.Schemas%2A>eigenschap van de <xref:System.Xml.XmlReader>object.</xref:System.Xml.XmlReader> </xref:System.Xml.XmlReaderSettings.Schemas%2A> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.XmlReader> </xref:System.Xml.XmlDocument>"
  syntax:
    content: public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaSet
      description: "Een <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> -object met de XML-Schema Definition Language (XSD) schema&quot;s die zijn gekoppeld aan dit <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>; anders wordt een lege <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> object."
  overload: System.Xml.XmlDocument.Schemas*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  id: Validate(System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Validate(ValidationEventHandler)
  nameWithType: XmlDocument.Validate(ValidationEventHandler)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Valideert de <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> tegen de XML-Schema Definition Language (XSD) schema&quot;s die is opgenomen in de <xref:System.Xml.XmlDocument.Schemas*>eigenschap.</xref:System.Xml.XmlDocument.Schemas*>"
  remarks: "De methode Validate valideert de XML-gegevens in de <xref:System.Xml.XmlDocument>tegen de schema&quot;s die zijn opgenomen de <xref:System.Xml.XmlDocument.Schemas%2A>eigenschap.</xref:System.Xml.XmlDocument.Schemas%2A> </xref:System.Xml.XmlDocument> De methode Validate voert infoset uitdiepen. In het bijzonder na een succesvolle validatie schema standaardwaarden worden toegepast, tekstwaarden worden geconverteerd naar atomic waarden zo nodig en type-informatie is gekoppeld aan gevalideerde informatie-items. Het resultaat is een eerder niet getypeerde XML-substructuur in de <xref:System.Xml.XmlDocument>vervangen door een getypeerde substructuur.</xref:System.Xml.XmlDocument>       Hieronder vindt u belangrijke opmerkingen bij de methode Validate gebruiken.      -Locatie schemahints, zoals `xsi:schemaLocation` of `xsi:noNamespaceSchemaLocation` worden genegeerd.      -In line schema&quot;s worden genegeerd.      -Als schemavalidatiefouten tijdens het valideren van optreden de <xref:System.Xml.XmlDocument>gedeeltelijk wordt gevalideerd met het aantal knooppunten met het juiste type informatie en andere zonder.</xref:System.Xml.XmlDocument>      -Het validatieproces omvat controle voor beperkingen voor uniekheid en verwijzing (`xs:ID`, `xs:IDREF`, `xs:key`, `xs:keyref`, en `xs:unique`)."
  example:
  - "The following example illustrates use of the Validate method. The example creates an <xref:System.Xml.XmlDocument> that contains an associated XSD schema using the <xref:System.Xml.XmlReaderSettings> and <xref:System.Xml.XmlReader> objects. The example then uses the <xref:System.Xml.XPath.XPathNavigator> class to incorrectly modify the typed value of an element in the XML document generating a schema validation error.  \n  \n [!code-cs[XPathValidation#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_19_1.cs)]\n [!code-cpp[XPathValidation#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_19_1.cpp)]\n [!code-vb[XPathValidation#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_19_1.vb)]  \n  \n The example takes the `contosoBooks.xml` and `contosoBooks.xsd` files as input.  \n  \n [!code-xml[XPathXMLExamples#2](~/add/codesnippet/xml/m-system.xml.xmldocument_19_2.xml)]  \n  \n [!code-xml[XPathXMLExamples#3](~/add/codesnippet/xml/m-system.xml.xmldocument_19_3.xsd)]"
  syntax:
    content: public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler);
    parameters:
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "De <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> -object dat u informatie over het schema Validatiewaarschuwingen en fouten ontvangt."
  overload: System.Xml.XmlDocument.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Een schema validatie-gebeurtenis is opgetreden en er geen <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> object opgegeven."
  platform:
  - net462
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  id: Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: Validate(ValidationEventHandler,XmlNode)
  nameWithType: XmlDocument.Validate(ValidationEventHandler,XmlNode)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler,XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Valideert de <xref href=&quot;System.Xml.XmlNode&quot;> </xref> object dat is opgegeven op basis van de XML-Schema Definition Language (XSD) schema&quot;s in de <xref:System.Xml.XmlDocument.Schemas*>eigenschap.</xref:System.Xml.XmlDocument.Schemas*>"
  remarks: "De methode Validate valideert de XML-gegevens in de <xref:System.Xml.XmlNode>object tegen de schema&quot;s die zijn opgenomen de <xref:System.Xml.XmlDocument.Schemas%2A>eigenschap.</xref:System.Xml.XmlDocument.Schemas%2A> </xref:System.Xml.XmlNode> De methode Validate voert infoset uitdiepen. In het bijzonder na een succesvolle validatie schema standaardwaarden worden toegepast, tekstwaarden worden geconverteerd naar atomic waarden zo nodig en type-informatie is gekoppeld aan gevalideerde informatie-items. Het resultaat is een eerder niet getypeerde XML-substructuur in de <xref:System.Xml.XmlDocument>vervangen door een getypeerde substructuur.</xref:System.Xml.XmlDocument>       Hieronder vindt u belangrijke opmerkingen bij de methode Validate gebruiken.      -Locatie schemahints, zoals `xsi:schemaLocation` of `xsi:noNamespaceSchemaLocation` worden genegeerd.      -In line schema&quot;s worden genegeerd.      -Als schemavalidatiefouten tijdens het valideren van optreden de <xref:System.Xml.XmlDocument>gedeeltelijk wordt gevalideerd met het aantal knooppunten met het juiste type informatie en andere zonder.</xref:System.Xml.XmlDocument>       Als het knooppunt valideren van het hoofdknooppunt, het validatieproces omvat controle voor beperkingen voor uniekheid en verwijzing (`xs:ID`, `xs:IDREF`, `xs:key`, `xs:keyref`, en `xs:unique`); anders beperkingen voor uniekheid en verwijzing zijn weggelaten."
  example:
  - For an example of the Validate method, see the <xref:System.Xml.XmlDocument.Validate%2A> method.
  syntax:
    content: public void Validate (System.Xml.Schema.ValidationEventHandler validationEventHandler, System.Xml.XmlNode nodeToValidate);
    parameters:
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "De <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> -object dat u informatie over het schema Validatiewaarschuwingen en fouten ontvangt."
    - id: nodeToValidate
      type: System.Xml.XmlNode
      description: "De <xref href=&quot;System.Xml.XmlNode&quot;> </xref> object is gemaakt op basis van een <xref href=&quot;System.Xml.XmlDocument&quot;> </xref> om te valideren."
  overload: System.Xml.XmlDocument.Validate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <xref href=&quot;System.Xml.XmlNode&quot;> </xref> parameter van het object is niet gemaakt vanuit een <xref href=&quot;System.Xml.XmlDocument&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De <xref href=&quot;System.Xml.XmlNode&quot;> </xref> parameter van het object is niet een element, kenmerk, documentfragment of het hoofdknooppunt."
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Een schema validatie-gebeurtenis is opgetreden en er geen <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> object opgegeven."
  platform:
  - net462
- uid: System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  id: WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlDocument.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteContentTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hiermee slaat u alle onderliggende elementen van de <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> knooppunt naar de opgegeven <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Deze methode is een Microsoft-extensie aan het Document Object Model (DOM). Het is functioneel equivalent met de <xref:System.Xml.XmlDocument.InnerXml%2A>eigenschap.</xref:System.Xml.XmlDocument.InnerXml%2A>       De <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>eigenschap bepaalt de codering die is geschreven.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Als de `Encoding` eigenschap heeft een waarde geen de `XmlDocument` zonder een codering kenmerk wordt geschreven."
  example:
  - "The following example displays the document onscreen.  \n  \n [!code-cs[Classic WebData XmlDocument.WriteContentTo Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_0_1.cs)]\n [!code-vb[Classic WebData XmlDocument.WriteContentTo Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_0_1.vb)]\n [!code-cpp[Classic WebData XmlDocument.WriteContentTo Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_0_1.cpp)]"
  syntax:
    content: public override void WriteContentTo (System.Xml.XmlWriter xw);
    parameters:
    - id: xw
      type: System.Xml.XmlWriter
      description: "De <xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> waarop u wilt opslaan."
  overload: System.Xml.XmlDocument.WriteContentTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: WriteTo(XmlWriter)
  nameWithType: XmlDocument.WriteTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Hiermee slaat u de <xref uid=&quot;langword_csharp_XmlDocument&quot; name=&quot;XmlDocument&quot; href=&quot;&quot;> </xref> knooppunt naar de opgegeven <xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "Deze methode is een Microsoft-extensie aan het Document Object Model (DOM). Het is functioneel equivalent met de <xref:System.Xml.XmlNode.OuterXml%2A>eigenschap.</xref:System.Xml.XmlNode.OuterXml%2A>       De <xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName>eigenschap bepaalt de codering die is geschreven.</xref:System.Xml.XmlDeclaration.Encoding%2A?displayProperty=fullName> Als de `Encoding` eigenschap heeft een waarde geen de `XmlDocument` zonder een codering kenmerk wordt geschreven."
  example:
  - "The following example displays the document onscreen.  \n  \n [!code-cpp[Classic WebData XmlDocument.WriteTo Example#1](~/add/codesnippet/cpp/m-system.xml.xmldocument_6_1.cpp)]\n [!code-vb[Classic WebData XmlDocument.WriteTo Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmldocument_6_1.vb)]\n [!code-cs[Classic WebData XmlDocument.WriteTo Example#1](~/add/codesnippet/csharp/m-system.xml.xmldocument_6_1.cs)]"
  syntax:
    content: public override void WriteTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "De <xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref> waarop u wilt opslaan."
  overload: System.Xml.XmlDocument.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlDocument.XmlResolver
  id: XmlResolver
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  name: XmlResolver
  nameWithType: XmlDocument.XmlResolver
  fullName: System.Xml.XmlDocument.XmlResolver
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "Stelt de <xref href=&quot;System.Xml.XmlResolver&quot;> </xref> moet worden gebruikt voor het omzetten van externe bronnen."
  remarks: "De `XmlResolver` DTD&quot;s laden of vouw entiteitverwijzingen kan worden gebruikt. Met behulp van de <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=fullName>eigenschap, kunt u referenties instellen op de `XmlResolver` voor toegang tot bronnen die zijn opgeslagen op een beveiligde bron.</xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=fullName>      -Als het document is niet geladen met behulp van een <xref:System.Xml.XmlReader>(dat wil zeggen, als deze is geladen met behulp van een stream, bestand, enzovoort) de `XmlResolver` op de `XmlDocument` wordt altijd gebruikt.</xref:System.Xml.XmlReader>      -Als het document is geladen met een <xref:System.Xml.XmlTextReader>, de omzetter op de `XmlTextReader` wordt gebruikt voor het omzetten van alle DTD-verwijzingen in het knooppunt DocumentType.</xref:System.Xml.XmlTextReader> De omzetter op de `XmlDocument` wordt gebruikt om uit te breiden entiteitverwijzingen.      -Als het document is geladen met een <xref:System.Xml.XmlValidatingReader>, de omzetter op de `XmlDocument` wordt nooit gebruikt.</xref:System.Xml.XmlValidatingReader>      -Als het document met een klasse die is geladen `XmlReader` en de `XmlReader` entiteiten kan niet worden omgezet (<xref:System.Xml.XmlReader.CanResolveEntity%2A> retourneert `false`), wordt de `XmlResolver` op de `XmlDocument` wordt gebruikt voor het omzetten van alle verwijzingen in het DocumentType-knooppunt en uit te breiden entiteitverwijzingen.</xref:System.Xml.XmlReader.CanResolveEntity%2A>      > [!NOTE] > Als de `XmlDocument` is geladen met een <xref:System.Xml.XmlReader>die gehad een `XmlResolver` instellen, de `XmlResolver` op de `XmlReader` is niet in het cachegeheugen van de `XmlDocument` nadat <xref:System.Xml.XmlDocument.Load%2A>is voltooid.</xref:System.Xml.XmlDocument.Load%2A> </xref:System.Xml.XmlReader>       Als deze eigenschap niet is ingesteld, bepaalt het vertrouwensniveau van de toepassing in versie 1.1 van.NET Framework, het standaardgedrag.       `Fully trusted code:`Het document maakt gebruik van een standaard <xref:System.Xml.XmlUrlResolver>met geen gebruikersgegevens.</xref:System.Xml.XmlUrlResolver> Als verificatie is vereist voor toegang tot de netwerkbron van een, gebruikt u de `XmlResolver` eigenschap om op te geven een `XmlResolver` met de vereiste referenties.       `Semi-trusted code:`De `XmlResolver` eigenschap is ingesteld op `null`. Externe bronnen niet is opgelost.       Voor meer informatie over beveiliging en de `XmlResolver` eigenschap, Zie [het omzetten van externe bronnen](~/add/includes/ajax-current-ext-md.md).       Deze eigenschap is een Microsoft-extensie aan het Document Object Model (DOM)."
  example:
  - "The following example loads an XML document which includes a reference to a DTD file. The `XmlResolver` property is used to set the credentials necessary to access the network resource.  \n  \n [!code-cpp[XmlDocument.XmlResolver#1](~/add/codesnippet/cpp/p-system.xml.xmldocument_9_1.cpp)]\n [!code-cs[XmlDocument.XmlResolver#1](~/add/codesnippet/csharp/p-system.xml.xmldocument_9_1.cs)]\n [!code-vb[XmlDocument.XmlResolver#1](~/add/codesnippet/visualbasic/p-system.xml.xmldocument_9_1.vb)]  \n  \n The example uses the following data files as input.  \n  \n `book5.xml`  \n  \n [!code-xml[XmlDocument.XmlResolver#2](~/add/codesnippet/xml/p-system.xml.xmldocument_9_2.xml)]  \n  \n `books.dtd`  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public virtual System.Xml.XmlResolver XmlResolver { set; }
    return:
      type: System.Xml.XmlResolver
      description: "The <xref uid=&quot;langword_csharp_XmlResolver&quot; name=&quot;XmlResolver&quot; href=&quot;&quot;></xref> to use.       Versie 1.1 van.NET Framework, de aanroeper moet volledig vertrouwd om op te geven een <xref uid=&quot;langword_csharp_XmlResolver&quot; name=&quot;XmlResolver&quot; href=&quot;&quot;> </xref>."
  overload: System.Xml.XmlDocument.XmlResolver*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "Deze eigenschap is ingesteld op <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> en een externe DTD of een entiteit is aangetroffen."
  platform:
  - net462
references:
- uid: System.Xml.XmlNode
  isExternal: false
  name: System.Xml.XmlNode
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.Xml.Schema.XmlSchemaValidationException
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaValidationException
  nameWithType: XmlSchemaValidationException
  fullName: System.Xml.Schema.XmlSchemaValidationException
- uid: System.Xml.XmlDocument.#ctor
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument()
  nameWithType: XmlDocument.XmlDocument()
  fullName: System.Xml.XmlDocument.XmlDocument()
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument(XmlImplementation)
  nameWithType: XmlDocument.XmlDocument(XmlImplementation)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlImplementation)
- uid: System.Xml.XmlImplementation
  parent: System.Xml
  isExternal: false
  name: XmlImplementation
  nameWithType: XmlImplementation
  fullName: System.Xml.XmlImplementation
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument(XmlNameTable)
  nameWithType: XmlDocument.XmlDocument(XmlNameTable)
  fullName: System.Xml.XmlDocument.XmlDocument(XmlNameTable)
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: true
  name: XmlNameTable
  nameWithType: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Xml.XmlDocument.BaseURI
  parent: System.Xml.XmlDocument
  isExternal: false
  name: BaseURI
  nameWithType: XmlDocument.BaseURI
  fullName: System.Xml.XmlDocument.BaseURI
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlDocument.CloneNode(System.Boolean)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlDocument.CloneNode(Boolean)
  fullName: System.Xml.XmlDocument.CloneNode(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlDocument.CreateAttribute(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute(String)
  nameWithType: XmlDocument.CreateAttribute(String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String)
- uid: System.Xml.XmlAttribute
  parent: System.Xml
  isExternal: false
  name: XmlAttribute
  nameWithType: XmlAttribute
  fullName: System.Xml.XmlAttribute
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute(String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String)
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute(String,String,String)
  nameWithType: XmlDocument.CreateAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateAttribute(String,String,String)
- uid: System.Xml.XmlDocument.CreateCDataSection(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateCDataSection(String)
  nameWithType: XmlDocument.CreateCDataSection(String)
  fullName: System.Xml.XmlDocument.CreateCDataSection(String)
- uid: System.Xml.XmlCDataSection
  parent: System.Xml
  isExternal: false
  name: XmlCDataSection
  nameWithType: XmlCDataSection
  fullName: System.Xml.XmlCDataSection
- uid: System.Xml.XmlDocument.CreateComment(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateComment(String)
  nameWithType: XmlDocument.CreateComment(String)
  fullName: System.Xml.XmlDocument.CreateComment(String)
- uid: System.Xml.XmlComment
  parent: System.Xml
  isExternal: false
  name: XmlComment
  nameWithType: XmlComment
  fullName: System.Xml.XmlComment
- uid: System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDefaultAttribute(String,String,String)
  nameWithType: XmlDocument.CreateDefaultAttribute(String,String,String)
  fullName: System.Xml.XmlDocument.CreateDefaultAttribute(String,String,String)
- uid: System.Xml.XmlDocument.CreateDocumentFragment
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentFragment()
  nameWithType: XmlDocument.CreateDocumentFragment()
  fullName: System.Xml.XmlDocument.CreateDocumentFragment()
- uid: System.Xml.XmlDocumentFragment
  parent: System.Xml
  isExternal: false
  name: XmlDocumentFragment
  nameWithType: XmlDocumentFragment
  fullName: System.Xml.XmlDocumentFragment
- uid: System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentType(String,String,String,String)
  nameWithType: XmlDocument.CreateDocumentType(String,String,String,String)
  fullName: System.Xml.XmlDocument.CreateDocumentType(String,String,String,String)
- uid: System.Xml.XmlDocumentType
  parent: System.Xml
  isExternal: false
  name: XmlDocumentType
  nameWithType: XmlDocumentType
  fullName: System.Xml.XmlDocumentType
- uid: System.Xml.XmlDocument.CreateElement(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement(String)
  nameWithType: XmlDocument.CreateElement(String)
  fullName: System.Xml.XmlDocument.CreateElement(String)
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement(String,String)
  nameWithType: XmlDocument.CreateElement(String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String)
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement(String,String,String)
  nameWithType: XmlDocument.CreateElement(String,String,String)
  fullName: System.Xml.XmlDocument.CreateElement(String,String,String)
- uid: System.Xml.XmlDocument.CreateEntityReference(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateEntityReference(String)
  nameWithType: XmlDocument.CreateEntityReference(String)
  fullName: System.Xml.XmlDocument.CreateEntityReference(String)
- uid: System.Xml.XmlEntityReference
  parent: System.Xml
  isExternal: false
  name: XmlEntityReference
  nameWithType: XmlEntityReference
  fullName: System.Xml.XmlEntityReference
- uid: System.Xml.XmlDocument.CreateNavigator
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNavigator()
  nameWithType: XmlDocument.CreateNavigator()
  fullName: System.Xml.XmlDocument.CreateNavigator()
- uid: System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNavigator(XmlNode)
  nameWithType: XmlDocument.CreateNavigator(XmlNode)
  fullName: System.Xml.XmlDocument.CreateNavigator(XmlNode)
- uid: System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode(String,String,String)
  nameWithType: XmlDocument.CreateNode(String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(String,String,String)
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode(XmlNodeType,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String)
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: true
  name: XmlNodeType
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode(XmlNodeType,String,String,String)
  nameWithType: XmlDocument.CreateNode(XmlNodeType,String,String,String)
  fullName: System.Xml.XmlDocument.CreateNode(XmlNodeType,String,String,String)
- uid: System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateProcessingInstruction(String,String)
  nameWithType: XmlDocument.CreateProcessingInstruction(String,String)
  fullName: System.Xml.XmlDocument.CreateProcessingInstruction(String,String)
- uid: System.Xml.XmlProcessingInstruction
  parent: System.Xml
  isExternal: false
  name: XmlProcessingInstruction
  nameWithType: XmlProcessingInstruction
  fullName: System.Xml.XmlProcessingInstruction
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateSignificantWhitespace(String)
  nameWithType: XmlDocument.CreateSignificantWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateSignificantWhitespace(String)
- uid: System.Xml.XmlSignificantWhitespace
  parent: System.Xml
  isExternal: false
  name: XmlSignificantWhitespace
  nameWithType: XmlSignificantWhitespace
  fullName: System.Xml.XmlSignificantWhitespace
- uid: System.Xml.XmlDocument.CreateTextNode(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateTextNode(String)
  nameWithType: XmlDocument.CreateTextNode(String)
  fullName: System.Xml.XmlDocument.CreateTextNode(String)
- uid: System.Xml.XmlText
  parent: System.Xml
  isExternal: false
  name: XmlText
  nameWithType: XmlText
  fullName: System.Xml.XmlText
- uid: System.Xml.XmlDocument.CreateWhitespace(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateWhitespace(String)
  nameWithType: XmlDocument.CreateWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateWhitespace(String)
- uid: System.Xml.XmlWhitespace
  parent: System.Xml
  isExternal: false
  name: XmlWhitespace
  nameWithType: XmlWhitespace
  fullName: System.Xml.XmlWhitespace
- uid: System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateXmlDeclaration(String,String,String)
  nameWithType: XmlDocument.CreateXmlDeclaration(String,String,String)
  fullName: System.Xml.XmlDocument.CreateXmlDeclaration(String,String,String)
- uid: System.Xml.XmlDeclaration
  parent: System.Xml
  isExternal: false
  name: XmlDeclaration
  nameWithType: XmlDeclaration
  fullName: System.Xml.XmlDeclaration
- uid: System.Xml.XmlDocument.DocumentElement
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentElement
  nameWithType: XmlDocument.DocumentElement
  fullName: System.Xml.XmlDocument.DocumentElement
- uid: System.Xml.XmlDocument.DocumentType
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentType
  nameWithType: XmlDocument.DocumentType
  fullName: System.Xml.XmlDocument.DocumentType
- uid: System.Xml.XmlDocument.GetElementById(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementById(String)
  nameWithType: XmlDocument.GetElementById(String)
  fullName: System.Xml.XmlDocument.GetElementById(String)
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: XmlDocument.GetElementsByTagName(String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementsByTagName(String,String)
  nameWithType: XmlDocument.GetElementsByTagName(String,String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(String,String)
- uid: System.Xml.XmlDocument.Implementation
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Implementation
  nameWithType: XmlDocument.Implementation
  fullName: System.Xml.XmlDocument.Implementation
- uid: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ImportNode(XmlNode,Boolean)
  nameWithType: XmlDocument.ImportNode(XmlNode,Boolean)
  fullName: System.Xml.XmlDocument.ImportNode(XmlNode,Boolean)
- uid: System.Xml.XmlDocument.InnerText
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerText
  nameWithType: XmlDocument.InnerText
  fullName: System.Xml.XmlDocument.InnerText
- uid: System.Xml.XmlDocument.InnerXml
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerXml
  nameWithType: XmlDocument.InnerXml
  fullName: System.Xml.XmlDocument.InnerXml
- uid: System.Xml.XmlDocument.IsReadOnly
  parent: System.Xml.XmlDocument
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlDocument.IsReadOnly
  fullName: System.Xml.XmlDocument.IsReadOnly
- uid: System.Xml.XmlDocument.Load(System.IO.Stream)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(Stream)
  nameWithType: XmlDocument.Load(Stream)
  fullName: System.Xml.XmlDocument.Load(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.XmlDocument.Load(System.IO.TextReader)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(TextReader)
  nameWithType: XmlDocument.Load(TextReader)
  fullName: System.Xml.XmlDocument.Load(TextReader)
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Xml.XmlDocument.Load(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(String)
  nameWithType: XmlDocument.Load(String)
  fullName: System.Xml.XmlDocument.Load(String)
- uid: System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XmlDocument.Load(XmlReader)
  fullName: System.Xml.XmlDocument.Load(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.XmlDocument.LoadXml(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LoadXml(String)
  nameWithType: XmlDocument.LoadXml(String)
  fullName: System.Xml.XmlDocument.LoadXml(String)
- uid: System.Xml.XmlDocument.LocalName
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LocalName
  nameWithType: XmlDocument.LocalName
  fullName: System.Xml.XmlDocument.LocalName
- uid: System.Xml.XmlDocument.Name
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Name
  nameWithType: XmlDocument.Name
  fullName: System.Xml.XmlDocument.Name
- uid: System.Xml.XmlDocument.NameTable
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NameTable
  nameWithType: XmlDocument.NameTable
  fullName: System.Xml.XmlDocument.NameTable
- uid: System.Xml.XmlDocument.NodeChanged
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeChanged
  nameWithType: XmlDocument.NodeChanged
  fullName: System.Xml.XmlDocument.NodeChanged
- uid: System.Xml.XmlNodeChangedEventHandler
  parent: System.Xml
  isExternal: false
  name: XmlNodeChangedEventHandler
  nameWithType: XmlNodeChangedEventHandler
  fullName: System.Xml.XmlNodeChangedEventHandler
- uid: System.Xml.XmlDocument.NodeChanging
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeChanging
  nameWithType: XmlDocument.NodeChanging
  fullName: System.Xml.XmlDocument.NodeChanging
- uid: System.Xml.XmlDocument.NodeInserted
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeInserted
  nameWithType: XmlDocument.NodeInserted
  fullName: System.Xml.XmlDocument.NodeInserted
- uid: System.Xml.XmlDocument.NodeInserting
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeInserting
  nameWithType: XmlDocument.NodeInserting
  fullName: System.Xml.XmlDocument.NodeInserting
- uid: System.Xml.XmlDocument.NodeRemoved
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeRemoved
  nameWithType: XmlDocument.NodeRemoved
  fullName: System.Xml.XmlDocument.NodeRemoved
- uid: System.Xml.XmlDocument.NodeRemoving
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeRemoving
  nameWithType: XmlDocument.NodeRemoving
  fullName: System.Xml.XmlDocument.NodeRemoving
- uid: System.Xml.XmlDocument.NodeType
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeType
  nameWithType: XmlDocument.NodeType
  fullName: System.Xml.XmlDocument.NodeType
- uid: System.Xml.XmlDocument.OwnerDocument
  parent: System.Xml.XmlDocument
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlDocument.OwnerDocument
  fullName: System.Xml.XmlDocument.OwnerDocument
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml.XmlDocument.ParentNode
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ParentNode
  nameWithType: XmlDocument.ParentNode
  fullName: System.Xml.XmlDocument.ParentNode
- uid: System.Xml.XmlDocument.PreserveWhitespace
  parent: System.Xml.XmlDocument
  isExternal: false
  name: PreserveWhitespace
  nameWithType: XmlDocument.PreserveWhitespace
  fullName: System.Xml.XmlDocument.PreserveWhitespace
- uid: System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ReadNode(XmlReader)
  nameWithType: XmlDocument.ReadNode(XmlReader)
  fullName: System.Xml.XmlDocument.ReadNode(XmlReader)
- uid: System.Xml.XmlDocument.Save(System.IO.Stream)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(Stream)
  nameWithType: XmlDocument.Save(Stream)
  fullName: System.Xml.XmlDocument.Save(Stream)
- uid: System.Xml.XmlDocument.Save(System.IO.TextWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(TextWriter)
  nameWithType: XmlDocument.Save(TextWriter)
  fullName: System.Xml.XmlDocument.Save(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Xml.XmlDocument.Save(System.String)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(String)
  nameWithType: XmlDocument.Save(String)
  fullName: System.Xml.XmlDocument.Save(String)
- uid: System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save(XmlWriter)
  nameWithType: XmlDocument.Save(XmlWriter)
  fullName: System.Xml.XmlDocument.Save(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.XmlDocument.SchemaInfo
  parent: System.Xml.XmlDocument
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlDocument.SchemaInfo
  fullName: System.Xml.XmlDocument.SchemaInfo
- uid: System.Xml.Schema.IXmlSchemaInfo
  parent: System.Xml.Schema
  isExternal: false
  name: IXmlSchemaInfo
  nameWithType: IXmlSchemaInfo
  fullName: System.Xml.Schema.IXmlSchemaInfo
- uid: System.Xml.XmlDocument.Schemas
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Schemas
  nameWithType: XmlDocument.Schemas
  fullName: System.Xml.XmlDocument.Schemas
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Validate(ValidationEventHandler)
  nameWithType: XmlDocument.Validate(ValidationEventHandler)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler)
- uid: System.Xml.Schema.ValidationEventHandler
  parent: System.Xml.Schema
  isExternal: false
  name: ValidationEventHandler
  nameWithType: ValidationEventHandler
  fullName: System.Xml.Schema.ValidationEventHandler
- uid: System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Validate(ValidationEventHandler,XmlNode)
  nameWithType: XmlDocument.Validate(ValidationEventHandler,XmlNode)
  fullName: System.Xml.XmlDocument.Validate(ValidationEventHandler,XmlNode)
- uid: System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlDocument.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteContentTo(XmlWriter)
- uid: System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteTo(XmlWriter)
  nameWithType: XmlDocument.WriteTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteTo(XmlWriter)
- uid: System.Xml.XmlDocument.XmlResolver
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlResolver
  nameWithType: XmlDocument.XmlResolver
  fullName: System.Xml.XmlDocument.XmlResolver
- uid: System.Xml.XmlResolver
  parent: System.Xml
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
- uid: System.Xml.XmlDocument.#ctor*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument.XmlDocument
- uid: System.Xml.XmlDocument.BaseURI*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: BaseURI
  nameWithType: XmlDocument.BaseURI
- uid: System.Xml.XmlDocument.CloneNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CloneNode
  nameWithType: XmlDocument.CloneNode
- uid: System.Xml.XmlDocument.CreateAttribute*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateAttribute
  nameWithType: XmlDocument.CreateAttribute
- uid: System.Xml.XmlDocument.CreateCDataSection*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateCDataSection
  nameWithType: XmlDocument.CreateCDataSection
- uid: System.Xml.XmlDocument.CreateComment*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateComment
  nameWithType: XmlDocument.CreateComment
- uid: System.Xml.XmlDocument.CreateDefaultAttribute*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDefaultAttribute
  nameWithType: XmlDocument.CreateDefaultAttribute
- uid: System.Xml.XmlDocument.CreateDocumentFragment*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentFragment
  nameWithType: XmlDocument.CreateDocumentFragment
- uid: System.Xml.XmlDocument.CreateDocumentType*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateDocumentType
  nameWithType: XmlDocument.CreateDocumentType
- uid: System.Xml.XmlDocument.CreateElement*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateElement
  nameWithType: XmlDocument.CreateElement
- uid: System.Xml.XmlDocument.CreateEntityReference*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateEntityReference
  nameWithType: XmlDocument.CreateEntityReference
- uid: System.Xml.XmlDocument.CreateNavigator*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNavigator
  nameWithType: XmlDocument.CreateNavigator
- uid: System.Xml.XmlDocument.CreateNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateNode
  nameWithType: XmlDocument.CreateNode
- uid: System.Xml.XmlDocument.CreateProcessingInstruction*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateProcessingInstruction
  nameWithType: XmlDocument.CreateProcessingInstruction
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateSignificantWhitespace
  nameWithType: XmlDocument.CreateSignificantWhitespace
- uid: System.Xml.XmlDocument.CreateTextNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateTextNode
  nameWithType: XmlDocument.CreateTextNode
- uid: System.Xml.XmlDocument.CreateWhitespace*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateWhitespace
  nameWithType: XmlDocument.CreateWhitespace
- uid: System.Xml.XmlDocument.CreateXmlDeclaration*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: CreateXmlDeclaration
  nameWithType: XmlDocument.CreateXmlDeclaration
- uid: System.Xml.XmlDocument.DocumentElement*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentElement
  nameWithType: XmlDocument.DocumentElement
- uid: System.Xml.XmlDocument.DocumentType*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: DocumentType
  nameWithType: XmlDocument.DocumentType
- uid: System.Xml.XmlDocument.GetElementById*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementById
  nameWithType: XmlDocument.GetElementById
- uid: System.Xml.XmlDocument.GetElementsByTagName*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: GetElementsByTagName
  nameWithType: XmlDocument.GetElementsByTagName
- uid: System.Xml.XmlDocument.Implementation*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Implementation
  nameWithType: XmlDocument.Implementation
- uid: System.Xml.XmlDocument.ImportNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ImportNode
  nameWithType: XmlDocument.ImportNode
- uid: System.Xml.XmlDocument.InnerText*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerText
  nameWithType: XmlDocument.InnerText
- uid: System.Xml.XmlDocument.InnerXml*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: InnerXml
  nameWithType: XmlDocument.InnerXml
- uid: System.Xml.XmlDocument.IsReadOnly*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: IsReadOnly
  nameWithType: XmlDocument.IsReadOnly
- uid: System.Xml.XmlDocument.Load*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Load
  nameWithType: XmlDocument.Load
- uid: System.Xml.XmlDocument.LoadXml*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LoadXml
  nameWithType: XmlDocument.LoadXml
- uid: System.Xml.XmlDocument.LocalName*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: LocalName
  nameWithType: XmlDocument.LocalName
- uid: System.Xml.XmlDocument.Name*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Name
  nameWithType: XmlDocument.Name
- uid: System.Xml.XmlDocument.NameTable*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NameTable
  nameWithType: XmlDocument.NameTable
- uid: System.Xml.XmlDocument.NodeType*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: NodeType
  nameWithType: XmlDocument.NodeType
- uid: System.Xml.XmlDocument.OwnerDocument*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlDocument.OwnerDocument
- uid: System.Xml.XmlDocument.ParentNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ParentNode
  nameWithType: XmlDocument.ParentNode
- uid: System.Xml.XmlDocument.PreserveWhitespace*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: PreserveWhitespace
  nameWithType: XmlDocument.PreserveWhitespace
- uid: System.Xml.XmlDocument.ReadNode*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: ReadNode
  nameWithType: XmlDocument.ReadNode
- uid: System.Xml.XmlDocument.Save*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Save
  nameWithType: XmlDocument.Save
- uid: System.Xml.XmlDocument.SchemaInfo*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlDocument.SchemaInfo
- uid: System.Xml.XmlDocument.Schemas*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Schemas
  nameWithType: XmlDocument.Schemas
- uid: System.Xml.XmlDocument.Validate*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: Validate
  nameWithType: XmlDocument.Validate
- uid: System.Xml.XmlDocument.WriteContentTo*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteContentTo
  nameWithType: XmlDocument.WriteContentTo
- uid: System.Xml.XmlDocument.WriteTo*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: WriteTo
  nameWithType: XmlDocument.WriteTo
- uid: System.Xml.XmlDocument.XmlResolver*
  parent: System.Xml.XmlDocument
  isExternal: false
  name: XmlResolver
  nameWithType: XmlDocument.XmlResolver
