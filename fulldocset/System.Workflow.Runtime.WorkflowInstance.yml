### YamlMime:ManagedReference
items:
- uid: System.Workflow.Runtime.WorkflowInstance
  id: WorkflowInstance
  children:
  - System.Workflow.Runtime.WorkflowInstance.Abort
  - System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  - System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  - System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  - System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  - System.Workflow.Runtime.WorkflowInstance.GetHashCode
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  - System.Workflow.Runtime.WorkflowInstance.InstanceId
  - System.Workflow.Runtime.WorkflowInstance.Load
  - System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  - System.Workflow.Runtime.WorkflowInstance.Resume
  - System.Workflow.Runtime.WorkflowInstance.Start
  - System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  - System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  - System.Workflow.Runtime.WorkflowInstance.TryUnload
  - System.Workflow.Runtime.WorkflowInstance.Unload
  - System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  langs:
  - csharp
  name: WorkflowInstance
  nameWithType: WorkflowInstance
  fullName: System.Workflow.Runtime.WorkflowInstance
  type: Class
  summary: "Vertegenwoordigt een workflowexemplaar."
  remarks: "> [!NOTE] >  [!INCLUDE[DeprecatedContent](~/add/includes/ajax-current-ext-md.md)]De WorkflowInstance met de klasse wordt methoden en eigenschappen die kunnen worden gebruikt voor het beheren van de uitvoering van een workflowexemplaar; het is in wezen een proxy voor het werkelijke werkstroomexemplaar gebruikt door de workflow runtime engine. Een host of een service kunt opdracht geven de workflow runtime engine acties uitvoeren op een workflowexemplaar door het aanroepen van de juiste methoden die zijn opgenomen in de WorkflowInstance-klasse.  Als de gevraagde bewerking niet geldig, bijvoorbeeld is als de host aanroept <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>op een workflowexemplaar die al is voltooid, verhoogt de workflow runtime engine een juiste uitzondering.</xref:System.Workflow.Runtime.WorkflowInstance.Load%2A>      > [!NOTE] > Als een workflowexemplaar meer reageert, omdat een aanroep van de host-toepassing geen retourneert, de enige manier om het herstellen van het exemplaar is opnieuw opstarten van de runtime. Echter, als het exemplaar geforceerd verwijderd is, afgebroken of onderbroken, deze kan worden overgenomen door het aanroepen van de <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName>methode.</xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates how you can create and start a WorkflowInstance in a workflow host. The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a WorkflowInstance object. The code initializes WorkflowInstance by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it. The WorkflowInstance is started with the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method call.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#260](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#260)]\n [!code-vb[WF_Samples#260](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#260)]"
  syntax:
    content: >-
      [System.Obsolete("The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*")]

      public sealed class WorkflowInstance
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Abort
  id: Abort
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Abort()
  nameWithType: WorkflowInstance.Abort()
  fullName: System.Workflow.Runtime.WorkflowInstance.Abort()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Annuleert het workflowexemplaar."
  remarks: "Het workflowexemplaar is afgebroken in een synchrone manier; dat wil zeggen, retourneert de methode nadat het workflowexemplaar is afgebroken. De workflow runtime engine ongeldig exemplaar van de workflow in het geheugen en wist u de <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>.</xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A> Als een permanente service door uw workflowexemplaar is gebruikt, wordt al het werk uitgevoerd sinds het laatste punt in de persistentie is weggegooid. Nadat het exemplaar van de workflow annuleert, wordt de workflow runtime engine gegeven de <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted>gebeurtenis.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> U kunt aanroepen <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>opnieuw laden van het workflowexemplaar en starten van het laatste punt in de persistentie.</xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A>       `Abort`verschilt van <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>in dat hoewel `Abort` gewoon in het geheugen van het werkstroomexemplaar wordt gewist en opnieuw te starten vanaf het laatste punt van de persistentie beëindigen in het geheugen van het werkstroomexemplaar wordt gewist en de service persistentie informeert dat het exemplaar is verwijderd uit het geheugen.</xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> Voor de <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, dit betekent dat alle statusinformatie voor dat betreffende werkstroomexemplaar wordt verwijderd uit de database bij beëindiging.</xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> Niet mogelijk om opnieuw te laden van het workflowexemplaar vanaf een eerder opgeslagen persistentie-punt."
  example:
  - "The following example demonstrates calling Abort on a workflow instance of type Workflow1.  \n  \n [!code-cs[WF_Samples#13](~/add/codesnippet/csharp/wf_snippets/snippets.cs#13)]\n [!code-vb[WF_Samples#13](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#13)]"
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Abort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De workflow runtime engine wordt niet uitgevoerd."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  id: ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: ApplyWorkflowChanges(WorkflowChanges)
  nameWithType: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  fullName: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Hiermee past u wijzigingen aan het werkstroomexemplaar dat is opgegeven door de <xref href=&quot;System.Workflow.ComponentModel.WorkflowChanges&quot;> </xref> object."
  remarks: "Als het werkstroomexemplaar is niet wordt onderbroken, wordt het exemplaar tijdelijk onderbroken met de workflow runtime engine voordat u de wijzigingen toepast."
  example:
  - "The following example demonstrates calling ApplyWorkflowChanges to a <xref:System.Workflow.Runtime.WorkflowInstance> object.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c).  \n  \n [!code-cs[WF_Samples#89](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#89)]\n [!code-vb[WF_Samples#89](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#89)]"
  syntax:
    content: public void ApplyWorkflowChanges (System.Workflow.ComponentModel.WorkflowChanges workflowChanges);
    parameters:
    - id: workflowChanges
      type: System.Workflow.ComponentModel.WorkflowChanges
      description: "Een <xref href=&quot;System.Workflow.ComponentModel.WorkflowChanges&quot;> </xref> dynamische updates voor het werkstroomexemplaar opgeven."
  overload: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De workflow runtime engine wordt niet uitgevoerd."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  id: EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: EnqueueItem(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Plaatst een bericht in de wachtrij opgegeven workflow wordt synchroon."
  remarks: "Verzendt de `item` naar de opgegeven <xref:System.Workflow.Runtime.WorkflowQueue>.</xref:System.Workflow.Runtime.WorkflowQueue> Als u worden gewaarschuwd wilt wanneer het bericht heeft ontvangen, kunt u implementeren <xref:System.Workflow.Runtime.IPendingWork>in uw service aan en geeft u een `workItem` en een <xref:System.Workflow.Runtime.IPendingWork>EnqueueItem-object.</xref:System.Workflow.Runtime.IPendingWork> </xref:System.Workflow.Runtime.IPendingWork> Als u niet dat deze kennisgeving wilt, kunt u een null-verwijzing doorgeven (`Nothing` in Visual Basic) voor `pendingWork` en `workItem`.       Als u deze methode met een werkstroom van de machine status, krijgt u mogelijk een uitzondering met het bericht &quot;wachtrij {0} is niet ingeschakeld.&quot; Dit gebeurt wanneer de huidige status van de statusmachine niet weet hoe een specifieke gebeurtenis te verwerken. Bijvoorbeeld wanneer bepaalde status moet hebben dan de huidige status bevat de <xref:System.Workflow.Activities.EventDrivenActivity>die bevat de <xref:System.Workflow.Activities.HandleExternalEventActivity>die wordt vertegenwoordigd door de wachtrij {0}.</xref:System.Workflow.Activities.HandleExternalEventActivity> </xref:System.Workflow.Activities.EventDrivenActivity>      > [!NOTE] > Berichten niet worden gegarandeerd wordt ontvangen door het workflowexemplaar in de volgorde waarin ze zijn verzonden. Bijvoorbeeld, als de ontvangst van een bericht in een bestaand queue (een wachtrij) oorzaken een werkstroom te maken van een andere wachtrij wachtrij B, die vervolgens naar een ander bericht luistert na het eerste bericht is verzonden, is het mogelijk dat het tweede bericht eerst binnenkomen wordt en niet zullen worden ontvangen als gevolg van de wachtrij wordt nog niet gemaakt. Om te voorkomen dat dit probleem, de tweede bericht niet moet worden verzonden tot de aanwezigheid van de tweede wachtrij is geverifieerd (met behulp van <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>.)</xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>"
  example:
  - "The following code example demonstrates how to use EnqueueItem. When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called. It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the EnqueueItem method along with the name of the event queue item.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#261](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#261)]\n [!code-vb[WF_Samples#261](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#261)]"
  syntax:
    content: public void EnqueueItem (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "De naam van de <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
    - id: item
      type: System.Object
      description: "Het object in de wachtrij plaatsen."
    - id: pendingWork
      type: System.Workflow.Runtime.IPendingWork
      description: "Een <xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> waarmee de afzender om te worden geïnformeerd wanneer `item` wordt geleverd."
    - id: workItem
      type: System.Object
      description: "Een object dat moet worden doorgegeven aan de <xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> methoden."
  overload: System.Workflow.Runtime.WorkflowInstance.EnqueueItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>queueName</code>is een null-verwijzing (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> in Visual Basic)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De workflow runtime engine wordt niet uitgevoerd.       - of - de <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> opgegeven door <code> queueName </code> bestaat niet.       - of - de <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> opgegeven door <code> queueName </code> is niet ingeschakeld."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  id: EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Plaatst een bericht in de wachtrij opgegeven werkstroom wanneer de werkstroom niet actief is. EnqueueItemOnIdle wacht totdat de werkstroom is een niet-actieve point- and -enqueues nadat u hebt gecontroleerd dat de planner werkstroom inactief is bereikt (dat wil zeggen, geen actieve bewerking wordt uitgevoerd)."
  remarks: "Wacht tot het workflowexemplaar naar inactief en stuurt vervolgens de `item` naar de opgegeven <xref:System.Workflow.Runtime.WorkflowQueue>.</xref:System.Workflow.Runtime.WorkflowQueue> Als u EnqueueItemOnIdle aanroept terwijl het werkstroomexemplaar is onderbroken, genereert de workflow runtime engine een <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> Als u worden gewaarschuwd wilt wanneer het bericht heeft ontvangen, kunt u implementeren <xref:System.Workflow.Runtime.IPendingWork>in uw service aan en geeft u een `workItem` en een <xref:System.Workflow.Runtime.IPendingWork>object dat moet <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>.</xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> </xref:System.Workflow.Runtime.IPendingWork> </xref:System.Workflow.Runtime.IPendingWork> Als u niet dat deze kennisgeving wilt, kunt u een null-verwijzing doorgeven (`Nothing` in Visual Basic) voor `pendingWork` en `workItem`.       Als u van deze methode met een werkstroom van de machine status gebruikmaakt, krijgt u mogelijk een uitzondering met het bericht &quot;Wachtrij {0} is niet ingeschakeld.&quot; Dit gebeurt wanneer de huidige status van de statusmachine niet weet hoe een specifieke gebeurtenis te verwerken. Bijvoorbeeld wanneer bepaalde status moet hebben dan de huidige status bevat de <xref:System.Workflow.Activities.EventDrivenActivity>die bevat de <xref:System.Workflow.Activities.HandleExternalEventActivity>die wordt vertegenwoordigd door de wachtrij {0}.</xref:System.Workflow.Activities.HandleExternalEventActivity> </xref:System.Workflow.Activities.EventDrivenActivity>"
  example:
  - "The following example demonstrates sending information to a workflow instance using the `EnqueueItemOnIdle` method. First, a WorkflowInstance object is created and started; next, an object that implements the <xref:System.Workflow.Runtime.IPendingWork> interface is created. `EnqueueItemOnIdle` is then called, passing in string values for the queue name, the enqueued item, and the work item to be passed to the methods of the pendingWork object.  \n  \n [!code-cs[WF_Samples#12](~/add/codesnippet/csharp/wf_snippets/snippets.cs#12)]\n [!code-vb[WF_Samples#12](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#12)]"
  syntax:
    content: public void EnqueueItemOnIdle (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);
    parameters:
    - id: queueName
      type: System.IComparable
      description: "De naam van de <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref>."
    - id: item
      type: System.Object
      description: "Het object in de wachtrij plaatsen."
    - id: pendingWork
      type: System.Workflow.Runtime.IPendingWork
      description: "Een <xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> waarmee de afzender om te worden geïnformeerd wanneer `item` wordt geleverd."
    - id: workItem
      type: System.Object
      description: "Een object dat moet worden doorgegeven aan de <xref href=&quot;System.Workflow.Runtime.IPendingWork&quot;> </xref> methoden."
  overload: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>queueName</code>is een null-verwijzing (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> in Visual Basic)."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De workflow runtime engine wordt niet uitgevoerd.       - of - exemplaar van de workflow is onderbroken.       - of - de <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> opgegeven door <code> queueName </code> bestaat niet.       - of - de <xref href=&quot;System.Workflow.Runtime.WorkflowQueue&quot;> </xref> opgegeven door <code> queueName </code> is niet ingeschakeld."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: WorkflowInstance.Equals(Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.Equals(Object)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Retourneert een waarde die aangeeft of het opgegeven object is gelijk aan de <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref>."
  remarks: "Het object moet een exemplaar van de <xref:System.Workflow.Runtime.WorkflowInstance>klasse en hebben de dezelfde <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>Als deze <xref:System.Workflow.Runtime.WorkflowInstance>.</xref:System.Workflow.Runtime.WorkflowInstance> </xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> </xref:System.Workflow.Runtime.WorkflowInstance>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Het object te vergelijken."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het opgegeven object gelijk aan dit is <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref>; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Workflow.Runtime.WorkflowInstance.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode
  id: GetHashCode
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: WorkflowInstance.GetHashCode()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetHashCode()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Retourneert de hash-code voor dit werkstroomexemplaar."
  remarks: "GetHashCode retourneert een hashcode op basis van de waarde van <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>.</xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "De hash-code voor deze <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref>."
  overload: System.Workflow.Runtime.WorkflowInstance.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  id: GetWorkflowDefinition
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowDefinition()
  nameWithType: WorkflowInstance.GetWorkflowDefinition()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Haalt de hoofdactiviteit voor dit werkstroomexemplaar."
  remarks: "U kunt de hoofdactiviteit door de activiteit van de werkstroom navigeren.       Deze methode is niet thread-veilig, zodat de aanroepen naar deze methode door de host synchroniseren moet."
  example:
  - "The following example demonstrates retrieving the workflow definition from a workflow instance.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c).  \n  \n [!code-cs[WF_Samples#86](~/add/codesnippet/csharp/wf_snippets/snippets1.cs#86)]\n [!code-vb[WF_Samples#86](~/add/codesnippet/visualbasic/wf_snippets/snippets1.vb#86)]"
  syntax:
    content: public System.Workflow.ComponentModel.Activity GetWorkflowDefinition ();
    parameters: []
    return:
      type: System.Workflow.ComponentModel.Activity
      description: "Een <xref href=&quot;System.Workflow.ComponentModel.Activity&quot;> </xref> object."
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  id: GetWorkflowNextTimerExpiration
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowNextTimerExpiration()
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Retourneert het volgende punt in tijd dat dit <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref> is gepland voor een timerbericht worden geleverd."
  remarks: ''
  example:
  - "The following example demonstrates using the GetWorkflowNextTimerExpiration method to determine if more workflow timer messages are enqueued. This example is from the WorkflowThreading SDK sample, from the Program.cs file. For more information, see [Workflow Threading Sample](http://msdn.microsoft.com/en-us/5b650be7-09fa-47db-a2f6-523dc8ea5ee9).  \n  \n [!code-cs[WF_Samples#284](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#284)]\n [!code-vb[WF_Samples#284](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#284)]"
  syntax:
    content: public DateTime GetWorkflowNextTimerExpiration ();
    parameters: []
    return:
      type: System.DateTime
      description: "Een datum / tijdwaarde die de volgende vertegenwoordigt <xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt*>tijd dit <xref href=&quot;System.Workflow.Runtime.WorkflowInstance&quot;> </xref> een timerbericht wordt bezorgd.</xref:System.Workflow.Runtime.TimerEventSubscription.ExpiresAt*>"
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  id: GetWorkflowQueueData
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: GetWorkflowQueueData()
  nameWithType: WorkflowInstance.GetWorkflowQueueData()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Hiermee wordt een verzameling <xref href=&quot;System.Workflow.Runtime.WorkflowQueueInfo&quot;> </xref> objecten die met de items die in behandeling en activiteiten voor de werkstroom wachtrijen geabonneerd die zijn gekoppeld aan dit werkstroomexemplaar van de."
  remarks: "Retourneert een verzameling van GetWorkflowQueueData <xref:System.Workflow.Runtime.WorkflowQueueInfo>objecten, die elk informatie over de status van een van de werkstroom wachtrijen die zijn gekoppeld aan dit werkstroomexemplaar van de bevat.</xref:System.Workflow.Runtime.WorkflowQueueInfo> <xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName>bevat de items in behandeling voor een <xref:System.Workflow.Runtime.WorkflowQueue>en <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName>bevat een lijst van de activiteiten die zijn geabonneerd op een <xref:System.Workflow.Runtime.WorkflowQueue>.</xref:System.Workflow.Runtime.WorkflowQueue> voor het artikel</xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName> </xref:System.Workflow.Runtime.WorkflowQueue></xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates how you can use the GetWorkflowQueueData method to obtain information about the state of all workflow queues associated with a <xref:System.Workflow.Runtime.WorkflowInstance> object. When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called. It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the GetWorkflowQueueData method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> method along with the name of the event queue item.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#261](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#261)]\n [!code-vb[WF_Samples#261](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#261)]"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo> GetWorkflowQueueData ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.Runtime.WorkflowQueueInfo}
      description: "Een &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; van <xref href=&quot;System.Workflow.Runtime.WorkflowQueueInfo&quot;> </xref> objecten."
  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De workflow runtime engine wordt niet uitgevoerd."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId
  id: InstanceId
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
  fullName: System.Workflow.Runtime.WorkflowInstance.InstanceId
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Hiermee wordt de unieke id voor het workflowexemplaar."
  remarks: "U kunt InstanceId gebruiken om te verwijzen naar het workflowexemplaar."
  example:
  - "The following code example demonstrates how you can use the InstanceId property to obtain information about a <xref:System.Workflow.Runtime.WorkflowInstance> object. The first code snippet creates a <xref:System.Workflow.Runtime.WorkflowInstance> variable named `instanceId`.  \n  \n [!code-cs[WF_Samples#210](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#210)]\n [!code-vb[WF_Samples#210](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#210)]  \n  \n The second snippet uses the InstanceId property as the first object in an `OrderEventArgs` constructor call when the `CallBackForApproval` method is called.  \n  \n This code example is part of the Listen SDK Sample from the OrderServiceImple.cs file. For more information, see [Listen Sample](http://msdn.microsoft.com/en-us/1cec0e82-7544-429f-b717-0fc25eb42b7f).  \n  \n [!code-cs[WF_Samples#211](~/add/codesnippet/csharp/wf_snippets/snippets19.cs#211)]\n [!code-vb[WF_Samples#211](~/add/codesnippet/visualbasic/wf_snippets/snippets19.vb#211)]"
  syntax:
    content: public Guid InstanceId { get; }
    return:
      type: System.Guid
      description: "De <xref:System.Guid>van het workflowexemplaar.</xref:System.Guid>"
  overload: System.Workflow.Runtime.WorkflowInstance.InstanceId*
  exceptions: []
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Load
  id: Load
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Load()
  nameWithType: WorkflowInstance.Load()
  fullName: System.Workflow.Runtime.WorkflowInstance.Load()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Een eerder verwijderde workflowexemplaar laadt."
  remarks: "Load is synchroon; Als het workflowexemplaar kan worden geladen, worden de laden worden geretourneerd nadat het werkstroomexemplaar is geladen in het geheugen en gepland door de workflow runtime engine. De runtime worden gegeven de <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>gebeurtenis nadat de service persistentie het workflowexemplaar in het geheugen is teruggezet, maar voordat de workflow runtime engine plant u het exemplaar.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded>"
  example:
  - "The following example demonstrates how to load a previously unloaded <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#10](~/add/codesnippet/csharp/wf_snippets/snippets.cs#10)]\n [!code-vb[WF_Samples#10](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#10)]"
  syntax:
    content: public void Load ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Load*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De workflow runtime engine wordt niet uitgevoerd."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  id: ReloadTrackingProfiles
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: ReloadTrackingProfiles()
  nameWithType: WorkflowInstance.ReloadTrackingProfiles()
  fullName: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Laad de tracerings-profielen voor dit werkstroomexemplaar."
  remarks: "De runtime-infrastructuur bijhouden laadt u opnieuw elk <xref:System.Workflow.Runtime.Tracking.TrackingProfile>voor dit werkstroomexemplaar van de die is gekoppeld aan de kanalen bijhouden.</xref:System.Workflow.Runtime.Tracking.TrackingProfile> Als deze nog niet in een onderbroken staat, wordt de werkstroom tijdelijk onderbroken door de runtime infrastructuur bijhouden terwijl de tracerings-profielen zijn geladen."
  syntax:
    content: public void ReloadTrackingProfiles ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De workflow runtime engine wordt niet uitgevoerd."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Resume
  id: Resume
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Resume()
  nameWithType: WorkflowInstance.Resume()
  fullName: System.Workflow.Runtime.WorkflowInstance.Resume()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "De uitvoering van een exemplaar van de eerder onderbroken werkstroom hervatten."
  remarks: "De host kunt aanroepen hervatten om door te hervatten van de uitvoering van een workflowexemplaar dat eerder is onderbroken. Als het werkstroomexemplaar is niet in de onderbroken status bevindt, wordt geen actie ondernomen. De runtime worden gegeven de <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed>gebeurtenis vlak voordat de uitvoering van het werkstroomexemplaar is hervat.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed>"
  example:
  - "The following example demonstrates calling Resume on a previously suspended workflow instance.  This example is from the Suspend and Terminate SDK sample.  For more information, see [Suspend and Terminate Sample](http://msdn.microsoft.com/en-us/f4dffa58-d01e-44fb-b5a1-3b283d2c4517).  \n  \n [!code-cs[WF_Samples#172](~/add/codesnippet/csharp/wf_snippets/snippets11.cs#172)]\n [!code-vb[WF_Samples#172](~/add/codesnippet/visualbasic/wf_snippets/snippets11.vb#172)]"
  syntax:
    content: public void Resume ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Resume*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De workflow runtime engine wordt niet uitgevoerd."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Start
  id: Start
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Start()
  nameWithType: WorkflowInstance.Start()
  fullName: System.Workflow.Runtime.WorkflowInstance.Start()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Hiermee start u de uitvoering van het workflowexemplaar."
  remarks: "Start aanroepen <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A>voor de hoofdactiviteit van dit werkstroomexemplaar.</xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> Als Start er een uitzondering optreedt, exemplaar van de workflow wordt beëindigd door het aanroepen van <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>met de <xref:System.Exception.Message%2A>eigenschap van de uitzondering is doorgegeven als de reden voor de beëindiging.</xref:System.Exception.Message%2A> </xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A>"
  example:
  - "The following code example demonstrates how you can use the Start method to start a <xref:System.Workflow.Runtime.WorkflowInstance> in a workflow host. The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object. It creates a <xref:System.Type> object and casts it to one of the workflow objects with which the host is associated. The code next initializes <xref:System.Workflow.Runtime.WorkflowInstance> by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it. The <xref:System.Workflow.Runtime.WorkflowInstance> is started with the Start method call.  \n  \n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \n  \n [!code-cs[WF_Samples#260](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#260)]\n [!code-vb[WF_Samples#260](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#260)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Start*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De workflow runtime engine wordt niet uitgevoerd.       - of - het werkstroomexemplaar is al gestart."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  id: Suspend(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Suspend(String)
  nameWithType: WorkflowInstance.Suspend(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Suspend(String)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Het werkstroomexemplaar onderbreekt."
  remarks: "Het werkstroomexemplaar is onderbroken op een synchrone manier. Als het werkstroomexemplaar al onderbroken is, wordt geen actie ondernomen; anders wordt de workflow runtime engine wordt onderbroken exemplaar van de workflow, verhoogt de <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended>gebeurtenis en geeft `reason` in een <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>.</xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs> </xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended>      > [!NOTE] > Stand-bymodus wordt niet verwijderd van het workflowexemplaar."
  example:
  - "The following code example demonstrates calling Suspend on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#9](~/add/codesnippet/csharp/wf_snippets/snippets.cs#9)]\n [!code-vb[WF_Samples#9](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#9)]"
  syntax:
    content: public void Suspend (string error);
    parameters:
    - id: error
      type: System.String
      description: "Een beschrijving van de reden voor het workflowexemplaar onderbreken."
  overload: System.Workflow.Runtime.WorkflowInstance.Suspend*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De workflow runtime engine wordt niet uitgevoerd."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  id: Terminate(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Terminate(String)
  nameWithType: WorkflowInstance.Terminate(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Terminate(String)
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Het werkstroomexemplaar beëindigt synchrone wijze."
  remarks: "Exemplaar van de workflow wordt beëindigd in een synchrone manier. De host roept beëindigen van het werkstroomexemplaar is beëindigd. De workflow runtime engine in het geheugen van het werkstroomexemplaar wordt gewist en de service persistentie informeert dat het exemplaar is verwijderd uit het geheugen. Voor de <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, dit betekent dat alle statusinformatie voor dat betreffende werkstroomexemplaar wordt verwijderd uit de database bij beëindiging.</xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService> Niet mogelijk om opnieuw te laden van het workflowexemplaar vanaf een eerder opgeslagen persistentie-punt.       Nadat in het geheugen van het werkstroomexemplaar is uitgeschakeld en de persistentie-service is op de hoogte van de beëindiging de `Terminate` methode verhoogt de <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>gebeurtenis en geeft `reason` in de <xref:System.Exception.Message%2A>eigenschap van een <xref:System.Workflow.ComponentModel.WorkflowTerminatedException>opgenomen in de <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>.</xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs> </xref:System.Workflow.ComponentModel.WorkflowTerminatedException> </xref:System.Exception.Message%2A> </xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated>       `Terminate`verschilt van <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A>Hiermee wist u dat bij het beëindigen in in het geheugen van het werkstroomexemplaar en informeert de service persistentie van de beëindiging `Abort` gewoon gewist het in het geheugen werkstroomexemplaar, die vervolgens opnieuw te vanaf het laatste punt in de persistentie starten.</xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A>"
  example:
  - "The following code example demonstrates calling Terminate on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#8](~/add/codesnippet/csharp/wf_snippets/snippets.cs#8)]\n [!code-vb[WF_Samples#8](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#8)]"
  syntax:
    content: public void Terminate (string error);
    parameters:
    - id: error
      type: System.String
      description: "Een beschrijving van de reden voor het exemplaar van de workflow wordt beëindigd."
  overload: System.Workflow.Runtime.WorkflowInstance.Terminate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De workflow runtime engine wordt niet uitgevoerd."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload
  id: TryUnload
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: TryUnload()
  nameWithType: WorkflowInstance.TryUnload()
  fullName: System.Workflow.Runtime.WorkflowInstance.TryUnload()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Het workflowexemplaar naar de opslag voor persistentie uit het geheugen verwijderd wanneer het exemplaar onderbroken of niet-actief is."
  remarks: "Als het werkstroomexemplaar niet actief of onderbroken is, TryUnload gebruikt de persistentie voor het verwijderen van het workflowexemplaar uit het geheugen en het persistent maken met gegevensopslag. Als er geen persistentie-service geregistreerd bij de is <xref:System.Workflow.Runtime.WorkflowRuntime>, TryUnload genereert een <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Workflow.Runtime.WorkflowRuntime> De runtime wordt gegeven als het werkstroomexemplaar is met succes persistent hebt gemaakt, de <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>gebeurtenis en retourneert `true`.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>retourneert `false` als het werkstroomexemplaar is al verwijderd, is beëindigd, is afgebroken of is al voltooid.</xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A>       De host kunt TryUnload gebruiken voor het vrijmaken van systeembronnen vanuit een niet-actieve workflow."
  example:
  - "The following example demonstrates using the TryUnload method to unload a workflow when the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event fires. This example is from the Using Persistence Services SDK sample, from the Program.cs file. For more information, see [Using Persistence Services Sample](http://msdn.microsoft.com/en-us/3176b7e7-ae49-4d5c-802b-85032d6ebde6).  \n  \n [!code-cs[WF_Samples#280](~/add/codesnippet/csharp/wf_snippets/snippets24.cs#280)]\n [!code-vb[WF_Samples#280](~/add/codesnippet/visualbasic/wf_snippets/snippets24.vb#280)]"
  syntax:
    content: public bool TryUnload ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het werkstroomexemplaar verwijderd is; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Workflow.Runtime.WorkflowInstance.TryUnload*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Er is geen persistentie-service geregistreerd bij de workflow runtime engine."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.Unload
  id: Unload
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: Unload()
  nameWithType: WorkflowInstance.Unload()
  fullName: System.Workflow.Runtime.WorkflowInstance.Unload()
  type: Method
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Hiermee wordt het workflowexemplaar uit het geheugen naar de opslag voor persistentie. Deze aanroep is geblokkeerd totdat nadat het momenteel geplande werk is voltooid, of het einde van een transactiebereik."
  remarks: "Unload is synchroon; dat wil zeggen, wordt na het voltooien van een actie op die worden uitgevoerd. Als het exemplaar van de workflow niet inactief is, wordt de runtime wacht totdat het exemplaar kan worden onderbroken. Een exemplaar kan alleen worden onderbroken nadat de huidige planning werkitem is voltooid; Dit wordt meestal wanneer de momenteel actieve activiteit retourneert uit de <xref:System.Workflow.ComponentModel.Activity.Execute%2A>methode.</xref:System.Workflow.ComponentModel.Activity.Execute%2A> Echter, als het exemplaar wordt uitgevoerd een <xref:System.Workflow.ComponentModel.TransactionScopeActivity>, het transactiebereik uitvoering moet uitvoeren voordat het exemplaar kan worden onderbroken.</xref:System.Workflow.ComponentModel.TransactionScopeActivity> Unload vervolgens de persistentie-service gebruikt het workflowexemplaar verwijderen uit het geheugen en deze naar een gegevensarchief zich blijft voordoen. Als er geen persistentie-service geregistreerd bij de is <xref:System.Workflow.Runtime.WorkflowRuntime>, Unload genereert een <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Workflow.Runtime.WorkflowRuntime> De runtime wordt gegeven als het werkstroomexemplaar is met succes persistent hebt gemaakt, de <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>gebeurtenis.</xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded>       De host kunt Unload gebruiken voor het vrijmaken van systeembronnen vanuit een niet-actieve workflow."
  example:
  - "The following example demonstrates calling Unload on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#11](~/add/codesnippet/csharp/wf_snippets/snippets.cs#11)]\n [!code-vb[WF_Samples#11](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#11)]"
  syntax:
    content: public void Unload ();
    parameters: []
  overload: System.Workflow.Runtime.WorkflowInstance.Unload*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Er is geen persistentie-service geregistreerd bij de workflow runtime engine."
  platform:
  - net462
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  id: WorkflowRuntime
  parent: System.Workflow.Runtime.WorkflowInstance
  langs:
  - csharp
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  type: Property
  assemblies:
  - System.Workflow.Runtime
  namespace: System.Workflow.Runtime
  summary: "Haalt de <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime&quot;> </xref> voor dit werkstroomexemplaar."
  remarks: ''
  example:
  - "The following example demonstrates accessing the executing <xref:System.Workflow.Runtime.WorkflowRuntime> of a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \n  \n [!code-cs[WF_Samples#7](~/add/codesnippet/csharp/wf_snippets/snippets.cs#7)]\n [!code-vb[WF_Samples#7](~/add/codesnippet/visualbasic/wf_snippets/snippets.vb#7)]"
  syntax:
    content: public System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime { get; }
    return:
      type: System.Workflow.Runtime.WorkflowRuntime
      description: "Een <xref href=&quot;System.Workflow.Runtime.WorkflowRuntime&quot;> </xref> die staat voor de uitvoeringsomgeving waarop dit werkstroomexemplaar wordt uitgevoerd."
  overload: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Workflow.Runtime.WorkflowInstance.Abort
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Abort()
  nameWithType: WorkflowInstance.Abort()
  fullName: System.Workflow.Runtime.WorkflowInstance.Abort()
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ApplyWorkflowChanges(WorkflowChanges)
  nameWithType: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
  fullName: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)
- uid: System.Workflow.ComponentModel.WorkflowChanges
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: WorkflowChanges
  nameWithType: WorkflowChanges
  fullName: System.Workflow.ComponentModel.WorkflowChanges
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItem(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(IComparable,Object,IPendingWork,Object)
- uid: System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Workflow.Runtime.IPendingWork
  parent: System.Workflow.Runtime
  isExternal: false
  name: IPendingWork
  nameWithType: IPendingWork
  fullName: System.Workflow.Runtime.IPendingWork
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  nameWithType: WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(IComparable,Object,IPendingWork,Object)
- uid: System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Equals(Object)
  nameWithType: WorkflowInstance.Equals(Object)
  fullName: System.Workflow.Runtime.WorkflowInstance.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetHashCode()
  nameWithType: WorkflowInstance.GetHashCode()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowDefinition()
  nameWithType: WorkflowInstance.GetWorkflowDefinition()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition()
- uid: System.Workflow.ComponentModel.Activity
  parent: System.Workflow.ComponentModel
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Workflow.ComponentModel.Activity
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowNextTimerExpiration()
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration()
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowQueueData()
  nameWithType: WorkflowInstance.GetWorkflowQueueData()
  fullName: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData()
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.Runtime.WorkflowQueueInfo}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<WorkflowQueueInfo>
  nameWithType: ReadOnlyCollection<WorkflowQueueInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Workflow.Runtime.WorkflowQueueInfo
    name: WorkflowQueueInfo
    nameWithType: WorkflowQueueInfo
    fullName: WorkflowQueueInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
  fullName: System.Workflow.Runtime.WorkflowInstance.InstanceId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Workflow.Runtime.WorkflowInstance.Load
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Load()
  nameWithType: WorkflowInstance.Load()
  fullName: System.Workflow.Runtime.WorkflowInstance.Load()
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ReloadTrackingProfiles()
  nameWithType: WorkflowInstance.ReloadTrackingProfiles()
  fullName: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles()
- uid: System.Workflow.Runtime.WorkflowInstance.Resume
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Resume()
  nameWithType: WorkflowInstance.Resume()
  fullName: System.Workflow.Runtime.WorkflowInstance.Resume()
- uid: System.Workflow.Runtime.WorkflowInstance.Start
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Start()
  nameWithType: WorkflowInstance.Start()
  fullName: System.Workflow.Runtime.WorkflowInstance.Start()
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Suspend(String)
  nameWithType: WorkflowInstance.Suspend(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Suspend(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Terminate(String)
  nameWithType: WorkflowInstance.Terminate(String)
  fullName: System.Workflow.Runtime.WorkflowInstance.Terminate(String)
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: TryUnload()
  nameWithType: WorkflowInstance.TryUnload()
  fullName: System.Workflow.Runtime.WorkflowInstance.TryUnload()
- uid: System.Workflow.Runtime.WorkflowInstance.Unload
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Unload()
  nameWithType: WorkflowInstance.Unload()
  fullName: System.Workflow.Runtime.WorkflowInstance.Unload()
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime
- uid: System.Workflow.Runtime.WorkflowRuntime
  parent: System.Workflow.Runtime
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowRuntime
  fullName: System.Workflow.Runtime.WorkflowRuntime
- uid: System.Workflow.Runtime.WorkflowInstance.Abort*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Abort
  nameWithType: WorkflowInstance.Abort
- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ApplyWorkflowChanges
  nameWithType: WorkflowInstance.ApplyWorkflowChanges
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItem
  nameWithType: WorkflowInstance.EnqueueItem
- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: EnqueueItemOnIdle
  nameWithType: WorkflowInstance.EnqueueItemOnIdle
- uid: System.Workflow.Runtime.WorkflowInstance.Equals*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Equals
  nameWithType: WorkflowInstance.Equals
- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetHashCode
  nameWithType: WorkflowInstance.GetHashCode
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowDefinition
  nameWithType: WorkflowInstance.GetWorkflowDefinition
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowNextTimerExpiration
  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration
- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: GetWorkflowQueueData
  nameWithType: WorkflowInstance.GetWorkflowQueueData
- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: InstanceId
  nameWithType: WorkflowInstance.InstanceId
- uid: System.Workflow.Runtime.WorkflowInstance.Load*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Load
  nameWithType: WorkflowInstance.Load
- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: ReloadTrackingProfiles
  nameWithType: WorkflowInstance.ReloadTrackingProfiles
- uid: System.Workflow.Runtime.WorkflowInstance.Resume*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Resume
  nameWithType: WorkflowInstance.Resume
- uid: System.Workflow.Runtime.WorkflowInstance.Start*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Start
  nameWithType: WorkflowInstance.Start
- uid: System.Workflow.Runtime.WorkflowInstance.Suspend*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Suspend
  nameWithType: WorkflowInstance.Suspend
- uid: System.Workflow.Runtime.WorkflowInstance.Terminate*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Terminate
  nameWithType: WorkflowInstance.Terminate
- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: TryUnload
  nameWithType: WorkflowInstance.TryUnload
- uid: System.Workflow.Runtime.WorkflowInstance.Unload*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: Unload
  nameWithType: WorkflowInstance.Unload
- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime*
  parent: System.Workflow.Runtime.WorkflowInstance
  isExternal: false
  name: WorkflowRuntime
  nameWithType: WorkflowInstance.WorkflowRuntime
