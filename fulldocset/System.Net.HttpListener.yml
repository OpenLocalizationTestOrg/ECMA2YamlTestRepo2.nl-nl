### YamlMime:ManagedReference
items:
- uid: System.Net.HttpListener
  id: HttpListener
  children:
  - System.Net.HttpListener.#ctor
  - System.Net.HttpListener.Abort
  - System.Net.HttpListener.AuthenticationSchemes
  - System.Net.HttpListener.AuthenticationSchemeSelectorDelegate
  - System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)
  - System.Net.HttpListener.Close
  - System.Net.HttpListener.DefaultServiceNames
  - System.Net.HttpListener.EndGetContext(System.IAsyncResult)
  - System.Net.HttpListener.ExtendedProtectionPolicy
  - System.Net.HttpListener.ExtendedProtectionSelectorDelegate
  - System.Net.HttpListener.GetContext
  - System.Net.HttpListener.GetContextAsync
  - System.Net.HttpListener.IgnoreWriteExceptions
  - System.Net.HttpListener.IsListening
  - System.Net.HttpListener.IsSupported
  - System.Net.HttpListener.Prefixes
  - System.Net.HttpListener.Realm
  - System.Net.HttpListener.Start
  - System.Net.HttpListener.Stop
  - System.Net.HttpListener.System#IDisposable#Dispose
  - System.Net.HttpListener.TimeoutManager
  - System.Net.HttpListener.UnsafeConnectionNtlmAuthentication
  langs:
  - csharp
  name: HttpListener
  nameWithType: HttpListener
  fullName: System.Net.HttpListener
  type: Class
  summary: "Biedt een eenvoudige, programmatisch beheerde HTTP-protocol-listener. Deze klasse kan niet worden overgenomen."
  remarks: "Using the HttpListener class, you can create a simple HTTP protocol listener that responds to HTTP requests. The listener is active for the lifetime of the HttpListener object and runs within your application with its permissions.  \n  \n> [!NOTE]\n>  This class is available only on computers running the Windows XP SP2 or Windows Server 2003 operating systems. If you attempt to create an HttpListener object on a computer that is running an earlier operating system, the constructor throws a <xref:System.PlatformNotSupportedException> exception.  \n  \n To use HttpListener, create a new instance of the class using the HttpListener constructor and use the <xref:System.Net.HttpListener.Prefixes%2A> property to gain access to the collection that holds the strings that specify which Uniform Resource Identifier (URI) prefixes the HttpListener should process.  \n  \n A URI prefix string is composed of a scheme (http or https), a host, an optional port, and an optional path. An example of a complete prefix string is \"`http://www.contoso.com:8080/customerData``/`\". Prefixes must end in a forward slash (\"/\"). The HttpListener object with the prefix that most closely matches a requested URI responds to the request. Multiple HttpListener objects cannot add the same prefix; a <xref:System.ComponentModel.Win32Exception> exception is thrown if a HttpListener adds a prefix that is already in use.  \n  \n When a port is specified, the host element can be replaced with \"*\" to indicate that the HttpListener accepts requests sent to the port if the requested URI does not match any other prefix. For example, to receive all requests sent to port 8080 when the requested URI is not handled by any HttpListener, the prefix is \"`http://*:8080``/`\". Similarly, to specify that the HttpListener accepts all requests sent to a port, replace the host element with the \"+\" character, \"`https://+:8080`\". The \"\\*\" and \"+\" characters can be present in prefixes that include paths.  \n  \n Starting with .NET 4.5.3 and Windows 10, wildcard subdomains are supported in URI prefixes that are managed by an HttpListener object. To specify a wildcard subdomain, use the \"*\" character as part of the hostname in a URI prefix: for example, `http://*.foo.com/`, and pass this as the argument to the HttpListenerPrefixCollection.Add method. This will work on .NET 4.5.3 and Windows 10; in earlier versions, this would generate an <xref:System.Net.HttpListenerException>  \n  \n To begin listening for requests from clients, add the URI prefixes to the collection and call the <xref:System.Net.HttpListener.Start%2A> method. HttpListener offers both synchronous and asynchronous models for processing client requests. Requests and their associated responses are accessed using the <xref:System.Net.HttpListenerContext> object returned by the <xref:System.Net.HttpListener.GetContext%2A> method or its asynchronous counterparts, the <xref:System.Net.HttpListener.BeginGetContext%2A> and <xref:System.Net.HttpListener.EndGetContext%2A> methods.  \n  \n The synchronous model is appropriate if your application should block while waiting for a client request and if you want to process only one request at a time. Using the synchronous model, call the <xref:System.Net.HttpListener.GetContext%2A> method, which waits for a client to send a request. The method returns an <xref:System.Net.HttpListenerContext> object to you for processing when one occurs.  \n  \n In the more complex asynchronous model, your application does not block while waiting for requests and each request is processed in its own execution thread. Use the <xref:System.Net.HttpListener.BeginGetContext%2A> method to specify an application-defined method to be called for each incoming request. Within that method, call the <xref:System.Net.HttpListener.EndGetContext%2A> method to obtain the request, process it, and respond.  \n  \n In either model, incoming requests are accessed using the <xref:System.Net.HttpListenerContext.Request%2A?displayProperty=fullName> property and are represented by <xref:System.Net.HttpListenerRequest> objects. Similarly, responses are accessed using the <xref:System.Net.HttpListenerContext.Response%2A?displayProperty=fullName> property and are represented by <xref:System.Net.HttpListenerResponse> objects. These objects share some functionality with the <xref:System.Net.HttpWebRequest> and <xref:System.Net.HttpWebResponse> objects, but the latter objects cannot be used in conjunction with HttpListener because they implement client, not server, behaviors.  \n  \n An HttpListener can require client authentication. You can either specify a particular scheme to use for authentication, or you can specify a delegate that determines the scheme to use. You must require some form of authentication to obtain information about the client's identity. For additional information, see the <xref:System.Net.HttpListenerContext.User%2A>, <xref:System.Net.HttpListener.AuthenticationSchemes%2A>, and <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> properties.  \n  \n> [!NOTE]\n>  If you create an HttpListener using https, you must select a Server Certificate for that listener. Otherwise, an <xref:System.Net.HttpWebRequest> query of this HttpListener will fail with an unexpected close of the connection.  \n  \n> [!NOTE]\n>  You can configure Server Certificates and other listener options by using HttpCfg.exe. See [http://msdn.microsoft.com/library/default.asp?url=/library/en-us/http/http/httpcfg_exe.asp](http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp) for more details. The executable is shipped with Windows Server 2003, or can be built from source code available in the Platform SDK.  \n  \n> [!NOTE]\n>  If you specify multiple authentication schemes for the HttpListener, the listener will challenge clients in the following order: `Negotiate`, `NTLM`, `Digest`, and then `Basic`."
  example:
  - "The following code example demonstrates using a HttpListener.  \n  \n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/t-system.net.httplistener_1.cs)]"
  syntax:
    content: 'public sealed class HttpListener : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.HttpListener.#ctor
  id: '#ctor'
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: HttpListener()
  nameWithType: HttpListener.HttpListener()
  fullName: System.Net.HttpListener.HttpListener()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Net.HttpListener&quot;> </xref> klasse."
  remarks: "Voordat u het exemplaar dat wordt geretourneerd door deze constructor, start u de <xref:System.Net.HttpListener.Start%2A>methode.</xref:System.Net.HttpListener.Start%2A>"
  example:
  - "The following code example demonstrates using the <xref:System.Net.HttpListener> constructor to create a new <xref:System.Net.HttpListener> object. For the complete example, see the <xref:System.Net.HttpListener> class topic.  \n  \n [!code-cs[Net_listener_Basic#9](~/add/codesnippet/csharp/m-system.net.httplistene_20_1.cs)]"
  syntax:
    content: public HttpListener ();
    parameters: []
  overload: System.Net.HttpListener.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Deze klasse kan niet worden gebruikt voor het huidige besturingssysteem. Windows Server 2003 of Windows XP SP2 is vereist voor het gebruik van exemplaren van deze klasse."
  platform:
  - net462
- uid: System.Net.HttpListener.Abort
  id: Abort
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: Abort()
  nameWithType: HttpListener.Abort()
  fullName: System.Net.HttpListener.Abort()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Afgesloten de <xref href=&quot;System.Net.HttpListener&quot;> </xref> object onmiddellijk alle momenteel een aanvragen in de wachtrij."
  remarks: "Deze methode verwijdert alle bronnen die door deze listener. Alle aanvragen in behandeling zijn kan niet worden voltooid.       Nadat u deze methode aanroept, ontvangt u een <xref:System.ObjectDisposedException>Als u probeert te gebruiken deze <xref:System.Net.HttpListener>.</xref:System.Net.HttpListener> </xref:System.ObjectDisposedException>"
  example:
  - "The following code example demonstrates calling this method.  \n  \n [!code-cs[Net_Listener_Basic#11](~/add/codesnippet/csharp/m-system.net.httplistene_4_1.cs)]"
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Net.HttpListener.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListener.AuthenticationSchemes
  id: AuthenticationSchemes
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: AuthenticationSchemes
  nameWithType: HttpListener.AuthenticationSchemes
  fullName: System.Net.HttpListener.AuthenticationSchemes
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Opgehaald of ingesteld van het schema gebruikt om clients te verifiëren."
  remarks: "De <xref:System.Net.HttpListener>gebruikt het opgegeven schema om alle inkomende aanvragen te verifiëren.</xref:System.Net.HttpListener> De <xref:System.Net.HttpListener.GetContext%2A>en <xref:System.Net.HttpListener.EndGetContext%2A>methoden retourneren een inkomende clientaanvraag alleen als de <xref:System.Net.HttpListener>verifieert de aanvraag.</xref:System.Net.HttpListener> </xref:System.Net.HttpListener.EndGetContext%2A> </xref:System.Net.HttpListener.GetContext%2A>       U kunt de identiteit van een geverifieerde client ondervragen met behulp van de <xref:System.Net.HttpListenerContext.User%2A?displayProperty=fullName>eigenschap.</xref:System.Net.HttpListenerContext.User%2A?displayProperty=fullName>       Als u wilt dat een <xref:System.Net.HttpListener>-object om verschillende verificatiemechanismen op basis van kenmerken van de aanvragen ontvangen (bijvoorbeeld van de aanvraag <xref:System.Net.HttpListenerRequest.Url%2A>of <xref:System.Net.HttpListenerRequest.UserHostName%2A>eigenschap), moet u een methode die het verificatieschema kiest implementeren.</xref:System.Net.HttpListenerRequest.UserHostName%2A> </xref:System.Net.HttpListenerRequest.Url%2A> </xref:System.Net.HttpListener> Zie voor instructies over hoe u dit doet, de <xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>eigenschap documentatie.</xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>      > [!NOTE] > U stelt deze eigenschap om in te schakelen Digest, NTLM of Negotiate de is vereist <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag>.</xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "The following code example demonstrates using the AuthenticationSchemes property to specify an authentication scheme.  \n  \n [!code-cs[Net_listener_Basic#14](~/add/codesnippet/csharp/p-system.net.httplistene_0_1.cs)]"
  syntax:
    content: public System.Net.AuthenticationSchemes AuthenticationSchemes { get; set; }
    return:
      type: System.Net.AuthenticationSchemes
      description: "Een bitsgewijze combinatie van <xref:System.Net.AuthenticationSchemes>opsommingswaarden die aan te geven hoe clients moeten worden geverifieerd.</xref:System.Net.AuthenticationSchemes> De standaardwaarde is <xref:System.Net.AuthenticationSchemes>.</xref:System.Net.AuthenticationSchemes>"
  overload: System.Net.HttpListener.AuthenticationSchemes*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.HttpListener.AuthenticationSchemeSelectorDelegate
  id: AuthenticationSchemeSelectorDelegate
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: AuthenticationSchemeSelectorDelegate
  nameWithType: HttpListener.AuthenticationSchemeSelectorDelegate
  fullName: System.Net.HttpListener.AuthenticationSchemeSelectorDelegate
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Opgehaald of ingesteld van de gemachtigde aangeroepen om te bepalen van het protocol dat wordt gebruikt om clients te verifiëren."
  remarks: "> [!NOTE]> Als u wilt dat hetzelfde verificatieprotocol moet worden gebruikt voor alle aanvragen verwerkt door een bepaalde instantie van <xref:System.Net.HttpListener>, u hoeft niet in te stellen van deze eigenschap.</xref:System.Net.HttpListener> Een protocol moet worden gebruikt voor alle aanvragen van clients gebruikt u de <xref:System.Net.HttpListener.AuthenticationSchemes%2A>eigenschap.</xref:System.Net.HttpListener.AuthenticationSchemes%2A>       Als de client niet voor verificatie-informatie in de headers opgegeven is de <xref:System.Net.HttpListener>roept de opgegeven gemachtigde voor elke niet-geverifieerde inkomende aanvraag om te bepalen, indien aanwezig, protocol dat moet worden gebruikt om de client te verifiëren.</xref:System.Net.HttpListener> De <xref:System.Net.HttpListener.GetContext%2A>en <xref:System.Net.HttpListener.EndGetContext%2A>methoden retourneren een binnenkomende aanvraag alleen als de <xref:System.Net.HttpListener>geverifieerd op de aanvraag.</xref:System.Net.HttpListener> </xref:System.Net.HttpListener.EndGetContext%2A> </xref:System.Net.HttpListener.GetContext%2A> Als een aanvraag kan niet worden geverifieerd, de <xref:System.Net.HttpListener>automatisch teruggestuurd een 401-respons.</xref:System.Net.HttpListener> U krijgt de identiteit van een geverifieerde client met de <xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=fullName>eigenschap.</xref:System.Web.HttpRequest.LogonUserIdentity%2A?displayProperty=fullName>       De mogelijkheid om te delegeren van de keuze van het protocol voor verificatie op een toepassingsspecifieke-methode is handig als u wilt dat een exemplaar van <xref:System.Net.HttpListener>verschillende verificatieprotocollen, afhankelijk van de kenmerken van de ontvangen aanvragen gebruiken (bijvoorbeeld van de aanvraag <xref:System.Net.HttpListenerRequest.Url%2A>of <xref:System.Net.HttpListenerRequest.UserHostAddress%2A>eigenschap).</xref:System.Net.HttpListenerRequest.UserHostAddress%2A> </xref:System.Net.HttpListenerRequest.Url%2A> </xref:System.Net.HttpListener>      > [!NOTE] > U stelt deze eigenschap om in te schakelen Digest, NTLM of Negotiate de is vereist <xref:System.Security.Permissions.SecurityPermission>, <xref:System.Security.Permissions.SecurityPermissionFlag>.</xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "The following code example sets the value of this property.  \n  \n [!code-vb[NclListener#2](~/add/codesnippet/visualbasic/p-system.net.httplistene_2_1.vb)]\n [!code-cs[NclListener#2](~/add/codesnippet/csharp/p-system.net.httplistene_2_1.cs)]  \n  \n The following code example provides an implementation of a method invoked by an <xref:System.Net.AuthenticationSchemeSelector> delegate.  \n  \n [!code-vb[NclListener#1](~/add/codesnippet/visualbasic/p-system.net.httplistene_2_2.vb)]\n [!code-cs[NclListener#1](~/add/codesnippet/csharp/p-system.net.httplistene_2_2.cs)]"
  syntax:
    content: public System.Net.AuthenticationSchemeSelector AuthenticationSchemeSelectorDelegate { get; set; }
    return:
      type: System.Net.AuthenticationSchemeSelector
      description: "Een <xref href=&quot;System.Net.AuthenticationSchemeSelector&quot;> </xref> gemachtigde die de methode die wordt gebruikt roept voor het selecteren van een protocol voor verificatie. De standaardwaarde is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.HttpListener.AuthenticationSchemeSelectorDelegate*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)
  id: BeginGetContext(System.AsyncCallback,System.Object)
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: BeginGetContext(AsyncCallback,Object)
  nameWithType: HttpListener.BeginGetContext(AsyncCallback,Object)
  fullName: System.Net.HttpListener.BeginGetContext(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Begint met het asynchroon ophalen van een binnenkomende aanvraag."
  remarks: "De methode BeginGetContext begint een asynchrone aanroep (niet-blokkerende) voor het ontvangen van binnenkomende aanvragen van clients. Voordat u deze methode aanroept, belt u het <xref:System.Net.HttpListener.Start%2A>methode en voegt u ten minste één Uniform Resource Identifier (URI)-voorvoegsel om te luisteren naar door de URI-tekenreeksen aan toe te voegen de <xref:System.Net.HttpListenerPrefixCollection>geretourneerd door de <xref:System.Net.HttpListener.Prefixes%2A>eigenschap.</xref:System.Net.HttpListener.Prefixes%2A> </xref:System.Net.HttpListenerPrefixCollection> </xref:System.Net.HttpListener.Start%2A>       De asynchrone bewerking moet worden uitgevoerd door het aanroepen van de <xref:System.Net.HttpListener.EndGetContext%2A>methode.</xref:System.Net.HttpListener.EndGetContext%2A> Normaal gesproken de methode wordt aangeroepen door de `callback` delegeren.       Deze methode worden niet geblokkeerd terwijl de bewerking is voltooid. Als u een binnenkomende aanvraag en blokkeren totdat de bewerking is voltooid, Roep de <xref:System.Net.HttpListener.GetContext%2A>methode.</xref:System.Net.HttpListener.GetContext%2A>       Zie voor gedetailleerde informatie over het gebruik van de asynchrone programmeermodel [asynchroon synchrone methoden aanroepen](~/add/includes/ajax-current-ext-md.md)"
  example:
  - "The following code example demonstrates using the BeginGetContext method to specify a callback method that will handle incoming client requests.  \n  \n [!code-cs[Net_Listener_Basic#12](~/add/codesnippet/csharp/m-system.net.httplistene_13_1.cs)]  \n  \n The following code example implements a callback method.  \n  \n [!code-cs[Net_Listener_Basic#13](~/add/codesnippet/csharp/m-system.net.httplistene_13_2.cs)]"
  syntax:
    content: public IAsyncResult BeginGetContext (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen wanneer een clientaanvraag beschikbaar is.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Een door de gebruiker gedefinieerde object dat informatie over het opnieuw bevat. Dit object wordt doorgegeven aan de `callback` delegeren wanneer de bewerking is voltooid."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>-object dat de status van de asynchrone bewerking geeft.</xref:System.IAsyncResult>"
  overload: System.Net.HttpListener.BeginGetContext*
  exceptions:
  - type: System.Net.HttpListenerException
    commentId: T:System.Net.HttpListenerException
    description: "Een Win32-functie-aanroep is mislukt. Controleer de uitzondering <xref:System.Net.HttpListenerException.ErrorCode*>eigenschap om de oorzaak van de uitzondering te bepalen.</xref:System.Net.HttpListenerException.ErrorCode*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Dit object is niet gestart of is momenteel gestopt."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.HttpListener.Close
  id: Close
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: Close()
  nameWithType: HttpListener.Close()
  fullName: System.Net.HttpListener.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Afgesloten de <xref href=&quot;System.Net.HttpListener&quot;> </xref>."
  remarks: "Na deze methode aanroept, kunt u niet meer gebruiken de <xref:System.Net.HttpListener>object.</xref:System.Net.HttpListener> Om tijdelijk te onderbreken een <xref:System.Net.HttpListener>object, gebruikt u de <xref:System.Net.HttpListener.Stop%2A>methode.</xref:System.Net.HttpListener.Stop%2A> </xref:System.Net.HttpListener>       Deze methode afgesloten keuzelijsten de <xref:System.Net.HttpListener>object zonder de verwerking van aanvragen in de wachtrij.</xref:System.Net.HttpListener> Alle aanvragen in behandeling zijn kan niet worden voltooid."
  example:
  - "The following code example demonstrates calling this method.  \n  \n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/m-system.net.httplistene_10_1.cs)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Net.HttpListener.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListener.DefaultServiceNames
  id: DefaultServiceNames
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: DefaultServiceNames
  nameWithType: HttpListener.DefaultServiceNames
  fullName: System.Net.HttpListener.DefaultServiceNames
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Haalt een standaardlijst van Service Provider Names (SPN&quot;s), zoals wordt bepaald door de geregistreerde voorvoegsels."
  remarks: "The DefaultServiceNames property is used with integrated Windows authentication to provide extended protection. The list of SPNs is initialized from the <xref:System.Net.HttpListener.Prefixes%2A> property when accessed and cleared when new prefixes are added to the <xref:System.Net.HttpListener.Prefixes%2A> property.  \n  \n The DefaultServiceNames property is used if an application doesn't set the <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames%2A> property on its extended protection policy.  \n  \n The <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection> that is retrieved with the DefaultServiceNames property is built from the <xref:System.Net.HttpListener.Prefixes%2A> property according to the following rules:  \n  \n1.  If the hostname is \"+\", \"*\", or an IPv4 or IPv6 literal (equivalent to \"\\*\" but restricted to a specific local interface), the following SPN is added:  \n  \n `\"HTTP/\"` plus the fully qualified domain name of the computer.  \n  \n1.  If the hostname contains no dots (no domains or subdomains), an attempt is made to resolve the fully-qualified domain name using DNS (the same behavior used by <xref:System.Net.HttpWebRequest>). If the fully-qualified domain name can be resolved, the following SPNs are added:  \n  \n `\"HTTP/\"` plus the hostname (the short name).  \n  \n `\"HTTP/\"` plus the fully qualified domain name for the hostname.  \n  \n1.  If the hostname contains not dots (no domains or subdomains) and a fully-qualified domain name can't be resolved, the following SPN is added:  \n  \n `\"HTTP/\"` plus the hostname.  \n  \n1.  If the hostname contains dots (domains or subdomains), the following SPN is added:  \n  \n `\"HTTP/\"` plus the hostname.  \n  \n The DefaultServiceNames property can be used by an application to review the list of default SPNs which will be used for authentication if no custom list is supplied. If other SPNs are needed, an application can add them using one of the <xref:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge%2A> methods.  \n  \n It is not safe when using extended protection to make policy decisions based on the requested URL, since this can be spoofed. Rather, applications should rely on the <xref:System.Net.HttpListenerRequest.LocalEndPoint%2A> or <xref:System.Net.HttpListenerRequest.RemoteEndPoint%2A> properties to make such policy decisions."
  syntax:
    content: public System.Security.Authentication.ExtendedProtection.ServiceNameCollection DefaultServiceNames { get; }
    return:
      type: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
      description: "Een <xref href=&quot;System.Security.Authentication.ExtendedProtection.ServiceNameCollection&quot;> </xref> die een lijst van SPN&quot;s bevat."
  overload: System.Net.HttpListener.DefaultServiceNames*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListener.EndGetContext(System.IAsyncResult)
  id: EndGetContext(System.IAsyncResult)
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: EndGetContext(IAsyncResult)
  nameWithType: HttpListener.EndGetContext(IAsyncResult)
  fullName: System.Net.HttpListener.EndGetContext(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Een asynchrone bewerking voor het ophalen van een binnenkomende clientaanvraag voltooid."
  remarks: "De methode EndGetContext wordt aangeroepen, meestal binnen de methode van een toepassing gedefinieerde callback aangeroepen door een gemachtigde kunnen verkrijgen van de <xref:System.Net.HttpListenerContext>object met een inkomende clientaanvraag en de bijbehorende reactie daarop.</xref:System.Net.HttpListenerContext> Deze methode is voltooid voor een bewerking die eerder is gestart door het aanroepen van de <xref:System.Net.HttpListener.BeginGetContext%2A>methode.</xref:System.Net.HttpListener.BeginGetContext%2A> Als de bewerking is niet voltooid, wordt deze methode blokkeert totdat dit het geval is.       Omdat aanroepen van de methode EndGetContext moet de <xref:System.Net.HttpListener>object, dit object wordt doorgaans doorgegeven aan een callback-methode door via het statusobject doorgegeven aan de <xref:System.Net.HttpListener.BeginGetContext%2A>methode.</xref:System.Net.HttpListener.BeginGetContext%2A> </xref:System.Net.HttpListener> U kunt dit object staat verkrijgen via de <xref:System.IAsyncResult.AsyncState%2A>eigenschap van de `asyncResult` object.</xref:System.IAsyncResult.AsyncState%2A>       Zie voor gedetailleerde informatie over het gebruik van de asynchrone programmeermodel [asynchroon synchrone methoden aanroepen](~/add/includes/ajax-current-ext-md.md)"
  example:
  - "The following code example shows the implementation of a callback method that calls the EndGetContext method.  \n  \n [!code-cs[Net_Listener_Basic#13](~/add/codesnippet/csharp/m-system.net.httplistene_1_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerContext EndGetContext (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>-object dat is verkregen toen de asynchrone bewerking is gestart.</xref:System.IAsyncResult>"
    return:
      type: System.Net.HttpListenerContext
      description: "Een <xref href=&quot;System.Net.HttpListenerContext&quot;> </xref> -object met de clientaanvraag."
  overload: System.Net.HttpListener.EndGetContext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>is niet verkregen door het aanroepen van de <xref:System.Net.HttpListener.BeginGetContext*> methode."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De methode EndGetContext is al aangeroepen voor het opgegeven <code> asyncResult </code> object."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.HttpListener.ExtendedProtectionPolicy
  id: ExtendedProtectionPolicy
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: ExtendedProtectionPolicy
  nameWithType: HttpListener.ExtendedProtectionPolicy
  fullName: System.Net.HttpListener.ExtendedProtectionPolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ophalen of instellen de <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> moet worden gebruikt voor uitgebreide beveiliging voor een sessie."
  remarks: "De eigenschap ExtendedProtectionPolicy wordt gebruikt met geïntegreerde Windows-verificatie om uitgebreide bescherming te bieden. De eigenschap ExtendedProtectionPolicy staat de configuratie van het beleid voor uitgebreide beveiliging voor de hele <xref:System.Net.HttpListener>sessie.</xref:System.Net.HttpListener> De <xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A>eigenschap staat de configuratie van het beleid voor uitgebreide beveiliging voor elke afzonderlijke aanvraag.</xref:System.Net.HttpListener.ExtendedProtectionSelectorDelegate%2A>       De <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A>eigenschap moet `null`.</xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> De <xref:System.Net.HttpListener>exemplaar de kanaal-Binding Token (CBT) rechtstreeks vanuit een eigen sessie TLS opgehaald als er een.</xref:System.Net.HttpListener>"
  syntax:
    content: public System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy ExtendedProtectionPolicy { get; set; }
    return:
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "Een <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> die aangeeft dat het beleid moet worden gebruikt voor uitgebreide beveiliging."
  overload: System.Net.HttpListener.ExtendedProtectionPolicy*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Er is een poging gedaan de eigenschap ExtendedProtectionPolicy te stellen, maar de <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*>de eigenschap is niet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Er is een poging gedaan de eigenschap ExtendedProtectionPolicy te stellen op <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Er is een poging gedaan om in te stellen van de eigenschap ExtendedProtectionPolicy na de <xref:System.Net.HttpListener.Start*>methode is al aangeroepen.</xref:System.Net.HttpListener.Start*>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "De <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement*>eigenschap is ingesteld op <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> op een platform waarmee biedt geen ondersteuning voor uitgebreide beveiliging.</xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement*>"
  platform:
  - net462
- uid: System.Net.HttpListener.ExtendedProtectionSelectorDelegate
  id: ExtendedProtectionSelectorDelegate
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: ExtendedProtectionSelectorDelegate
  nameWithType: HttpListener.ExtendedProtectionSelectorDelegate
  fullName: System.Net.HttpListener.ExtendedProtectionSelectorDelegate
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Ophalen of instellen van de gemachtigde aangeroepen om te bepalen de <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> moet worden gebruikt voor elke aanvraag."
  remarks: "De <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>eigenschap met geïntegreerde Windows-verificatie wordt gebruikt om uitgebreide bescherming te bieden.</xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> De <xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A>eigenschap staat de configuratie van het beleid voor uitgebreide beveiliging voor de hele <xref:System.Net.HttpListener>sessie.</xref:System.Net.HttpListener> </xref:System.Net.HttpListener.ExtendedProtectionPolicy%2A> De eigenschap ExtendedProtectionSelectorDelegate kan de configuratie van uitgebreide-beveiligingsbeleid per afzonderlijke aanvraag.       De <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A>eigenschap moet `null`.</xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding%2A> De <xref:System.Net.HttpListener>exemplaar de kanaal-Binding Token (CBT) rechtstreeks vanuit een eigen sessie TLS opgehaald als er een.</xref:System.Net.HttpListener>       Voor elke aanvraag de gemachtigde kunt de instellingen die de <xref:System.Net.HttpListener>exemplaar wordt gebruikt om uitgebreide bescherming te bieden.</xref:System.Net.HttpListener>       Als een gemachtigde retourneert `null` voor deze eigenschap dit vertegenwoordigt een <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy>waarvan de <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>eigenschap ingesteld op <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> </xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy>"
  syntax:
    content: public System.Net.HttpListener.ExtendedProtectionSelector ExtendedProtectionSelectorDelegate { get; set; }
    return:
      type: System.Net.HttpListener.ExtendedProtectionSelector
      description: "Een <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> die aangeeft dat het beleid moet worden gebruikt voor uitgebreide beveiliging."
  overload: System.Net.HttpListener.ExtendedProtectionSelectorDelegate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Er is een poging gedaan de eigenschap ExtendedProtectionSelectorDelegate in te stellen, maar de <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*>eigenschap moet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.</xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding*>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Er is een poging gedaan de eigenschap ExtendedProtectionSelectorDelegate instellen op <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Er is een poging gedaan om in te stellen van de eigenschap ExtendedProtectionSelectorDelegate na de <xref:System.Net.HttpListener.Start*>methode is al aangeroepen.</xref:System.Net.HttpListener.Start*>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "Een poging gedaan de eigenschap ExtendedProtectionSelectorDelegate instellen voor een platform waarmee biedt geen ondersteuning voor uitgebreide beveiliging."
  platform:
  - net462
- uid: System.Net.HttpListener.GetContext
  id: GetContext
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: GetContext()
  nameWithType: HttpListener.GetContext()
  fullName: System.Net.HttpListener.GetContext()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Wachten op een binnenkomende aanvraag en retourneert ontvangt."
  remarks: "Voordat u deze methode aanroept, belt u het <xref:System.Net.HttpListener.Start%2A>methode en voeg ten minste één voorvoegsels van URI om te luisteren naar door de URI-tekenreeksen aan toe te voegen de <xref:System.Net.HttpListenerPrefixCollection>geretourneerd door de <xref:System.Net.HttpListener.Prefixes%2A>eigenschap.</xref:System.Net.HttpListener.Prefixes%2A> </xref:System.Net.HttpListenerPrefixCollection> </xref:System.Net.HttpListener.Start%2A> Zie voor een gedetailleerde beschrijving van voorvoegsels de <xref:System.Net.HttpListener>overzicht van de klasse.</xref:System.Net.HttpListener>       Deze methodeblokken tijdens het wachten op een binnenkomende aanvraag. Als u wilt dat inkomende aanvragen worden verwerkt asynchroon (voor afzonderlijke threads) zodat uw toepassing worden niet geblokkeerd, gebruikt u de <xref:System.Net.HttpListener.BeginGetContext%2A>methode.</xref:System.Net.HttpListener.BeginGetContext%2A>"
  example:
  - "The following code example demonstrates calling this method.  \n  \n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/m-system.net.httplistene_19_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerContext GetContext ();
    parameters: []
    return:
      type: System.Net.HttpListenerContext
      description: "Een <xref href=&quot;System.Net.HttpListenerContext&quot;> </xref> -object met een clientaanvraag."
  overload: System.Net.HttpListener.GetContext*
  exceptions:
  - type: System.Net.HttpListenerException
    commentId: T:System.Net.HttpListenerException
    description: "Een Win32-functie-aanroep is mislukt. Controleer de uitzondering <xref:System.Net.HttpListenerException.ErrorCode*>eigenschap om de oorzaak van de uitzondering te bepalen.</xref:System.Net.HttpListenerException.ErrorCode*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Dit object is niet gestart of is momenteel gestopt.       - of - de <xref href=&quot;System.Net.HttpListener&quot;> </xref> heeft geen voorvoegsels Uniform Resource Identifier (URI) om te reageren op geen. Zie de opmerkingen."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.HttpListener.GetContextAsync
  id: GetContextAsync
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: GetContextAsync()
  nameWithType: HttpListener.GetContextAsync()
  fullName: System.Net.HttpListener.GetContextAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Wachten op een binnenkomende aanvraag als een asynchrone bewerking."
  remarks: "Deze bewerking wordt niet geblokkeerd. De geretourneerde <xref:System.Threading.Tasks.Task%601>object wordt voltooid wanneer de binnenkomende aanvraag is ontvangen.</xref:System.Threading.Tasks.Task%601>       Voordat u deze methode aanroept, belt u het <xref:System.Net.HttpListener.Start%2A>methode en voeg ten minste één voorvoegsels van URI om te luisteren naar door de URI-tekenreeksen aan toe te voegen de <xref:System.Net.HttpListenerPrefixCollection>geretourneerd door de <xref:System.Net.HttpListener.Prefixes%2A>eigenschap.</xref:System.Net.HttpListener.Prefixes%2A> </xref:System.Net.HttpListenerPrefixCollection> </xref:System.Net.HttpListener.Start%2A> Zie voor een gedetailleerde beschrijving van voorvoegsels de <xref:System.Net.HttpListener>overzicht van de klasse.</xref:System.Net.HttpListener>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.HttpListenerContext> GetContextAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Net.HttpListenerContext}
      description: "Retourneert &lt;xref:System.Threading.Tasks.Task%601&gt;.       Het taakobject dat de asynchrone bewerking vertegenwoordigt. De &lt;xref:System.Threading.Tasks.Task%601.Result%2A&gt; eigenschap voor het taakobject retourneert een <xref href=&quot;System.Net.HttpListenerContext&quot;> </xref> -object met een clientaanvraag."
  overload: System.Net.HttpListener.GetContextAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListener.IgnoreWriteExceptions
  id: IgnoreWriteExceptions
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: IgnoreWriteExceptions
  nameWithType: HttpListener.IgnoreWriteExceptions
  fullName: System.Net.HttpListener.IgnoreWriteExceptions
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Opgehaald of ingesteld een <xref:System.Boolean>waarde die aangeeft of de toepassing krijgt uitzonderingen die optreden wanneer een <xref href=&quot;System.Net.HttpListener&quot;> </xref> het antwoord op de client verzendt.</xref:System.Boolean>"
  remarks: "Deze eigenschap instellen op `true` als uw toepassing niet vereist dat een antwoord wordt verzonden naar elke client."
  example:
  - "The following code example demonstrates setting this property.  \n  \n [!code-cs[Net_Listener_Basic#14](~/add/codesnippet/csharp/p-system.net.httplistene_31_1.cs)]"
  syntax:
    content: public bool IgnoreWriteExceptions { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als dit <xref href=&quot;System.Net.HttpListener&quot;> </xref> niet als resultaat moet geven uitzonderingen die optreden bij het verzenden van het antwoord op de client; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.HttpListener.IgnoreWriteExceptions*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.HttpListener.IsListening
  id: IsListening
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: IsListening
  nameWithType: HttpListener.IsListening
  fullName: System.Net.HttpListener.IsListening
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Hiermee wordt een waarde die aangeeft of <xref href=&quot;System.Net.HttpListener&quot;> </xref> is gestart."
  remarks: "Starten een <xref:System.Net.HttpListener>, Roep de <xref:System.Net.HttpListener.Start%2A>methode.</xref:System.Net.HttpListener.Start%2A> </xref:System.Net.HttpListener>"
  example:
  - "The following code example demonstrates using this property to determine the listening state of an instance.  \n  \n [!code-cs[Net_Listener_Basic#1](~/add/codesnippet/csharp/p-system.net.httplistene_41_1.cs)]"
  syntax:
    content: public bool IsListening { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Net.HttpListener&quot;> </xref> is gestart, anders wordt <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.HttpListener.IsListening*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListener.IsSupported
  id: IsSupported
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: IsSupported
  nameWithType: HttpListener.IsSupported
  fullName: System.Net.HttpListener.IsSupported
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Hiermee wordt een waarde die aangeeft of <xref href=&quot;System.Net.HttpListener&quot;> </xref> kan worden gebruikt met het huidige besturingssysteem."
  remarks: "Deze klasse is alleen beschikbaar op computers met Windows XP SP2 of Windows Server 2003-besturingssystemen."
  example:
  - "The following code example demonstrates the use of the IsSupported property to detect whether an <xref:System.Net.HttpListener> object can be used with the current operating system.  \n  \n [!code-cs[Net_Listener_Basic#2](~/add/codesnippet/csharp/p-system.net.httplistene_21_1.cs)]"
  syntax:
    content: public static bool IsSupported { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als <xref href=&quot;System.Net.HttpListener&quot;> </xref> wordt ondersteund, anders wordt <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.HttpListener.IsSupported*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListener.Prefixes
  id: Prefixes
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: Prefixes
  nameWithType: HttpListener.Prefixes
  fullName: System.Net.HttpListener.Prefixes
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Haalt de Uniform Resource Identifier (URI)-voorvoegsels verwerkt door dit <xref href=&quot;System.Net.HttpListener&quot;> </xref> object."
  remarks: "De voorvoegsels zijn in de canonieke vorm. Zie voor een gedetailleerde beschrijving van voorvoegsels de <xref:System.Net.HttpListener>overzicht van de klasse.</xref:System.Net.HttpListener>"
  example:
  - "The following code example demonstrates using the Prefixes property to obtain and print the URI prefixes that are handled.  \n  \n [!code-cs[Net_Listener_Basic#1](~/add/codesnippet/csharp/p-system.net.httplistene_24_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerPrefixCollection Prefixes { get; }
    return:
      type: System.Net.HttpListenerPrefixCollection
      description: "Een <xref href=&quot;System.Net.HttpListenerPrefixCollection&quot;> </xref> die de URI bevat prefixes, dat deze <xref href=&quot;System.Net.HttpListener&quot;> </xref> -object is geconfigureerd om te kunnen verwerken."
  overload: System.Net.HttpListener.Prefixes*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.HttpListener.Realm
  id: Realm
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: Realm
  nameWithType: HttpListener.Realm
  fullName: System.Net.HttpListener.Realm
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Opgehaald of ingesteld van de realm, of de resource-partitie, die is gekoppeld aan dit <xref href=&quot;System.Net.HttpListener&quot;> </xref> object."
  remarks: "Servers realms gebruiken voor het partitioneren van beveiligde bronnen; elke partitie hebben een eigen verificatiedatabase schema en/of autorisatie. Realms worden alleen gebruikt voor basic en digest-verificatie. Nadat een client verifieert, wordt de verificatie is geldig voor alle resources in een realm. Zie voor een gedetailleerde beschrijving van realms RFC 2617 op [http://www.ietf.org](http://www.ietf.org).       Een exemplaar van <xref:System.Net.HttpListener>heeft slechts één gekoppeld realm.</xref:System.Net.HttpListener>"
  example:
  - "The following code example demonstrates setting the Realm property.  \n  \n [!code-cs[Net_Listener_Basic#10](~/add/codesnippet/csharp/p-system.net.httplistene_26_1.cs)]"
  syntax:
    content: public string Realm { get; set; }
    return:
      type: System.String
      description: "Een <xref:System.String>waarde met de naam van de realm die zijn gekoppeld aan de <xref href=&quot;System.Net.HttpListener&quot;> </xref> object.</xref:System.String>"
  overload: System.Net.HttpListener.Realm*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.HttpListener.Start
  id: Start
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: Start()
  nameWithType: HttpListener.Start()
  fullName: System.Net.HttpListener.Start()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Hiermee kunt dit exemplaar om inkomende aanvragen te ontvangen."
  remarks: "Deze methode moet worden aangeroepen voordat u contact opneemt met de <xref:System.Net.HttpListener.GetContext%2A>of <xref:System.Net.HttpListener.BeginGetContext%2A>methode.</xref:System.Net.HttpListener.BeginGetContext%2A> </xref:System.Net.HttpListener.GetContext%2A>       Nadat u hebt een <xref:System.Net.HttpListener>object, kunt u de <xref:System.Net.HttpListener.Stop%2A>methode voor het stoppen van deze</xref:System.Net.HttpListener.Stop%2A> </xref:System.Net.HttpListener> gestart      > [!NOTE] > Als dit exemplaar van de listener maakt gebruik van https, moet u deze installeren en een servercertificaat selecteren. Anders wordt een <xref:System.Net.HttpWebRequest>query hiervan <xref:System.Net.HttpListener>mislukt met een onverwachte afsluiting van de verbinding.</xref:System.Net.HttpListener> </xref:System.Net.HttpWebRequest> U kunt servercertificaten en andere opties listener configureren met behulp van HttpCfg.exe. Zie [http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp](http://msdn.microsoft.com/library/default.asp?url=/library/http/http/httpcfg_exe.asp) voor meer informatie."
  example:
  - "The following code example demonstrates using the Start method to begin processing incoming requests.  \n  \n [!code-cs[Net_Listener_Basic#12](~/add/codesnippet/csharp/m-system.net.httplistene_12_1.cs)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Net.HttpListener.Start*
  exceptions:
  - type: System.Net.HttpListenerException
    commentId: T:System.Net.HttpListenerException
    description: "Een Win32-functie-aanroep is mislukt. Controleer de uitzondering <xref:System.Net.HttpListenerException.ErrorCode*>eigenschap om de oorzaak van de uitzondering te bepalen.</xref:System.Net.HttpListenerException.ErrorCode*>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.HttpListener.Stop
  id: Stop
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: Stop()
  nameWithType: HttpListener.Stop()
  fullName: System.Net.HttpListener.Stop()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "Zorgt ervoor dat dit exemplaar om meer te ontvangen van binnenkomende aanvragen."
  remarks: "Als dit exemplaar al gestopt is, heeft aanroepen van deze methode geen effect.       Nadat u hebt gestopt een <xref:System.Net.HttpListener>object, kunt u de <xref:System.Net.HttpListener.Start%2A>methode om te starten.</xref:System.Net.HttpListener.Start%2A> </xref:System.Net.HttpListener>"
  example:
  - "The following code example demonstrates using the Stop method to stop processing incoming requests.  \n  \n [!code-cs[Net_Listener_Basic#12](~/add/codesnippet/csharp/m-system.net.httplistene_5_1.cs)]"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Net.HttpListener.Stop*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.HttpListener.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: HttpListener.System.IDisposable.Dispose()
  fullName: System.Net.HttpListener.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "De bronnen die door deze vrij <xref href=&quot;System.Net.HttpListener&quot;> </xref> object."
  remarks: "Toepassingen gebruikmaken van de <xref:System.Net.HttpListener.Close%2A>methode in plaats van deze methode aanroept.</xref:System.Net.HttpListener.Close%2A>"
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Net.HttpListener.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListener.TimeoutManager
  id: TimeoutManager
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: TimeoutManager
  nameWithType: HttpListener.TimeoutManager
  fullName: System.Net.HttpListener.TimeoutManager
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "De time-out manager voor deze <xref href=&quot;System.Net.HttpListener&quot;> </xref> exemplaar."
  remarks: "De time-manager definieert de time-out voor verbindingslimieten voor deze <xref:System.Net.HttpListener>exemplaar.</xref:System.Net.HttpListener>"
  syntax:
    content: public System.Net.HttpListenerTimeoutManager TimeoutManager { get; }
    return:
      type: System.Net.HttpListenerTimeoutManager
      description: "Returns <xref href=&quot;System.Net.HttpListenerTimeoutManager&quot;></xref>.       De time-out manager voor deze <xref href=&quot;System.Net.HttpListener&quot;> </xref> exemplaar."
  overload: System.Net.HttpListener.TimeoutManager*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListener.UnsafeConnectionNtlmAuthentication
  id: UnsafeConnectionNtlmAuthentication
  parent: System.Net.HttpListener
  langs:
  - csharp
  name: UnsafeConnectionNtlmAuthentication
  nameWithType: HttpListener.UnsafeConnectionNtlmAuthentication
  fullName: System.Net.HttpListener.UnsafeConnectionNtlmAuthentication
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "Opgehaald of ingesteld een <xref:System.Boolean>waarde die of bepaalt, als NTLM wordt gebruikt, aanvullende-aanvragen via de verbinding met dezelfde Transmission Control Protocol (TCP) zijn vereist om te verifiëren.</xref:System.Boolean>"
  remarks: "Als deze eigenschap is ingesteld op `true` en de eerste aanvraag via een bepaalde TCP-verbinding is geverifieerd met NTLM, volgende aanvragen via de TCP-verbinding worden verwerkt met behulp van de verificatie-informatie (<xref:System.Security.Principal.IIdentity>) van de eerste aanvraag.</xref:System.Security.Principal.IIdentity>       Deze eigenschap heeft geen effect wanneer NTLM niet het verificatieprotocol is. Wanneer Negotiate is opgegeven als het verificatieprotocol, heeft deze eigenschap effect alleen als NTLM het werkelijke protocol gebruikt voor verificatie.      > [!NOTE] > Tijdens deze eigenschap instelt op `true` verhoogt de prestaties omdat de <xref:System.Net.HttpListener>niet verzenden aanvullende NTLM verificatiecontroles komt, wordt er een beveiligingsrisico niet verlangen dat alle aanvragen om verificatie-informatie te geven.</xref:System.Net.HttpListener> U moet bepalen of de toename in prestaties waard dit risico."
  example:
  - "The following code example demonstrates setting this property.  \n  \n [!code-cs[Net_Listener_Basic#14](~/add/codesnippet/csharp/p-system.net.httplistene_34_1.cs)]"
  syntax:
    content: public bool UnsafeConnectionNtlmAuthentication { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref:System.Security.Principal.IIdentity>van de eerste aanvraag wordt later gebruikt voor de volgende aanvragen op dezelfde verbinding; anders wordt <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Security.Principal.IIdentity> De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.HttpListener.UnsafeConnectionNtlmAuthentication*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Net.HttpListenerException
  parent: System.Net
  isExternal: false
  name: HttpListenerException
  nameWithType: HttpListenerException
  fullName: System.Net.HttpListenerException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.HttpListener.#ctor
  parent: System.Net.HttpListener
  isExternal: false
  name: HttpListener()
  nameWithType: HttpListener.HttpListener()
  fullName: System.Net.HttpListener.HttpListener()
- uid: System.Net.HttpListener.Abort
  parent: System.Net.HttpListener
  isExternal: false
  name: Abort()
  nameWithType: HttpListener.Abort()
  fullName: System.Net.HttpListener.Abort()
- uid: System.Net.HttpListener.AuthenticationSchemes
  parent: System.Net.HttpListener
  isExternal: false
  name: AuthenticationSchemes
  nameWithType: HttpListener.AuthenticationSchemes
  fullName: System.Net.HttpListener.AuthenticationSchemes
- uid: System.Net.AuthenticationSchemes
  parent: System.Net
  isExternal: true
  name: AuthenticationSchemes
  nameWithType: AuthenticationSchemes
  fullName: System.Net.AuthenticationSchemes
- uid: System.Net.HttpListener.AuthenticationSchemeSelectorDelegate
  parent: System.Net.HttpListener
  isExternal: false
  name: AuthenticationSchemeSelectorDelegate
  nameWithType: HttpListener.AuthenticationSchemeSelectorDelegate
  fullName: System.Net.HttpListener.AuthenticationSchemeSelectorDelegate
- uid: System.Net.AuthenticationSchemeSelector
  parent: System.Net
  isExternal: false
  name: AuthenticationSchemeSelector
  nameWithType: AuthenticationSchemeSelector
  fullName: System.Net.AuthenticationSchemeSelector
- uid: System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)
  parent: System.Net.HttpListener
  isExternal: false
  name: BeginGetContext(AsyncCallback,Object)
  nameWithType: HttpListener.BeginGetContext(AsyncCallback,Object)
  fullName: System.Net.HttpListener.BeginGetContext(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.HttpListener.Close
  parent: System.Net.HttpListener
  isExternal: false
  name: Close()
  nameWithType: HttpListener.Close()
  fullName: System.Net.HttpListener.Close()
- uid: System.Net.HttpListener.DefaultServiceNames
  parent: System.Net.HttpListener
  isExternal: false
  name: DefaultServiceNames
  nameWithType: HttpListener.DefaultServiceNames
  fullName: System.Net.HttpListener.DefaultServiceNames
- uid: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: ServiceNameCollection
  nameWithType: ServiceNameCollection
  fullName: System.Security.Authentication.ExtendedProtection.ServiceNameCollection
- uid: System.Net.HttpListener.EndGetContext(System.IAsyncResult)
  parent: System.Net.HttpListener
  isExternal: false
  name: EndGetContext(IAsyncResult)
  nameWithType: HttpListener.EndGetContext(IAsyncResult)
  fullName: System.Net.HttpListener.EndGetContext(IAsyncResult)
- uid: System.Net.HttpListenerContext
  parent: System.Net
  isExternal: false
  name: HttpListenerContext
  nameWithType: HttpListenerContext
  fullName: System.Net.HttpListenerContext
- uid: System.Net.HttpListener.ExtendedProtectionPolicy
  parent: System.Net.HttpListener
  isExternal: false
  name: ExtendedProtectionPolicy
  nameWithType: HttpListener.ExtendedProtectionPolicy
  fullName: System.Net.HttpListener.ExtendedProtectionPolicy
- uid: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: ExtendedProtectionPolicy
  nameWithType: ExtendedProtectionPolicy
  fullName: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
- uid: System.Net.HttpListener.ExtendedProtectionSelectorDelegate
  parent: System.Net.HttpListener
  isExternal: false
  name: ExtendedProtectionSelectorDelegate
  nameWithType: HttpListener.ExtendedProtectionSelectorDelegate
  fullName: System.Net.HttpListener.ExtendedProtectionSelectorDelegate
- uid: System.Net.HttpListener.ExtendedProtectionSelector
  parent: System.Net
  isExternal: false
  name: HttpListener+ExtendedProtectionSelector
  nameWithType: HttpListener+ExtendedProtectionSelector
  fullName: System.Net.HttpListener+ExtendedProtectionSelector
- uid: System.Net.HttpListener.GetContext
  parent: System.Net.HttpListener
  isExternal: false
  name: GetContext()
  nameWithType: HttpListener.GetContext()
  fullName: System.Net.HttpListener.GetContext()
- uid: System.Net.HttpListener.GetContextAsync
  parent: System.Net.HttpListener
  isExternal: false
  name: GetContextAsync()
  nameWithType: HttpListener.GetContextAsync()
  fullName: System.Net.HttpListener.GetContextAsync()
- uid: System.Threading.Tasks.Task{System.Net.HttpListenerContext}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpListenerContext>
  nameWithType: Task<HttpListenerContext>
  fullName: System.Threading.Tasks.Task<System.Net.HttpListenerContext>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.HttpListenerContext>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.HttpListenerContext
    name: HttpListenerContext
    nameWithType: HttpListenerContext
    fullName: HttpListenerContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.HttpListener.IgnoreWriteExceptions
  parent: System.Net.HttpListener
  isExternal: false
  name: IgnoreWriteExceptions
  nameWithType: HttpListener.IgnoreWriteExceptions
  fullName: System.Net.HttpListener.IgnoreWriteExceptions
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.HttpListener.IsListening
  parent: System.Net.HttpListener
  isExternal: false
  name: IsListening
  nameWithType: HttpListener.IsListening
  fullName: System.Net.HttpListener.IsListening
- uid: System.Net.HttpListener.IsSupported
  parent: System.Net.HttpListener
  isExternal: false
  name: IsSupported
  nameWithType: HttpListener.IsSupported
  fullName: System.Net.HttpListener.IsSupported
- uid: System.Net.HttpListener.Prefixes
  parent: System.Net.HttpListener
  isExternal: false
  name: Prefixes
  nameWithType: HttpListener.Prefixes
  fullName: System.Net.HttpListener.Prefixes
- uid: System.Net.HttpListenerPrefixCollection
  parent: System.Net
  isExternal: false
  name: HttpListenerPrefixCollection
  nameWithType: HttpListenerPrefixCollection
  fullName: System.Net.HttpListenerPrefixCollection
- uid: System.Net.HttpListener.Realm
  parent: System.Net.HttpListener
  isExternal: false
  name: Realm
  nameWithType: HttpListener.Realm
  fullName: System.Net.HttpListener.Realm
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpListener.Start
  parent: System.Net.HttpListener
  isExternal: false
  name: Start()
  nameWithType: HttpListener.Start()
  fullName: System.Net.HttpListener.Start()
- uid: System.Net.HttpListener.Stop
  parent: System.Net.HttpListener
  isExternal: false
  name: Stop()
  nameWithType: HttpListener.Stop()
  fullName: System.Net.HttpListener.Stop()
- uid: System.Net.HttpListener.System#IDisposable#Dispose
  parent: System.Net.HttpListener
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: HttpListener.System.IDisposable.Dispose()
  fullName: System.Net.HttpListener.System.IDisposable.Dispose()
- uid: System.Net.HttpListener.TimeoutManager
  parent: System.Net.HttpListener
  isExternal: false
  name: TimeoutManager
  nameWithType: HttpListener.TimeoutManager
  fullName: System.Net.HttpListener.TimeoutManager
- uid: System.Net.HttpListenerTimeoutManager
  parent: System.Net
  isExternal: false
  name: HttpListenerTimeoutManager
  nameWithType: HttpListenerTimeoutManager
  fullName: System.Net.HttpListenerTimeoutManager
- uid: System.Net.HttpListener.UnsafeConnectionNtlmAuthentication
  parent: System.Net.HttpListener
  isExternal: false
  name: UnsafeConnectionNtlmAuthentication
  nameWithType: HttpListener.UnsafeConnectionNtlmAuthentication
  fullName: System.Net.HttpListener.UnsafeConnectionNtlmAuthentication
- uid: System.Net.HttpListener.#ctor*
  parent: System.Net.HttpListener
  isExternal: false
  name: HttpListener
  nameWithType: HttpListener.HttpListener
- uid: System.Net.HttpListener.Abort*
  parent: System.Net.HttpListener
  isExternal: false
  name: Abort
  nameWithType: HttpListener.Abort
- uid: System.Net.HttpListener.AuthenticationSchemes*
  parent: System.Net.HttpListener
  isExternal: false
  name: AuthenticationSchemes
  nameWithType: HttpListener.AuthenticationSchemes
- uid: System.Net.HttpListener.AuthenticationSchemeSelectorDelegate*
  parent: System.Net.HttpListener
  isExternal: false
  name: AuthenticationSchemeSelectorDelegate
  nameWithType: HttpListener.AuthenticationSchemeSelectorDelegate
- uid: System.Net.HttpListener.BeginGetContext*
  parent: System.Net.HttpListener
  isExternal: false
  name: BeginGetContext
  nameWithType: HttpListener.BeginGetContext
- uid: System.Net.HttpListener.Close*
  parent: System.Net.HttpListener
  isExternal: false
  name: Close
  nameWithType: HttpListener.Close
- uid: System.Net.HttpListener.DefaultServiceNames*
  parent: System.Net.HttpListener
  isExternal: false
  name: DefaultServiceNames
  nameWithType: HttpListener.DefaultServiceNames
- uid: System.Net.HttpListener.EndGetContext*
  parent: System.Net.HttpListener
  isExternal: false
  name: EndGetContext
  nameWithType: HttpListener.EndGetContext
- uid: System.Net.HttpListener.ExtendedProtectionPolicy*
  parent: System.Net.HttpListener
  isExternal: false
  name: ExtendedProtectionPolicy
  nameWithType: HttpListener.ExtendedProtectionPolicy
- uid: System.Net.HttpListener.ExtendedProtectionSelectorDelegate*
  parent: System.Net.HttpListener
  isExternal: false
  name: ExtendedProtectionSelectorDelegate
  nameWithType: HttpListener.ExtendedProtectionSelectorDelegate
- uid: System.Net.HttpListener.GetContext*
  parent: System.Net.HttpListener
  isExternal: false
  name: GetContext
  nameWithType: HttpListener.GetContext
- uid: System.Net.HttpListener.GetContextAsync*
  parent: System.Net.HttpListener
  isExternal: false
  name: GetContextAsync
  nameWithType: HttpListener.GetContextAsync
- uid: System.Net.HttpListener.IgnoreWriteExceptions*
  parent: System.Net.HttpListener
  isExternal: false
  name: IgnoreWriteExceptions
  nameWithType: HttpListener.IgnoreWriteExceptions
- uid: System.Net.HttpListener.IsListening*
  parent: System.Net.HttpListener
  isExternal: false
  name: IsListening
  nameWithType: HttpListener.IsListening
- uid: System.Net.HttpListener.IsSupported*
  parent: System.Net.HttpListener
  isExternal: false
  name: IsSupported
  nameWithType: HttpListener.IsSupported
- uid: System.Net.HttpListener.Prefixes*
  parent: System.Net.HttpListener
  isExternal: false
  name: Prefixes
  nameWithType: HttpListener.Prefixes
- uid: System.Net.HttpListener.Realm*
  parent: System.Net.HttpListener
  isExternal: false
  name: Realm
  nameWithType: HttpListener.Realm
- uid: System.Net.HttpListener.Start*
  parent: System.Net.HttpListener
  isExternal: false
  name: Start
  nameWithType: HttpListener.Start
- uid: System.Net.HttpListener.Stop*
  parent: System.Net.HttpListener
  isExternal: false
  name: Stop
  nameWithType: HttpListener.Stop
- uid: System.Net.HttpListener.System#IDisposable#Dispose*
  parent: System.Net.HttpListener
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: HttpListener.System.IDisposable.Dispose
- uid: System.Net.HttpListener.TimeoutManager*
  parent: System.Net.HttpListener
  isExternal: false
  name: TimeoutManager
  nameWithType: HttpListener.TimeoutManager
- uid: System.Net.HttpListener.UnsafeConnectionNtlmAuthentication*
  parent: System.Net.HttpListener
  isExternal: false
  name: UnsafeConnectionNtlmAuthentication
  nameWithType: HttpListener.UnsafeConnectionNtlmAuthentication
