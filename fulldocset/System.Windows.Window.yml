### YamlMime:ManagedReference
items:
- uid: System.Windows.Window
  id: Window
  children:
  - System.Windows.Window.#ctor
  - System.Windows.Window.Activate
  - System.Windows.Window.Activated
  - System.Windows.Window.AllowsTransparency
  - System.Windows.Window.AllowsTransparencyProperty
  - System.Windows.Window.ArrangeOverride(System.Windows.Size)
  - System.Windows.Window.Close
  - System.Windows.Window.Closed
  - System.Windows.Window.Closing
  - System.Windows.Window.ContentRendered
  - System.Windows.Window.Deactivated
  - System.Windows.Window.DialogResult
  - System.Windows.Window.DpiChanged
  - System.Windows.Window.DpiChangedEvent
  - System.Windows.Window.DragMove
  - System.Windows.Window.GetWindow(System.Windows.DependencyObject)
  - System.Windows.Window.Hide
  - System.Windows.Window.Icon
  - System.Windows.Window.IconProperty
  - System.Windows.Window.IsActive
  - System.Windows.Window.IsActiveProperty
  - System.Windows.Window.Left
  - System.Windows.Window.LeftProperty
  - System.Windows.Window.LocationChanged
  - System.Windows.Window.LogicalChildren
  - System.Windows.Window.MeasureOverride(System.Windows.Size)
  - System.Windows.Window.OnActivated(System.EventArgs)
  - System.Windows.Window.OnClosed(System.EventArgs)
  - System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)
  - System.Windows.Window.OnContentChanged(System.Object,System.Object)
  - System.Windows.Window.OnContentRendered(System.EventArgs)
  - System.Windows.Window.OnCreateAutomationPeer
  - System.Windows.Window.OnDeactivated(System.EventArgs)
  - System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  - System.Windows.Window.OnLocationChanged(System.EventArgs)
  - System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  - System.Windows.Window.OnSourceInitialized(System.EventArgs)
  - System.Windows.Window.OnStateChanged(System.EventArgs)
  - System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)
  - System.Windows.Window.OwnedWindows
  - System.Windows.Window.Owner
  - System.Windows.Window.ResizeMode
  - System.Windows.Window.ResizeModeProperty
  - System.Windows.Window.RestoreBounds
  - System.Windows.Window.Show
  - System.Windows.Window.ShowActivated
  - System.Windows.Window.ShowActivatedProperty
  - System.Windows.Window.ShowDialog
  - System.Windows.Window.ShowInTaskbar
  - System.Windows.Window.ShowInTaskbarProperty
  - System.Windows.Window.SizeToContent
  - System.Windows.Window.SizeToContentProperty
  - System.Windows.Window.SourceInitialized
  - System.Windows.Window.StateChanged
  - System.Windows.Window.TaskbarItemInfo
  - System.Windows.Window.TaskbarItemInfoProperty
  - System.Windows.Window.Title
  - System.Windows.Window.TitleProperty
  - System.Windows.Window.Top
  - System.Windows.Window.Topmost
  - System.Windows.Window.TopmostProperty
  - System.Windows.Window.TopProperty
  - System.Windows.Window.WindowStartupLocation
  - System.Windows.Window.WindowState
  - System.Windows.Window.WindowStateProperty
  - System.Windows.Window.WindowStyle
  - System.Windows.Window.WindowStyleProperty
  langs:
  - csharp
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
  type: Class
  summary: "Biedt de mogelijkheid te maken, configureren, weergeven en beheren van de levensduur van windows en dialoogvensters."
  remarks: "Het punt van interactie tussen een gebruiker en een zelfstandige toepassing is een venster. Een [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] venster bestaat uit twee verschillende gebieden:-een gebied van niet-client, die als host fungeert voor de windows-aanduidingen, met inbegrip van een pictogram, de titel, de systeem-menu knop Minimaliseren, maximaliseren knop, knop herstellen, knop sluiten en een rand.      -Een clientgebied die als host fungeert voor toepassingsspecifieke inhoud.       Een standaard venster wordt weergegeven in de volgende afbeelding: ![vensterelementen](~/add/media/windowoverviewfigure1.PNG &quot;vensterelementen&quot;) venster de mogelijkheid om te maken, configureren, weergeven en beheren van de levensduur van het windows- en dialoogvensters ingekapseld en biedt de volgende belangrijke services: **Levensduurbeheer**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated> <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed> <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated> <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A> <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>.</xref:System.Windows.Window.SourceInitialized> </xref:System.Windows.Window.Show%2A> </xref:System.Windows.Window.IsActive%2A> </xref:System.Windows.Window.Hide%2A> </xref:System.Windows.Window.Deactivated> </xref:System.Windows.Window.Closing> </xref:System.Windows.Window.Closed> </xref:System.Windows.Window.Close%2A> </xref:System.Windows.Window.Activated> </xref:System.Windows.Window.Activate%2A>       **Venster Management**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A> <xref:System.Windows.Window.Owner%2A>.</xref:System.Windows.Window.Owner%2A> </xref:System.Windows.Window.OwnedWindows%2A> </xref:System.Windows.Window.GetWindow%2A>       **Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A>       **Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.</xref:System.Windows.Window.ShowDialog%2A></xref:System.Windows.Window.DialogResult%2A></xref:System.Windows.Window.WindowStyle%2A></xref:System.Windows.Window.WindowState%2A></xref:System.Windows.Window.WindowStartupLocation%2A></xref:System.Windows.Window.Topmost%2A></xref:System.Windows.Window.Top%2A></xref:System.Windows.Window.Title%2A></xref:System.Windows.Window.StateChanged></xref:System.Windows.Window.SizeToContent%2A></xref:System.Windows.Window.ShowInTaskbar%2A></xref:System.Windows.Window.ShowActivated%2A></xref:System.Windows.Window.RestoreBounds%2A></xref:System.Windows.Window.ResizeMode%2A></xref:System.Windows.Window.LocationChanged></xref:System.Windows.Window.Left%2A></xref:System.Windows.Window.Icon%2A></xref:System.Windows.Window.DragMove%2A></xref:System.Windows.Window.ContentRendered></xref:System.Windows.Window.AllowsTransparency%2A>       Bovendien <xref:System.Windows.Application>beschrijft de speciale ondersteuning voor het beheren van alle vensters in een toepassing:-toepassing houdt een lijst van alle vensters die momenteel in de toepassing worden gestart.</xref:System.Windows.Application> Deze lijst wordt blootgelegd door de <xref:System.Windows.Application.Windows%2A>eigenschap.</xref:System.Windows.Application.Windows%2A>      -Standaard <xref:System.Windows.Application.MainWindow%2A>automatisch ingesteld met een verwijzing naar het eerste venster die in een toepassing wordt gestart.</xref:System.Windows.Application.MainWindow%2A> Dit waardoor het venster de hoofdtoepassing-venster.       Een venster kan worden geïmplementeerd met opmaak, opmaak en code-behind of code.       Venster wordt voornamelijk gebruikt om windows- en dialoogvensters voor zelfstandige toepassingen weer te geven. Echter, voor toepassingen waarvoor navigatie op het niveau van het venster, zoals wizards, kunt u <xref:System.Windows.Navigation.NavigationWindow>in plaats daarvan; <xref:System.Windows.Navigation.NavigationWindow>is afgeleid van venster en uitgebreid met ondersteuning voor browser-stijl navigatie.</xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Navigation.NavigationWindow>      > [!NOTE] > Eilanden navigeerbaar inhoud kunnen worden opgenomen in andere inhoud en containers met <xref:System.Windows.Controls.Frame>.</xref:System.Windows.Controls.Frame>       Venster moet `UnmanagedCode` beveiligingsmachtiging om te worden gestart. Dit is de volgende consequenties:- [!INCLUDE[TLA#tla_clickonce](~/add/includes/tlasharptla-clickonce-md.md)]-machtiging verhoging wanneer gestart vanaf het Internet of het lokale Intranet zones wordt u gevraagd om geïmplementeerde zelfstandige toepassingen.      - [!INCLUDE[TLA2#tla_xbap#plural](~/add/includes/tla2sharptla-xbapsharpplural-md.md)] die aanvragen iets kleiner is dan volledige machtigingen kan niet worden instantiëren van het windows- of dialoogvensters.       Zie voor meer informatie over de implementatie van de zelfstandige toepassing en beveiligingsoverwegingen [beveiligingsstrategie WPF - Platform beveiliging](~/add/includes/ajax-current-ext-md.md).       Een venster is een <xref:System.Windows.Controls.ContentControl>, wat betekent dat een enkel object van een type (zoals een tekenreeks, een afbeelding of een paneel) kan bevatten.</xref:System.Windows.Controls.ContentControl> Zie voor meer informatie de <xref:System.Windows.Controls.ContentControl>klasse.</xref:System.Windows.Controls.ContentControl> Bovendien venster is een hoofdelement en kan daarom niet worden deel uit van de inhoud van een ander element.      > [!NOTE] > De <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, en <xref:System.Windows.Window.Left%2A>Eigenschappen instellen in een venster via een stijl worden niet toegepast tijdens de uitvoering.</xref:System.Windows.Window.Left%2A> </xref:System.Windows.Window.Top%2A> </xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.Height%2A>      ## Aanpassen van het venster besturingselement naar dezelfde eigenschapsinstellingen toepassen op meerdere venster besturingselementen, gebruik de <xref:System.Windows.FrameworkElement.Style%2A>eigenschap.</xref:System.Windows.FrameworkElement.Style%2A> U kunt de standaardinstelling wijzigen <xref:System.Windows.Controls.ControlTemplate>geven het besturingselement een unieke uiterlijk.</xref:System.Windows.Controls.ControlTemplate> Voor meer informatie over het maken van een <xref:System.Windows.Controls.ControlTemplate>, Zie [de vormgeving van een bestaand besturingselement aanpassen door het maken van een ControlTemplate](~/add/includes/ajax-current-ext-md.md).</xref:System.Windows.Controls.ControlTemplate>  Zie voor de onderdelen en statussen die specifiek voor het venster zijn [vensterstijlen en sjablonen](~/add/includes/ajax-current-ext-md.md).       Eigenschappen van de afhankelijkheid voor dit besturingselement kunnen worden ingesteld door de standaardstijl van het besturingselement.  Als een eigenschap met een standaardstijl is ingesteld, kan de eigenschap wijzigen van de standaardwaarde, wanneer het besturingselement wordt weergegeven in de toepassing. De standaardstijl die wordt bepaald door de Bureaublad-thema wordt gebruikt wanneer de toepassing wordt uitgevoerd.  Zie voor meer informatie [WPF-thema&quot;s standaard](http://go.microsoft.com/fwlink/?LinkID=158252).      > [!NOTE] > Instellen van een visual eigenschap hebben alleen effect als die eigenschap beide aanwezig zijn in het venster van het besturingselement standaardsjabloon en is ingesteld met behulp van een. U vindt een lijst met visuele eigenschappen in de sectie &quot;Wijzigen van de visuele structuur van een besturingselement&quot; in [de vormgeving van een bestaand besturingselement aanpassen door het maken van een ControlTemplate](../Topic/Customizing%20the%20Appearance%20of%20an%20Existing%20Control%20by%20Creating%20a%20ControlTemplate.md)."
  example:
  - "The following example shows how a standard window is defined using only markup:  \n  \n [!code-xml[WindowSnippets#WindowMARKUPONLY](~/add/codesnippet/xaml/WindowSnippets.CSharp/MarkupOnlyWindow.xaml#windowmarkuponly)]  \n  \n The following example shows how a standard window is defined using only code:  \n  \n [!code-cs[WindowSnippets#WindowCODEONLY](~/add/codesnippet/csharp/WindowSnippets.CSharp/CodeOnlyWindow.cs#windowcodeonly)]\n [!code-vb[WindowSnippets#WindowCODEONLY](~/add/codesnippet/visualbasic/windowsnippets/codeonlywindow.vb#windowcodeonly)]  \n  \n The following example shows how a standard window is defined using a combination of markup and code-behind.  \n  \n [!code-xml[WindowSnippets#WindowXAML](~/add/codesnippet/xaml/WindowSnippets.CSharp/MainWindow.xaml#windowxaml)]  \n  \n [!code-cs[WindowSnippets#WindowCODEBEHIND](~/add/codesnippet/csharp/WindowSnippets.CSharp/MainWindow.xaml.cs#windowcodebehind)]\n [!code-vb[WindowSnippets#WindowCODEBEHIND](~/add/codesnippet/visualbasic/windowsnippets/mainwindow.xaml.vb#windowcodebehind)]"
  syntax:
    content: >-
      [System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)]

      public class Window : System.Windows.Controls.ContentControl
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Media.Visual
  - System.Windows.UIElement
  - System.Windows.FrameworkElement
  - System.Windows.Controls.Control
  - System.Windows.Controls.ContentControl
  implements: []
  inheritedMembers:
  - System.Windows.Controls.ContentControl.AddChild(System.Object)
  - System.Windows.Controls.ContentControl.AddText(System.String)
  - System.Windows.Controls.ContentControl.Content
  - System.Windows.Controls.ContentControl.ContentProperty
  - System.Windows.Controls.ContentControl.ContentStringFormat
  - System.Windows.Controls.ContentControl.ContentStringFormatProperty
  - System.Windows.Controls.ContentControl.ContentTemplate
  - System.Windows.Controls.ContentControl.ContentTemplateProperty
  - System.Windows.Controls.ContentControl.ContentTemplateSelector
  - System.Windows.Controls.ContentControl.ContentTemplateSelectorProperty
  - System.Windows.Controls.ContentControl.HasContent
  - System.Windows.Controls.ContentControl.HasContentProperty
  - System.Windows.Controls.ContentControl.OnContentStringFormatChanged(System.String,System.String)
  - System.Windows.Controls.ContentControl.OnContentTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)
  - System.Windows.Controls.ContentControl.OnContentTemplateSelectorChanged(System.Windows.Controls.DataTemplateSelector,System.Windows.Controls.DataTemplateSelector)
  - System.Windows.Controls.ContentControl.ShouldSerializeContent
  - System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddChild(System.Object)
  - System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddText(System.String)
  - System.Windows.Controls.Control.Background
  - System.Windows.Controls.Control.BackgroundProperty
  - System.Windows.Controls.Control.BorderBrush
  - System.Windows.Controls.Control.BorderBrushProperty
  - System.Windows.Controls.Control.BorderThickness
  - System.Windows.Controls.Control.BorderThicknessProperty
  - System.Windows.Controls.Control.FontFamily
  - System.Windows.Controls.Control.FontFamilyProperty
  - System.Windows.Controls.Control.FontSize
  - System.Windows.Controls.Control.FontSizeProperty
  - System.Windows.Controls.Control.FontStretch
  - System.Windows.Controls.Control.FontStretchProperty
  - System.Windows.Controls.Control.FontStyle
  - System.Windows.Controls.Control.FontStyleProperty
  - System.Windows.Controls.Control.FontWeight
  - System.Windows.Controls.Control.FontWeightProperty
  - System.Windows.Controls.Control.Foreground
  - System.Windows.Controls.Control.ForegroundProperty
  - System.Windows.Controls.Control.HandlesScrolling
  - System.Windows.Controls.Control.HorizontalContentAlignment
  - System.Windows.Controls.Control.HorizontalContentAlignmentProperty
  - System.Windows.Controls.Control.IsTabStop
  - System.Windows.Controls.Control.IsTabStopProperty
  - System.Windows.Controls.Control.MouseDoubleClick
  - System.Windows.Controls.Control.MouseDoubleClickEvent
  - System.Windows.Controls.Control.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.Controls.Control.OnPreviewMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)
  - System.Windows.Controls.Control.Padding
  - System.Windows.Controls.Control.PaddingProperty
  - System.Windows.Controls.Control.PreviewMouseDoubleClick
  - System.Windows.Controls.Control.PreviewMouseDoubleClickEvent
  - System.Windows.Controls.Control.TabIndex
  - System.Windows.Controls.Control.TabIndexProperty
  - System.Windows.Controls.Control.Template
  - System.Windows.Controls.Control.TemplateProperty
  - System.Windows.Controls.Control.ToString
  - System.Windows.Controls.Control.VerticalContentAlignment
  - System.Windows.Controls.Control.VerticalContentAlignmentProperty
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.FrameworkElement.ActualHeight
  - System.Windows.FrameworkElement.ActualHeightProperty
  - System.Windows.FrameworkElement.ActualWidth
  - System.Windows.FrameworkElement.ActualWidthProperty
  - System.Windows.FrameworkElement.AddLogicalChild(System.Object)
  - System.Windows.FrameworkElement.ApplyTemplate
  - System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)
  - System.Windows.FrameworkElement.BeginInit
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  - System.Windows.FrameworkElement.BindingGroup
  - System.Windows.FrameworkElement.BindingGroupProperty
  - System.Windows.FrameworkElement.BringIntoView
  - System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)
  - System.Windows.FrameworkElement.ContextMenu
  - System.Windows.FrameworkElement.ContextMenuClosing
  - System.Windows.FrameworkElement.ContextMenuClosingEvent
  - System.Windows.FrameworkElement.ContextMenuOpening
  - System.Windows.FrameworkElement.ContextMenuOpeningEvent
  - System.Windows.FrameworkElement.ContextMenuProperty
  - System.Windows.FrameworkElement.Cursor
  - System.Windows.FrameworkElement.CursorProperty
  - System.Windows.FrameworkElement.DataContext
  - System.Windows.FrameworkElement.DataContextChanged
  - System.Windows.FrameworkElement.DataContextProperty
  - System.Windows.FrameworkElement.DefaultStyleKey
  - System.Windows.FrameworkElement.DefaultStyleKeyProperty
  - System.Windows.FrameworkElement.EndInit
  - System.Windows.FrameworkElement.FindName(System.String)
  - System.Windows.FrameworkElement.FindResource(System.Object)
  - System.Windows.FrameworkElement.FlowDirection
  - System.Windows.FrameworkElement.FlowDirectionProperty
  - System.Windows.FrameworkElement.FocusVisualStyle
  - System.Windows.FrameworkElement.FocusVisualStyleProperty
  - System.Windows.FrameworkElement.ForceCursor
  - System.Windows.FrameworkElement.ForceCursorProperty
  - System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)
  - System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)
  - System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)
  - System.Windows.FrameworkElement.GetTemplateChild(System.String)
  - System.Windows.FrameworkElement.GetUIParentCore
  - System.Windows.FrameworkElement.GetVisualChild(System.Int32)
  - System.Windows.FrameworkElement.Height
  - System.Windows.FrameworkElement.HeightProperty
  - System.Windows.FrameworkElement.HorizontalAlignment
  - System.Windows.FrameworkElement.HorizontalAlignmentProperty
  - System.Windows.FrameworkElement.InheritanceBehavior
  - System.Windows.FrameworkElement.Initialized
  - System.Windows.FrameworkElement.InputScope
  - System.Windows.FrameworkElement.InputScopeProperty
  - System.Windows.FrameworkElement.IsInitialized
  - System.Windows.FrameworkElement.IsLoaded
  - System.Windows.FrameworkElement.Language
  - System.Windows.FrameworkElement.LanguageProperty
  - System.Windows.FrameworkElement.LayoutTransform
  - System.Windows.FrameworkElement.LayoutTransformProperty
  - System.Windows.FrameworkElement.Loaded
  - System.Windows.FrameworkElement.LoadedEvent
  - System.Windows.FrameworkElement.Margin
  - System.Windows.FrameworkElement.MarginProperty
  - System.Windows.FrameworkElement.MaxHeight
  - System.Windows.FrameworkElement.MaxHeightProperty
  - System.Windows.FrameworkElement.MaxWidth
  - System.Windows.FrameworkElement.MaxWidthProperty
  - System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)
  - System.Windows.FrameworkElement.MinHeight
  - System.Windows.FrameworkElement.MinHeightProperty
  - System.Windows.FrameworkElement.MinWidth
  - System.Windows.FrameworkElement.MinWidthProperty
  - System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)
  - System.Windows.FrameworkElement.Name
  - System.Windows.FrameworkElement.NameProperty
  - System.Windows.FrameworkElement.OnApplyTemplate
  - System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)
  - System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)
  - System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)
  - System.Windows.FrameworkElement.OnInitialized(System.EventArgs)
  - System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  - System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)
  - System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)
  - System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)
  - System.Windows.FrameworkElement.OverridesDefaultStyle
  - System.Windows.FrameworkElement.OverridesDefaultStyleProperty
  - System.Windows.FrameworkElement.Parent
  - System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)
  - System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  - System.Windows.FrameworkElement.RegisterName(System.String,System.Object)
  - System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)
  - System.Windows.FrameworkElement.RequestBringIntoView
  - System.Windows.FrameworkElement.RequestBringIntoViewEvent
  - System.Windows.FrameworkElement.Resources
  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)
  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)
  - System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)
  - System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)
  - System.Windows.FrameworkElement.ShouldSerializeResources
  - System.Windows.FrameworkElement.ShouldSerializeStyle
  - System.Windows.FrameworkElement.ShouldSerializeTriggers
  - System.Windows.FrameworkElement.SizeChanged
  - System.Windows.FrameworkElement.SizeChangedEvent
  - System.Windows.FrameworkElement.SourceUpdated
  - System.Windows.FrameworkElement.Style
  - System.Windows.FrameworkElement.StyleProperty
  - System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  - System.Windows.FrameworkElement.Tag
  - System.Windows.FrameworkElement.TagProperty
  - System.Windows.FrameworkElement.TargetUpdated
  - System.Windows.FrameworkElement.TemplatedParent
  - System.Windows.FrameworkElement.ToolTip
  - System.Windows.FrameworkElement.ToolTipClosing
  - System.Windows.FrameworkElement.ToolTipClosingEvent
  - System.Windows.FrameworkElement.ToolTipOpening
  - System.Windows.FrameworkElement.ToolTipOpeningEvent
  - System.Windows.FrameworkElement.ToolTipProperty
  - System.Windows.FrameworkElement.Triggers
  - System.Windows.FrameworkElement.TryFindResource(System.Object)
  - System.Windows.FrameworkElement.Unloaded
  - System.Windows.FrameworkElement.UnloadedEvent
  - System.Windows.FrameworkElement.UnregisterName(System.String)
  - System.Windows.FrameworkElement.UpdateDefaultStyle
  - System.Windows.FrameworkElement.UseLayoutRounding
  - System.Windows.FrameworkElement.UseLayoutRoundingProperty
  - System.Windows.FrameworkElement.VerticalAlignment
  - System.Windows.FrameworkElement.VerticalAlignmentProperty
  - System.Windows.FrameworkElement.VisualChildrenCount
  - System.Windows.FrameworkElement.Width
  - System.Windows.FrameworkElement.WidthProperty
  - System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)
  - System.Windows.Media.Visual.PointToScreen(System.Windows.Point)
  - System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.VisualBitmapEffect
  - System.Windows.Media.Visual.VisualBitmapEffectInput
  - System.Windows.Media.Visual.VisualBitmapScalingMode
  - System.Windows.Media.Visual.VisualCacheMode
  - System.Windows.Media.Visual.VisualClearTypeHint
  - System.Windows.Media.Visual.VisualClip
  - System.Windows.Media.Visual.VisualEdgeMode
  - System.Windows.Media.Visual.VisualEffect
  - System.Windows.Media.Visual.VisualOffset
  - System.Windows.Media.Visual.VisualOpacity
  - System.Windows.Media.Visual.VisualOpacityMask
  - System.Windows.Media.Visual.VisualParent
  - System.Windows.Media.Visual.VisualScrollableAreaClip
  - System.Windows.Media.Visual.VisualTextHintingMode
  - System.Windows.Media.Visual.VisualTextRenderingMode
  - System.Windows.Media.Visual.VisualTransform
  - System.Windows.Media.Visual.VisualXSnappingGuidelines
  - System.Windows.Media.Visual.VisualYSnappingGuidelines
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.AllowDrop
  - System.Windows.UIElement.AllowDropProperty
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.AreAnyTouchesCaptured
  - System.Windows.UIElement.AreAnyTouchesCapturedProperty
  - System.Windows.UIElement.AreAnyTouchesCapturedWithin
  - System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  - System.Windows.UIElement.AreAnyTouchesDirectlyOver
  - System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  - System.Windows.UIElement.AreAnyTouchesOver
  - System.Windows.UIElement.AreAnyTouchesOverProperty
  - System.Windows.UIElement.Arrange(System.Windows.Rect)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.BitmapEffect
  - System.Windows.UIElement.BitmapEffectInput
  - System.Windows.UIElement.BitmapEffectInputProperty
  - System.Windows.UIElement.BitmapEffectProperty
  - System.Windows.UIElement.CacheMode
  - System.Windows.UIElement.CacheModeProperty
  - System.Windows.UIElement.CaptureMouse
  - System.Windows.UIElement.CaptureStylus
  - System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.Clip
  - System.Windows.UIElement.ClipProperty
  - System.Windows.UIElement.ClipToBounds
  - System.Windows.UIElement.ClipToBoundsProperty
  - System.Windows.UIElement.CommandBindings
  - System.Windows.UIElement.DesiredSize
  - System.Windows.UIElement.DragEnter
  - System.Windows.UIElement.DragEnterEvent
  - System.Windows.UIElement.DragLeave
  - System.Windows.UIElement.DragLeaveEvent
  - System.Windows.UIElement.DragOver
  - System.Windows.UIElement.DragOverEvent
  - System.Windows.UIElement.Drop
  - System.Windows.UIElement.DropEvent
  - System.Windows.UIElement.Effect
  - System.Windows.UIElement.EffectProperty
  - System.Windows.UIElement.Focus
  - System.Windows.UIElement.Focusable
  - System.Windows.UIElement.FocusableChanged
  - System.Windows.UIElement.FocusableProperty
  - System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.UIElement.GiveFeedback
  - System.Windows.UIElement.GiveFeedbackEvent
  - System.Windows.UIElement.GotFocus
  - System.Windows.UIElement.GotFocusEvent
  - System.Windows.UIElement.GotKeyboardFocus
  - System.Windows.UIElement.GotKeyboardFocusEvent
  - System.Windows.UIElement.GotMouseCapture
  - System.Windows.UIElement.GotMouseCaptureEvent
  - System.Windows.UIElement.GotStylusCapture
  - System.Windows.UIElement.GotStylusCaptureEvent
  - System.Windows.UIElement.GotTouchCapture
  - System.Windows.UIElement.GotTouchCaptureEvent
  - System.Windows.UIElement.HasAnimatedProperties
  - System.Windows.UIElement.HasEffectiveKeyboardFocus
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)
  - System.Windows.UIElement.InputBindings
  - System.Windows.UIElement.InputHitTest(System.Windows.Point)
  - System.Windows.UIElement.InvalidateArrange
  - System.Windows.UIElement.InvalidateMeasure
  - System.Windows.UIElement.InvalidateVisual
  - System.Windows.UIElement.IsArrangeValid
  - System.Windows.UIElement.IsEnabled
  - System.Windows.UIElement.IsEnabledChanged
  - System.Windows.UIElement.IsEnabledCore
  - System.Windows.UIElement.IsEnabledProperty
  - System.Windows.UIElement.IsFocused
  - System.Windows.UIElement.IsFocusedProperty
  - System.Windows.UIElement.IsHitTestVisible
  - System.Windows.UIElement.IsHitTestVisibleChanged
  - System.Windows.UIElement.IsHitTestVisibleProperty
  - System.Windows.UIElement.IsInputMethodEnabled
  - System.Windows.UIElement.IsKeyboardFocused
  - System.Windows.UIElement.IsKeyboardFocusedChanged
  - System.Windows.UIElement.IsKeyboardFocusedProperty
  - System.Windows.UIElement.IsKeyboardFocusWithin
  - System.Windows.UIElement.IsKeyboardFocusWithinChanged
  - System.Windows.UIElement.IsKeyboardFocusWithinProperty
  - System.Windows.UIElement.IsManipulationEnabled
  - System.Windows.UIElement.IsManipulationEnabledProperty
  - System.Windows.UIElement.IsMeasureValid
  - System.Windows.UIElement.IsMouseCaptured
  - System.Windows.UIElement.IsMouseCapturedChanged
  - System.Windows.UIElement.IsMouseCapturedProperty
  - System.Windows.UIElement.IsMouseCaptureWithin
  - System.Windows.UIElement.IsMouseCaptureWithinChanged
  - System.Windows.UIElement.IsMouseCaptureWithinProperty
  - System.Windows.UIElement.IsMouseDirectlyOver
  - System.Windows.UIElement.IsMouseDirectlyOverChanged
  - System.Windows.UIElement.IsMouseDirectlyOverProperty
  - System.Windows.UIElement.IsMouseOver
  - System.Windows.UIElement.IsMouseOverProperty
  - System.Windows.UIElement.IsStylusCaptured
  - System.Windows.UIElement.IsStylusCapturedChanged
  - System.Windows.UIElement.IsStylusCapturedProperty
  - System.Windows.UIElement.IsStylusCaptureWithin
  - System.Windows.UIElement.IsStylusCaptureWithinChanged
  - System.Windows.UIElement.IsStylusCaptureWithinProperty
  - System.Windows.UIElement.IsStylusDirectlyOver
  - System.Windows.UIElement.IsStylusDirectlyOverChanged
  - System.Windows.UIElement.IsStylusDirectlyOverProperty
  - System.Windows.UIElement.IsStylusOver
  - System.Windows.UIElement.IsStylusOverProperty
  - System.Windows.UIElement.IsVisible
  - System.Windows.UIElement.IsVisibleChanged
  - System.Windows.UIElement.IsVisibleProperty
  - System.Windows.UIElement.KeyDown
  - System.Windows.UIElement.KeyDownEvent
  - System.Windows.UIElement.KeyUp
  - System.Windows.UIElement.KeyUpEvent
  - System.Windows.UIElement.LayoutUpdated
  - System.Windows.UIElement.LostFocus
  - System.Windows.UIElement.LostFocusEvent
  - System.Windows.UIElement.LostKeyboardFocus
  - System.Windows.UIElement.LostKeyboardFocusEvent
  - System.Windows.UIElement.LostMouseCapture
  - System.Windows.UIElement.LostMouseCaptureEvent
  - System.Windows.UIElement.LostStylusCapture
  - System.Windows.UIElement.LostStylusCaptureEvent
  - System.Windows.UIElement.LostTouchCapture
  - System.Windows.UIElement.LostTouchCaptureEvent
  - System.Windows.UIElement.ManipulationBoundaryFeedback
  - System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  - System.Windows.UIElement.ManipulationCompleted
  - System.Windows.UIElement.ManipulationCompletedEvent
  - System.Windows.UIElement.ManipulationDelta
  - System.Windows.UIElement.ManipulationDeltaEvent
  - System.Windows.UIElement.ManipulationInertiaStarting
  - System.Windows.UIElement.ManipulationInertiaStartingEvent
  - System.Windows.UIElement.ManipulationStarted
  - System.Windows.UIElement.ManipulationStartedEvent
  - System.Windows.UIElement.ManipulationStarting
  - System.Windows.UIElement.ManipulationStartingEvent
  - System.Windows.UIElement.Measure(System.Windows.Size)
  - System.Windows.UIElement.MouseDown
  - System.Windows.UIElement.MouseDownEvent
  - System.Windows.UIElement.MouseEnter
  - System.Windows.UIElement.MouseEnterEvent
  - System.Windows.UIElement.MouseLeave
  - System.Windows.UIElement.MouseLeaveEvent
  - System.Windows.UIElement.MouseLeftButtonDown
  - System.Windows.UIElement.MouseLeftButtonDownEvent
  - System.Windows.UIElement.MouseLeftButtonUp
  - System.Windows.UIElement.MouseLeftButtonUpEvent
  - System.Windows.UIElement.MouseMove
  - System.Windows.UIElement.MouseMoveEvent
  - System.Windows.UIElement.MouseRightButtonDown
  - System.Windows.UIElement.MouseRightButtonDownEvent
  - System.Windows.UIElement.MouseRightButtonUp
  - System.Windows.UIElement.MouseRightButtonUpEvent
  - System.Windows.UIElement.MouseUp
  - System.Windows.UIElement.MouseUpEvent
  - System.Windows.UIElement.MouseWheel
  - System.Windows.UIElement.MouseWheelEvent
  - System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  - System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)
  - System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  - System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  - System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  - System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  - System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  - System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  - System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)
  - System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.Opacity
  - System.Windows.UIElement.OpacityMask
  - System.Windows.UIElement.OpacityMaskProperty
  - System.Windows.UIElement.OpacityProperty
  - System.Windows.UIElement.PersistId
  - System.Windows.UIElement.PreviewDragEnter
  - System.Windows.UIElement.PreviewDragEnterEvent
  - System.Windows.UIElement.PreviewDragLeave
  - System.Windows.UIElement.PreviewDragLeaveEvent
  - System.Windows.UIElement.PreviewDragOver
  - System.Windows.UIElement.PreviewDragOverEvent
  - System.Windows.UIElement.PreviewDrop
  - System.Windows.UIElement.PreviewDropEvent
  - System.Windows.UIElement.PreviewGiveFeedback
  - System.Windows.UIElement.PreviewGiveFeedbackEvent
  - System.Windows.UIElement.PreviewGotKeyboardFocus
  - System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  - System.Windows.UIElement.PreviewKeyDown
  - System.Windows.UIElement.PreviewKeyDownEvent
  - System.Windows.UIElement.PreviewKeyUp
  - System.Windows.UIElement.PreviewKeyUpEvent
  - System.Windows.UIElement.PreviewLostKeyboardFocus
  - System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  - System.Windows.UIElement.PreviewMouseDown
  - System.Windows.UIElement.PreviewMouseDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonDown
  - System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonUp
  - System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  - System.Windows.UIElement.PreviewMouseMove
  - System.Windows.UIElement.PreviewMouseMoveEvent
  - System.Windows.UIElement.PreviewMouseRightButtonDown
  - System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  - System.Windows.UIElement.PreviewMouseRightButtonUp
  - System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  - System.Windows.UIElement.PreviewMouseUp
  - System.Windows.UIElement.PreviewMouseUpEvent
  - System.Windows.UIElement.PreviewMouseWheel
  - System.Windows.UIElement.PreviewMouseWheelEvent
  - System.Windows.UIElement.PreviewQueryContinueDrag
  - System.Windows.UIElement.PreviewQueryContinueDragEvent
  - System.Windows.UIElement.PreviewStylusButtonDown
  - System.Windows.UIElement.PreviewStylusButtonDownEvent
  - System.Windows.UIElement.PreviewStylusButtonUp
  - System.Windows.UIElement.PreviewStylusButtonUpEvent
  - System.Windows.UIElement.PreviewStylusDown
  - System.Windows.UIElement.PreviewStylusDownEvent
  - System.Windows.UIElement.PreviewStylusInAirMove
  - System.Windows.UIElement.PreviewStylusInAirMoveEvent
  - System.Windows.UIElement.PreviewStylusInRange
  - System.Windows.UIElement.PreviewStylusInRangeEvent
  - System.Windows.UIElement.PreviewStylusMove
  - System.Windows.UIElement.PreviewStylusMoveEvent
  - System.Windows.UIElement.PreviewStylusOutOfRange
  - System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  - System.Windows.UIElement.PreviewStylusSystemGesture
  - System.Windows.UIElement.PreviewStylusSystemGestureEvent
  - System.Windows.UIElement.PreviewStylusUp
  - System.Windows.UIElement.PreviewStylusUpEvent
  - System.Windows.UIElement.PreviewTextInput
  - System.Windows.UIElement.PreviewTextInputEvent
  - System.Windows.UIElement.PreviewTouchDown
  - System.Windows.UIElement.PreviewTouchDownEvent
  - System.Windows.UIElement.PreviewTouchMove
  - System.Windows.UIElement.PreviewTouchMoveEvent
  - System.Windows.UIElement.PreviewTouchUp
  - System.Windows.UIElement.PreviewTouchUpEvent
  - System.Windows.UIElement.QueryContinueDrag
  - System.Windows.UIElement.QueryContinueDragEvent
  - System.Windows.UIElement.QueryCursor
  - System.Windows.UIElement.QueryCursorEvent
  - System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.ReleaseAllTouchCaptures
  - System.Windows.UIElement.ReleaseMouseCapture
  - System.Windows.UIElement.ReleaseStylusCapture
  - System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.RenderSize
  - System.Windows.UIElement.RenderTransform
  - System.Windows.UIElement.RenderTransformOrigin
  - System.Windows.UIElement.RenderTransformOriginProperty
  - System.Windows.UIElement.RenderTransformProperty
  - System.Windows.UIElement.ShouldSerializeCommandBindings
  - System.Windows.UIElement.ShouldSerializeInputBindings
  - System.Windows.UIElement.SnapsToDevicePixels
  - System.Windows.UIElement.SnapsToDevicePixelsProperty
  - System.Windows.UIElement.StylusButtonDown
  - System.Windows.UIElement.StylusButtonDownEvent
  - System.Windows.UIElement.StylusButtonUp
  - System.Windows.UIElement.StylusButtonUpEvent
  - System.Windows.UIElement.StylusDown
  - System.Windows.UIElement.StylusDownEvent
  - System.Windows.UIElement.StylusEnter
  - System.Windows.UIElement.StylusEnterEvent
  - System.Windows.UIElement.StylusInAirMove
  - System.Windows.UIElement.StylusInAirMoveEvent
  - System.Windows.UIElement.StylusInRange
  - System.Windows.UIElement.StylusInRangeEvent
  - System.Windows.UIElement.StylusLeave
  - System.Windows.UIElement.StylusLeaveEvent
  - System.Windows.UIElement.StylusMove
  - System.Windows.UIElement.StylusMoveEvent
  - System.Windows.UIElement.StylusOutOfRange
  - System.Windows.UIElement.StylusOutOfRangeEvent
  - System.Windows.UIElement.StylusPlugIns
  - System.Windows.UIElement.StylusSystemGesture
  - System.Windows.UIElement.StylusSystemGestureEvent
  - System.Windows.UIElement.StylusUp
  - System.Windows.UIElement.StylusUpEvent
  - System.Windows.UIElement.TextInput
  - System.Windows.UIElement.TextInputEvent
  - System.Windows.UIElement.TouchDown
  - System.Windows.UIElement.TouchDownEvent
  - System.Windows.UIElement.TouchEnter
  - System.Windows.UIElement.TouchEnterEvent
  - System.Windows.UIElement.TouchesCaptured
  - System.Windows.UIElement.TouchesCapturedWithin
  - System.Windows.UIElement.TouchesDirectlyOver
  - System.Windows.UIElement.TouchesOver
  - System.Windows.UIElement.TouchLeave
  - System.Windows.UIElement.TouchLeaveEvent
  - System.Windows.UIElement.TouchMove
  - System.Windows.UIElement.TouchMoveEvent
  - System.Windows.UIElement.TouchUp
  - System.Windows.UIElement.TouchUpEvent
  - System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  - System.Windows.UIElement.Uid
  - System.Windows.UIElement.UidProperty
  - System.Windows.UIElement.UpdateLayout
  - System.Windows.UIElement.Visibility
  - System.Windows.UIElement.VisibilityProperty
  platform:
  - net462
- uid: System.Windows.Window.#ctor
  id: '#ctor'
  parent: System.Windows.Window
  langs:
  - csharp
  name: Window()
  nameWithType: Window.Window()
  fullName: System.Windows.Window.Window()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Windows.Window&quot;> </xref> klasse."
  remarks: "De constructor initialiseert de <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, en <xref:System.Windows.Window.Left%2A>Eigenschappen op hun standaardwaarde <xref:System.Windows.Window>waarden.</xref:System.Windows.Window> </xref:System.Windows.Window.Left%2A> </xref:System.Windows.Window.Top%2A> </xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.FrameworkElement.Width%2A>       Als er een venster is gemaakt binnen een <xref:System.AppDomain>die heeft een <xref:System.Windows.Application>object, voegt de constructor de <xref:System.Windows.Window>object aan de set <xref:System.Windows.Application>-beheerde windows via de <xref:System.Windows.Application.Windows%2A>eigenschap van de <xref:System.Windows.Application>object.</xref:System.Windows.Application> </xref:System.Windows.Application.Windows%2A> </xref:System.Windows.Application> </xref:System.Windows.Window> </xref:System.Windows.Application> </xref:System.AppDomain>"
  syntax:
    content: public Window ();
    parameters: []
  overload: System.Windows.Window.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Activate
  id: Activate
  parent: System.Windows.Window
  langs:
  - csharp
  name: Activate()
  nameWithType: Window.Activate()
  fullName: System.Windows.Window.Activate()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Probeert om het venster op de voorgrond en is geactiveerd."
  remarks: "De regels die bepalen of het venster is geactiveerd, zijn hetzelfde als die worden gebruikt door de [!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` functie (User32.dll).       Als het venster is geactiveerd in een [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] toepassingen die niet van de gebruiker voorgrondtoepassing, <xref:System.Windows.Application.Activated>gebeurtenis is opgetreden.</xref:System.Windows.Application.Activated>      > [!NOTE] > Deze methode kan niet worden aangeroepen wanneer een venster wordt gehost in een browser."
  syntax:
    content: public bool Activate ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Windows.Window&quot;> </xref> is is geactiveerd, anders wordt <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.Activate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Activated
  id: Activated
  parent: System.Windows.Window
  langs:
  - csharp
  name: Activated
  nameWithType: Window.Activated
  fullName: System.Windows.Window.Activated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Deze gebeurtenis treedt op wanneer een venster venster op de voorgrond wordt."
  remarks: "Een venster wordt geactiveerd (wordt venster op de voorgrond) wanneer:-het venster voor het eerst wordt geopend.      -Een gebruiker verandert in een venster door deze te selecteren met de muis, op ALT + TAB, of vanuit Taakbeheer.      -Een gebruiker klikt op knop op de taakbalk van het venster.       Windows die u detecteren wilt wanneer ze worden geactiveerd, kan de gebeurtenis geactiveerd verwerken.       Nadat een venster voor het eerst wordt geactiveerd, kan deze worden gedeactiveerd en opnieuw geactiveerd vaak tijdens de levensduur. Als het gedrag of de status van een toepassing, is afhankelijk van de activeringsstatus, kunt inspecteren <xref:System.Windows.Window.IsActive%2A>om te bepalen welke activeringsstatus de in.</xref:System.Windows.Window.IsActive%2A>       Een toepassing kan ook worden <xref:System.Windows.Application.Activated>.</xref:System.Windows.Application.Activated>"
  syntax:
    content: public event EventHandler Activated;
    return:
      type: System.EventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.AllowsTransparency
  id: AllowsTransparency
  parent: System.Windows.Window
  langs:
  - csharp
  name: AllowsTransparency
  nameWithType: Window.AllowsTransparency
  fullName: System.Windows.Window.AllowsTransparency
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of het clientgebied van een venster transparantie ondersteunt."
  remarks: "Wanneer de <xref:System.Windows.Controls.Control.Background%2A>eigenschap van een venster is ingesteld op een transparante kleur, met behulp van <xref:System.Windows.Media.Brushes.Transparent%2A>bijvoorbeeld het venster blijft ondoorzichtige.</xref:System.Windows.Media.Brushes.Transparent%2A> </xref:System.Windows.Controls.Control.Background%2A> Dit betekent dat het bureaublad en actieve toepassingen &quot;onder&quot; het venster niet wordt weergegeven. Om dit type transparantie, AllowsTransparency moet worden ingesteld op `true`.       AllowsTransparency bestaat vergemakkelijkt het maken van niet-rechthoekige windows, en als gevolg daarvan wanneer AllowsTransparency is ingesteld op `true`, een venster <xref:System.Windows.Window.WindowStyle%2A>eigenschap moet worden ingesteld op <xref:System.Windows.WindowStyle>.</xref:System.Windows.WindowStyle> </xref:System.Windows.Window.WindowStyle%2A>      <a name=&quot;dependencyPropertyInfo_WindowAllowsTransparency&quot;></a>## Gegevens van afhankelijkheidseigenschap |||   |-|-|   | Id-veld | <xref:System.Windows.Window.AllowsTransparencyProperty>|   | Eigenschappen van metagegevens is ingesteld op `true`| Geen |</xref:System.Windows.Window.AllowsTransparencyProperty>"
  syntax:
    content: public bool AllowsTransparency { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het venster transparantie ondersteunt. anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.AllowsTransparency*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Een venster met een <xref:System.Windows.Window.WindowStyle*>waarde van iets anders dan <xref href=&quot;System.Windows.WindowStyle&quot;> </xref>.</xref:System.Windows.Window.WindowStyle*>"
  platform:
  - net462
- uid: System.Windows.Window.AllowsTransparencyProperty
  id: AllowsTransparencyProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: AllowsTransparencyProperty
  nameWithType: Window.AllowsTransparencyProperty
  fullName: System.Windows.Window.AllowsTransparencyProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identificeert de <xref:System.Windows.Window.AllowsTransparency*>afhankelijkheidseigenschap.</xref:System.Windows.Window.AllowsTransparency*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AllowsTransparencyProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ArrangeOverride(System.Windows.Size)
  id: ArrangeOverride(System.Windows.Size)
  parent: System.Windows.Window
  langs:
  - csharp
  name: ArrangeOverride(Size)
  nameWithType: Window.ArrangeOverride(Size)
  fullName: System.Windows.Window.ArrangeOverride(Size)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Deze methode om te rangschikken en het formaat van een venster en de onderliggende elementen overschrijven."
  remarks: "ArrangeOverride niet wordt aangeroepen wanneer de <xref:System.Windows.UIElement.Visibility%2A>eigenschap een waarde heeft van <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.UIElement.Visibility%2A> Als de waarde van de <xref:System.Windows.UIElement.Visibility%2A>eigenschap <xref:System.Windows.Visibility>of <xref:System.Windows.Visibility>, ArrangeOverride wordt aangeroepen.</xref:System.Windows.Visibility> </xref:System.Windows.Visibility> </xref:System.Windows.UIElement.Visibility%2A>      > [!NOTE] > Wanneer <xref:System.Windows.Window.Show%2A>of <xref:System.Windows.Window.ShowDialog%2A>worden genoemd, de <xref:System.Windows.UIElement.Visibility%2A>eigenschap van een <xref:System.Windows.Window>is ingesteld op <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.Window> </xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.Window.ShowDialog%2A> </xref:System.Windows.Window.Show%2A>"
  syntax:
    content: protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeBounds);
    parameters:
    - id: arrangeBounds
      type: System.Windows.Size
      description: "Een <xref href=&quot;System.Windows.Size&quot;> </xref> die weerspiegelt de uiteindelijke omvang die het venster schikken zelf en de onderliggende items moet gebruiken."
    return:
      type: System.Windows.Size
      description: "Een <xref href=&quot;System.Windows.Size&quot;> </xref> die weerspiegelt de werkelijke grootte die is gebruikt."
  overload: System.Windows.Window.ArrangeOverride*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Close
  id: Close
  parent: System.Windows.Window
  langs:
  - csharp
  name: Close()
  nameWithType: Window.Close()
  fullName: System.Windows.Window.Close()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Handmatig sluit een <xref href=&quot;System.Windows.Window&quot;> </xref>."
  remarks: "Een <xref:System.Windows.Window>kan worden gesloten met een van de verschillende, een bekende, systeem geleverde mechanismen zich bevinden in de titelbalk, met inbegrip van:-ALT + F4.</xref:System.Windows.Window>      -Menu systeem | **Close**.      - **Sluiten** knop.       Een <xref:System.Windows.Window>kan ook worden gesloten met een van de verschillende bekende mechanismen binnen het clientgebied die worden geleverd door ontwikkelaars, waaronder:- **bestand** | **Afsluiten** op een hoofdvenster.</xref:System.Windows.Window>      -   **File** | **Sluiten** of een **sluiten** knop op een onderliggend venster.      > [!NOTE]  >   **OK** en **annuleren** knoppen op het dialoogvenster zijn ook opgegeven developer, hoewel waarschijnlijk wordt ingesteld <xref:System.Windows.Window.DialogResult%2A>, die een venster dat is geopend door het aanroepen van <xref:System.Windows.Window.ShowDialog%2A>.</xref:System.Windows.Window.ShowDialog%2A> automatisch wordt gesloten</xref:System.Windows.Window.DialogResult%2A>       Deze mechanismen moeten u expliciet Roep Close aan om een venster te sluiten.      > [!NOTE] > Als een venster geopend met het aanroepen van <xref:System.Windows.Window.ShowDialog%2A>, en met een <xref:System.Windows.Controls.Button>met de <xref:System.Windows.Controls.Button.IsCancel%2A>eigenschap is ingesteld op true, wordt automatisch gesloten wanneer de knop ofwel wordt geklikt of ESC wordt gedrukt.</xref:System.Windows.Controls.Button.IsCancel%2A> </xref:System.Windows.Controls.Button> </xref:System.Windows.Window.ShowDialog%2A> Als het venster is geopend met behulp van <xref:System.Windows.Window.Show%2A>, echter sluit moet expliciet genoemd, bijvoorbeeld van een <xref:System.Windows.Controls.Primitives.ButtonBase.Click>gebeurtenis-handler voor de <xref:System.Windows.Controls.Button>.</xref:System.Windows.Controls.Button> </xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Window.Show%2A>       Een venster sluit, wordt de <xref:System.Windows.Window.Closing>gebeurtenis wordt gegenereerd.</xref:System.Windows.Window.Closing> Als de <xref:System.Windows.Window.Closing>gebeurtenis niet is geannuleerd, gebeurt het volgende: - de <xref:System.Windows.Window>wordt verwijderd uit <xref:System.Windows.Application.Windows%2A?displayProperty=fullName>(als een <xref:System.Windows.Application>object bestaat).</xref:System.Windows.Application> </xref:System.Windows.Application.Windows%2A?displayProperty=fullName> </xref:System.Windows.Window> </xref:System.Windows.Window.Closing>      -De <xref:System.Windows.Window>wordt verwijderd uit de eigenaar van de <xref:System.Windows.Window>Als de eigenaar/eigendom relatie tot stand is gebracht voordat de eigen <xref:System.Windows.Window>werd weergegeven en na de eigenaar van de <xref:System.Windows.Window>is geopend.</xref:System.Windows.Window> </xref:System.Windows.Window> </xref:System.Windows.Window> </xref:System.Windows.Window>      -De <xref:System.Windows.Window.Closed>gebeurtenis is opgetreden.</xref:System.Windows.Window.Closed>      -Unmanaged-resources die zijn gemaakt door de <xref:System.Windows.Window>zijn verwijderd.</xref:System.Windows.Window>      -Als <xref:System.Windows.Window.ShowDialog%2A>is aangeroepen om weer te geven de <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A>retourneert.</xref:System.Windows.Window.ShowDialog%2A> </xref:System.Windows.Window> </xref:System.Windows.Window.ShowDialog%2A>       Sluit een <xref:System.Windows.Window>zorgt ervoor dat alle vensters die deze eigenaar om te worden gesloten.</xref:System.Windows.Window> Bovendien sluit een <xref:System.Windows.Window>kan ertoe leiden dat een toepassing stopt met het uitvoeren, afhankelijk van hoe de <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName>eigenschap is ingesteld.</xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName> </xref:System.Windows.Window>      > [!NOTE] > Deze methode kan niet worden aangeroepen wanneer een venster wordt gehost in een browser."
  example:
  - "The following example shows a **File** &#124; **Exit** menu being handled to explicitly call Close.  \n  \n [!code-xml[WindowCloseSnippets#WindowCloseXAML](~/add/codesnippet/xaml/WindowCloseSnippets.CSharp/MainWindow.xaml#windowclosexaml)]  \n  \n [!code-cs[WindowCloseSnippets#WindowCloseCODEBEHIND](~/add/codesnippet/csharp/WindowCloseSnippets.CSharp/MainWindow.xaml.cs#windowclosecodebehind)]\n [!code-vb[WindowCloseSnippets#WindowCloseCODEBEHIND](~/add/codesnippet/visualbasic/windowclosesnippets/mainwindow.xaml.vb#windowclosecodebehind)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Windows.Window.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Closed
  id: Closed
  parent: System.Windows.Window
  langs:
  - csharp
  name: Closed
  nameWithType: Window.Closed
  fullName: System.Windows.Window.Closed
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Deze gebeurtenis treedt op wanneer het venster is gesloten."
  remarks: "Als deze gebeurtenis wordt gegenereerd, kan niet een venster worden voorkomen dat sluiten."
  syntax:
    content: public event EventHandler Closed;
    return:
      type: System.EventHandler
      description: "Moet worden toegevoegd."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<>*> is ingesteld, of <> </> *>, <> </> *>, of <> </> *> is aangeroepen terwijl er een venster wordt gesloten."
  platform:
  - net462
- uid: System.Windows.Window.Closing
  id: Closing
  parent: System.Windows.Window
  langs:
  - csharp
  name: Closing
  nameWithType: Window.Closing
  fullName: System.Windows.Window.Closing
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Deze gebeurtenis treedt op direct na <xref:System.Windows.Window.Close*>heet, en kunnen worden verwerkt om het venster sluiting annuleren.</xref:System.Windows.Window.Close*>"
  remarks: "Afsluiting kan worden verwerkt om te detecteren wanneer een venster wordt gesloten (bijvoorbeeld wanneer <xref:System.Windows.Window.Close%2A>wordt genoemd).</xref:System.Windows.Window.Close%2A> Bovendien kan sluiten worden gebruikt om te voorkomen dat een venster sluiten. U kunt instellen om te voorkomen dat een venster sluiten, de <xref:System.ComponentModel.CancelEventArgs.Cancel%2A>eigenschap van de <xref:System.ComponentModel.CancelEventArgs>argument voor `true`.</xref:System.ComponentModel.CancelEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A>       De afsluiting gebeurtenis treedt op wanneer <xref:System.Windows.Window.Close%2A>is aangeroepen, als een venster sluiten knop wordt geklikt, of als de gebruiker op ALT + F4 drukt.</xref:System.Windows.Window.Close%2A>       Als een in eigendom van het venster is geopend via de eigenaar venster <xref:System.Windows.Window.Show%2A>, en het eigenaarsvenster wordt gesloten, wordt het eigendom van het venster sluiten gebeurtenis niet wordt geactiveerd.</xref:System.Windows.Window.Show%2A> Als de eigenaar van een venster wordt gesloten (Zie <xref:System.Windows.Window.Owner%2A>), sluiten niet moet worden aangeroepen in het venster eigendom.</xref:System.Windows.Window.Owner%2A>       Als <xref:System.Windows.Application.Shutdown%2A>is aangeroepen, de gebeurtenis sluiten voor elk venster wordt gegenereerd.</xref:System.Windows.Application.Shutdown%2A> Als het sluiten is geannuleerd, wordt echter annulering genegeerd.       Als een sessie eindigt omdat een gebruiker zich afmeldt of wordt afgesloten, sluiten niet moet worden aangeroepen; verwerken <xref:System.Windows.Application.SessionEnding>voor het implementeren van code die toepassing sluiting wordt geannuleerd.</xref:System.Windows.Application.SessionEnding>       Als u wilt weergeven of verbergen van een venster meerdere keren gedurende de levensduur van een toepassing en u niet wilt dat elke keer dat u het weergeven van het venster reinstantiate, u kunt de gebeurtenis sluiten verwerken, annuleren en roep de <xref:System.Windows.Window.Hide%2A>methode.</xref:System.Windows.Window.Hide%2A> U kunt vervolgens aanroepen <xref:System.Windows.Window.Show%2A>op hetzelfde exemplaar te openen.</xref:System.Windows.Window.Show%2A>"
  example:
  - "The following example demonstrates a <xref:System.Windows.Window> that determines whether it needs user intervention to close.  \n  \n [!code-xml[WindowClosingSnippets#WindowClosingXAML1](~/add/codesnippet/xaml/WindowClosingSnippets.CSharp/DataWindow.xaml#windowclosingxaml1)]  \n[!code-xml[WindowClosingSnippets#WindowClosingXAML2](~/add/codesnippet/xaml/WindowClosingSnippets.CSharp/DataWindow.xaml#windowclosingxaml2)]  \n  \n [!code-cs[WindowClosingSnippets#WindowClosingCODEBEHIND1](~/add/codesnippet/csharp/WindowClosingSnippets.CSharp/DataWindow.xaml.cs#windowclosingcodebehind1)]\n [!code-vb[WindowClosingSnippets#WindowClosingCODEBEHIND1](~/add/codesnippet/visualbasic/windowclosingsnippets/datawindow.xaml.vb#windowclosingcodebehind1)]  \n[!code-cs[WindowClosingSnippets#WindowClosingCODEBEHIND2](~/add/codesnippet/csharp/WindowClosingSnippets.CSharp/DataWindow.xaml.cs#windowclosingcodebehind2)]\n[!code-vb[WindowClosingSnippets#WindowClosingCODEBEHIND2](~/add/codesnippet/visualbasic/windowclosingsnippets/datawindow.xaml.vb#windowclosingcodebehind2)]"
  syntax:
    content: public event System.ComponentModel.CancelEventHandler Closing;
    return:
      type: System.ComponentModel.CancelEventHandler
      description: "Moet worden toegevoegd."
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<>*> is ingesteld, of <> </> *>, <> </> *>, of <> </> *> is aangeroepen terwijl er een venster wordt gesloten."
  platform:
  - net462
- uid: System.Windows.Window.ContentRendered
  id: ContentRendered
  parent: System.Windows.Window
  langs:
  - csharp
  name: ContentRendered
  nameWithType: Window.ContentRendered
  fullName: System.Windows.Window.ContentRendered
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Deze gebeurtenis treedt op nadat de inhoud van een venster is weergegeven."
  remarks: "Als het venster geen inhoud bevat, wordt deze gebeurtenis niet gestart."
  syntax:
    content: public event EventHandler ContentRendered;
    return:
      type: System.EventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Deactivated
  id: Deactivated
  parent: System.Windows.Window
  langs:
  - csharp
  name: Deactivated
  nameWithType: Window.Deactivated
  fullName: System.Windows.Window.Deactivated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Deze gebeurtenis treedt op wanneer een venster een venster van de achtergrond wordt."
  remarks: "Een venster wordt gedeactiveerd (wordt een venster achtergrond) wanneer:-een gebruiker verandert in een ander venster in de huidige toepassing.      -Een gebruiker verandert in het venster in een andere toepassing met behulp van ALT + TAB of door Taakbeheer te gebruiken.      -Een gebruiker klikt op de taakbalk voor een venster in een andere toepassing.       Windows die nodig zijn om te detecteren wanneer ze worden gedeactiveerd door de gebeurtenis gedeactiveerd afhandelt.       Nadat een venster voor het eerst wordt gedeactiveerd, kan deze worden geactiveerd en vaak tijdens de levensduur is gedeactiveerd. Als het gedrag of de status van een toepassing, is afhankelijk van de activeringsstatus, kunt inspecteren <xref:System.Windows.Window.IsActive%2A>om te bepalen welke activeringsstatus de in.</xref:System.Windows.Window.IsActive%2A>       Een toepassing kan ook worden <xref:System.Windows.Application.Deactivated>.</xref:System.Windows.Application.Deactivated>"
  syntax:
    content: public event EventHandler Deactivated;
    return:
      type: System.EventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.DialogResult
  id: DialogResult
  parent: System.Windows.Window
  langs:
  - csharp
  name: DialogResult
  nameWithType: Window.DialogResult
  fullName: System.Windows.Window.DialogResult
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van de waarde voor het resultaat van dialoogvenster, dit de waarde die wordt geretourneerd is vanaf de <xref:System.Windows.Window.ShowDialog*>methode.</xref:System.Windows.Window.ShowDialog*>"
  remarks: "DialogResult kan worden gebruikt vanuit de code die een dialoogvenster om te bepalen of een gebruiker is geaccepteerd bleek (`true`) of geannuleerd (`false`) in het dialoogvenster. Als een dialoogvenster is geaccepteerd, geeft dit naar de code die in het dialoogvenster voor het ophalen van de gegevens die is verzameld door de gebruiker en verwerken van deze geopend. Als een dialoogvenster is geannuleerd, maar betekent dit dat code aanroepen moet worden stopgezet verdere verwerking.       Standaard wordt een dialoogvenster geannuleerd wanneer een gebruiker een van de volgende opties:-PressesALT + F4.      -Klikt op de **sluiten** knop.      : Hiermee kunt u **sluiten** in het menu van het systeem.       In al deze gevallen is het DialogResult `false` standaard.       Een dialoogvenster levert meestal een speciale knop om een dialoogvenster, de knop wordt annuleren waarvan <xref:System.Windows.Controls.Button.IsCancel%2A>eigenschap is ingesteld op `true`.</xref:System.Windows.Controls.Button.IsCancel%2A> Een knop die is geconfigureerd op deze manier wordt automatisch een venster sluiten wanneer op deze knop is ingedrukt of wanneer de ESC-toets wordt ingedrukt. In beide gevallen DialogResult blijft `false`.       Een dialoogvenster bevat meestal ook de knop accepteren die op de knop waarvan <xref:System.Windows.Controls.Button.IsDefault%2A>eigenschap is ingesteld op `true`.</xref:System.Windows.Controls.Button.IsDefault%2A> Een knop die is geconfigureerd op deze manier verhoogt de <xref:System.Windows.Controls.Primitives.ButtonBase.Click>-gebeurtenis geactiveerd wanneer het bestand of de ENTER-toets wordt gedrukt.</xref:System.Windows.Controls.Primitives.ButtonBase.Click> Echter deze automatisch in het dialoogvenster niet gesloten, noch worden deze DialogResult ingesteld op `true`. U moet handmatig dit om code te schrijven, meestal uit de <xref:System.Windows.Controls.Primitives.ButtonBase.Click>gebeurtenis-handler voor de standaardknop.</xref:System.Windows.Controls.Primitives.ButtonBase.Click>       DialogResult is `null` wanneer het dialoogvenster wordt weergegeven maar geaccepteerde noch geannuleerd.       Nadat een dialoogvenster wordt gesloten, kunt u het resultaat van dialoogvenster ophalen van de waarde die is geretourneerd door <xref:System.Windows.Window.ShowDialog%2A>methode, of door te inspecteren van de DialogResult-eigenschap.</xref:System.Windows.Window.ShowDialog%2A>       DialogResult kan worden ingesteld wanneer een <xref:System.Windows.Window>wordt geopend door het aanroepen van de <xref:System.Windows.Window.ShowDialog%2A>methode.</xref:System.Windows.Window.ShowDialog%2A> </xref:System.Windows.Window>      > [!NOTE] > U niet instellen of ophalen van deze eigenschap wanneer een venster wordt gehost in een browser."
  example:
  - "The following example shows how to configure an OK button and a Cancel button to return the appropriate DialogResult.  \n  \n [!code-xml[WindowDialogResultSnippets#WindowDialogResultXAML](~/add/codesnippet/xaml/WindowDialogResultSnippets.CSharp/DialogBox.xaml#windowdialogresultxaml)]  \n  \n [!code-cs[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/add/codesnippet/csharp/WindowDialogResultSnippets.CSharp/DialogBox.xaml.cs#windowdialogresultcodebehind)]\n [!code-vb[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/add/codesnippet/visualbasic/windowdialogresultsnippets/dialogbox.xaml.vb#windowdialogresultcodebehind)]"
  syntax:
    content: public Nullable<bool> DialogResult { get; set; }
    return:
      type: System.Nullable{System.Boolean}
      description: "Een &lt;xref:System.Nullable%601&gt; waarde van het type <xref:System.Boolean>.</xref:System.Boolean> De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.DialogResult*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "DialogResult wordt ingesteld voordat een venster wordt geopend door het aanroepen van <> </> *>.       - of - DialogResult is ingesteld op een venster dat wordt geopend door het aanroepen van <> </> *>."
  platform:
  - net462
- uid: System.Windows.Window.DpiChanged
  id: DpiChanged
  parent: System.Windows.Window
  langs:
  - csharp
  name: DpiChanged
  nameWithType: Window.DpiChanged
  fullName: System.Windows.Window.DpiChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Deze gebeurtenis treedt op nadat de DPI-waarde van het scherm op waarop het venster is wijzigingen weergegeven."
  syntax:
    content: public event System.Windows.DpiChangedEventHandler DpiChanged;
    return:
      type: System.Windows.DpiChangedEventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.DpiChangedEvent
  id: DpiChangedEvent
  parent: System.Windows.Window
  langs:
  - csharp
  name: DpiChangedEvent
  nameWithType: Window.DpiChangedEvent
  fullName: System.Windows.Window.DpiChangedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Een <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref> voor wanneer de DPI-waarde van het scherm van het venster van wijzigingen is."
  syntax:
    content: public static readonly System.Windows.RoutedEvent DpiChangedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.DragMove
  id: DragMove
  parent: System.Windows.Window
  langs:
  - csharp
  name: DragMove()
  nameWithType: Window.DragMove()
  fullName: System.Windows.Window.DragMove()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Hiermee kunt een venster met een muis met de linkermuisknop ingedrukt een zichtbare gebied van het clientgebied van het venster gesleept."
  remarks: "De linkermuisknop moet niet beschikbaar wanneer DragMove is aangeroepen. Een manier om te detecteren wanneer de linker muisknop wordt ingedrukt is voor het afhandelen van de <xref:System.Windows.UIElement.MouseLeftButtonDown>gebeurtenis.</xref:System.Windows.UIElement.MouseLeftButtonDown>       Als DragMove wordt aangeroepen, moet u de linkermuisknop ingedrukt via een zichtbare gebied van het clientgebied van het venster.      > [!NOTE] > Deze methode kan niet worden aangeroepen wanneer een venster wordt gehost in een browser."
  example:
  - "The following example shows how to override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to call DragMove.  \n  \n [!code-cs[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/add/codesnippet/csharp/WindowDragMoveSnippets/MainWindow.xaml.cs#callwindowdragmovecodebehind)]\n [!code-vb[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/add/codesnippet/visualbasic/windowdragmovesnippets/mainwindow.xaml.vb#callwindowdragmovecodebehind)]"
  syntax:
    content: public void DragMove ();
    parameters: []
  overload: System.Windows.Window.DragMove*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Er is geen de linkermuisknop omlaag."
  platform:
  - net462
- uid: System.Windows.Window.GetWindow(System.Windows.DependencyObject)
  id: GetWindow(System.Windows.DependencyObject)
  parent: System.Windows.Window
  langs:
  - csharp
  name: GetWindow(DependencyObject)
  nameWithType: Window.GetWindow(DependencyObject)
  fullName: System.Windows.Window.GetWindow(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Retourneert een verwijzing naar de <xref href=&quot;System.Windows.Window&quot;> </xref> -object dat als host fungeert voor de inhoud structuur waarbinnen de afhankelijkheidsobject zich bevindt."
  syntax:
    content: public static System.Windows.Window GetWindow (System.Windows.DependencyObject dependencyObject);
    parameters:
    - id: dependencyObject
      type: System.Windows.DependencyObject
      description: "Het afhankelijkheidsobject."
    return:
      type: System.Windows.Window
      description: "Een <xref href=&quot;System.Windows.Window&quot;> </xref> verwijzing naar het hostvenster."
  overload: System.Windows.Window.GetWindow*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dependencyObject</code>is null."
  platform:
  - net462
- uid: System.Windows.Window.Hide
  id: Hide
  parent: System.Windows.Window
  langs:
  - csharp
  name: Hide()
  nameWithType: Window.Hide()
  fullName: System.Windows.Window.Hide()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Wordt een venster onzichtbaar gemaakt."
  remarks: "Een venster is niet gesloten wanneer het verborgen is en geen van beide de <xref:System.Windows.Window.Closing>noch <xref:System.Windows.Window.Closed>gebeurtenis is opgetreden.</xref:System.Windows.Window.Closed> </xref:System.Windows.Window.Closing> In plaats daarvan het venster <xref:System.Windows.UIElement.Visibility%2A>eigenschap is ingesteld op <xref:System.Windows.Visibility?displayProperty=fullName>.</xref:System.Windows.Visibility?displayProperty=fullName> </xref:System.Windows.UIElement.Visibility%2A>       Als een venster van de toepassing <xref:System.Windows.Application.MainWindow%2A>en de toepassing <xref:System.Windows.Application.ShutdownMode%2A>is <xref:System.Windows.ShutdownMode>, de toepassing wordt niet afgesloten.</xref:System.Windows.ShutdownMode> </xref:System.Windows.Application.ShutdownMode%2A> </xref:System.Windows.Application.MainWindow%2A> Ook kan wordt de toepassing niet afgesloten als een venster het enige venster is en van de toepassing afsluiten modus <xref:System.Windows.ShutdownMode>.</xref:System.Windows.ShutdownMode>       Als u wilt weergeven of verbergen van een venster meerdere keren gedurende de levensduur van een toepassing en u niet wilt dat voor het opnieuw starten van het venster telkens wanneer deze worden weergegeven, kunt u verwerken de <xref:System.Windows.Window.Closing>-gebeurtenis annuleren en roep de methode verbergen.</xref:System.Windows.Window.Closing> U kunt vervolgens aanroepen <xref:System.Windows.Window.Show%2A>op hetzelfde exemplaar voor het opnieuw openen.</xref:System.Windows.Window.Show%2A>"
  syntax:
    content: public void Hide ();
    parameters: []
  overload: System.Windows.Window.Hide*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Verbergen wordt aangeroepen in een venster dat wordt gesloten (<xref href=&quot;System.Windows.Window.Closing&quot;></xref>) of gesloten (<xref href=&quot;System.Windows.Window.Closed&quot;></xref>)."
  platform:
  - net462
- uid: System.Windows.Window.Icon
  id: Icon
  parent: System.Windows.Window
  langs:
  - csharp
  name: Icon
  nameWithType: Window.Icon
  fullName: System.Windows.Window.Icon
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van een venster pictogram."
  remarks: "[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]zelfstandige toepassingen hebben twee typen pictogrammen:-pictogram voor een assembly die is opgegeven met behulp van de `<ApplicationIcon>` eigenschap in de toepassing project-bestand maken. Dit pictogram wordt gebruikt als het bureaubladpictogram voor een assembly.          > [!NOTE] > Als u fouten opspoort in Visual Studio, uw pictogram vanwege het hostproces mogelijk niet. Als u het uitvoerbare bestand uitvoert, wordt het pictogram wordt weergegeven. Zie voor meer informatie [Hosting-proces (vshost.exe)](~/add/includes/ajax-current-ext-md.md).      -Een pictogram per venster dat is opgegeven door het pictogram instellen. Voor elk venster wordt dit pictogram gebruikt in de titelbalk van de taak knop, en in de vermelding ALT TAB toepassing selectie lijst.       Een [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] venster wordt altijd een pictogram weergegeven. Wanneer deze niet is opgegeven door in te stellen pictogram [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] kiest u een pictogram om weer te geven op basis van de volgende regels: 1.  Gebruik het pictogram assembly als opgegeven.      2.  Als het pictogram van de assembly niet is opgegeven, gebruikt u de standaard [!INCLUDE[TLA#tla_win](~/add/includes/ajax-current-ext-md.md)] pictogram.       Als u een pictogram gebruikt om op te geven van een aangepast pictogram, kunt u de toepassing standaardpictogram herstellen door het pictogram instelt op `null`.       Een enkel pictogram kan worden gebruikt in tal van manieren [!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)], zoals wordt weergegeven in de titelbalk van een venster van de taakbalk voor een venster van de ALT + TAB selectielijst bestand. Elk van deze ziet u het pictogram met behulp van een andere grootte. een pictogram van 16 x 16 pixels weergegeven in de titelbalk van een venster en in de taakbalk, terwijl een 32 x 32 pixels-pictogram wordt weergegeven in de selectielijst ALT + TAB-bestand. Sommige toepassingen, zoals [!INCLUDE[TLA#tla_winexpl](~/add/includes/tlasharptla-winexpl-md.md)], bieden een **weergave** menu waarmee u wilt de grootte van het pictogram dat u wilt weergeven.       Om te voorzien in de verschillende weergavegrootten, een pictogrambestand bestaat uit een of meer werkelijke pictogrammen, waarbij elk criterium een versie van het pictogram die gericht is op een specifieke grootte en de kleurdiepte vertegenwoordigt. Een pictogram mag bijvoorbeeld slechts één 16 x 16 pixels pictogram met 16 kleuren bestaan terwijl een andere 16 x 16 pixels en pictogrammen van 32 x 32 pixels met 16 kleuren en 256 kleuren kan bevatten.       Als pictogrammen voor alle mogelijke grootten en kleurdiepte bestaan binnen een pictogrambestand <xref:System.Windows.Window>gebruikt het juiste pictogram.</xref:System.Windows.Window> Als een pictogrambestand alleen een subset van de mogelijke pictogrammen bevat <xref:System.Windows.Window>maakt gebruik van het volgende pictogram van de meest geschikte in volgorde van verkleinen kleurdiepte en grootten.</xref:System.Windows.Window>       Het resultaat is dat een pictogram altijd worden gebruikt door <xref:System.Windows.Window>, hoewel de vereiste grootte en de kleurdiepte niet op het pictogram dat wordt gebruikt gericht mogelijk.</xref:System.Windows.Window> Een pictogram 16 x 16 pixels met 16 kleuren kan bijvoorbeeld worden gebruikt om weer te geven als een pictogram 32 x 32 pixels met 256 kleuren. Dit kan leiden tot visual bijwerkingen, zoals pixilation, maar kan worden vermeden door het maken van de pictogrammen voor alle beoogde grootten en kleurdiepte.      > [!NOTE] > U niet instellen of ophalen van deze eigenschap wanneer een venster wordt gehost in een browser.      <a name=&quot;dependencyPropertyInfo_WindowIcon&quot;></a>## Gegevens van afhankelijkheidseigenschap |||   |-|-|   | Id-veld | <xref:System.Windows.Window.IconProperty>|   | Eigenschappen van metagegevens is ingesteld op `true`| Geen |</xref:System.Windows.Window.IconProperty>"
  example:
  - "The following example shows how to set a window icon.  \n  \n [!code-xml[WindowIconSnippets#WindowIconSetXAML](~/add/codesnippet/xaml/WindowIconSnippets.WindowIconSample/MainWindow.xaml#windowiconsetxaml)]  \n  \n [!code-vb[WindowIconSnippets#SetWindowIconInCode](~/add/codesnippet/visualbasic/windowiconsample/mainwindow.xaml.vb#setwindowiconincode)]\n [!code-cs[WindowIconSnippets#SetWindowIconInCode](~/add/codesnippet/csharp/WindowIconSnippets.WindowIconSample/MainWindow.xaml.cs#setwindowiconincode)]"
  syntax:
    content: public System.Windows.Media.ImageSource Icon { get; set; }
    return:
      type: System.Windows.Media.ImageSource
      description: "Een <xref href=&quot;System.Windows.Media.ImageSource&quot;> </xref> object dat het pictogram vertegenwoordigt."
  overload: System.Windows.Window.Icon*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.IconProperty
  id: IconProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: IconProperty
  nameWithType: Window.IconProperty
  fullName: System.Windows.Window.IconProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identificeert de <xref:System.Windows.Window.Icon*>afhankelijkheidseigenschap.</xref:System.Windows.Window.Icon*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IconProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.IsActive
  id: IsActive
  parent: System.Windows.Window
  langs:
  - csharp
  name: IsActive
  nameWithType: Window.IsActive
  fullName: System.Windows.Window.IsActive
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Haalt een waarde die aangeeft of het venster actief is."
  remarks: "Een actieve venster van de gebruiker huidige voorgrondvenster is en de focus wordt aangegeven door de actieve weergave van de titelbalk. Een actieve venster worden ook de bovenste van alle op het hoogste niveau windows die niet expliciet instelt de <xref:System.Windows.Window.Topmost%2A>eigenschap.</xref:System.Windows.Window.Topmost%2A>      <a name=&quot;dependencyPropertyInfo_WindowIsActive&quot;></a>## Gegevens van afhankelijkheidseigenschap |||   |-|-|   | Id-veld | <xref:System.Windows.Window.IsActiveProperty>|   | Eigenschappen van metagegevens is ingesteld op `true`| Geen |</xref:System.Windows.Window.IsActiveProperty>"
  syntax:
    content: public bool IsActive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het venster niet actief is. anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.IsActive*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.IsActiveProperty
  id: IsActiveProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: IsActiveProperty
  nameWithType: Window.IsActiveProperty
  fullName: System.Windows.Window.IsActiveProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identificeert de <xref:System.Windows.Window.IsActive*>afhankelijkheidseigenschap.</xref:System.Windows.Window.IsActive*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsActiveProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Left
  id: Left
  parent: System.Windows.Window
  langs:
  - csharp
  name: Left
  nameWithType: Window.Left
  fullName: System.Windows.Window.Left
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van de positie van de linkerrand van het venster ten opzichte van het bureaublad."
  remarks: "Wanneer het <xref:System.Windows.Window>wordt gemaximaliseerd of geminimaliseerd, deze waarde vertegenwoordigt de linkerrand van het terugzetten verwijzen voor de <xref:System.Windows.Window>.</xref:System.Windows.Window> </xref:System.Windows.Window>       Deze eigenschap kan niet worden ingesteld via een stijl.       Als u een waarde niet opgeeft, worden links is ingesteld op de standaardwaarde van het systeem. U kunt ook de standaardwaarde van het systeem door het instellen van links naar <xref:System.Double.NaN>.</xref:System.Double.NaN> opgeven Noch <xref:System.Double.NegativeInfinity>noch <xref:System.Double.PositiveInfinity>is een geldige waarde voor links.</xref:System.Double.PositiveInfinity> </xref:System.Double.NegativeInfinity>      > [!NOTE] > U niet instellen of ophalen van deze eigenschap wanneer een venster wordt gehost in een browser.      <a name=&quot;dependencyPropertyInfo_WindowLeft&quot;></a>## Gegevens van afhankelijkheidseigenschap |||   |-|-|   | Id-veld | <xref:System.Windows.Window.LeftProperty>|   | Eigenschappen van metagegevens is ingesteld op `true`| Geen |</xref:System.Windows.Window.LeftProperty>"
  syntax:
    content: public double Left { get; set; }
    return:
      type: System.Double
      description: "De positie van het venster de linkerrand, in de logische eenheden (1/96th inch)."
  overload: System.Windows.Window.Left*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.LeftProperty
  id: LeftProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: LeftProperty
  nameWithType: Window.LeftProperty
  fullName: System.Windows.Window.LeftProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identificeert de <xref:System.Windows.Window.Left*>afhankelijkheidseigenschap.</xref:System.Windows.Window.Left*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty LeftProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.LocationChanged
  id: LocationChanged
  parent: System.Windows.Window
  langs:
  - csharp
  name: LocationChanged
  nameWithType: Window.LocationChanged
  fullName: System.Windows.Window.LocationChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Treedt op wanneer de locatie van het venster wijzigt."
  remarks: "Locatie van een venster wordt gewijzigd:-een gebruiker een venster met de titelbalk van het venster slepen verplaatst.      -Een venster wordt verplaatst nadat <xref:System.Windows.Window.DragMove%2A>wordt aangeroepen.</xref:System.Windows.Window.DragMove%2A>      -Ofwel de <xref:System.Windows.Window.Left%2A>of <xref:System.Windows.Window.Top%2A>eigenschap programmatisch is ingesteld.</xref:System.Windows.Window.Top%2A> </xref:System.Windows.Window.Left%2A>      -De **verplaatsen** menu-item van een venster Systeemmenu wordt gekozen.      -De <xref:System.Windows.Window.WindowState%2A>eigenschap wordt gewijzigd.</xref:System.Windows.Window.WindowState%2A>"
  syntax:
    content: public event EventHandler LocationChanged;
    return:
      type: System.EventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.LogicalChildren
  id: LogicalChildren
  parent: System.Windows.Window
  langs:
  - csharp
  name: LogicalChildren
  nameWithType: Window.LogicalChildren
  fullName: System.Windows.Window.LogicalChildren
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Hiermee wordt een enumerator voor een venster logische onderliggende elementen."
  syntax:
    content: protected override System.Collections.IEnumerator LogicalChildren { get; }
    return:
      type: System.Collections.IEnumerator
      description: "Een <xref:System.Collections.IEnumerator>van een venster logische onderliggende elementen.</xref:System.Collections.IEnumerator>"
  overload: System.Windows.Window.LogicalChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.MeasureOverride(System.Windows.Size)
  id: MeasureOverride(System.Windows.Size)
  parent: System.Windows.Window
  langs:
  - csharp
  name: MeasureOverride(Size)
  nameWithType: Window.MeasureOverride(Size)
  fullName: System.Windows.Window.MeasureOverride(Size)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Deze methode voor het meten van de grootte van een venster overschrijven."
  remarks: "MeasureOverride niet wordt aangeroepen wanneer de <xref:System.Windows.UIElement.Visibility%2A>eigenschap een waarde heeft van <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.UIElement.Visibility%2A> Als de waarde van de <xref:System.Windows.UIElement.Visibility%2A>eigenschap <xref:System.Windows.Visibility>of <xref:System.Windows.Visibility>, MeasureOverride wordt aangeroepen.</xref:System.Windows.Visibility> </xref:System.Windows.Visibility> </xref:System.Windows.UIElement.Visibility%2A>      > [!NOTE] > Wanneer <xref:System.Windows.Window.Show%2A>of <xref:System.Windows.Window.ShowDialog%2A>worden genoemd, de <xref:System.Windows.UIElement.Visibility%2A>eigenschap van een <xref:System.Windows.Window>is ingesteld op <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.Window> </xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.Window.ShowDialog%2A> </xref:System.Windows.Window.Show%2A>"
  syntax:
    content: protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);
    parameters:
    - id: availableSize
      type: System.Windows.Size
      description: "Een <xref href=&quot;System.Windows.Size&quot;> </xref> die de beschikbare grootte die in dit venster tot de onderliggende geven kunt weerspiegelt. Oneindig kan om aan te geven dat de grootte van het venster wordt de inhoud beschikbaar is als een waarde worden opgegeven."
    return:
      type: System.Windows.Size
      description: "Een <xref href=&quot;System.Windows.Size&quot;> </xref> die afspiegeling van het formaat dat in dit venster bepaalt moet tijdens de lay-out op basis van de berekeningen van de grootte van kinderen."
  overload: System.Windows.Window.MeasureOverride*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnActivated(System.EventArgs)
  id: OnActivated(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnActivated(EventArgs)
  nameWithType: Window.OnActivated(EventArgs)
  fullName: System.Windows.Window.OnActivated(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Geeft de <xref href=&quot;System.Windows.Window.Activated&quot;> </xref> gebeurtenis."
  remarks: "OnActivated verhoogt de <xref:System.Windows.Window.Activated>gebeurtenis.</xref:System.Windows.Window.Activated>       Een type dat is afgeleid van <xref:System.Windows.Window>OnActivated mag overschrijven.</xref:System.Windows.Window> De overschreven methode moet OnActivated aanroepen in de basisklasse als <xref:System.Windows.Window.Activated>moet worden verhoogd.</xref:System.Windows.Window.Activated>"
  syntax:
    content: protected virtual void OnActivated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Een <xref:System.EventArgs>waarin de gebeurtenisgegevens.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnClosed(System.EventArgs)
  id: OnClosed(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnClosed(EventArgs)
  nameWithType: Window.OnClosed(EventArgs)
  fullName: System.Windows.Window.OnClosed(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Geeft de <xref href=&quot;System.Windows.Window.Closed&quot;> </xref> gebeurtenis."
  remarks: "OnClosed verhoogt de <xref:System.Windows.Window.Closed>gebeurtenis.</xref:System.Windows.Window.Closed>       Een type dat is afgeleid van <xref:System.Windows.Window>OnClosed mag overschrijven.</xref:System.Windows.Window> De overschreven methode moet OnClosed aanroepen in de basisklasse als <xref:System.Windows.Window.Closed>moet worden verhoogd.</xref:System.Windows.Window.Closed>"
  syntax:
    content: protected virtual void OnClosed (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Een <xref:System.EventArgs>waarin de gebeurtenisgegevens.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnClosed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)
  id: OnClosing(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnClosing(CancelEventArgs)
  nameWithType: Window.OnClosing(CancelEventArgs)
  fullName: System.Windows.Window.OnClosing(CancelEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Geeft de <xref href=&quot;System.Windows.Window.Closing&quot;> </xref> gebeurtenis."
  remarks: "OnClosing verhoogt de <xref:System.Windows.Window.Closing>gebeurtenis.</xref:System.Windows.Window.Closing>       Een type dat is afgeleid van <xref:System.Windows.Window>OnClosing mag overschrijven.</xref:System.Windows.Window> De overschreven methode moet OnClosing aanroepen in de basisklasse als <xref:System.Windows.Window.Closing>moet worden verhoogd.</xref:System.Windows.Window.Closing>"
  syntax:
    content: protected virtual void OnClosing (System.ComponentModel.CancelEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.CancelEventArgs
      description: "Een <xref:System.ComponentModel.CancelEventArgs>waarin de gebeurtenisgegevens.</xref:System.ComponentModel.CancelEventArgs>"
  overload: System.Windows.Window.OnClosing*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnContentChanged(System.Object,System.Object)
  id: OnContentChanged(System.Object,System.Object)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnContentChanged(Object,Object)
  nameWithType: Window.OnContentChanged(Object,Object)
  fullName: System.Windows.Window.OnContentChanged(Object,Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Aangeroepen wanneer de <xref:System.Windows.Controls.ContentControl.Content*>eigenschapswijzigingen.</xref:System.Windows.Controls.ContentControl.Content*>"
  syntax:
    content: protected override void OnContentChanged (object oldContent, object newContent);
    parameters:
    - id: oldContent
      type: System.Object
      description: "Een verwijzing naar de hoofdmap van de structuur van de oude inhoud."
    - id: newContent
      type: System.Object
      description: "Een verwijzing naar de hoofdmap van de nieuwe inhoud structuur."
  overload: System.Windows.Window.OnContentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnContentRendered(System.EventArgs)
  id: OnContentRendered(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnContentRendered(EventArgs)
  nameWithType: Window.OnContentRendered(EventArgs)
  fullName: System.Windows.Window.OnContentRendered(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Geeft de <xref href=&quot;System.Windows.Window.ContentRendered&quot;> </xref> gebeurtenis."
  remarks: "OnContentRendered verhoogt de <xref:System.Windows.Window.ContentRendered>gebeurtenis.</xref:System.Windows.Window.ContentRendered>       Een type dat is afgeleid van <xref:System.Windows.Window>OnContentRendered mag overschrijven.</xref:System.Windows.Window> De overschreven methode moet OnContentRendered aanroepen in de basisklasse als <xref:System.Windows.Window.ContentRendered>moet worden verhoogd.</xref:System.Windows.Window.ContentRendered>"
  syntax:
    content: protected virtual void OnContentRendered (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Een <xref:System.EventArgs>waarin de gebeurtenisgegevens.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnContentRendered*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnCreateAutomationPeer
  id: OnCreateAutomationPeer
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnCreateAutomationPeer()
  nameWithType: Window.OnCreateAutomationPeer()
  fullName: System.Windows.Window.OnCreateAutomationPeer()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Maakt en retourneert een <xref href=&quot;System.Windows.Automation.Peers.WindowAutomationPeer&quot;> </xref> object voor deze <xref href=&quot;System.Windows.Window&quot;> </xref>."
  remarks: "Deze methode overschrijft <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.</xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>"
  syntax:
    content: protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();
    parameters: []
    return:
      type: System.Windows.Automation.Peers.AutomationPeer
      description: "A <xref href=&quot;System.Windows.Automation.Peers.WindowAutomationPeer&quot;></xref> object for this <xref href=&quot;System.Windows.Window&quot;></xref>."
  overload: System.Windows.Window.OnCreateAutomationPeer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnDeactivated(System.EventArgs)
  id: OnDeactivated(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnDeactivated(EventArgs)
  nameWithType: Window.OnDeactivated(EventArgs)
  fullName: System.Windows.Window.OnDeactivated(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Geeft de <xref href=&quot;System.Windows.Window.Deactivated&quot;> </xref> gebeurtenis."
  remarks: "OnDeactivated verhoogt de <xref:System.Windows.Window.Deactivated>gebeurtenis.</xref:System.Windows.Window.Deactivated>       Een type dat is afgeleid van <xref:System.Windows.Window>OnDeactivated mag overschrijven.</xref:System.Windows.Window> De overschreven methode moet OnDeactivated aanroepen in de basisklasse als <xref:System.Windows.Window.Deactivated>moet worden verhoogd.</xref:System.Windows.Window.Deactivated>"
  syntax:
    content: protected virtual void OnDeactivated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Een <xref:System.EventArgs>waarin de gebeurtenisgegevens.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnDeactivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  id: OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnDpiChanged(DpiScale,DpiScale)
  nameWithType: Window.OnDpiChanged(DpiScale,DpiScale)
  fullName: System.Windows.Window.OnDpiChanged(DpiScale,DpiScale)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Aangeroepen wanneer de DPI-waarde waarmee dit venster wijzigingen wordt weergegeven."
  syntax:
    content: protected override void OnDpiChanged (System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi);
    parameters:
    - id: oldDpi
      type: System.Windows.DpiScale
      description: "De vorige DPI-schaal instellen."
    - id: newDpi
      type: System.Windows.DpiScale
      description: "De nieuwe DPI-schaal instellen."
  overload: System.Windows.Window.OnDpiChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnLocationChanged(System.EventArgs)
  id: OnLocationChanged(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnLocationChanged(EventArgs)
  nameWithType: Window.OnLocationChanged(EventArgs)
  fullName: System.Windows.Window.OnLocationChanged(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Geeft de <xref href=&quot;System.Windows.Window.LocationChanged&quot;> </xref> gebeurtenis."
  remarks: "OnLocationChanged verhoogt de <xref:System.Windows.Window.LocationChanged>gebeurtenis.</xref:System.Windows.Window.LocationChanged>       Een type dat is afgeleid van <xref:System.Windows.Window>OnLocationChanged mag overschrijven.</xref:System.Windows.Window> De overschreven methode moet OnLocationChanged aanroepen in de basisklasse als <xref:System.Windows.Window.LocationChanged>moet worden verhoogd.</xref:System.Windows.Window.LocationChanged>"
  syntax:
    content: protected virtual void OnLocationChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Een <xref:System.EventArgs>waarin de gebeurtenisgegevens.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnLocationChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  id: OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Aangeroepen wanneer de <xref href=&quot;System.Windows.UIElement.ManipulationBoundaryFeedback&quot;> </xref> gebeurtenis plaatsvindt."
  remarks: "Deze implementatie heeft geen invloed op de verwerkte status (de <xref:System.Windows.RoutedEventArgs.Handled%2A>eigenschap) van de <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>gebeurtenisgegevens.</xref:System.Windows.UIElement.ManipulationBoundaryFeedback> </xref:System.Windows.RoutedEventArgs.Handled%2A>"
  syntax:
    content: protected override void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
      description: "De gegevens voor de gebeurtenis."
  overload: System.Windows.Window.OnManipulationBoundaryFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnSourceInitialized(System.EventArgs)
  id: OnSourceInitialized(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnSourceInitialized(EventArgs)
  nameWithType: Window.OnSourceInitialized(EventArgs)
  fullName: System.Windows.Window.OnSourceInitialized(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Geeft de <xref href=&quot;System.Windows.Window.SourceInitialized&quot;> </xref> gebeurtenis."
  remarks: "OnSourceInitialized verhoogt de <xref:System.Windows.Window.SourceInitialized>gebeurtenis.</xref:System.Windows.Window.SourceInitialized>       Een type dat is afgeleid van <xref:System.Windows.Window>OnSourceInitialized mag overschrijven.</xref:System.Windows.Window> De overschreven methode moet OnSourceInitialized aanroepen in de basisklasse als <xref:System.Windows.Window.SourceInitialized>moet worden verhoogd.</xref:System.Windows.Window.SourceInitialized>"
  syntax:
    content: protected virtual void OnSourceInitialized (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Een <xref:System.EventArgs>waarin de gebeurtenisgegevens.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnSourceInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnStateChanged(System.EventArgs)
  id: OnStateChanged(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnStateChanged(EventArgs)
  nameWithType: Window.OnStateChanged(EventArgs)
  fullName: System.Windows.Window.OnStateChanged(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Geeft de <xref href=&quot;System.Windows.Window.StateChanged&quot;> </xref> gebeurtenis."
  remarks: "OnStateChanged verhoogt de <xref:System.Windows.Window.StateChanged>gebeurtenis.</xref:System.Windows.Window.StateChanged>       Een type dat is afgeleid van <xref:System.Windows.Window>OnStateChanged mag overschrijven.</xref:System.Windows.Window> De overschreven methode moet OnStateChanged aanroepen in de basisklasse als <xref:System.Windows.Window.StateChanged>moet worden verhoogd.</xref:System.Windows.Window.StateChanged>"
  syntax:
    content: protected virtual void OnStateChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "Een <xref:System.EventArgs>waarin de gebeurtenisgegevens.</xref:System.EventArgs>"
  overload: System.Windows.Window.OnStateChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)
  id: OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: Window.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.Window.OnVisualParentChanged(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Wordt aangeroepen wanneer het bovenliggende item van het venster wordt gewijzigd."
  syntax:
    content: protected override sealed void OnVisualParentChanged (System.Windows.DependencyObject oldParent);
    parameters:
    - id: oldParent
      type: System.Windows.DependencyObject
      description: "De vorige bovenliggende. Ingesteld op null als de <xref href=&quot;System.Windows.DependencyObject&quot;> </xref> heeft geen vorige bovenliggende activiteit hebben."
  overload: System.Windows.Window.OnVisualParentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OwnedWindows
  id: OwnedWindows
  parent: System.Windows.Window
  langs:
  - csharp
  name: OwnedWindows
  nameWithType: Window.OwnedWindows
  fullName: System.Windows.Window.OwnedWindows
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Hiermee wordt een verzameling windows waarvoor dit venster de eigenaar is."
  remarks: "Een eigen venster is een waarvan <xref:System.Windows.Window.Owner%2A>eigenschap is ingesteld met een verwijzing naar een ander venster, dat het eigenaarsvenster wordt genoemd.</xref:System.Windows.Window.Owner%2A> U kunt alle vensters die eigendom zijn van een eigenaarsvenster vindt opsommen <xref:System.Windows.WindowCollection>die wordt geretourneerd door de eigenschap OwnedWindows.</xref:System.Windows.WindowCollection>"
  example:
  - "The following example shows how to enumerate OwnedWindows.  \n  \n [!code-vb[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/add/codesnippet/visualbasic/windowownerownedwindowssnippets/mainwindow.xaml.vb#getwindowownedwindowscode)]\n [!code-cs[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/add/codesnippet/csharp/WindowOwnerOwnedWindowsSnippets.CSharp/MainWindow.xaml.cs#getwindowownedwindowscode)]"
  syntax:
    content: public System.Windows.WindowCollection OwnedWindows { get; }
    return:
      type: System.Windows.WindowCollection
      description: "Een <xref href=&quot;System.Windows.WindowCollection&quot;> </xref> die bevat verwijzingen naar de windows waarvoor dit venster de eigenaar is."
  overload: System.Windows.Window.OwnedWindows*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Owner
  id: Owner
  parent: System.Windows.Window
  langs:
  - csharp
  name: Owner
  nameWithType: Window.Owner
  fullName: System.Windows.Window.Owner
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld de <xref href=&quot;System.Windows.Window&quot;> </xref> die eigenaar is van deze <xref href=&quot;System.Windows.Window&quot;> </xref>."
  remarks: "Wanneer een onderliggend venster wordt geopend door een bovenliggend venster door het aanroepen van <xref:System.Windows.Window.ShowDialog%2A>, een impliciete relatie tot stand is gebracht tussen de boven- en onderliggende venster.</xref:System.Windows.Window.ShowDialog%2A> Deze relatie wordt afgedwongen bepaalde gedrag, waaronder met betrekking tot minimaliseren, maximaliseren en het terugzetten.       Wanneer een onderliggend venster is gemaakt door een bovenliggend venster door het aanroepen van <xref:System.Windows.Window.Show%2A>, het onderliggende venster heeft echter geen in een relatie heeft met het bovenliggende venster.</xref:System.Windows.Window.Show%2A> Dit betekent dat:-het onderliggende venster heeft geen een verwijzing naar het bovenliggende venster.      -Het gedrag van het onderliggende venster is niet afhankelijk van het gedrag van het bovenliggende venster; beide vensters kan voorzien in de andere of worden geminimaliseerd, gemaximaliseerd en herstelde onafhankelijk van de andere.       Kunt u geen relatie maken tussen een onderliggend venster en een bovenliggend venster <xref:System.Windows.Window>ondersteunt het principe van eigendom.</xref:System.Windows.Window> Eigendom wordt ingesteld wanneer de eigenschap eigenaar van een venster (het venster bezit) is ingesteld met een verwijzing naar een ander venster (het eigenaarsvenster).       Wanneer deze relatie is gemaakt, de volgende problemen zijn optrad:-als een eigenaarsvenster is geminimaliseerd, alle in eigendom van windows ook worden geminimaliseerd.      -Als een eigen venster wordt geminimaliseerd, wordt de eigenaar niet geminimaliseerd.      -Als een eigenaar is gemaximaliseerd zijn zowel het eigenaarsvenster en bijbehorende in eigendom van windows hersteld.      -Een eigenaarsvenster kan nooit voorzien in een eigen venster.      -Die eigendom zijn van windows die niet is geopend met <xref:System.Windows.Window.ShowDialog%2A>zijn niet modaal.</xref:System.Windows.Window.ShowDialog%2A> De gebruiker kan nog steeds communiceren met het eigenaarsvenster.      -Als u een eigenaarsvenster sluit, worden ook de eigen windows gesloten.      -Als een in eigendom van het venster is geopend via de eigenaar venster <xref:System.Windows.Window.Show%2A>, en de eigenaar van het venster is gesloten, wordt het eigendom venster <xref:System.Windows.Window.Closing>gebeurtenis is niet geactiveerd.</xref:System.Windows.Window.Closing> </xref:System.Windows.Window.Show%2A>       Wanneer u een onderliggend venster openen door het aanroepen van <xref:System.Windows.Window.ShowDialog%2A>, u moet ook de eigenschap eigenaar van het onderliggende venster instellen.</xref:System.Windows.Window.ShowDialog%2A> Als u dit niet doet, klikt u vervolgens uw gebruikers niet mogelijk zowel onderliggende en bovenliggende venster herstellen door de taak balk knop te drukken. In plaats daarvan, drukt u op de knop voor de taak resulteert in een lijst met windows, met inbegrip van zowel onderliggende en bovenliggende venster te selecteren; alleen het geselecteerde venster wordt teruggezet.      > [!IMPORTANT] > U moet ook de eigenschap Owner niet instellen in een venster dat wordt geopend door het aanroepen van <xref:System.Windows.Window.ShowDialog%2A>om te controleren of de juiste gedrag met.</xref:System.Windows.Window.ShowDialog%2A>      > [!NOTE] > U niet instellen of ophalen van deze eigenschap wanneer een venster wordt gehost in een browser."
  example:
  - "The following example shows how to establish the owner/owned relationship.  \n  \n [!code-vb[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/add/codesnippet/visualbasic/windowownerownedwindowssnippets/mainwindow.xaml.vb#setwindowownercode)]\n [!code-cs[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/add/codesnippet/csharp/WindowOwnerOwnedWindowsSnippets.CSharp/MainWindow.xaml.cs#setwindowownercode)]"
  syntax:
    content: public System.Windows.Window Owner { get; set; }
    return:
      type: System.Windows.Window
      description: "Een <xref href=&quot;System.Windows.Window&quot;> </xref> -object met de eigenaar van dit <xref href=&quot;System.Windows.Window&quot;> </xref>."
  overload: System.Windows.Window.Owner*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Een venster wil eigenaar zijn van zichzelf - of - twee windows willen eigenaar zijn van elkaar."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De eigenschap Owner is ingesteld op een zichtbaar venster weergegeven met behulp van <xref:System.Windows.Window.ShowDialog*>- of - eigenaar van de eigenschap is ingesteld met een venster dat niet eerder is weergegeven.</xref:System.Windows.Window.ShowDialog*>"
  platform:
  - net462
- uid: System.Windows.Window.ResizeMode
  id: ResizeMode
  parent: System.Windows.Window
  langs:
  - csharp
  name: ResizeMode
  nameWithType: Window.ResizeMode
  fullName: System.Windows.Window.ResizeMode
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van de modus formaat."
  remarks: "Er zijn vier opties:- **NoResize**. De gebruiker kan niet van het formaat van het venster. De vakken maximaliseren en minimaliseren worden niet weergegeven.      - **CanMinimize**. De gebruiker kan alleen het venster minimaliseren en herstel uit vanaf de taakbalk. De vakken minimaliseren en maximaliseren worden beide weergegeven, maar alleen de minimalisatievakje is ingeschakeld.      - **CanResize**. De gebruiker heeft de mogelijkheid volledig formaat van het venster wijzigen met behulp van de vakken minimaliseren en maximaliseren en een versleepbare overzicht rond het venster. De minimaliseren en maximaliseren selectievakjes worden weergegeven en ingeschakeld. (Standaard).      - **CanResizeWithGrip**. Deze optie heeft dezelfde functionaliteit als <xref:System.Windows.ResizeMode>, maar &quot;formaat greep&quot; toegevoegd aan de rechterbenedenhoek van het venster.</xref:System.Windows.ResizeMode>      > [!NOTE] > U niet instellen of ophalen van deze eigenschap wanneer een venster wordt gehost in een browser.      <a name=&quot;dependencyPropertyInfo_WindowResizeMode&quot;></a>## Gegevens van afhankelijkheidseigenschap |||   |-|-|   | Id-veld | <xref:System.Windows.Window.ResizeModeProperty>|   | Eigenschappen van metagegevens is ingesteld op `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.Window.ResizeModeProperty>"
  syntax:
    content: public System.Windows.ResizeMode ResizeMode { get; set; }
    return:
      type: System.Windows.ResizeMode
      description: "Een <xref href=&quot;System.Windows.ResizeMode&quot;> </xref> waarde die de modus formaat aangeeft."
  overload: System.Windows.Window.ResizeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ResizeModeProperty
  id: ResizeModeProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: ResizeModeProperty
  nameWithType: Window.ResizeModeProperty
  fullName: System.Windows.Window.ResizeModeProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identificeert de <xref:System.Windows.Window.ResizeMode*>afhankelijkheidseigenschap.</xref:System.Windows.Window.ResizeMode*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ResizeModeProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.RestoreBounds
  id: RestoreBounds
  parent: System.Windows.Window
  langs:
  - csharp
  name: RestoreBounds
  nameWithType: Window.RestoreBounds
  fullName: System.Windows.Window.RestoreBounds
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Hiermee wordt de grootte en locatie van een venster voordat wordt geminimaliseerd of gemaximaliseerd opgehaald."
  remarks: "De rechthoek terugzetten is de regio die wordt ingenomen door het venster voordat deze is geminimaliseerd of gemaximaliseerd. U kunt RestoreBounds gebruiken voor het opslaan van de laatste grootte en locatie van een venster voordat een toepassing wordt gesloten en haalt u deze waarden op de volgende keer dat een toepassing wordt gestart om de manier waarop een gebruiker het hebt achtergelaten een venster te herstellen.       Als u een query RestoreBounds uitvoert voordat de window is weergegeven of nadat het is gesloten, <xref:System.Windows.Rect.Empty%2A>wordt geretourneerd.</xref:System.Windows.Rect.Empty%2A>      > [!NOTE] > U deze eigenschap kan niet ophalen bij een venster wordt gehost in een browser."
  example:
  - "The following example uses RestoreBounds and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.  \n  \n [!code-xml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML1](~/add/codesnippet/xaml/WindowRestoreBoundsSnippets/MainWindow.xaml#windowrestoreboundsxaml1)]  \n[!code-xml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML2](~/add/codesnippet/xaml/WindowRestoreBoundsSnippets/MainWindow.xaml#windowrestoreboundsxaml2)]  \n  \n [!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/add/codesnippet/visualbasic/windowrestoreboundssnippets/mainwindow.xaml.vb#windowrestoreboundscodebehind1)]\n [!code-cs[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/add/codesnippet/csharp/WindowRestoreBoundsSnippets/MainWindow.xaml.cs#windowrestoreboundscodebehind1)]  \n[!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/add/codesnippet/visualbasic/windowrestoreboundssnippets/mainwindow.xaml.vb#windowrestoreboundscodebehind2)]\n[!code-cs[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/add/codesnippet/csharp/WindowRestoreBoundsSnippets/MainWindow.xaml.cs#windowrestoreboundscodebehind2)]"
  syntax:
    content: public System.Windows.Rect RestoreBounds { get; }
    return:
      type: System.Windows.Rect
      description: "Een <xref href=&quot;System.Windows.Rect&quot;> </xref> die geeft de grootte en locatie van een venster voordat het wordt geminimaliseerd of gemaximaliseerd."
  overload: System.Windows.Window.RestoreBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Show
  id: Show
  parent: System.Windows.Window
  langs:
  - csharp
  name: Show()
  nameWithType: Window.Show()
  fullName: System.Windows.Window.Show()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Hiermee opent u een venster en retourneert zonder te wachten op het nieuwe venster te sluiten."
  remarks: "Wanneer de <xref:System.Windows.Window>klasse is gewijzigd, maar is niet standaard zichtbaar.</xref:System.Windows.Window> Geeft een venster en retourneert onmiddellijk zonder te wachten op voor het venster gesloten weergeven. Als gevolg daarvan kan voorkomt het venster is geopend niet dat gebruikers communiceren met andere windows in de toepassing. Dit type venster heet een *zonder modus* venster. Algemene voorbeelden van windows zonder modus zijn eigenschappen van windows, toolboxes en palet. Als u wilt een gebruiker op de interactie met een specifiek venster beperken, moet het venster worden geopend door het aanroepen van <xref:System.Windows.Window.ShowDialog%2A>.</xref:System.Windows.Window.ShowDialog%2A>       Een venster dat wordt geopend door het aanroepen van weergeven automatisch geen een relatie heeft met het venster dat geopend. het venster is geopend komt in het bijzonder niet weet welke venster is geopend. Deze relatie kan worden gemaakt met behulp van de <xref:System.Windows.Window.Owner%2A>eigenschap en het gebruik van beheerde de <xref:System.Windows.Window.OwnedWindows%2A>eigenschap.</xref:System.Windows.Window.OwnedWindows%2A> </xref:System.Windows.Window.Owner%2A>       Het eindresultaat hetzelfde als het instellen van <xref:System.Windows.UIElement.Visibility%2A>eigenschap van het <xref:System.Windows.Window>object <xref:System.Windows.Visibility>.</xref:System.Windows.Visibility> </xref:System.Windows.Window> </xref:System.Windows.UIElement.Visibility%2A> bereikt aanroepen weergeven Er is echter een verschil tussen de twee vanuit het oogpunt van de timing van.       Aanroepen van weergeven is een synchrone bewerking die alleen na retourneert de <xref:System.Windows.FrameworkElement.Loaded>gebeurtenis in het venster onderliggende is gegenereerd: [!code-vb [WindowShowTimingSnippets #ShowSync](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showsync)][!code-cs[WindowShowTimingSnippets #ShowSync](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showsync) ] instelling <xref:System.Windows.UIElement.Visibility%2A>, is echter een asynchrone bewerking die wordt onmiddellijk geretourneerd: [!code-vb [WindowShowTimingSnippets #ShowASync](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showasync)][!code-cs[WindowShowTimingSnippets #ShowASync](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showasync) ] bij het instellen van <xref:System.Windows.UIElement.Visibility%2A>, geen Venstergebeurtenissen te registreren voordat u <xref:System.Windows.UIElement.Visibility%2A>kan niet worden verhoogd, pas na de methode die u instelt <xref:System.Windows.UIElement.Visibility%2A>uitvoering is voltooid.</xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.UIElement.Visibility%2A>   </xref:System.Windows.UIElement.Visibility%2A>   </xref:System.Windows.FrameworkElement.Loaded>"
  example:
  - "The following sample demonstrates how to open a modeless window.  \n  \n [!code-vb[WindowShowSnippets#WindowShowCODE](~/add/codesnippet/visualbasic/windowshowsnippets/mainwindow.xaml.vb#windowshowcode)]\n [!code-cs[WindowShowSnippets#WindowShowCODE](~/add/codesnippet/csharp/WindowShowSnippets.CSharp/MainWindow.xaml.cs#windowshowcode)]"
  syntax:
    content: public void Show ();
    parameters: []
  overload: System.Windows.Window.Show*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Weergeven in een venster dat wordt gesloten wordt genoemd (<xref href=&quot;System.Windows.Window.Closing&quot;></xref>) of gesloten (<xref href=&quot;System.Windows.Window.Closed&quot;></xref>)."
  platform:
  - net462
- uid: System.Windows.Window.ShowActivated
  id: ShowActivated
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowActivated
  nameWithType: Window.ShowActivated
  fullName: System.Windows.Window.ShowActivated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of een venster wordt geactiveerd als eerste wordt weergegeven."
  remarks: "Wanneer een venster met de eigenschap ShowActivated is ingesteld op `false` is geopend, het venster is niet geactiveerd en de <xref:System.Windows.Window.Activated>gebeurtenis is niet geactiveerd totdat een gebruiker handmatig het venster activeert door deze te selecteren</xref:System.Windows.Window.Activated> Nadat het venster is geselecteerd, wordt geactiveerd en deactiveert u normaal.       Om te voorkomen dat een venster wordt geactiveerd wanneer deze wordt geopend, moet de eigenschap ShowActivated worden ingesteld op `false` voordat het venster wordt weergegeven (door het aanroepen van <xref:System.Windows.Window.Show%2A>); ShowActivated instelt op `false` na een venster wordt weergegeven, heeft geen effect.</xref:System.Windows.Window.Show%2A>       Als ShowActivated op `false` in een venster dat modaal, wordt geopend na het aanroepen van <xref:System.Windows.Window.ShowDialog%2A>, heeft geen invloed echte.</xref:System.Windows.Window.ShowDialog%2A> Hoewel modaal venster niet wordt geactiveerd, modaal venster wordt voorkomen dat de gebruiker een andere geopende toepassing windows activeren.      <a name=&quot;dependencyPropertyInfo_WindowShowActivated&quot;></a>## Gegevens van afhankelijkheidseigenschap |||   |-|-|   | Id-veld | <xref:System.Windows.Window.ShowActivatedProperty>|   | Eigenschappen van metagegevens is ingesteld op `true`| Geen |</xref:System.Windows.Window.ShowActivatedProperty>"
  example:
  - "The following example shows how to use markup to configure a window to be opened without being activated.  \n  \n [!code-xml[WindowShowActivatedSnippets#ShowUnactivatedMARKUP1](~/add/codesnippet/xaml/WindowShowActivatedSnippets/AWindow.xaml#showunactivatedmarkup1)]  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n [!code-cs[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/add/codesnippet/csharp/WindowShowActivatedSnippets/AWindow.xaml.cs#showunactivatedcodebehind)]\n [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/add/codesnippet/visualbasic/windowshowactivatedsnippets/awindow.xaml.vb#showunactivatedcodebehind)]  \n  \n The following example shows how to use code to configure a window to be opened without it being activated.  \n  \n [!code-cs[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/add/codesnippet/csharp/WindowShowActivatedSnippets/Window1.xaml.cs#showunactivatedwindowcode)]\n [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/add/codesnippet/visualbasic/windowshowactivatedsnippets/window1.xaml.vb#showunactivatedwindowcode)]"
  syntax:
    content: public bool ShowActivated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als een venster wordt geactiveerd wanneer de eerste weergegeven; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.ShowActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ShowActivatedProperty
  id: ShowActivatedProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowActivatedProperty
  nameWithType: Window.ShowActivatedProperty
  fullName: System.Windows.Window.ShowActivatedProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identificeert de <xref:System.Windows.Window.ShowActivated*>afhankelijkheidseigenschap.</xref:System.Windows.Window.ShowActivated*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ShowActivatedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ShowDialog
  id: ShowDialog
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowDialog()
  nameWithType: Window.ShowDialog()
  fullName: System.Windows.Window.ShowDialog()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Hiermee opent u een venster en retourneert alleen als het nieuwe venster is gesloten."
  remarks: "Wanneer een <xref:System.Windows.Window>klasse is gewijzigd, maar is niet standaard zichtbaar.</xref:System.Windows.Window> ShowDialog geeft u het venster, schakelt alle andere vensters in de toepassing en retourneert alleen als het venster is gesloten. Dit type venster wordt ook wel een *modaal* venster.       Modaal windows worden voornamelijk gebruikt als dialoogvensters. Een dialoogvenster is een speciaal type venster dat toepassingen gebruiken om te communiceren met gebruikers taken uitvoeren, zoals bestanden openen en het afdrukken van documenten. Dialoogvensters gebruikers vaak accepteren of annuleer de taak waarvoor ze zijn weergegeven voordat het dialoogvenster wordt gesloten. ShowDialog retourneert een <xref:System.Nullable%601> <xref:System.Boolean>waarde die aangeeft of de activiteit is geaccepteerd of geannuleerd.</xref:System.Boolean></xref:System.Nullable%601> De geretourneerde waarde is de waarde van de <xref:System.Windows.Window.DialogResult%2A>eigenschap voordat een venster wordt gesloten.</xref:System.Windows.Window.DialogResult%2A> Zie voor meer informatie <xref:System.Windows.Window.DialogResult%2A>.</xref:System.Windows.Window.DialogResult%2A>       Een venster dat wordt geopend na het aanroepen van de methode ShowDialog automatisch geen een relatie heeft met het venster dat geopend. het venster is geopend komt in het bijzonder niet weet welke venster is geopend. Deze relatie kan worden gemaakt met behulp van de <xref:System.Windows.Window.Owner%2A>eigenschap en het gebruik van beheerde de <xref:System.Windows.Window.OwnedWindows%2A>eigenschap.</xref:System.Windows.Window.OwnedWindows%2A> </xref:System.Windows.Window.Owner%2A> Ter ondersteuning van [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] automation (Zie [UI Automation overzicht](~/add/includes/ajax-current-ext-md.md)), <xref:System.Windows.Window.Owner%2A>moet worden ingesteld voor een venster geopend door het aanroepen van ShowDialog.</xref:System.Windows.Window.Owner%2A>       Wanneer een modale [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] venster (een venster geopend door het aanroepen van ShowDialog) wordt gesloten, wordt het eerder geactiveerde venster opnieuw wordt geactiveerd. Als een modaal [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] venster heeft een eigenaarsvenster (Zie <xref:System.Windows.Window.Owner%2A>), het eigenaarsvenster is niet geactiveerd wanneer de modale [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] venster is gesloten, tenzij deze het eerder geactiveerde venster is.</xref:System.Windows.Window.Owner%2A>      > [!NOTE] > Deze methode kan niet worden aangeroepen wanneer een venster wordt gehost in een browser."
  example:
  - "The following sample demonstrates how to open a modal window.  \n  \n [!code-cs[WindowShowDialogSnippets#WindowShowDialogCODE](~/add/codesnippet/csharp/WindowShowDialogSnippets.CSharp/MainWindow.xaml.cs#windowshowdialogcode)]\n [!code-vb[WindowShowDialogSnippets#WindowShowDialogCODE](~/add/codesnippet/visualbasic/windowshowdialogsnippets/mainwindow.xaml.vb#windowshowdialogcode)]"
  syntax:
    content: public Nullable<bool> ShowDialog ();
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
      description: "Een &lt;xref:System.Nullable%601&gt; waarde van het type <xref:System.Boolean>die aangeeft of de activiteit is geaccepteerd (<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>) of geannuleerd (<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>).</xref:System.Boolean> De geretourneerde waarde is de waarde van de <xref:System.Windows.Window.DialogResult*>eigenschap voordat een venster wordt gesloten.</xref:System.Windows.Window.DialogResult*>"
  overload: System.Windows.Window.ShowDialog*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ShowDialog is aangeroepen in een venster dat wordt gesloten (<xref href=&quot;System.Windows.Window.Closing&quot;></xref>) of gesloten (<xref href=&quot;System.Windows.Window.Closed&quot;></xref>)."
  platform:
  - net462
- uid: System.Windows.Window.ShowInTaskbar
  id: ShowInTaskbar
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowInTaskbar
  nameWithType: Window.ShowInTaskbar
  fullName: System.Windows.Window.ShowInTaskbar
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of het venster een taak een knop heeft."
  remarks: "Als ShowInTaskbar is ingesteld op `true`, het venster wordt ook weergegeven in de selectielijst ALT + TAB-toepassing.       Het pictogram dat wordt gebruikt voor zowel de taak een knop en de selectielijst ALT + TAB-toepassing is de waarde van de <xref:System.Windows.Window.Icon%2A>eigenschap.</xref:System.Windows.Window.Icon%2A>      > [!NOTE] > U niet instellen of ophalen van deze eigenschap wanneer een venster wordt gehost in een browser.      <a name=&quot;dependencyPropertyInfo_WindowShowInTaskbar&quot;></a>## Gegevens van afhankelijkheidseigenschap |||   |-|-|   | Id-veld | <xref:System.Windows.Window.ShowInTaskbarProperty>|   | Eigenschappen van metagegevens is ingesteld op `true`| Geen |</xref:System.Windows.Window.ShowInTaskbarProperty>"
  syntax:
    content: public bool ShowInTaskbar { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het venster een knop taak heeft; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. Niet van toepassing wanneer het venster wordt gehost in een browser."
  overload: System.Windows.Window.ShowInTaskbar*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ShowInTaskbarProperty
  id: ShowInTaskbarProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowInTaskbarProperty
  nameWithType: Window.ShowInTaskbarProperty
  fullName: System.Windows.Window.ShowInTaskbarProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identificeert de <xref:System.Windows.Window.ShowInTaskbar*>afhankelijkheidseigenschap.</xref:System.Windows.Window.ShowInTaskbar*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ShowInTaskbarProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.SizeToContent
  id: SizeToContent
  parent: System.Windows.Window
  langs:
  - csharp
  name: SizeToContent
  nameWithType: Window.SizeToContent
  fullName: System.Windows.Window.SizeToContent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of een venster wordt automatisch het formaat aan de grootte van de inhoud ervan."
  remarks: "Wanneer SizeToContent is ingesteld op <xref:System.Windows.SizeToContent>, instellen van een <xref:System.Windows.FrameworkElement.Height%2A>of <xref:System.Windows.FrameworkElement.Width%2A>heeft geen effect; beide eigenschappen kunnen worden ingesteld, maar ze worden ingesteld met waarden worden niet toegepast in het venster.</xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.SizeToContent>       Wanneer SizeToContent is ingesteld op <xref:System.Windows.SizeToContent>, instelling <xref:System.Windows.FrameworkElement.Height%2A>wordt de hoogte van het venster niet gewijzigd.</xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.SizeToContent>       Wanneer SizeToContent is ingesteld op <xref:System.Windows.SizeToContent>, instelling <xref:System.Windows.FrameworkElement.Width%2A>wordt de breedte van het venster niet gewijzigd.</xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.SizeToContent>       Als de SizeToContent anders dan een waarde heeft <xref:System.Windows.SizeToContent>:-SizeToContent automatisch ingesteld op <xref:System.Windows.SizeToContent>als een gebruiker het formaat van het venster aangepast met behulp van de greep formaat wijzigen of de rand te slepen.</xref:System.Windows.SizeToContent> </xref:System.Windows.SizeToContent>      -Als de grootte van de inhoud gewijzigd op een manier die ervoor zorgt het venster dat te vergroten of verkleinen zelf, <xref:System.Windows.FrameworkElement.SizeChanged>is gegenereerd.</xref:System.Windows.FrameworkElement.SizeChanged>       Als een venster transparant is (Zie <xref:System.Windows.Window.AllowsTransparency%2A>), kunt u overwegen SizeToContent instelt op <xref:System.Windows.SizeToContent>om te controleren of het venster is niet groter zijn dan de zichtbare inhoud.</xref:System.Windows.SizeToContent> </xref:System.Windows.Window.AllowsTransparency%2A>      > [!NOTE] > U niet instellen of ophalen van deze eigenschap wanneer een venster wordt gehost in een browser.      <a name=&quot;dependencyPropertyInfo_WindowSizeToContent&quot;></a>## Gegevens van afhankelijkheidseigenschap |||   |-|-|   | Id-veld | <xref:System.Windows.Window.SizeToContentProperty>|   | Eigenschappen van metagegevens is ingesteld op `true`| Geen |</xref:System.Windows.Window.SizeToContentProperty>"
  example:
  - "The following example shows how to set the SizeToContent property in code to specify how a window resizes to fit its content.  \n  \n [!code-vb[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/add/codesnippet/visualbasic/howtowindowmanagementsnippets/mainwindow.xaml.vb#setwindowsizetocontentpropertycode)]\n [!code-cs[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/add/codesnippet/csharp/HOWTOWindowManagementSnippets/MainWindow.xaml.cs#setwindowsizetocontentpropertycode)]"
  syntax:
    content: public System.Windows.SizeToContent SizeToContent { get; set; }
    return:
      type: System.Windows.SizeToContent
      description: "A <xref href=&quot;System.Windows.SizeToContent&quot;></xref> value. De standaardwaarde is <xref href=&quot;System.Windows.SizeToContent&quot;> </xref>."
  overload: System.Windows.Window.SizeToContent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.SizeToContentProperty
  id: SizeToContentProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: SizeToContentProperty
  nameWithType: Window.SizeToContentProperty
  fullName: System.Windows.Window.SizeToContentProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identificeert de <xref:System.Windows.Window.SizeToContent*>afhankelijkheidseigenschap.</xref:System.Windows.Window.SizeToContent*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty SizeToContentProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.SourceInitialized
  id: SourceInitialized
  parent: System.Windows.Window
  langs:
  - csharp
  name: SourceInitialized
  nameWithType: Window.SourceInitialized
  fullName: System.Windows.Window.SourceInitialized
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Deze gebeurtenis treedt op als u wilt samenwerken met ondersteuning [!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]. See <xref href=&quot;System.Windows.Interop.HwndSource&quot;></xref>."
  syntax:
    content: public event EventHandler SourceInitialized;
    return:
      type: System.EventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.StateChanged
  id: StateChanged
  parent: System.Windows.Window
  langs:
  - csharp
  name: StateChanged
  nameWithType: Window.StateChanged
  fullName: System.Windows.Window.StateChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Deze gebeurtenis treedt op wanneer het venster <xref:System.Windows.Window.WindowState*>eigenschapswijzigingen.</xref:System.Windows.Window.WindowState*>"
  syntax:
    content: public event EventHandler StateChanged;
    return:
      type: System.EventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TaskbarItemInfo
  id: TaskbarItemInfo
  parent: System.Windows.Window
  langs:
  - csharp
  name: TaskbarItemInfo
  nameWithType: Window.TaskbarItemInfo
  fullName: System.Windows.Window.TaskbarItemInfo
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld de [!INCLUDE[win7](~/add/includes/win7-md.md)] taakbalk miniatuur voor de <xref href=&quot;System.Windows.Window&quot;> </xref>."
  remarks: "Voor meer informatie over het gebruik van de [!INCLUDE[win7](~/add/includes/win7-md.md)] taakbalk miniatuur, Zie de <xref:System.Windows.Shell.TaskbarItemInfo>klasse.</xref:System.Windows.Shell.TaskbarItemInfo>"
  syntax:
    content: public System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo { get; set; }
    return:
      type: System.Windows.Shell.TaskbarItemInfo
      description: "De [!INCLUDE[win7](~/add/includes/win7-md.md)] taakbalk miniatuur voor de <xref href=&quot;System.Windows.Window&quot;> </xref>."
  overload: System.Windows.Window.TaskbarItemInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TaskbarItemInfoProperty
  id: TaskbarItemInfoProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TaskbarItemInfoProperty
  nameWithType: Window.TaskbarItemInfoProperty
  fullName: System.Windows.Window.TaskbarItemInfoProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identificeert de <xref:System.Windows.Window.TaskbarItemInfo*>afhankelijkheidseigenschap.</xref:System.Windows.Window.TaskbarItemInfo*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TaskbarItemInfoProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Title
  id: Title
  parent: System.Windows.Window
  langs:
  - csharp
  name: Title
  nameWithType: Window.Title
  fullName: System.Windows.Window.Title
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van de titel van een venster."
  remarks: "De titel van een <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, of [!INCLUDE[TLA#tla_iegeneric](~/add/includes/tlasharptla-iegeneric-md.md)], kan ook worden ingesteld met behulp van <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName>.</xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName> </xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Window>      <a name=&quot;dependencyPropertyInfo_WindowTitle&quot;></a>## Gegevens van afhankelijkheidseigenschap |||   |-|-|   | Id-veld | <xref:System.Windows.Window.TitleProperty>|   | Eigenschappen van metagegevens is ingesteld op `true`| Geen |</xref:System.Windows.Window.TitleProperty>"
  syntax:
    content: public string Title { get; set; }
    return:
      type: System.String
      description: "Een <xref:System.String>die de titel van het venster bevat.</xref:System.String>"
  overload: System.Windows.Window.Title*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TitleProperty
  id: TitleProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TitleProperty
  nameWithType: Window.TitleProperty
  fullName: System.Windows.Window.TitleProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identificeert de <xref:System.Windows.Window.Title*>afhankelijkheidseigenschap.</xref:System.Windows.Window.Title*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TitleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Top
  id: Top
  parent: System.Windows.Window
  langs:
  - csharp
  name: Top
  nameWithType: Window.Top
  fullName: System.Windows.Window.Top
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van de positie van de bovenrand van het venster ten opzichte van het bureaublad."
  remarks: "Wanneer het <xref:System.Windows.Window>wordt gemaximaliseerd of geminimaliseerd, deze waarde vertegenwoordigt de bovenrand van het terugzetten verwijzen voor de <xref:System.Windows.Window>.</xref:System.Windows.Window> </xref:System.Windows.Window>       Deze eigenschap kan niet worden ingesteld via een stijl.       Als u een waarde niet opgeeft, wordt boven ingesteld op de standaardwaarde van het systeem. U kunt ook de standaardwaarde van het systeem door boven in te stellen op <xref:System.Double.NaN>.</xref:System.Double.NaN> opgeven Noch <xref:System.Double.NegativeInfinity>noch <xref:System.Double.PositiveInfinity>is een geldige waarde voor Top.</xref:System.Double.PositiveInfinity> </xref:System.Double.NegativeInfinity>      > [!NOTE] > U niet instellen of ophalen van deze eigenschap wanneer een venster wordt gehost in een browser.      <a name=&quot;dependencyPropertyInfo_WindowTop&quot;></a>## Gegevens van afhankelijkheidseigenschap |||   |-|-|   | Id-veld | <xref:System.Windows.Window.TopProperty>|   | Eigenschappen van metagegevens is ingesteld op `true`| Geen |</xref:System.Windows.Window.TopProperty>"
  syntax:
    content: public double Top { get; set; }
    return:
      type: System.Double
      description: "De positie van de bovenkant van het venster in logische eenheden (1/96&quot;)."
  overload: System.Windows.Window.Top*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Topmost
  id: Topmost
  parent: System.Windows.Window
  langs:
  - csharp
  name: Topmost
  nameWithType: Window.Topmost
  fullName: System.Windows.Window.Topmost
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of een venster wordt weergegeven in de bovenste z-volgorde."
  remarks: "Een venster bovenste waarvan de eigenschap is ingesteld op `true` verschijnt boven alle waarvan de bovenste eigenschappen zijn ingesteld op windows `false`.       In de groep van windows die u Topmost hebt eigenschap is ingesteld op `true`, het venster dat momenteel wordt geactiveerd, is het bovenste venster. Evenzo eigenschap voor de groep van windows waarvoor Topmost is ingesteld op `false`.      > [!NOTE] > U niet instellen of ophalen van deze eigenschap wanneer een venster wordt gehost in een browser.      <a name=&quot;dependencyPropertyInfo_WindowTopmost&quot;></a>## Gegevens van afhankelijkheidseigenschap |||   |-|-|   | Id-veld | <xref:System.Windows.Window.TopmostProperty>|   | Eigenschappen van metagegevens is ingesteld op `true`| Geen |</xref:System.Windows.Window.TopmostProperty>"
  syntax:
    content: public bool Topmost { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het venster bovenste; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Window.Topmost*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TopmostProperty
  id: TopmostProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TopmostProperty
  nameWithType: Window.TopmostProperty
  fullName: System.Windows.Window.TopmostProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identificeert de <xref:System.Windows.Window.Topmost*>afhankelijkheidseigenschap.</xref:System.Windows.Window.Topmost*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TopmostProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TopProperty
  id: TopProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TopProperty
  nameWithType: Window.TopProperty
  fullName: System.Windows.Window.TopProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identificeert de <xref:System.Windows.Window.Top*>afhankelijkheidseigenschap.</xref:System.Windows.Window.Top*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TopProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStartupLocation
  id: WindowStartupLocation
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStartupLocation
  nameWithType: Window.WindowStartupLocation
  fullName: System.Windows.Window.WindowStartupLocation
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van de positie van het venster als eerste wordt weergegeven."
  remarks: "Instelling <xref:System.Windows.WindowStartupLocation>naar <xref:System.Windows.WindowStartupLocation>zorgt ervoor dat een venster moet worden geplaatst volgens de <xref:System.Windows.Window.Left%2A>en <xref:System.Windows.Window.Top%2A>eigenschapswaarden.</xref:System.Windows.Window.Top%2A> </xref:System.Windows.Window.Left%2A> </xref:System.Windows.WindowStartupLocation> </xref:System.Windows.WindowStartupLocation> Als de <xref:System.Windows.Window.Left%2A>of <xref:System.Windows.Window.Top%2A>Eigenschappen zijn niet opgegeven, wordt hun waarden worden bepaald door [!INCLUDE[TLA2#tla_mswin](~/add/includes/tla2sharptla-mswin-md.md)].</xref:System.Windows.Window.Top%2A> </xref:System.Windows.Window.Left%2A>       Instelling <xref:System.Windows.WindowStartupLocation>zorgt ervoor dat een venster moet worden geplaatst in het midden van het scherm met de muisaanwijzer.</xref:System.Windows.WindowStartupLocation>       Instelling <xref:System.Windows.WindowStartupLocation>naar <xref:System.Windows.WindowStartupLocation>zorgt ervoor dat een venster moet worden geplaatst in het midden van het eigenaarsvenster (Zie <xref:System.Windows.Window.Owner%2A>), indien opgegeven.</xref:System.Windows.Window.Owner%2A> </xref:System.Windows.WindowStartupLocation> </xref:System.Windows.WindowStartupLocation> Het eigenaarsvenster mag een ander WPF-venster of een niet-WPF-venster.      > [!NOTE] > Zie voor meer informatie over windows WPF met niet-WPF windows [WPF en de Win32-samenwerking](~/add/includes/ajax-current-ext-md.md) en <xref:System.Windows.Interop.WindowInteropHelper>.</xref:System.Windows.Interop.WindowInteropHelper>       Als een eigenaarsvenster niet is opgegeven, wordt de positie van het venster bepaald op dezelfde manier als <xref:System.Windows.WindowStartupLocation>is ingesteld op <xref:System.Windows.WindowStartupLocation>.</xref:System.Windows.WindowStartupLocation> </xref:System.Windows.WindowStartupLocation>      > [!NOTE] > U niet instellen of de waarde van deze eigenschap niet verkrijgen wanneer een venster wordt gehost in een browser."
  syntax:
    content: public System.Windows.WindowStartupLocation WindowStartupLocation { get; set; }
    return:
      type: System.Windows.WindowStartupLocation
      description: "Een <xref href=&quot;System.Windows.WindowStartupLocation&quot;> </xref> waarde waarmee de positie van de boven en links van een venster als eerste wordt weergegeven. De standaardwaarde is <xref href=&quot;System.Windows.WindowStartupLocation&quot;> </xref>."
  overload: System.Windows.Window.WindowStartupLocation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowState
  id: WindowState
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowState
  nameWithType: Window.WindowState
  fullName: System.Windows.Window.WindowState
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of een venster is hersteld, geminimaliseerd of gemaximaliseerd."
  remarks: "Voordat een venster is geminimaliseerd of gemaximaliseerd, worden de grootte en locatie opgeslagen in <xref:System.Windows.Window.RestoreBounds%2A>.</xref:System.Windows.Window.RestoreBounds%2A> Wanneer een venster wordt vervolgens hersteld, worden de grootte en locatie waarden hersteld door de waarden van <xref:System.Windows.Window.RestoreBounds%2A>.</xref:System.Windows.Window.RestoreBounds%2A>       Wanneer de eigenschap WindowState is gewijzigd, <xref:System.Windows.Window.StateChanged>wordt gegenereerd.</xref:System.Windows.Window.StateChanged>      > [!NOTE] > U niet instellen of ophalen van deze eigenschap wanneer een venster wordt gehost in een browser.      <a name=&quot;dependencyPropertyInfo_WindowWindowState&quot;></a>## Gegevens van afhankelijkheidseigenschap |||   |-|-|   | Id-veld | <xref:System.Windows.Window.WindowStateProperty>|   | Eigenschappen van metagegevens is ingesteld op `true`|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|</xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A> </xref:System.Windows.Window.WindowStateProperty>"
  syntax:
    content: public System.Windows.WindowState WindowState { get; set; }
    return:
      type: System.Windows.WindowState
      description: "Een <xref href=&quot;System.Windows.WindowState&quot;> </xref> waarmee wordt bepaald of een venster is hersteld, geminimaliseerd of gemaximaliseerd. De standaardwaarde is <xref href=&quot;System.Windows.WindowState&quot;> </xref> (hersteld)."
  overload: System.Windows.Window.WindowState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStateProperty
  id: WindowStateProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStateProperty
  nameWithType: Window.WindowStateProperty
  fullName: System.Windows.Window.WindowStateProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identificeert de <xref:System.Windows.Window.WindowState*>afhankelijkheidseigenschap.</xref:System.Windows.Window.WindowState*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty WindowStateProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStyle
  id: WindowStyle
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStyle
  nameWithType: Window.WindowStyle
  fullName: System.Windows.Window.WindowStyle
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van de randstijl van een venster."
  remarks: "Vensterstijl kan bestaan uit een van de <xref:System.Windows.WindowStyle>opsommingswaarden, met inbegrip van <xref:System.Windows.WindowStyle>, <xref:System.Windows.WindowStyle>, <xref:System.Windows.WindowStyle>(standaard), en <xref:System.Windows.WindowStyle>.</xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle>       De volgende afbeelding ziet u de vensterstijlen op [!INCLUDE[TLA#tla_longhorn](~/add/includes/ajax-current-ext-md.md)] (Windows Vista Aero thema met transparant glas ingeschakeld): ![vensterstijlen](~/add/media/windowoverviewfigure6.PNG &quot;vensterstijlen&quot;)       >  [!NOTE] > u niet instellen of ophalen van deze eigenschap wanneer een venster wordt gehost in een browser.      <a name=&quot;dependencyPropertyInfo_WindowWindowStyle&quot;></a>## Gegevens van afhankelijkheidseigenschap |||   |-|-|   | Id-veld | <xref:System.Windows.Window.WindowStyleProperty>|   | Eigenschappen van metagegevens is ingesteld op `true`| Geen |</xref:System.Windows.Window.WindowStyleProperty>"
  syntax:
    content: public System.Windows.WindowStyle WindowStyle { get; set; }
    return:
      type: System.Windows.WindowStyle
      description: "Een <xref href=&quot;System.Windows.WindowStyle&quot;> </xref> Hiermee worden de randstijl van een venster. De standaardwaarde is <xref href=&quot;System.Windows.WindowStyle&quot;> </xref>."
  overload: System.Windows.Window.WindowStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStyleProperty
  id: WindowStyleProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStyleProperty
  nameWithType: Window.WindowStyleProperty
  fullName: System.Windows.Window.WindowStyleProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "Identificeert de <xref:System.Windows.Window.WindowStyle*>afhankelijkheidseigenschap.</xref:System.Windows.Window.WindowStyle*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty WindowStyleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Controls.ContentControl
  isExternal: false
  name: System.Windows.Controls.ContentControl
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Window.#ctor
  parent: System.Windows.Window
  isExternal: false
  name: Window()
  nameWithType: Window.Window()
  fullName: System.Windows.Window.Window()
- uid: System.Windows.Window.Activate
  parent: System.Windows.Window
  isExternal: false
  name: Activate()
  nameWithType: Window.Activate()
  fullName: System.Windows.Window.Activate()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Window.Activated
  parent: System.Windows.Window
  isExternal: false
  name: Activated
  nameWithType: Window.Activated
  fullName: System.Windows.Window.Activated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Window.AllowsTransparency
  parent: System.Windows.Window
  isExternal: false
  name: AllowsTransparency
  nameWithType: Window.AllowsTransparency
  fullName: System.Windows.Window.AllowsTransparency
- uid: System.Windows.Window.AllowsTransparencyProperty
  parent: System.Windows.Window
  isExternal: false
  name: AllowsTransparencyProperty
  nameWithType: Window.AllowsTransparencyProperty
  fullName: System.Windows.Window.AllowsTransparencyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Window.ArrangeOverride(System.Windows.Size)
  parent: System.Windows.Window
  isExternal: false
  name: ArrangeOverride(Size)
  nameWithType: Window.ArrangeOverride(Size)
  fullName: System.Windows.Window.ArrangeOverride(Size)
- uid: System.Windows.Size
  parent: System.Windows
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.Window.Close
  parent: System.Windows.Window
  isExternal: false
  name: Close()
  nameWithType: Window.Close()
  fullName: System.Windows.Window.Close()
- uid: System.Windows.Window.Closed
  parent: System.Windows.Window
  isExternal: false
  name: Closed
  nameWithType: Window.Closed
  fullName: System.Windows.Window.Closed
- uid: System.Windows.Window.Closing
  parent: System.Windows.Window
  isExternal: false
  name: Closing
  nameWithType: Window.Closing
  fullName: System.Windows.Window.Closing
- uid: System.ComponentModel.CancelEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: CancelEventHandler
  nameWithType: CancelEventHandler
  fullName: System.ComponentModel.CancelEventHandler
- uid: System.Windows.Window.ContentRendered
  parent: System.Windows.Window
  isExternal: false
  name: ContentRendered
  nameWithType: Window.ContentRendered
  fullName: System.Windows.Window.ContentRendered
- uid: System.Windows.Window.Deactivated
  parent: System.Windows.Window
  isExternal: false
  name: Deactivated
  nameWithType: Window.Deactivated
  fullName: System.Windows.Window.Deactivated
- uid: System.Windows.Window.DialogResult
  parent: System.Windows.Window
  isExternal: false
  name: DialogResult
  nameWithType: Window.DialogResult
  fullName: System.Windows.Window.DialogResult
- uid: System.Nullable{System.Boolean}
  parent: System
  isExternal: true
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Window.DpiChanged
  parent: System.Windows.Window
  isExternal: false
  name: DpiChanged
  nameWithType: Window.DpiChanged
  fullName: System.Windows.Window.DpiChanged
- uid: System.Windows.DpiChangedEventHandler
  parent: System.Windows
  isExternal: false
  name: DpiChangedEventHandler
  nameWithType: DpiChangedEventHandler
  fullName: System.Windows.DpiChangedEventHandler
- uid: System.Windows.Window.DpiChangedEvent
  parent: System.Windows.Window
  isExternal: false
  name: DpiChangedEvent
  nameWithType: Window.DpiChangedEvent
  fullName: System.Windows.Window.DpiChangedEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Window.DragMove
  parent: System.Windows.Window
  isExternal: false
  name: DragMove()
  nameWithType: Window.DragMove()
  fullName: System.Windows.Window.DragMove()
- uid: System.Windows.Window.GetWindow(System.Windows.DependencyObject)
  parent: System.Windows.Window
  isExternal: false
  name: GetWindow(DependencyObject)
  nameWithType: Window.GetWindow(DependencyObject)
  fullName: System.Windows.Window.GetWindow(DependencyObject)
- uid: System.Windows.Window
  parent: System.Windows
  isExternal: false
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Window.Hide
  parent: System.Windows.Window
  isExternal: false
  name: Hide()
  nameWithType: Window.Hide()
  fullName: System.Windows.Window.Hide()
- uid: System.Windows.Window.Icon
  parent: System.Windows.Window
  isExternal: false
  name: Icon
  nameWithType: Window.Icon
  fullName: System.Windows.Window.Icon
- uid: System.Windows.Media.ImageSource
  parent: System.Windows.Media
  isExternal: false
  name: ImageSource
  nameWithType: ImageSource
  fullName: System.Windows.Media.ImageSource
- uid: System.Windows.Window.IconProperty
  parent: System.Windows.Window
  isExternal: false
  name: IconProperty
  nameWithType: Window.IconProperty
  fullName: System.Windows.Window.IconProperty
- uid: System.Windows.Window.IsActive
  parent: System.Windows.Window
  isExternal: false
  name: IsActive
  nameWithType: Window.IsActive
  fullName: System.Windows.Window.IsActive
- uid: System.Windows.Window.IsActiveProperty
  parent: System.Windows.Window
  isExternal: false
  name: IsActiveProperty
  nameWithType: Window.IsActiveProperty
  fullName: System.Windows.Window.IsActiveProperty
- uid: System.Windows.Window.Left
  parent: System.Windows.Window
  isExternal: false
  name: Left
  nameWithType: Window.Left
  fullName: System.Windows.Window.Left
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Window.LeftProperty
  parent: System.Windows.Window
  isExternal: false
  name: LeftProperty
  nameWithType: Window.LeftProperty
  fullName: System.Windows.Window.LeftProperty
- uid: System.Windows.Window.LocationChanged
  parent: System.Windows.Window
  isExternal: false
  name: LocationChanged
  nameWithType: Window.LocationChanged
  fullName: System.Windows.Window.LocationChanged
- uid: System.Windows.Window.LogicalChildren
  parent: System.Windows.Window
  isExternal: false
  name: LogicalChildren
  nameWithType: Window.LogicalChildren
  fullName: System.Windows.Window.LogicalChildren
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Windows.Window.MeasureOverride(System.Windows.Size)
  parent: System.Windows.Window
  isExternal: false
  name: MeasureOverride(Size)
  nameWithType: Window.MeasureOverride(Size)
  fullName: System.Windows.Window.MeasureOverride(Size)
- uid: System.Windows.Window.OnActivated(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnActivated(EventArgs)
  nameWithType: Window.OnActivated(EventArgs)
  fullName: System.Windows.Window.OnActivated(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.Window.OnClosed(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnClosed(EventArgs)
  nameWithType: Window.OnClosed(EventArgs)
  fullName: System.Windows.Window.OnClosed(EventArgs)
- uid: System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnClosing(CancelEventArgs)
  nameWithType: Window.OnClosing(CancelEventArgs)
  fullName: System.Windows.Window.OnClosing(CancelEventArgs)
- uid: System.ComponentModel.CancelEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: CancelEventArgs
  nameWithType: CancelEventArgs
  fullName: System.ComponentModel.CancelEventArgs
- uid: System.Windows.Window.OnContentChanged(System.Object,System.Object)
  parent: System.Windows.Window
  isExternal: false
  name: OnContentChanged(Object,Object)
  nameWithType: Window.OnContentChanged(Object,Object)
  fullName: System.Windows.Window.OnContentChanged(Object,Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Window.OnContentRendered(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnContentRendered(EventArgs)
  nameWithType: Window.OnContentRendered(EventArgs)
  fullName: System.Windows.Window.OnContentRendered(EventArgs)
- uid: System.Windows.Window.OnCreateAutomationPeer
  parent: System.Windows.Window
  isExternal: false
  name: OnCreateAutomationPeer()
  nameWithType: Window.OnCreateAutomationPeer()
  fullName: System.Windows.Window.OnCreateAutomationPeer()
- uid: System.Windows.Automation.Peers.AutomationPeer
  parent: System.Windows.Automation.Peers
  isExternal: false
  name: AutomationPeer
  nameWithType: AutomationPeer
  fullName: System.Windows.Automation.Peers.AutomationPeer
- uid: System.Windows.Window.OnDeactivated(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnDeactivated(EventArgs)
  nameWithType: Window.OnDeactivated(EventArgs)
  fullName: System.Windows.Window.OnDeactivated(EventArgs)
- uid: System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  parent: System.Windows.Window
  isExternal: false
  name: OnDpiChanged(DpiScale,DpiScale)
  nameWithType: Window.OnDpiChanged(DpiScale,DpiScale)
  fullName: System.Windows.Window.OnDpiChanged(DpiScale,DpiScale)
- uid: System.Windows.DpiScale
  parent: System.Windows
  isExternal: false
  name: DpiScale
  nameWithType: DpiScale
  fullName: System.Windows.DpiScale
- uid: System.Windows.Window.OnLocationChanged(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnLocationChanged(EventArgs)
  nameWithType: Window.OnLocationChanged(EventArgs)
  fullName: System.Windows.Window.OnLocationChanged(EventArgs)
- uid: System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
- uid: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationBoundaryFeedbackEventArgs
  nameWithType: ManipulationBoundaryFeedbackEventArgs
  fullName: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
- uid: System.Windows.Window.OnSourceInitialized(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnSourceInitialized(EventArgs)
  nameWithType: Window.OnSourceInitialized(EventArgs)
  fullName: System.Windows.Window.OnSourceInitialized(EventArgs)
- uid: System.Windows.Window.OnStateChanged(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnStateChanged(EventArgs)
  nameWithType: Window.OnStateChanged(EventArgs)
  fullName: System.Windows.Window.OnStateChanged(EventArgs)
- uid: System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.Window
  isExternal: false
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: Window.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.Window.OnVisualParentChanged(DependencyObject)
- uid: System.Windows.Window.OwnedWindows
  parent: System.Windows.Window
  isExternal: false
  name: OwnedWindows
  nameWithType: Window.OwnedWindows
  fullName: System.Windows.Window.OwnedWindows
- uid: System.Windows.WindowCollection
  parent: System.Windows
  isExternal: false
  name: WindowCollection
  nameWithType: WindowCollection
  fullName: System.Windows.WindowCollection
- uid: System.Windows.Window.Owner
  parent: System.Windows.Window
  isExternal: false
  name: Owner
  nameWithType: Window.Owner
  fullName: System.Windows.Window.Owner
- uid: System.Windows.Window.ResizeMode
  parent: System.Windows.Window
  isExternal: false
  name: ResizeMode
  nameWithType: Window.ResizeMode
  fullName: System.Windows.Window.ResizeMode
- uid: System.Windows.ResizeMode
  parent: System.Windows
  isExternal: false
  name: ResizeMode
  nameWithType: ResizeMode
  fullName: System.Windows.ResizeMode
- uid: System.Windows.Window.ResizeModeProperty
  parent: System.Windows.Window
  isExternal: false
  name: ResizeModeProperty
  nameWithType: Window.ResizeModeProperty
  fullName: System.Windows.Window.ResizeModeProperty
- uid: System.Windows.Window.RestoreBounds
  parent: System.Windows.Window
  isExternal: false
  name: RestoreBounds
  nameWithType: Window.RestoreBounds
  fullName: System.Windows.Window.RestoreBounds
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.Window.Show
  parent: System.Windows.Window
  isExternal: false
  name: Show()
  nameWithType: Window.Show()
  fullName: System.Windows.Window.Show()
- uid: System.Windows.Window.ShowActivated
  parent: System.Windows.Window
  isExternal: false
  name: ShowActivated
  nameWithType: Window.ShowActivated
  fullName: System.Windows.Window.ShowActivated
- uid: System.Windows.Window.ShowActivatedProperty
  parent: System.Windows.Window
  isExternal: false
  name: ShowActivatedProperty
  nameWithType: Window.ShowActivatedProperty
  fullName: System.Windows.Window.ShowActivatedProperty
- uid: System.Windows.Window.ShowDialog
  parent: System.Windows.Window
  isExternal: false
  name: ShowDialog()
  nameWithType: Window.ShowDialog()
  fullName: System.Windows.Window.ShowDialog()
- uid: System.Windows.Window.ShowInTaskbar
  parent: System.Windows.Window
  isExternal: false
  name: ShowInTaskbar
  nameWithType: Window.ShowInTaskbar
  fullName: System.Windows.Window.ShowInTaskbar
- uid: System.Windows.Window.ShowInTaskbarProperty
  parent: System.Windows.Window
  isExternal: false
  name: ShowInTaskbarProperty
  nameWithType: Window.ShowInTaskbarProperty
  fullName: System.Windows.Window.ShowInTaskbarProperty
- uid: System.Windows.Window.SizeToContent
  parent: System.Windows.Window
  isExternal: false
  name: SizeToContent
  nameWithType: Window.SizeToContent
  fullName: System.Windows.Window.SizeToContent
- uid: System.Windows.SizeToContent
  parent: System.Windows
  isExternal: false
  name: SizeToContent
  nameWithType: SizeToContent
  fullName: System.Windows.SizeToContent
- uid: System.Windows.Window.SizeToContentProperty
  parent: System.Windows.Window
  isExternal: false
  name: SizeToContentProperty
  nameWithType: Window.SizeToContentProperty
  fullName: System.Windows.Window.SizeToContentProperty
- uid: System.Windows.Window.SourceInitialized
  parent: System.Windows.Window
  isExternal: false
  name: SourceInitialized
  nameWithType: Window.SourceInitialized
  fullName: System.Windows.Window.SourceInitialized
- uid: System.Windows.Window.StateChanged
  parent: System.Windows.Window
  isExternal: false
  name: StateChanged
  nameWithType: Window.StateChanged
  fullName: System.Windows.Window.StateChanged
- uid: System.Windows.Window.TaskbarItemInfo
  parent: System.Windows.Window
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: Window.TaskbarItemInfo
  fullName: System.Windows.Window.TaskbarItemInfo
- uid: System.Windows.Shell.TaskbarItemInfo
  parent: System.Windows.Shell
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: TaskbarItemInfo
  fullName: System.Windows.Shell.TaskbarItemInfo
- uid: System.Windows.Window.TaskbarItemInfoProperty
  parent: System.Windows.Window
  isExternal: false
  name: TaskbarItemInfoProperty
  nameWithType: Window.TaskbarItemInfoProperty
  fullName: System.Windows.Window.TaskbarItemInfoProperty
- uid: System.Windows.Window.Title
  parent: System.Windows.Window
  isExternal: false
  name: Title
  nameWithType: Window.Title
  fullName: System.Windows.Window.Title
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Window.TitleProperty
  parent: System.Windows.Window
  isExternal: false
  name: TitleProperty
  nameWithType: Window.TitleProperty
  fullName: System.Windows.Window.TitleProperty
- uid: System.Windows.Window.Top
  parent: System.Windows.Window
  isExternal: false
  name: Top
  nameWithType: Window.Top
  fullName: System.Windows.Window.Top
- uid: System.Windows.Window.Topmost
  parent: System.Windows.Window
  isExternal: false
  name: Topmost
  nameWithType: Window.Topmost
  fullName: System.Windows.Window.Topmost
- uid: System.Windows.Window.TopmostProperty
  parent: System.Windows.Window
  isExternal: false
  name: TopmostProperty
  nameWithType: Window.TopmostProperty
  fullName: System.Windows.Window.TopmostProperty
- uid: System.Windows.Window.TopProperty
  parent: System.Windows.Window
  isExternal: false
  name: TopProperty
  nameWithType: Window.TopProperty
  fullName: System.Windows.Window.TopProperty
- uid: System.Windows.Window.WindowStartupLocation
  parent: System.Windows.Window
  isExternal: false
  name: WindowStartupLocation
  nameWithType: Window.WindowStartupLocation
  fullName: System.Windows.Window.WindowStartupLocation
- uid: System.Windows.WindowStartupLocation
  parent: System.Windows
  isExternal: false
  name: WindowStartupLocation
  nameWithType: WindowStartupLocation
  fullName: System.Windows.WindowStartupLocation
- uid: System.Windows.Window.WindowState
  parent: System.Windows.Window
  isExternal: false
  name: WindowState
  nameWithType: Window.WindowState
  fullName: System.Windows.Window.WindowState
- uid: System.Windows.WindowState
  parent: System.Windows
  isExternal: false
  name: WindowState
  nameWithType: WindowState
  fullName: System.Windows.WindowState
- uid: System.Windows.Window.WindowStateProperty
  parent: System.Windows.Window
  isExternal: false
  name: WindowStateProperty
  nameWithType: Window.WindowStateProperty
  fullName: System.Windows.Window.WindowStateProperty
- uid: System.Windows.Window.WindowStyle
  parent: System.Windows.Window
  isExternal: false
  name: WindowStyle
  nameWithType: Window.WindowStyle
  fullName: System.Windows.Window.WindowStyle
- uid: System.Windows.WindowStyle
  parent: System.Windows
  isExternal: false
  name: WindowStyle
  nameWithType: WindowStyle
  fullName: System.Windows.WindowStyle
- uid: System.Windows.Window.WindowStyleProperty
  parent: System.Windows.Window
  isExternal: false
  name: WindowStyleProperty
  nameWithType: Window.WindowStyleProperty
  fullName: System.Windows.Window.WindowStyleProperty
- uid: System.Windows.Window.#ctor*
  parent: System.Windows.Window
  isExternal: false
  name: Window
  nameWithType: Window.Window
- uid: System.Windows.Window.Activate*
  parent: System.Windows.Window
  isExternal: false
  name: Activate
  nameWithType: Window.Activate
- uid: System.Windows.Window.AllowsTransparency*
  parent: System.Windows.Window
  isExternal: false
  name: AllowsTransparency
  nameWithType: Window.AllowsTransparency
- uid: System.Windows.Window.ArrangeOverride*
  parent: System.Windows.Window
  isExternal: false
  name: ArrangeOverride
  nameWithType: Window.ArrangeOverride
- uid: System.Windows.Window.Close*
  parent: System.Windows.Window
  isExternal: false
  name: Close
  nameWithType: Window.Close
- uid: System.Windows.Window.DialogResult*
  parent: System.Windows.Window
  isExternal: false
  name: DialogResult
  nameWithType: Window.DialogResult
- uid: System.Windows.Window.DragMove*
  parent: System.Windows.Window
  isExternal: false
  name: DragMove
  nameWithType: Window.DragMove
- uid: System.Windows.Window.GetWindow*
  parent: System.Windows.Window
  isExternal: false
  name: GetWindow
  nameWithType: Window.GetWindow
- uid: System.Windows.Window.Hide*
  parent: System.Windows.Window
  isExternal: false
  name: Hide
  nameWithType: Window.Hide
- uid: System.Windows.Window.Icon*
  parent: System.Windows.Window
  isExternal: false
  name: Icon
  nameWithType: Window.Icon
- uid: System.Windows.Window.IsActive*
  parent: System.Windows.Window
  isExternal: false
  name: IsActive
  nameWithType: Window.IsActive
- uid: System.Windows.Window.Left*
  parent: System.Windows.Window
  isExternal: false
  name: Left
  nameWithType: Window.Left
- uid: System.Windows.Window.LogicalChildren*
  parent: System.Windows.Window
  isExternal: false
  name: LogicalChildren
  nameWithType: Window.LogicalChildren
- uid: System.Windows.Window.MeasureOverride*
  parent: System.Windows.Window
  isExternal: false
  name: MeasureOverride
  nameWithType: Window.MeasureOverride
- uid: System.Windows.Window.OnActivated*
  parent: System.Windows.Window
  isExternal: false
  name: OnActivated
  nameWithType: Window.OnActivated
- uid: System.Windows.Window.OnClosed*
  parent: System.Windows.Window
  isExternal: false
  name: OnClosed
  nameWithType: Window.OnClosed
- uid: System.Windows.Window.OnClosing*
  parent: System.Windows.Window
  isExternal: false
  name: OnClosing
  nameWithType: Window.OnClosing
- uid: System.Windows.Window.OnContentChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnContentChanged
  nameWithType: Window.OnContentChanged
- uid: System.Windows.Window.OnContentRendered*
  parent: System.Windows.Window
  isExternal: false
  name: OnContentRendered
  nameWithType: Window.OnContentRendered
- uid: System.Windows.Window.OnCreateAutomationPeer*
  parent: System.Windows.Window
  isExternal: false
  name: OnCreateAutomationPeer
  nameWithType: Window.OnCreateAutomationPeer
- uid: System.Windows.Window.OnDeactivated*
  parent: System.Windows.Window
  isExternal: false
  name: OnDeactivated
  nameWithType: Window.OnDeactivated
- uid: System.Windows.Window.OnDpiChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnDpiChanged
  nameWithType: Window.OnDpiChanged
- uid: System.Windows.Window.OnLocationChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnLocationChanged
  nameWithType: Window.OnLocationChanged
- uid: System.Windows.Window.OnManipulationBoundaryFeedback*
  parent: System.Windows.Window
  isExternal: false
  name: OnManipulationBoundaryFeedback
  nameWithType: Window.OnManipulationBoundaryFeedback
- uid: System.Windows.Window.OnSourceInitialized*
  parent: System.Windows.Window
  isExternal: false
  name: OnSourceInitialized
  nameWithType: Window.OnSourceInitialized
- uid: System.Windows.Window.OnStateChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnStateChanged
  nameWithType: Window.OnStateChanged
- uid: System.Windows.Window.OnVisualParentChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnVisualParentChanged
  nameWithType: Window.OnVisualParentChanged
- uid: System.Windows.Window.OwnedWindows*
  parent: System.Windows.Window
  isExternal: false
  name: OwnedWindows
  nameWithType: Window.OwnedWindows
- uid: System.Windows.Window.Owner*
  parent: System.Windows.Window
  isExternal: false
  name: Owner
  nameWithType: Window.Owner
- uid: System.Windows.Window.ResizeMode*
  parent: System.Windows.Window
  isExternal: false
  name: ResizeMode
  nameWithType: Window.ResizeMode
- uid: System.Windows.Window.RestoreBounds*
  parent: System.Windows.Window
  isExternal: false
  name: RestoreBounds
  nameWithType: Window.RestoreBounds
- uid: System.Windows.Window.Show*
  parent: System.Windows.Window
  isExternal: false
  name: Show
  nameWithType: Window.Show
- uid: System.Windows.Window.ShowActivated*
  parent: System.Windows.Window
  isExternal: false
  name: ShowActivated
  nameWithType: Window.ShowActivated
- uid: System.Windows.Window.ShowDialog*
  parent: System.Windows.Window
  isExternal: false
  name: ShowDialog
  nameWithType: Window.ShowDialog
- uid: System.Windows.Window.ShowInTaskbar*
  parent: System.Windows.Window
  isExternal: false
  name: ShowInTaskbar
  nameWithType: Window.ShowInTaskbar
- uid: System.Windows.Window.SizeToContent*
  parent: System.Windows.Window
  isExternal: false
  name: SizeToContent
  nameWithType: Window.SizeToContent
- uid: System.Windows.Window.TaskbarItemInfo*
  parent: System.Windows.Window
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: Window.TaskbarItemInfo
- uid: System.Windows.Window.Title*
  parent: System.Windows.Window
  isExternal: false
  name: Title
  nameWithType: Window.Title
- uid: System.Windows.Window.Top*
  parent: System.Windows.Window
  isExternal: false
  name: Top
  nameWithType: Window.Top
- uid: System.Windows.Window.Topmost*
  parent: System.Windows.Window
  isExternal: false
  name: Topmost
  nameWithType: Window.Topmost
- uid: System.Windows.Window.WindowStartupLocation*
  parent: System.Windows.Window
  isExternal: false
  name: WindowStartupLocation
  nameWithType: Window.WindowStartupLocation
- uid: System.Windows.Window.WindowState*
  parent: System.Windows.Window
  isExternal: false
  name: WindowState
  nameWithType: Window.WindowState
- uid: System.Windows.Window.WindowStyle*
  parent: System.Windows.Window
  isExternal: false
  name: WindowStyle
  nameWithType: Window.WindowStyle
