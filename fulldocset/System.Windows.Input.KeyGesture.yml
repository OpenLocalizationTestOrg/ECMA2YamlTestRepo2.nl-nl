### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyGesture
  id: KeyGesture
  children:
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  - System.Windows.Input.KeyGesture.DisplayString
  - System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  - System.Windows.Input.KeyGesture.Key
  - System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  - System.Windows.Input.KeyGesture.Modifiers
  langs:
  - csharp
  name: KeyGesture
  nameWithType: KeyGesture
  fullName: System.Windows.Input.KeyGesture
  type: Class
  summary: "Hiermee definieert u een toetsencombinatie die kan worden gebruikt om aan te roepen, een opdracht."
  remarks: "In de meeste gevallen een KeyGesture moet worden gekoppeld aan een of meer <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> De uitzonderingen op deze regel zijn de functietoetsen en de sleutels numerieke toetsenblok, wat kunnen een geldige KeyGesture zelf. Bijvoorbeeld, u kunt een KeyGesture maken met behulp van alleen de F12-toets, maar voor het gebruik van de X sleutel in een KeyGesture deze moet worden gekoppeld aan een toets.       In het algemeen kunt u kunt een <xref:System.Windows.Input.KeyBinding>binden van een KeyGesture naar een <xref:System.Windows.Input.ICommand>, zodat de opdracht wordt aangeroepen wanneer de KeyGesture optreedt.</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.KeyBinding>       Voor KeyGesture [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] gebruik, de eigenschap die in het algemeen is ingesteld in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] is <xref:System.Windows.Input.KeyBinding.Gesture%2A>, in gevallen waarbij de gebaar zowel een standaard sleutel en een sleutel aanpassingsfunctie vertegenwoordigt.</xref:System.Windows.Input.KeyBinding.Gesture%2A> U kunt ook instellen de <xref:System.Windows.Input.KeyBinding.Gesture%2A>eigenschap zojuist een functietoets of alleen de aanpassingsfunctie toetsencombinatie.</xref:System.Windows.Input.KeyBinding.Gesture%2A> Het is echter vaker om in te stellen de <xref:System.Windows.Input.KeyBinding.Key%2A>eigenschap als de beoogde opdrachtbinding een functietoets met geen parameters is, of <xref:System.Windows.Input.KeyBinding.Modifiers%2A>Als de beoogde opdrachtbinding voor de aanpassingsfunctie sleutels alleen is.</xref:System.Windows.Input.KeyBinding.Modifiers%2A> </xref:System.Windows.Input.KeyBinding.Key%2A>      <a name=&quot;xamlAttributeUsage_KeyGesture&quot;></a>## XAML Kenmerkgebruik ```   <object property=&quot;oneOrMoreModifierKeys+key&quot;/>   - or -   <object property=&quot;functionKey&quot;/>   ``` <a name=&quot;xamlValues_KeyGesture&quot;> </a> ## XAML waarden `functionKey` <xref:System.Windows.Input.Key>een enkele sleutelwaarde: dit een van de functietoetsen (F1-12) of het numerieke toetsenblok sleutels moet.</xref:System.Windows.Input.Key>                 `oneOrMoreModifierKeys`Een of meer aanpassingsfunctie codes, gedefinieerd door de <xref:System.Windows.Input.ModifierKeys>opsomming, van elkaar gescheiden met een teken &quot;+&quot;.</xref:System.Windows.Input.ModifierKeys>       `key`    <xref:System.Windows.Input.Key>Een enkele sleutelwaarde.</xref:System.Windows.Input.Key>"
  example:
  - "The following example shows how to bind the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command to a KeyGesture using a <xref:System.Windows.Input.KeyBinding>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]  \n  \n The following example shows how to use KeyGesture in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Note that the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage does not directly declare a `<KeyGesture>` element. That object element usage is not possible because KeyGesture does not expose a public default constructor. Instead, the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage uses the typeconverter behavior to declare an entire KeyGesture inline as the `Gesture` attribute value.  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))]

      public class KeyGesture : System.Windows.Input.InputGesture
  inheritance:
  - System.Object
  - System.Windows.Input.InputGesture
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  id: '#ctor(System.Windows.Input.Key)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key)
  nameWithType: KeyGesture.KeyGesture(Key)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> klasse met de opgegeven <xref href=&quot;System.Windows.Input.Key&quot;> </xref>."
  remarks: "In de meeste gevallen een <xref:System.Windows.Input.KeyGesture>moet worden gekoppeld aan een of meer <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture>  De uitzonderingen op deze regel worden de functietoetsen en het numerieke toetsenblok-sleutels, die kunnen bestaan uit een geldige <xref:System.Windows.Input.KeyGesture>zelf.</xref:System.Windows.Input.KeyGesture>"
  example:
  - "The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>.  The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithnomodifier)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithnomodifier)]"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "De sleutel die is gekoppeld aan dit gebaar."
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>key</code>is geen geldige <xref href=&quot;System.Windows.Input.Key&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>is geen geldige <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key,ModifierKeys)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> klasse met de opgegeven <xref href=&quot;System.Windows.Input.Key&quot;> </xref> en <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>."
  remarks: "In de meeste gevallen een <xref:System.Windows.Input.KeyGesture>moet worden gekoppeld aan een of meer <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture> De uitzonderingen op deze regel worden de functietoetsen en het numerieke toetsenblok-sleutels, die kunnen bestaan uit een geldige <xref:System.Windows.Input.KeyGesture>zelf.</xref:System.Windows.Input.KeyGesture>"
  example:
  - "The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>. The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "De sleutel die is gekoppeld aan de beweging."
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "De aanpassingsfunctie voor sleutels die zijn gekoppeld aan de beweging."
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>modifiers</code>is not a valid <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>       -or-       <code>key</code> is not a valid <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>en <code>modifiers</code> vormen geen geldige <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key,ModifierKeys,String)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> klasse met de opgegeven <xref href=&quot;System.Windows.Input.Key&quot;> </xref>, <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>, en de tekenreeks weer."
  remarks: "De <xref:System.Windows.Input.KeyGesture.DisplayString%2A>eigenschap is ingesteld op de `displayString` parameter.</xref:System.Windows.Input.KeyGesture.DisplayString%2A>"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "De sleutel die is gekoppeld aan de beweging."
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "De aanpassingsfunctie voor sleutels die zijn gekoppeld aan de beweging."
    - id: displayString
      type: System.String
      description: "Een tekenreeksrepresentatie van de <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>modifiers</code>is not a valid <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>       -or-       <code>key</code> is not a valid <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>displayString</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>en <code>modifiers</code> vormen geen geldige <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.DisplayString
  id: DisplayString
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
  fullName: System.Windows.Input.KeyGesture.DisplayString
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Haalt een tekenreeksrepresentatie van dit <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  remarks: "Als een weergavetekenreeks is niet ingesteld in de constructor, wordt een lege tekenreeks geretourneerd.       Als deze eigenschap leeg is, wordt is de <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A>methode retourneert een tekenreeks die is gemaakt op basis van de <xref:System.Windows.Input.KeyGesture.Key%2A>en <xref:System.Windows.Input.KeyGesture.Modifiers%2A>.</xref:System.Windows.Input.KeyGesture.Modifiers%2A> </xref:System.Windows.Input.KeyGesture.Key%2A> </xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A>"
  syntax:
    content: public string DisplayString { get; }
    return:
      type: System.String
      description: "De weergavereeks voor dit <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>. De standaardwaarde is <xref:System.String.Empty>.</xref:System.String.Empty>"
  overload: System.Windows.Input.KeyGesture.DisplayString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  id: GetDisplayStringForCulture(System.Globalization.CultureInfo)
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: GetDisplayStringForCulture(CultureInfo)
  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)
  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Retourneert een tekenreeks die kan worden gebruikt om weer te geven de <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  remarks: "Als de weergavetekenreeks is ingesteld met de constructor die tekenreeks geretourneerd. anders wordt een tekenreeks wordt gemaakt van de <xref:System.Windows.Input.KeyGesture.Key%2A>en <xref:System.Windows.Input.KeyGesture.Modifiers%2A>met alle benodigde conversies wordt beheerst door het opgegeven <xref:System.Globalization.CultureInfo>object.</xref:System.Globalization.CultureInfo> </xref:System.Windows.Input.KeyGesture.Modifiers%2A> </xref:System.Windows.Input.KeyGesture.Key%2A>"
  syntax:
    content: public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "De cultuur specifieke informatie."
    return:
      type: System.String
      description: "De tekenreeks om weer te geven"
  overload: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Key
  id: Key
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Key
  nameWithType: KeyGesture.Key
  fullName: System.Windows.Input.KeyGesture.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "De sleutel gekoppeld aan dit opgehaald <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  remarks: "In de meeste gevallen een <xref:System.Windows.Input.KeyGesture>moet worden gekoppeld aan een of meer <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture>  De uitzonderingen op deze regel worden de functietoetsen en het numerieke toetsenblok-sleutels, die kunnen bestaan uit een geldige <xref:System.Windows.Input.KeyGesture>zelf.</xref:System.Windows.Input.KeyGesture>"
  syntax:
    content: public System.Windows.Input.Key Key { get; }
    return:
      type: System.Windows.Input.Key
      description: "De sleutel die is gekoppeld aan de beweging.  De standaardwaarde is <xref href=&quot;System.Windows.Input.Key&quot;> </xref>."
  overload: System.Windows.Input.KeyGesture.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  id: Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Matches(Object,InputEventArgs)
  nameWithType: KeyGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "Hiermee wordt bepaald of dit <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref> overeenkomt met de invoer is gekoppeld aan de opgegeven <xref href=&quot;System.Windows.Input.InputEventArgs&quot;> </xref> object."
  remarks: '`targetElement`kan worden gebruikt om een meer specifiek beslissing nemen op of een opdracht moet worden aangeroepen voor een specifieke element.'
  example:
  - "The following example shows how to test whether a <xref:System.Windows.Input.KeyGesture> matches the input associated with an instance of an <xref:System.Windows.Input.InputEventArgs>. A <xref:System.Windows.UIElement.KeyDown> event handler is created that compares the event data with the <xref:System.Windows.Input.KeyGesture> by using the Matches method.  \n  \n [!code-cs[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keydownhandlerkeygesturematches)]\n [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keydownhandlerkeygesturematches)]"
  syntax:
    content: public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);
    parameters:
    - id: targetElement
      type: System.Object
      description: "Het doel."
    - id: inputEventArgs
      type: System.Windows.Input.InputEventArgs
      description: "De invoer gebeurtenisgegevens deze gebaar vergelijken."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de gebeurtenisgegevens overeenkomt met dit <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Input.KeyGesture.Matches*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Modifiers
  id: Modifiers
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
  fullName: System.Windows.Input.KeyGesture.Modifiers
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "De aanpassingsfunctie voor sleutels die zijn gekoppeld aan dit opgehaald <xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>."
  remarks: "In de meeste gevallen een <xref:System.Windows.Input.KeyGesture>moet worden gekoppeld aan een of meer <xref:System.Windows.Input.ModifierKeys>.</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture> De uitzonderingen op deze regel worden de functietoetsen en het numerieke toetsenblok-sleutels, die kunnen bestaan uit een geldige <xref:System.Windows.Input.KeyGesture>zelf.</xref:System.Windows.Input.KeyGesture> Bijvoorbeeld, kunt u een <xref:System.Windows.Input.KeyGesture>met behulp van alleen de F12-toets, maar de X gebruiken sleutel een <xref:System.Windows.Input.KeyGesture>Deze moet worden gekoppeld aan een sleutel aanpassingsfunctie.</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyGesture>"
  syntax:
    content: public System.Windows.Input.ModifierKeys Modifiers { get; }
    return:
      type: System.Windows.Input.ModifierKeys
      description: "De aanpassingsfunctie voor sleutels die zijn gekoppeld aan de beweging. De standaardwaarde is <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>."
  overload: System.Windows.Input.KeyGesture.Modifiers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputGesture
  isExternal: false
  name: System.Windows.Input.InputGesture
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key)
  nameWithType: KeyGesture.KeyGesture(Key)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key,ModifierKeys)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)
- uid: System.Windows.Input.ModifierKeys
  parent: System.Windows.Input
  isExternal: false
  name: ModifierKeys
  nameWithType: ModifierKeys
  fullName: System.Windows.Input.ModifierKeys
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key,ModifierKeys,String)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Input.KeyGesture.DisplayString
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
  fullName: System.Windows.Input.KeyGesture.DisplayString
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: GetDisplayStringForCulture(CultureInfo)
  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)
  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Input.KeyGesture.Key
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Key
  nameWithType: KeyGesture.Key
  fullName: System.Windows.Input.KeyGesture.Key
- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Matches(Object,InputEventArgs)
  nameWithType: KeyGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.InputEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: InputEventArgs
  nameWithType: InputEventArgs
  fullName: System.Windows.Input.InputEventArgs
- uid: System.Windows.Input.KeyGesture.Modifiers
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
  fullName: System.Windows.Input.KeyGesture.Modifiers
- uid: System.Windows.Input.KeyGesture.#ctor*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture
  nameWithType: KeyGesture.KeyGesture
- uid: System.Windows.Input.KeyGesture.DisplayString*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: GetDisplayStringForCulture
  nameWithType: KeyGesture.GetDisplayStringForCulture
- uid: System.Windows.Input.KeyGesture.Key*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Key
  nameWithType: KeyGesture.Key
- uid: System.Windows.Input.KeyGesture.Matches*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Matches
  nameWithType: KeyGesture.Matches
- uid: System.Windows.Input.KeyGesture.Modifiers*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
