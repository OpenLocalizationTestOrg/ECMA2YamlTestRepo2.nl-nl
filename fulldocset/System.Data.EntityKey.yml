### YamlMime:ManagedReference
items:
- uid: System.Data.EntityKey
  id: EntityKey
  children:
  - System.Data.EntityKey.#ctor
  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  - System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  - System.Data.EntityKey.EntityContainerName
  - System.Data.EntityKey.EntityKeyValues
  - System.Data.EntityKey.EntityNotValidKey
  - System.Data.EntityKey.EntitySetName
  - System.Data.EntityKey.Equals(System.Data.EntityKey)
  - System.Data.EntityKey.Equals(System.Object)
  - System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  - System.Data.EntityKey.GetHashCode
  - System.Data.EntityKey.IsTemporary
  - System.Data.EntityKey.NoEntitySetKey
  - System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  - System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  - System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  - System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  langs:
  - csharp
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
  type: Class
  summary: "Biedt een duurzame verwijzing naar een object dat is een exemplaar van een entiteitstype."
  remarks: "De EntityKey-objecten zijn niet-wijzigbaar; dat wil zeggen, nadat ze zijn samengesteld worden kunnen niet gewijzigd.       Zie voor meer informatie [werken met entiteitssleutels](http://msdn.microsoft.com/en-us/fe3f4206-d277-43a1-a72f-4e86fdf12b9f)."
  example:
  - "These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The examples show you how to create and use an EntityKey.  \n  \n [!code-vb[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#entitykeyclass_trygetobjectbykey)]\n [!code-cs[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#entitykeyclass_trygetobjectbykey)]  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{ConcatKeyValue()}")]

      [System.Runtime.Serialization.DataContract(IsReference=true)]

      public sealed class EntityKey : IEquatable<System.Data.EntityKey>
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Data.EntityKey>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor
  id: '#ctor'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey()
  nameWithType: EntityKey.EntityKey()
  fullName: System.Data.EntityKey.EntityKey()
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Data.EntityKey&quot;> </xref> klasse."
  syntax:
    content: public EntityKey ();
    parameters: []
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Data.EntityKey&quot;> </xref> klasse met een Entiteitenset, de naam en een algemeen <xref:System.Collections.Generic.KeyValuePair>verzameling.</xref:System.Collections.Generic.KeyValuePair>"
  remarks: ''
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>> entityKeyValues);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "Een <xref:System.String>die is gekwalificeerd door de naam van de container entiteit naam van de entiteit.</xref:System.String>"
    - id: entityKeyValues
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
      description: "Een algemeen <xref:System.Collections.Generic.KeyValuePair>verzameling.</xref:System.Collections.Generic.KeyValuePair>       Elke sleutel-waardepaar heeft een eigenschapnaam als de sleutel en de waarde van die eigenschap als de waarde. Er moet één paar voor elke eigenschap die deel uitmaakt van de <xref href=&quot;System.Data.EntityKey&quot;> </xref>. De volgorde van de sleutel/waarde-paren is niet belangrijk, maar elke sleuteleigenschap moet worden opgenomen. De namen van eigenschappen zijn eenvoudige namen die niet worden gekwalificeerd met een naam voor entiteit of de naam van het schema."
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,IEnumerable<EntityKeyMember>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Data.EntityKey&quot;> </xref> klasse met een Entiteitenset, de naam en een &lt;xref:System.Collections.Generic.IEnumerable%601&gt; verzameling <xref href=&quot;System.Data.EntityKeyMember&quot;> </xref> objecten."
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember> entityKeyValues);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "Een <xref:System.String>die is gekwalificeerd door de naam van de container entiteit naam van de entiteit.</xref:System.String>"
    - id: entityKeyValues
      type: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}
      description: "Een &lt;xref:System.Collections.Generic.IEnumerable%601&gt; verzameling <xref href=&quot;System.Data.EntityKeyMember&quot;> </xref> objecten waarmee de sleutel te initialiseren."
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  id: '#ctor(System.String,System.String,System.Object)'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,String,Object)
  nameWithType: EntityKey.EntityKey(String,String,Object)
  fullName: System.Data.EntityKey.EntityKey(String,String,Object)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Data.EntityKey&quot;> </xref> klasse met een Entiteitenset, de naam en een specifieke entiteit sleutelpaar."
  remarks: ''
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, string keyName, object keyValue);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "Een <xref:System.String>die is gekwalificeerd door de naam van de container entiteit naam van de entiteit.</xref:System.String>"
    - id: keyName
      type: System.String
      description: "Een <xref:System.String>is de naam van de sleutel.</xref:System.String>"
    - id: keyValue
      type: System.Object
      description: "Een <xref:System.Object>die de waarde van de sleutel.</xref:System.Object>"
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityContainerName
  id: EntityContainerName
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
  fullName: System.Data.EntityKey.EntityContainerName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Opgehaald of ingesteld van de naam van de entiteitscontainer."
  syntax:
    content: public string EntityContainerName { get; set; }
    return:
      type: System.String
      description: "Een <xref:System.String>waarde die is de naam van de entiteitscontainer voor de entiteit die de <xref href=&quot;System.Data.EntityKey&quot;> </xref> behoort.</xref:System.String>"
  overload: System.Data.EntityKey.EntityContainerName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityKeyValues
  id: EntityKeyValues
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
  fullName: System.Data.EntityKey.EntityKeyValues
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Opgehaald of ingesteld van de sleutelwaarden die zijn gekoppeld aan dit <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "De <xref:System.Data.EntityKey>klasse bevat een kopie van de waarden die de logische sleutel die is opgegeven voor dit type entiteit.</xref:System.Data.EntityKey>       De leden van de <xref:System.Collections.ObjectModel.ReadOnlyCollection%601>hebben elk een eigenschapsnaam en een waarde in een <xref:System.Collections.Generic.KeyValuePair%602>, waarbij de sleutel is de naam van de eigenschap en de waarde de werkelijke waarde van die eigenschap op het object is.</xref:System.Collections.Generic.KeyValuePair%602> </xref:System.Collections.ObjectModel.ReadOnlyCollection%601>"
  syntax:
    content: public System.Data.EntityKeyMember[] EntityKeyValues { get; set; }
    return:
      type: System.Data.EntityKeyMember[]
      description: "Een &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt; sleutelwaarden voor deze <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  overload: System.Data.EntityKey.EntityKeyValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityNotValidKey
  id: EntityNotValidKey
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityNotValidKey
  nameWithType: EntityKey.EntityNotValidKey
  fullName: System.Data.EntityKey.EntityNotValidKey
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Een eenvoudige <xref href=&quot;System.Data.EntityKey&quot;> </xref> identificeren van een entiteit die het gevolg zijn van een mislukte [BEHANDELEN](~/add/includes/ajax-current-ext-md.md) bewerking."
  remarks: "Er zijn verschillende manieren om een ongeldige entiteit. De meest voorkomende scenario is wanneer een [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] query gebruikt de [BEHANDELEN](../Topic/TREAT%20\\(Entity%20SQL\\).md) operator interpreteren een instantie van een polymorf type als een bepaald type en het desbetreffende exemplaar komt niet overeen. ([BEHANDELEN](../Topic/TREAT%20\\(Entity%20SQL\\).md) is vergelijkbaar met de C# `as` operator). In dit geval wordt de query retourneert een entiteit die is niet geldig en de entiteitssleutel van de resulterende entiteit is ingesteld op EntityNotValidKey."
  syntax:
    content: public static readonly System.Data.EntityKey EntityNotValidKey;
    return:
      type: System.Data.EntityKey
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntitySetName
  id: EntitySetName
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
  fullName: System.Data.EntityKey.EntitySetName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Opgehaald of ingesteld van de naam van de entiteit is ingesteld."
  syntax:
    content: public string EntitySetName { get; set; }
    return:
      type: System.String
      description: "Een <xref:System.String>waarde die de naam van de entiteit is ingesteld voor de entiteit waarnaar de <xref href=&quot;System.Data.EntityKey&quot;> </xref> behoort.</xref:System.String>"
  overload: System.Data.EntityKey.EntitySetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)
  id: Equals(System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: Equals(EntityKey)
  nameWithType: EntityKey.Equals(EntityKey)
  fullName: System.Data.EntityKey.Equals(EntityKey)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Retourneert een waarde die aangeeft of dit exemplaar gelijk aan een opgegeven is <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "Tijdelijke sleutels hebben verschillende vergelijking semantiek dan permanente sleutels:-tijdelijke sleutels gebruiken verwijzingsgelijkheid. Dat wil zeggen, twee verwijzingen naar de exacte dezelfde tijdelijke <xref:System.Data.EntityKey>exemplaar zijn gelijk zijn, maar geen enkele andere <xref:System.Data.EntityKey>exemplaren zijn gelijk.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -Permanente sleutels bepalen op basis van de waarden van de eigenschappen van de ingesloten en de <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> gelijkheid Dat wil zeggen, kunt u twee aparte laten <xref:System.Data.EntityKey>-instanties die gelijk zijn aan hun entiteitsets zijn hetzelfde als de belangrijkste waarden identiek zijn.</xref:System.Data.EntityKey>       Bovendien hebben tijdelijke sleutels geen <xref:System.Data.Metadata.Edm.EntitySet>of sleutelwaarden, maar geef permanente sleutels</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public bool Equals (System.Data.EntityKey other);
    parameters:
    - id: other
      type: System.Data.EntityKey
      description: "Een <xref href=&quot;System.Data.EntityKey&quot;> </xref> object moeten worden vergeleken met dit exemplaar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als dit exemplaar en <code> other </code> gelijk waarden hebben; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.EntityKey.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: EntityKey.Equals(Object)
  fullName: System.Data.EntityKey.Equals(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Retourneert een waarde die aangeeft of dit exemplaar gelijk aan een bepaald object is."
  remarks: "Tijdelijke sleutels hebben verschillende vergelijking semantiek dan permanente sleutels:-tijdelijke sleutels gebruiken verwijzingsgelijkheid. Dat wil zeggen, twee verwijzingen naar de exacte dezelfde tijdelijke <xref:System.Data.EntityKey>exemplaar zijn gelijk zijn, maar geen enkele andere <xref:System.Data.EntityKey>exemplaren zijn gelijk.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -Permanente sleutels bepalen op basis van de waarden van de eigenschappen van de ingesloten en de <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> gelijkheid Dat wil zeggen, kunt u twee aparte laten <xref:System.Data.EntityKey>-instanties die gelijk zijn aan als hun <xref:System.Data.Metadata.Edm.EntitySet>objecten zijn hetzelfde en hun waarden gelijk zijn.</xref:System.Data.Metadata.Edm.EntitySet> </xref:System.Data.EntityKey>       Bovendien hebben tijdelijke sleutels geen <xref:System.Data.Metadata.Edm.EntitySet>of sleutelwaarden, maar geef permanente sleutels</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "Een <xref:System.Object>moeten worden vergeleken met dit exemplaar.</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als dit exemplaar en <code> obj </code> gelijk waarden hebben; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.EntityKey.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  id: GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: GetEntitySet(MetadataWorkspace)
  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)
  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Hiermee haalt u de entiteit ingesteld voor deze entiteitssleutel uit de opgegeven metagegevens-werkruimte."
  remarks: "De entiteitset wordt geopend op basis van de entiteit containernaam en entiteit ingesteld naam van de sleutel."
  syntax:
    content: public System.Data.Metadata.Edm.EntitySet GetEntitySet (System.Data.Metadata.Edm.MetadataWorkspace metadataWorkspace);
    parameters:
    - id: metadataWorkspace
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: "De metagegevens-werkruimte die de entiteit bevat."
    return:
      type: System.Data.Metadata.Edm.EntitySet
      description: "De <xref href=&quot;System.Data.Metadata.Edm.EntitySet&quot;> </xref> voor de entiteitssleutel."
  overload: System.Data.EntityKey.GetEntitySet*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De entiteitsset is niet gevonden in de opgegeven metagegevens-werkruimte."
  platform:
  - net462
- uid: System.Data.EntityKey.GetHashCode
  id: GetHashCode
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: EntityKey.GetHashCode()
  fullName: System.Data.EntityKey.GetHashCode()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Fungeert als een hash-functie voor de huidige <xref href=&quot;System.Data.EntityKey&quot;> </xref> object. GetHashCode is geschikt voor hash-algoritmen en gegevensstructuren zoals hash-tabel."
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "Een hash-code voor de huidige <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  overload: System.Data.EntityKey.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.IsTemporary
  id: IsTemporary
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
  fullName: System.Data.EntityKey.IsTemporary
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Hiermee wordt een waarde die aangeeft of de <xref href=&quot;System.Data.EntityKey&quot;> </xref> is tijdelijk."
  remarks: "Wanneer een nieuwe entiteit is gemaakt, de [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] tijdelijke sleutel wordt gedefinieerd en wordt de eigenschap IsTemporary op `true`. Als u aanroept de <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>methode, de [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] wijst een permanente sleutel en stelt de eigenschap IsTemporary op `false`.</xref:System.Data.Objects.ObjectContext.SaveChanges%2A>      > [!NOTE] > Tijdelijke sleutels automatisch door het framework zijn gebouwd; ze rechtstreeks door een gebruiker kunnen niet worden samengesteld.       Tijdelijke sleutels hebben verschillende vergelijking semantiek dan permanente sleutels:-tijdelijke sleutels gebruiken verwijzingsgelijkheid. Dat wil zeggen, twee verwijzingen naar de exacte dezelfde tijdelijke <xref:System.Data.EntityKey>exemplaar zijn gelijk zijn, maar geen enkele andere <xref:System.Data.EntityKey>exemplaren zijn gelijk.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -Permanente sleutels bepalen op basis van de waarden van de eigenschappen van de ingesloten en de <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> gelijkheid Dat wil zeggen, kunt u twee aparte laten <xref:System.Data.EntityKey>-instanties die gelijk zijn aan hun entiteitsets zijn hetzelfde als de belangrijkste waarden identiek zijn.</xref:System.Data.EntityKey>       Bovendien hebben tijdelijke sleutels geen <xref:System.Data.Metadata.Edm.EntitySet>of sleutelwaarden, maar geef permanente sleutels</xref:System.Data.Metadata.Edm.EntitySet>       Wanneer de <xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A>methode wordt aangeroepen voor een entiteit <xref:System.Data.Objects.ObjectStateEntry>en de overgang van de entiteit van de <xref:System.Data.EntityState>status naar <xref:System.Data.EntityState>status, de [!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)] automatisch een nieuwe permanente sleutel voor de entiteit wordt berekend en synchroniseert u alle verwijzingen voor de tijdelijke sleutels.</xref:System.Data.EntityState> </xref:System.Data.EntityState> </xref:System.Data.Objects.ObjectStateEntry> </xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A>"
  syntax:
    content: public bool IsTemporary { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Data.EntityKey&quot;> </xref> is tijdelijke, anders, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.EntityKey.IsTemporary*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.NoEntitySetKey
  id: NoEntitySetKey
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: NoEntitySetKey
  nameWithType: EntityKey.NoEntitySetKey
  fullName: System.Data.EntityKey.NoEntitySetKey
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Een singleton <xref href=&quot;System.Data.EntityKey&quot;> </xref> door een alleen-lezen-entiteit wordt geïdentificeerd."
  remarks: "Een alleen-lezen-entiteit identificeert een entiteit die geldig zijn op elke manier, behalve dat het is niet gekoppeld aan een werkelijke entiteitset. Deze fout kan optreden als onderdeel van het resultaat van een [!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)] query die wordt gemaakt en retourneert een entiteitsexemplaar dat is opgegeven in de tekst van de query (in plaats van een entiteit die is opgehaald uit een database). Een entiteit die niet een entiteitset kan niet worden vastgehouden in de database, totdat deze gekoppeld aan een entiteitset is. Daarom de object-materializer dit soort entiteit wordt behandeld alsof het <xref:System.Data.Objects.MergeOption>samenvoegoptie is opgegeven, ongeacht de werkelijke samenvoegoptie die is opgegeven.</xref:System.Data.Objects.MergeOption> Een entiteitsobject wordt gemaakt, maar de identiteit kan niet worden opgelost en deze niet naar de status manager worden toegevoegd als onderdeel van het proces materialisatie."
  syntax:
    content: public static readonly System.Data.EntityKey NoEntitySetKey;
    return:
      type: System.Data.EntityKey
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  id: OnDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: OnDeserialized(StreamingContext)
  nameWithType: EntityKey.OnDeserialized(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Help-methode die wordt gebruikt voor het deserialiseren van een <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "OnDeserialized wordt door Object Services gebruikt bij het deserialiseren van een <xref:System.Data.EntityKey>.</xref:System.Data.EntityKey> Zie voor meer informatie [objecten serialiseren](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)."
  syntax:
    content: public void OnDeserialized (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Beschrijft de bron en bestemming van een opgegeven geserialiseerde stroom en biedt een extra aanroeper gedefinieerde context."
  overload: System.Data.EntityKey.OnDeserialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  id: OnDeserializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: OnDeserializing(StreamingContext)
  nameWithType: EntityKey.OnDeserializing(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Help-methode die wordt gebruikt voor het deserialiseren van een <xref href=&quot;System.Data.EntityKey&quot;> </xref>."
  remarks: "OnDeserializing wordt door Object Services gebruikt bij het deserialiseren van een <xref:System.Data.EntityKey>.</xref:System.Data.EntityKey> Zie voor meer informatie [objecten serialiseren](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)."
  syntax:
    content: public void OnDeserializing (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Beschrijft de bron en bestemming van een opgegeven geserialiseerde stroom en biedt een extra aanroeper gedefinieerde context."
  overload: System.Data.EntityKey.OnDeserializing*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  id: op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: op_Equality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)
  type: Operator
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Vergelijkt twee <xref href=&quot;System.Data.EntityKey&quot;> </xref> objecten."
  remarks: "Tijdelijke sleutels hebben verschillende vergelijking semantiek dan permanente sleutels:-tijdelijke sleutels gebruiken verwijzingsgelijkheid. Dat wil zeggen, twee verwijzingen naar de exacte dezelfde tijdelijke <xref:System.Data.EntityKey>exemplaar zijn gelijk zijn, maar geen enkele andere <xref:System.Data.EntityKey>exemplaren zijn gelijk.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -Permanente sleutels bepalen op basis van de waarden van de eigenschappen van de ingesloten en de <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> gelijkheid Dat wil zeggen, kunt u twee aparte laten <xref:System.Data.EntityKey>-instanties die gelijk zijn aan hun entiteitsets zijn hetzelfde als de belangrijkste waarden identiek zijn.</xref:System.Data.EntityKey>       Bovendien hebben tijdelijke sleutels geen <xref:System.Data.Metadata.Edm.EntitySet>of sleutelwaarden, maar geef permanente sleutels</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public static bool op_Equality (System.Data.EntityKey key1, System.Data.EntityKey key2);
    parameters:
    - id: key1
      type: System.Data.EntityKey
      description: "Een <xref href=&quot;System.Data.EntityKey&quot;> </xref> om te vergelijken."
    - id: key2
      type: System.Data.EntityKey
      description: "Een <xref href=&quot;System.Data.EntityKey&quot;> </xref> om te vergelijken."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>key1</code> and <code>key2</code> values are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.EntityKey.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  id: op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: op_Inequality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)
  type: Operator
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "Vergelijkt twee <xref href=&quot;System.Data.EntityKey&quot;> </xref> objecten."
  remarks: "Tijdelijke sleutels hebben verschillende vergelijking semantiek dan permanente sleutels:-tijdelijke sleutels gebruiken verwijzingsgelijkheid. Dat wil zeggen, twee verwijzingen naar de exacte dezelfde tijdelijke <xref:System.Data.EntityKey>exemplaar zijn gelijk zijn, maar geen enkele andere <xref:System.Data.EntityKey>exemplaren zijn gelijk.</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -Permanente sleutels bepalen op basis van de waarden van de eigenschappen van de ingesloten en de <xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet> gelijkheid Dat wil zeggen, kunt u twee aparte laten <xref:System.Data.EntityKey>-instanties die gelijk zijn aan hun entiteitsets zijn hetzelfde als de belangrijkste waarden identiek zijn.</xref:System.Data.EntityKey>       Bovendien hebben tijdelijke sleutels geen <xref:System.Data.Metadata.Edm.EntitySet>of sleutelwaarden, maar geef reguliere sleutels</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public static bool op_Inequality (System.Data.EntityKey key1, System.Data.EntityKey key2);
    parameters:
    - id: key1
      type: System.Data.EntityKey
      description: "Een <xref href=&quot;System.Data.EntityKey&quot;> </xref> om te vergelijken."
    - id: key2
      type: System.Data.EntityKey
      description: "Een <xref href=&quot;System.Data.EntityKey&quot;> </xref> om te vergelijken."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>key1</code> and <code>key2</code> values are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.EntityKey.op_Inequality*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.EntityKey.#ctor
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey()
  nameWithType: EntityKey.EntityKey()
  fullName: System.Data.EntityKey.EntityKey()
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<KeyValuePair<String,Object>>
  nameWithType: IEnumerable<KeyValuePair<String,Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,IEnumerable<EntityKeyMember>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
- uid: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<EntityKeyMember>
  nameWithType: IEnumerable<EntityKeyMember>
  fullName: System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Data.EntityKeyMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.EntityKeyMember
    name: EntityKeyMember
    nameWithType: EntityKeyMember
    fullName: EntityKeyMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,String,Object)
  nameWithType: EntityKey.EntityKey(String,String,Object)
  fullName: System.Data.EntityKey.EntityKey(String,String,Object)
- uid: System.Data.EntityKey.EntityContainerName
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
  fullName: System.Data.EntityKey.EntityContainerName
- uid: System.Data.EntityKey.EntityKeyValues
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
  fullName: System.Data.EntityKey.EntityKeyValues
- uid: System.Data.EntityKeyMember[]
  parent: System.Data
  isExternal: false
  name: EntityKeyMember
  nameWithType: EntityKeyMember
  fullName: System.Data.EntityKeyMember[]
  spec.csharp:
  - uid: System.Data.EntityKeyMember
    name: EntityKeyMember
    nameWithType: EntityKeyMember
    fullName: EntityKeyMember[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.EntityKey.EntityNotValidKey
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityNotValidKey
  nameWithType: EntityKey.EntityNotValidKey
  fullName: System.Data.EntityKey.EntityNotValidKey
- uid: System.Data.EntityKey
  parent: System.Data
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
- uid: System.Data.EntityKey.EntitySetName
  parent: System.Data.EntityKey
  isExternal: false
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
  fullName: System.Data.EntityKey.EntitySetName
- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals(EntityKey)
  nameWithType: EntityKey.Equals(EntityKey)
  fullName: System.Data.EntityKey.Equals(EntityKey)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.EntityKey.Equals(System.Object)
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals(Object)
  nameWithType: EntityKey.Equals(Object)
  fullName: System.Data.EntityKey.Equals(Object)
- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  parent: System.Data.EntityKey
  isExternal: false
  name: GetEntitySet(MetadataWorkspace)
  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)
  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)
- uid: System.Data.Metadata.Edm.EntitySet
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: EntitySet
  nameWithType: EntitySet
  fullName: System.Data.Metadata.Edm.EntitySet
- uid: System.Data.Metadata.Edm.MetadataWorkspace
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: MetadataWorkspace
  nameWithType: MetadataWorkspace
  fullName: System.Data.Metadata.Edm.MetadataWorkspace
- uid: System.Data.EntityKey.GetHashCode
  parent: System.Data.EntityKey
  isExternal: false
  name: GetHashCode()
  nameWithType: EntityKey.GetHashCode()
  fullName: System.Data.EntityKey.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.EntityKey.IsTemporary
  parent: System.Data.EntityKey
  isExternal: false
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
  fullName: System.Data.EntityKey.IsTemporary
- uid: System.Data.EntityKey.NoEntitySetKey
  parent: System.Data.EntityKey
  isExternal: false
  name: NoEntitySetKey
  nameWithType: EntityKey.NoEntitySetKey
  fullName: System.Data.EntityKey.NoEntitySetKey
- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserialized(StreamingContext)
  nameWithType: EntityKey.OnDeserialized(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserializing(StreamingContext)
  nameWithType: EntityKey.OnDeserializing(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)
- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Equality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)
- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Inequality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)
- uid: System.Data.EntityKey.#ctor*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey.EntityKey
- uid: System.Data.EntityKey.EntityContainerName*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
- uid: System.Data.EntityKey.EntityKeyValues*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
- uid: System.Data.EntityKey.EntitySetName*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
- uid: System.Data.EntityKey.Equals*
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals
  nameWithType: EntityKey.Equals
- uid: System.Data.EntityKey.GetEntitySet*
  parent: System.Data.EntityKey
  isExternal: false
  name: GetEntitySet
  nameWithType: EntityKey.GetEntitySet
- uid: System.Data.EntityKey.GetHashCode*
  parent: System.Data.EntityKey
  isExternal: false
  name: GetHashCode
  nameWithType: EntityKey.GetHashCode
- uid: System.Data.EntityKey.IsTemporary*
  parent: System.Data.EntityKey
  isExternal: false
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
- uid: System.Data.EntityKey.OnDeserialized*
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserialized
  nameWithType: EntityKey.OnDeserialized
- uid: System.Data.EntityKey.OnDeserializing*
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserializing
  nameWithType: EntityKey.OnDeserializing
- uid: System.Data.EntityKey.op_Equality*
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Equality
  nameWithType: EntityKey.op_Equality
- uid: System.Data.EntityKey.op_Inequality*
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Inequality
  nameWithType: EntityKey.op_Inequality
