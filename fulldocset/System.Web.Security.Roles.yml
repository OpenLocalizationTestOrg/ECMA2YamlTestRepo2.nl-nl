### YamlMime:ManagedReference
items:
- uid: System.Web.Security.Roles
  id: Roles
  children:
  - System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  - System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  - System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  - System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  - System.Web.Security.Roles.ApplicationName
  - System.Web.Security.Roles.CacheRolesInCookie
  - System.Web.Security.Roles.CookieName
  - System.Web.Security.Roles.CookiePath
  - System.Web.Security.Roles.CookieProtectionValue
  - System.Web.Security.Roles.CookieRequireSSL
  - System.Web.Security.Roles.CookieSlidingExpiration
  - System.Web.Security.Roles.CookieTimeout
  - System.Web.Security.Roles.CreatePersistentCookie
  - System.Web.Security.Roles.CreateRole(System.String)
  - System.Web.Security.Roles.DeleteCookie
  - System.Web.Security.Roles.DeleteRole(System.String)
  - System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  - System.Web.Security.Roles.Domain
  - System.Web.Security.Roles.Enabled
  - System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  - System.Web.Security.Roles.GetAllRoles
  - System.Web.Security.Roles.GetRolesForUser
  - System.Web.Security.Roles.GetRolesForUser(System.String)
  - System.Web.Security.Roles.GetUsersInRole(System.String)
  - System.Web.Security.Roles.IsUserInRole(System.String)
  - System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  - System.Web.Security.Roles.MaxCachedResults
  - System.Web.Security.Roles.Provider
  - System.Web.Security.Roles.Providers
  - System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  - System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  - System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  - System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  - System.Web.Security.Roles.RoleExists(System.String)
  langs:
  - csharp
  name: Roles
  nameWithType: Roles
  fullName: System.Web.Security.Roles
  type: Class
  summary: "Beheert het lidmaatschap van de gebruiker in rollen voor autorisatie controleren in een ASP.NET-toepassing. Deze klasse kan niet worden overgenomen."
  remarks: "ASP.NET-rollenbeheer, kunt u voor het beheren van de autorisatie voor uw toepassing op basis van groepen van gebruikers, rollen genoemd. Gebruikers aan rollen toewijst, kunt u toegang tot verschillende onderdelen of functies van uw webtoepassing op basis van rollen in plaats van of als aanvulling op geven van autorisatie op basis van gebruikersnaam. Bijvoorbeeld: een werknemer toepassing wellicht-functies, zoals Managers, werknemers, bestuur en enzovoort, waarbij verschillende bevoegdheden worden opgegeven voor elke rol.       Gebruikers kunnen tot meer dan één rol behoren. Bijvoorbeeld, als uw site een discussieforum is, sommige gebruikers mogelijk de rol van zowel beheerders als leden. U kunt verschillende bevoegdheden hebben op de site elke rol definiëren en een gebruiker die zich in beide rollen hebben vervolgens beide sets van bevoegdheden.       Als u wilt inschakelen op rollen beheren voor uw ASP.NET-toepassing, gebruikt u het element van de `system.web` sectie in het bestand Web.config voor uw toepassing, zoals wordt weergegeven in het volgende voorbeeld.      ```   <configuration>     <connectionStrings>       <add name=&quot;SqlServices&quot; connectionString=&quot;Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;&quot; />     </connectionStrings>        <system.web>       <authentication mode=&quot;Forms&quot; >         <forms loginUrl=&quot;login.aspx&quot;         name=&quot;.ASPXFORMSAUTH&quot; />       </authentication>        <roleManager defaultProvider=&quot;SqlProvider&quot;        enabled=&quot;true&quot;       cacheRolesInCookie=&quot;true&quot;       cookieName=&quot;.ASPROLES&quot;       cookieTimeout=&quot;30&quot;       cookiePath=&quot;/&quot;       cookieRequireSSL=&quot;false&quot;       cookieSlidingExpiration=&quot;true&quot;       cookieProtection=&quot;All&quot; >       <providers>         <add           name=&quot;SqlProvider&quot;           type=&quot;System.Web.Security.SqlRoleProvider&quot;           connectionStringName=&quot;SqlServices&quot;           applicationName=&quot;SampleApplication&quot; />         </providers>       </roleManager>     </system.web>   </configuration>   ```Autorisatieregels kunt u opgeven in het configuratiebestand voor uw webtoepassing of programmatisch in uw code. Bijvoorbeeld de volgende sectie van een Web.config-bestand vereist dat gebruikers zich aanmelden (door anonieme gebruikers weigeren) en vervolgens kan alleen gebruikers in de rol beheerders toegang hebben.      ```   <authorization>     <deny users=&quot;?&quot; />     <allow roles=&quot;Administrators&quot; />     <deny users=&quot;*&quot; />   </authorization>   ```Als u de `authorization` Web.config-bestand van uw toepassing om op te geven van autorisatie op basis van rollen, gebruikers van uw toepassing met de identiteit van een geverifieerde gebruiker moet opgeven. U kunt gebruikers verifiëren met behulp van Windows- of formulieren verificatie. Anonieme gebruikers kunnen niet worden toegewezen aan een rol. Rollen kunnen worden gebruikt, onafhankelijk van of in combinatie met de ASP.NET <xref:System.Web.Security.Membership>klassen.</xref:System.Web.Security.Membership>       Om te controleren rollidmaatschap via een programma, kunt u de rollen klasse of de <xref:System.Web.UI.Page.User%2A?displayProperty=fullName>eigenschap met de <xref:System.Web.Security.Roles.IsUserInRole%2A>methode, of u kunt gebruiken de <xref:System.Web.UI.Page.User%2A?displayProperty=fullName>eigenschap met de <xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=fullName>methode.</xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=fullName> </xref:System.Web.UI.Page.User%2A?displayProperty=fullName> </xref:System.Web.Security.Roles.IsUserInRole%2A> </xref:System.Web.UI.Page.User%2A?displayProperty=fullName> Voorbeeld van code die programmatisch rollidmaatschap controleert, Zie de sectie voorbeeld in dit onderwerp.       De klasse rollen kunt u maken en verwijderen van rollen en gebruikers kunnen gebruikers toevoegen of verwijderen van rollen.      > [!NOTE] > Als u uw toepassing hebt geconfigureerd de <xref:System.Web.Security.WindowsTokenRoleProvider>klasse, kunt u functies of lidmaatschap van de rol niet wijzigen.</xref:System.Web.Security.WindowsTokenRoleProvider> De <xref:System.Web.Security.WindowsTokenRoleProvider>classverifies lidmaatschap van de Windows-beveiliging alleen groepen.</xref:System.Web.Security.WindowsTokenRoleProvider> In dit geval moet u Windows Gebruikersaccountbeheer in plaats van ASP.NET-functies maken en verwijderen van groepen en beheren van groepslidmaatschappen.       U kunt gegevens over de serverfunctie opslaan in verschillende gegevensbronnen.      -U kunt de <xref:System.Web.Security.WindowsTokenRoleProvider>klasse voor het ophalen van functiegegevens op basis van lidmaatschap van de Windows-groepen.</xref:System.Web.Security.WindowsTokenRoleProvider>      -U kunt gegevens over de serverfunctie opslaan in een SQL Server-database met behulp van de <xref:System.Web.Security.SqlRoleProvider>klasse.</xref:System.Web.Security.SqlRoleProvider>      -Als u bestaande rol informatie of informatie in rol opslaan en ophalen van gegevens over de serverfunctie van een gegevensbron dan Windows, een verificatiearchief of SQL Server wilt, kunt u een aangepaste rolprovider implementeren door het maken van een klasse die eigenschappen overneemt van de <xref:System.Web.Security.RoleProvider>abstracte klasse.</xref:System.Web.Security.RoleProvider> Zie voor meer informatie [uitvoering van een rolprovider](~/add/includes/ajax-current-ext-md.md).       Als de browser van een gebruiker cookies accepteert, kunt u gegevens over de serverfunctie voor die gebruiker opslaan in een cookie op de computer van de gebruiker. Op elke pagina-aanvraag leest ASP.NET de rolgegevens voor die gebruiker van de cookie. Dit kan verminderen de hoeveelheid communicatie met de gegevensbron is vereist voor het ophalen van functiegegevens verbeteren de prestaties van toepassingen. Als de functie-informatie voor een gebruiker te lang om op te slaan in een cookie is, wordt ASP.NET worden alleen de laatst gebruikte rol informatie opgeslagen in de cookie en vervolgens zoekt u extra rolgegevens in de gegevensbron, zoals vereist. Als de browser van de gebruiker biedt geen ondersteuning voor cookies of cookies zijn uitgeschakeld, rolgegevens is niet in cache opgeslagen in een cookie.       U kunt de verbeteren de betrouwbaarheid van de rolnamen van de in de cache opgeslagen in een cookie door te geven een <xref:System.Web.Security.Roles.CookieProtectionValue%2A>eigenschap bij het configureren van ASP.NET-functies.</xref:System.Web.Security.Roles.CookieProtectionValue%2A> De standaardwaarde <xref:System.Web.Security.Roles.CookieProtectionValue%2A>is `All`, die role-namen in de cookie wordt versleuteld en valideert dat de cookie-inhoud niet is gewijzigd.</xref:System.Web.Security.Roles.CookieProtectionValue%2A>"
  example:
  - "The following example shows the Web.config file for an application configured to use both ASP.NET membership and ASP.NET roles and to use the <xref:System.Web.Security.SqlRoleProvider> to store membership and role information in a SQL Server database. Users are authenticated with forms authentication and only users in the Administrators role are allowed access to the application.  \n  \n```  \n<configuration>  \n  <connectionStrings>  \n    <add name=\"SqlServices\" connectionString=\"Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;\" />  \n  </connectionStrings>  \n  \n  <system.web>  \n    <authentication mode=\"Forms\" >  \n      <forms loginUrl=\"login.aspx\"  \n      name=\".ASPXFORMSAUTH\" />  \n    </authentication>  \n  \n    <authorization>  \n      <deny users=\"?\" />  \n      <allow roles=\"Administrators\" />  \n      <deny users=\"*\" />  \n    </authorization>  \n  \n    <membership defaultProvider=\"AspNetSqlProvider\" userIsOnlineTimeWindow=\"15\">  \n    </membership>  \n  \n    <roleManager defaultProvider=\"SqlProvider\"   \n      enabled=\"true\"  \n      cacheRolesInCookie=\"true\"  \n      cookieName=\".ASPROLES\"  \n      cookieTimeout=\"30\"  \n      cookiePath=\"/\"  \n      cookieRequireSSL=\"true\"  \n      cookieSlidingExpiration=\"true\"  \n      cookieProtection=\"All\" >  \n  \n      <providers>  \n        <clear />  \n        <add  \n          name=\"SqlProvider\"  \n          type=\"System.Web.Security.SqlRoleProvider\"  \n          connectionStringName=\"SqlServices\"  \n          applicationName=\"SampleApplication\" />  \n        </providers>  \n  \n    </roleManager>  \n  </system.web>  \n</configuration>  \n```  \n  \n The following code example programmatically checks whether the logged-on user is in the Administrators role before allowing the user to view other users' roles.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public static class Roles
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  id: AddUsersToRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUsersToRole(String[],String)
  nameWithType: Roles.AddUsersToRole(String[],String)
  fullName: System.Web.Security.Roles.AddUsersToRole(String[],String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "De opgegeven gebruikers toegevoegd aan de opgegeven rol."
  remarks: "De methode AddUsersToRole roept de standaardprovider voor de rol voor de opgegeven gebruikers koppelen aan de opgegeven rol in de gegevensbron.       Als uw toepassing gebruikmaakt van de <xref:System.Web.Security.SqlRoleProvider>klasse, de database-updates die worden uitgevoerd tijdens het aanroepen van de <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>methode worden gedaan binnen een transactie.</xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Als een fout is opgetreden, zoals een gebruikersnaam die al in de opgegeven rol, de transactie wordt teruggedraaid en er zijn geen updates worden uitgevoerd.      > [!NOTE] > Gebruikersnamen en role-namen mag geen komma&quot;s bevatten."
  example:
  - "The following code example adds one or more users to a role or removes a user from a role based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_7_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_7_1.aspx)]"
  syntax:
    content: public static void AddUsersToRole (string[] usernames, string roleName);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Een string-matrix van gebruikersnamen toevoegen aan de opgegeven rol."
    - id: roleName
      type: System.String
      description: "De rol aan de opgegeven gebruikersnamen toe te voegen."
  overload: System.Web.Security.Roles.AddUsersToRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - of - een van de elementen in <code>usernames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>een lege tekenreeks of bevat een komma (,).       - of - een van de elementen in <code>usernames</code> is een lege tekenreeks of bevat een komma (,).       - of - <code>usernames</code> bevat een dubbel element."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  id: AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUsersToRoles(String[],String[])
  nameWithType: Roles.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.Roles.AddUsersToRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "De opgegeven gebruikers toegevoegd aan de opgegeven rollen."
  remarks: "De methode AddUsersToRoles roept de standaardprovider voor de rol voor de opgegeven gebruikers koppelen aan de opgegeven rollen op de gegevensbron.       Als uw toepassing gebruikmaakt van de <xref:System.Web.Security.SqlRoleProvider>klasse, de database-updates die worden uitgevoerd tijdens het aanroepen van de <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>methode worden gedaan binnen een transactie.</xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Als een fout is opgetreden, zoals een gebruikersnaam die al in de opgegeven rol, de transactie wordt teruggedraaid en er zijn geen updates worden uitgevoerd.      > [!NOTE] > Gebruikersnamen en role-namen mag geen komma&quot;s bevatten."
  example:
  - "The following code example adds one or more users to one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_21_1.aspx)]\n [!code-cs[System.Web.Security.Roles#1](~/add/codesnippet/csharp/m-system.web.security.ro_21_1.aspx)]"
  syntax:
    content: public static void AddUsersToRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Een tekenreeksmatrix namen van gebruikers om toe te voegen aan de opgegeven rollen."
    - id: roleNames
      type: System.String[]
      description: "Een string-matrix van role-namen voor de opgegeven gebruikersnamen toe te voegen."
  overload: System.Web.Security.Roles.AddUsersToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       One of the users in <code>usernames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Een van de rollen in <code> roleNames </code> is een lege tekenreeks of bevat een komma (,).       - of - een van de gebruikers in <code> usernames </code> is een lege tekenreeks of bevat een komma (,).       - of - <code> roleNames </code> bevat een dubbel element.       - of - <code> usernames </code> bevat een dubbel element."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  id: AddUserToRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUserToRole(String,String)
  nameWithType: Roles.AddUserToRole(String,String)
  fullName: System.Web.Security.Roles.AddUserToRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "De opgegeven gebruiker toevoegen aan de opgegeven rol."
  remarks: "De methode AddUserToRole roept de standaardprovider voor de rol voor de opgegeven gebruiker koppelen aan de opgegeven rol in de gegevensbron.      > [!NOTE] > Gebruikersnamen en role-namen mag geen komma&quot;s bevatten."
  example:
  - "The following code example adds a user to a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.Roles#2](~/add/codesnippet/csharp/m-system.web.security.ro_19_1.aspx)]\n [!code-vb[System.Web.Security.Roles#2](~/add/codesnippet/visualbasic/m-system.web.security.ro_19_1.aspx)]"
  syntax:
    content: public static void AddUserToRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "De gebruikersnaam toevoegen aan de opgegeven rol."
    - id: roleName
      type: System.String
      description: "De rol om toe te voegen aan de opgegeven naam."
  overload: System.Web.Security.Roles.AddUserToRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>een lege tekenreeks of bevat een komma (,).       - of - <code>username</code> is een lege tekenreeks of bevat een komma (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld.       - of - gebruiker is al toegewezen aan de opgegeven rol."
  platform:
  - net462
- uid: System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  id: AddUserToRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: AddUserToRoles(String,String[])
  nameWithType: Roles.AddUserToRoles(String,String[])
  fullName: System.Web.Security.Roles.AddUserToRoles(String,String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "De opgegeven gebruiker toevoegen aan de opgegeven rollen."
  remarks: "De methode AddUserToRoles roept de standaardprovider voor de rol voor de opgegeven gebruiker koppelen aan de opgegeven rollen op de gegevensbron.       Als uw toepassing gebruikmaakt van de <xref:System.Web.Security.SqlRoleProvider>klasse, de database-updates die worden uitgevoerd tijdens de aanroep van de AddUserToRoles-methode worden gedaan binnen een transactie.</xref:System.Web.Security.SqlRoleProvider> Als een fout is opgetreden, zoals een gebruikersnaam die al in de opgegeven rol, de transactie wordt teruggedraaid en er zijn geen updates worden uitgevoerd.      > [!NOTE] > Gebruikersnamen en role-namen mag geen komma&quot;s bevatten."
  example:
  - "The following code example adds a user to one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_20_1.aspx)]\n [!code-cs[System.Web.Security.Roles#3](~/add/codesnippet/csharp/m-system.web.security.ro_20_1.aspx)]"
  syntax:
    content: public static void AddUserToRoles (string username, string[] roleNames);
    parameters:
    - id: username
      type: System.String
      description: "De gebruikersnaam toevoegen aan de opgegeven rollen."
    - id: roleNames
      type: System.String[]
      description: "Een string-matrix van rollen om toe te voegen aan de opgegeven naam."
  overload: System.Web.Security.Roles.AddUserToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Een van de rollen in <code> roleNames </code> is een lege tekenreeks of bevat een komma (,).       - of - <code> username </code> is een lege tekenreeks of bevat een komma (,).       - of - <code> roleNames </code> bevat een dubbel element."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.ApplicationName
  id: ApplicationName
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: ApplicationName
  nameWithType: Roles.ApplicationName
  fullName: System.Web.Security.Roles.ApplicationName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Opgehaald of ingesteld van de naam van de toepassing voor het opslaan en ophalen van functiegegevens voor."
  remarks: "De eigenschap ApplicationName wordt gebruikt door de <xref:System.Web.Security.Roles>klasse om te koppelen van gebruikers en rollen aan verschillende toepassingen.</xref:System.Web.Security.Roles> Hierdoor kunnen meerdere toepassingen dezelfde gegevensbron gebruiken voor het opslaan van de gebruiker en gegevens over de serverfunctie zonder te worden uitgevoerd in conflicten tussen dubbele gebruikersnamen of dubbele role-namen. Meerdere ASP.NET-toepassingen kunnen gebruikmaken van dezelfde gegevensbron door dezelfde waarde opgeven in de eigenschap ApplicationName. U kunt de eigenschap ApplicationName programmatisch instellen of kunt u dit instellen declaratief in het configuratiebestand voor de webtoepassing met behulp van de `applicationName` kenmerk.       Als uw webtoepassing is met de <xref:System.Web.Security.SqlRoleProvider>klasse en een waarde is niet opgegeven voor de `applicationName` kenmerk in het configuratiebestand de <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName>eigenschapswaarde voor de huidige <xref:System.Web.HttpContext.Request%2A?displayProperty=fullName>eigenschap wordt gebruikt.</xref:System.Web.HttpContext.Request%2A?displayProperty=fullName> </xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName> </xref:System.Web.Security.SqlRoleProvider>      > [!CAUTION] > Omdat een enkele rol provider standaardexemplaar wordt gebruikt voor alle van de geleverde aanvragen door een <xref:System.Web.HttpApplication>object, kunt u meerdere aanvragen gelijktijdig uitgevoerd en probeert in te stellen van de waarde van de eigenschap ApplicationName hebben.</xref:System.Web.HttpApplication> De eigenschap ApplicationName is niet thread-safe voor meerdere schrijfbewerkingen en het wijzigen van de waarde van de eigenschap ApplicationName kan leiden tot onverwacht gedrag voor meerdere gebruikers van een toepassing. Vermijd het schrijven van code voor het toestaan dat gebruikers Stel de eigenschap ApplicationName tenzij vereist. Een voorbeeld van een toepassing wanneer de eigenschap ApplicationName mogelijk vereist is een beheertoepassing die gegevens van de functie voor meerdere toepassingen beheert. Deze aanvraag moet een toepassing voor één gebruiker en niet een webtoepassing."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `applicationName` attribute to `MyApplication`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string ApplicationName { get; set; }
    return:
      type: System.String
      description: "De naam van de toepassing voor het opslaan en ophalen van functiegegevens voor."
  overload: System.Web.Security.Roles.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CacheRolesInCookie
  id: CacheRolesInCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
  fullName: System.Web.Security.Roles.CacheRolesInCookie
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Haalt een waarde die aangeeft of de rollen van de huidige gebruiker worden opgeslagen in een cookie."
  remarks: "Wanneer de eigenschap CacheRolesInCookie is ingesteld op `true` in het bestand Web.config rolgegevens voor elke gebruiker wordt opgeslagen in een cookie. Wanneer rollenbeheer gecontroleerd om te zien of een gebruiker in een bepaalde rol is, wordt de cookie rollen gecontroleerd voordat de rolprovider is aangeroepen om te controleren van de lijst met rollen op de gegevensbron. De cookie wordt dynamisch bijgewerkt als de cache van de meest recent geverifieerde functienamen wilt.       U kunt de verbeteren de betrouwbaarheid van de rolnamen van de in de cache opgeslagen in een cookie door te geven een <xref:System.Web.Security.Roles.CookieProtectionValue%2A>eigenschap bij het configureren van ASP.NET-functies.</xref:System.Web.Security.Roles.CookieProtectionValue%2A> De standaardwaarde <xref:System.Web.Security.Roles.CookieProtectionValue%2A>is `All`, die role-namen in de cookie wordt versleuteld en valideert dat de cookie-inhoud niet is gewijzigd.</xref:System.Web.Security.Roles.CookieProtectionValue%2A>      > [!NOTE] > Omdat role-namen kunnen afgezien van de gegevensbron in de cache worden opgeslagen, is het mogelijk dat wijzigingen in rollen beheren in de gegevensbron niet zouden worden weergegeven in de waarden in de cache. In dit geval moet de gebruiker sluiten en opnieuw openen hun browser om te wissen van de cookiewaarde in de cache opgeslagen."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cacheRolesInCookie` attribute to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n   </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CacheRolesInCookie { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de huidige gebruikersrollen in cache zijn opgeslagen in een cookie. anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CacheRolesInCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieName
  id: CookieName
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieName
  nameWithType: Roles.CookieName
  fullName: System.Web.Security.Roles.CookieName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee haalt u de naam van de cookie waarin role-namen in cache zijn opgeslagen."
  remarks: "U kunt de naam van de cookie waarin rollen in cache zijn opgeslagen voor uw toepassing opgeven door in te stellen de `cookieName` kenmerk in het bestand Web.config voor uw ASP.NET-toepassing. Dit is handig wanneer u een unieke identificatie van een cookie voor uw toepassing wilt maken, of wanneer een cookie is gedeeld door meerdere toepassingen, zoals een domein-cookie."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cookieName` attribute to .ASPROLES.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string CookieName { get; }
    return:
      type: System.String
      description: "De naam van de cookie waarin role-namen in cache zijn opgeslagen. De standaardwaarde is. ASPXROLES."
  overload: System.Web.Security.Roles.CookieName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookiePath
  id: CookiePath
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookiePath
  nameWithType: Roles.CookiePath
  fullName: System.Web.Security.Roles.CookiePath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee wordt het pad voor de namen in de cache rol cookie."
  remarks: "U kunt het pad van de cookie waarin rollen in cache zijn opgeslagen voor uw toepassing opgeven door de `cookiePath` kenmerk in het bestand Web.config voor uw ASP.NET-toepassing. Zie voor meer informatie over Cookiepaden <xref:System.Web.HttpCookie.Path%2A>.</xref:System.Web.HttpCookie.Path%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `cookiePath` attribute to /MyApplication.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static string CookiePath { get; }
    return:
      type: System.String
      description: "Het pad van de cookie waarin role-namen in cache zijn opgeslagen. De standaardwaarde is /."
  overload: System.Web.Security.Roles.CookiePath*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieProtectionValue
  id: CookieProtectionValue
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
  fullName: System.Web.Security.Roles.CookieProtectionValue
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Haalt een waarde die aangeeft hoe role-namen in de cache opgeslagen in een cookie worden beveiligd."
  remarks: "U kunt de beveiliging van de cookie waarin rollen in cache zijn opgeslagen voor uw toepassing opgeven door de `cookieProtection` kenmerk in het bestand Web.config voor uw ASP.NET-toepassing. De `cookieProtection` kenmerk duurt een <xref:System.Web.Security.CookieProtection>inventarisatiewaarde die aangeeft of het role-namen zijn versleuteld, gevalideerd, beide of geen.</xref:System.Web.Security.CookieProtection>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets `cookieProtection` attribute to `Encrypted`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static System.Web.Security.CookieProtection CookieProtectionValue { get; }
    return:
      type: System.Web.Security.CookieProtection
      description: "Een van de <xref href=&quot;System.Web.Security.CookieProtection&quot;> </xref> opsommingswaarden die aangeeft hoe role-namen die in cache zijn opgeslagen in een cookie zijn beveiligd. De standaardwaarde is <xref uid=&quot;langword_csharp_All&quot; name=&quot;All&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CookieProtectionValue*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieRequireSSL
  id: CookieRequireSSL
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
  fullName: System.Web.Security.Roles.CookieRequireSSL
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Haalt een waarde die aangeeft of de rol namen cookie SSL vereist om te kunnen worden geretourneerd naar de server."
  remarks: "U kunt opgeven of SSL (Secure Sockets Layer) vereist is voor de rol namen cookie terugkeren naar de server in uw toepassing door in te stellen de `cookieRequireSSL` kenmerk in het bestand Web.config voor uw ASP.NET-toepassing. Zie voor meer informatie <xref:System.Web.HttpCookie.Secure%2A>.</xref:System.Web.HttpCookie.Secure%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets `cookieRequireSSL` to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CookieRequireSSL { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als SSL is vereist om te retourneren van de rol namen cookie naar de server. anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CookieRequireSSL*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieSlidingExpiration
  id: CookieSlidingExpiration
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
  fullName: System.Web.Security.Roles.CookieSlidingExpiration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee wordt aangegeven of de rol namen cookie datum en tijd periodiek wordt gereset."
  remarks: "U kunt opgeven of rol cookie vervaldatum namen en tijd opnieuw ingesteld met elk antwoord met behulp van de `cookieSlidingExpiration` kenmerk in het bestand Web.config voor uw ASP.NET-toepassing. Als `true`, de verlooptijd van cookie eerst moet worden ingesteld op de huidige datum en tijd plus de <xref:System.Web.Security.Roles.CookieTimeout%2A>in minuten.</xref:System.Web.Security.Roles.CookieTimeout%2A> Terwijl de gebruiker actief gebruiken de ASP.NET-toepassing blijft, de datum en tijd van de cookie wordt automatisch worden vernieuwd als er minder dan de helft van de <xref:System.Web.Security.Roles.CookieTimeout%2A>resterende.</xref:System.Web.Security.Roles.CookieTimeout%2A> Zie voor meer informatie de <xref:System.Web.HttpCookie.Expires%2A>eigenschap.</xref:System.Web.HttpCookie.Expires%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the CookieSlidingExpiration property to `false`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"false\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool CookieSlidingExpiration { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de functie namen cookie datum en tijd worden opnieuw ingesteld periodiek; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CookieSlidingExpiration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CookieTimeout
  id: CookieTimeout
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
  fullName: System.Web.Security.Roles.CookieTimeout
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee haalt u het aantal minuten voordat de functies cookie verloopt."
  remarks: "De eigenschap CookieTimeout wordt gebruikt wanneer de <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>eigenschap is `true` en geeft de time-to-live in minuten voor de cookie rollen.</xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> De waarde CookieTimeout stelt toevoegen de `cookieTimeout` kenmerk voor het element in het bestand Web.config voor de ASP.NET-toepassing en geef een geheel getal.       Als <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>is `false`, deze eigenschap wordt genegeerd.</xref:System.Web.Security.Roles.CookieSlidingExpiration%2A>"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the CookieTimeout property to 30 minutes.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/MyApplication\"  \n  cookieRequireSSL=\"true\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"Encrypted\" >  \n  <providers>  \n  <add  \n    name=\"SqlProvider\"  \n    type=\"System.Web.Security.SqlRoleProvider\"  \n    connectionStringName=\"SqlServices\"  \n    applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static int CookieTimeout { get; }
    return:
      type: System.Int32
      description: "Een geheel getal waarmee het aantal minuten voordat de functies cookie verloopt. De standaardwaarde is 30 minuten."
  overload: System.Web.Security.Roles.CookieTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CreatePersistentCookie
  id: CreatePersistentCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
  fullName: System.Web.Security.Roles.CreatePersistentCookie
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee wordt een waarde die aangeeft of de namen van de rol cookie op basis van sessies of permanente."
  remarks: "De waarde van de eigenschap CreatePersistentCookie is ingesteld in de configuratie voor een ASP.NET-toepassing met de `createPersistentCookie` kenmerk van het configuratie-element.       Wanneer `false`, de namen van de rol van het cookie is een sessiecookie, dat wil zeggen, de cookie gaat verloren wanneer de browser wordt gesloten. Wanneer `true`, de namen van de rol het cookie is een permanente cookie die beschikbaar is tussen meerdere browsersessies. De permanente cookie datum en tijd zijn ingesteld op de huidige datum en tijd plus de <xref:System.Web.Security.Roles.CookieTimeout%2A>waarde in minuten.</xref:System.Web.Security.Roles.CookieTimeout%2A>"
  syntax:
    content: public static bool CreatePersistentCookie { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de functienamen cookie een permanente cookie is. anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.CreatePersistentCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.CreateRole(System.String)
  id: CreateRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: CreateRole(String)
  nameWithType: Roles.CreateRole(String)
  fullName: System.Web.Security.Roles.CreateRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Voegt een nieuwe rol met de gegevensbron."
  remarks: "De methode CreateRole voegt de naam van een rol met de gegevensbron. CreateRole aanroepen de <xref:System.Web.Security.RoleProvider.CreateRole%2A>methode van de standaardprovider voor de rol van de opgegeven rol toevoegen aan de gegevensbron.</xref:System.Web.Security.RoleProvider.CreateRole%2A>      > [!NOTE] > Role-namen mag geen komma&quot;s bevatten."
  example:
  - "The following code example creates a new role in the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.ro_12_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_12_1.aspx)]"
  syntax:
    content: public static void CreateRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "De naam van de rol te maken."
  overload: System.Web.Security.Roles.CreateRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>een lege tekenreeks is.       - of - <code>roleName</code> bevat een komma."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.DeleteCookie
  id: DeleteCookie
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteCookie()
  nameWithType: Roles.DeleteCookie()
  fullName: System.Web.Security.Roles.DeleteCookie()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee verwijdert u de cookie waarin role-namen in cache zijn opgeslagen."
  remarks: "De methode DeleteCookie wist de inhoud van de cookie die wordt gebruikt voor cache role-namen. Zie voor meer informatie over het opslaan van role-namen in <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>.</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example calls the DeleteCookie method to clear any cached role names when a user logs in. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Web.Security.Roles#5](~/add/codesnippet/visualbasic/m-system.web.security.ro_1_1.aspx)]\n [!code-cs[System.Web.Security.Roles#5](~/add/codesnippet/csharp/m-system.web.security.ro_1_1.aspx)]"
  syntax:
    content: public static void DeleteCookie ();
    parameters: []
  overload: System.Web.Security.Roles.DeleteCookie*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.DeleteRole(System.String)
  id: DeleteRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteRole(String)
  nameWithType: Roles.DeleteRole(String)
  fullName: System.Web.Security.Roles.DeleteRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Verwijdert een rol uit de gegevensbron."
  remarks: "De methode DeleteRole verwijdert een rolnaam op van de gegevensbron. DeleteRole aanroepen de <xref:System.Web.Security.RoleProvider.DeleteRole%2A>methode van de standaardprovider voor de rol verwijderen van de opgegeven rol uit de gegevensbron.</xref:System.Web.Security.RoleProvider.DeleteRole%2A>       Als de functie wordt aangeduid met de `roleName` parameter heeft een of meer leden en vervolgens een uitzondering gegenereerd en de rol worden niet verwijderd."
  example:
  - "The following code example deletes a role from the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/csharp/m-system.web.security.ro_9_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/visualbasic/m-system.web.security.ro_9_1.aspx)]"
  syntax:
    content: public static bool DeleteRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "De naam van de rol te verwijderen."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als <code> roleName </code> is verwijderd uit de gegevensbron, anders wordt <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>een lege tekenreeks of bevat een komma (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>een of meer leden heeft.       - of - rol is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  id: DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: DeleteRole(String,Boolean)
  nameWithType: Roles.DeleteRole(String,Boolean)
  fullName: System.Web.Security.Roles.DeleteRole(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Verwijdert een rol uit de gegevensbron."
  remarks: "De methode DeleteRole verwijdert een rolnaam op van de gegevensbron. DeleteRole aanroepen de <xref:System.Web.Security.RoleProvider.DeleteRole%2A>methode van de standaardprovider voor de rol verwijderen van de opgegeven rol uit de gegevensbron.</xref:System.Web.Security.RoleProvider.DeleteRole%2A>       Als `throwOnPopulatedRole` is `true`, klikt u vervolgens een uitzondering gegenereerd en de rol worden niet verwijderd als de functie wordt aangeduid met de `roleName` parameter heeft een of meer leden. Als `throwOnPopulatedRole` is `false`, wordt de rol verwijderd of leeg of niet is."
  example:
  - "The following code example deletes a role from the data source. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/csharp/m-system.web.security.ro_0_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/visualbasic/m-system.web.security.ro_0_1.aspx)]"
  syntax:
    content: public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);
    parameters:
    - id: roleName
      type: System.String
      description: "De naam van de rol te verwijderen."
    - id: throwOnPopulatedRole
      type: System.Boolean
      description: "Als <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>, genereert een uitzondering als `roleName` heeft een of meer leden."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als <code> roleName </code> is verwijderd uit de gegevensbron, anders; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Security.Roles.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>een lege tekenreeks is."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>heeft een of meer leden en <code>throwOnPopulatedRole</code> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>.       - of - rol is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.Domain
  id: Domain
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Domain
  nameWithType: Roles.Domain
  fullName: System.Web.Security.Roles.Domain
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee haalt u de waarde van het domein van de cookie role-namen."
  remarks: "De waarde van de domein-eigenschap is ingesteld in de configuratie voor een ASP.NET-toepassing met de `domain` kenmerk van het configuratie-element.       Als geen waarde is opgegeven in de configuratie voor het kenmerk domain, retourneert de domein-eigenschap `null` en het domein van de cookie-functienamen wordt standaard ingesteld op het gedrag van de <xref:System.Web.HttpCookie><xref:System.Web.HttpCookie.Domain%2A>eigenschap.</xref:System.Web.HttpCookie.Domain%2A></xref:System.Web.HttpCookie>"
  syntax:
    content: public static string Domain { get; }
    return:
      type: System.String
      description: "De <xref:System.Web.HttpCookie.Domain*>van de rol namen cookie.</xref:System.Web.HttpCookie.Domain*>"
  overload: System.Web.Security.Roles.Domain*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.Enabled
  id: Enabled
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Enabled
  nameWithType: Roles.Enabled
  fullName: System.Web.Security.Roles.Enabled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of rollenbeheer is ingeschakeld voor de huidige webtoepassing."
  remarks: ''
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `enabled` attribute to `true`.  \n  \n```  \n<roleManager defaultProvider=\"SqlProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.SqlRoleProvider\"  \n      connectionStringName=\"SqlServices\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public static bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de rollenbeheer is ingeschakeld; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  id: FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: FindUsersInRole(String,String)
  nameWithType: Roles.FindUsersInRole(String,String)
  fullName: System.Web.Security.Roles.FindUsersInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee haalt een lijst met gebruikers in een opgegeven rol waar de gebruikersnaam van de overeenkomen met de opgegeven naam bevat."
  remarks: "FindUsersInRole retourneert een lijst met gebruikers in een rol waar de gebruikersnaam van de een overeenkomst met de opgegeven bevat `usernameToMatch` voor de geconfigureerde `applicationName`. Bijvoorbeeld, als de `usernameToMatch` parameter is ingesteld op &quot;gebruiker&quot; en vervolgens de gebruikers &quot;gebruiker1&quot;, &quot;gebruiker2&quot;, &quot;user3&quot;, en enzovoort worden geretourneerd. Gebruikers worden geretourneerd in alfabetische volgorde op gebruikersnaam.       De <xref:System.Web.Security.SqlRoleProvider>voert de zoekactie met behulp van een LIKE-component tegen de `usernameToMatch` parameter.</xref:System.Web.Security.SqlRoleProvider> Jokertekens die worden ondersteund door SQL Server in zoals componenten kunnen worden gebruikt in de `usernameToMatch` parameterwaarde."
  example:
  - "The following code example uses the FindUsersInRole method to display role membership based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.Roles#11](~/add/codesnippet/csharp/m-system.web.security.ro_16_1.aspx)]\n [!code-vb[System.Web.Security.Roles#11](~/add/codesnippet/visualbasic/m-system.web.security.ro_16_1.aspx)]"
  syntax:
    content: public static string[] FindUsersInRole (string roleName, string usernameToMatch);
    parameters:
    - id: roleName
      type: System.String
      description: "De rol moet worden gezocht in."
    - id: usernameToMatch
      type: System.String
      description: "De gebruikersnaam om te zoeken."
    return:
      type: System.String[]
      description: "Een string-matrix met de namen van alle gebruikers waarvan gebruikersnaam overeenkomt met <code> usernameToMatch </code> en die lid zijn van de opgegeven rol."
  overload: System.Web.Security.Roles.FindUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic).       -or-       <code>usernameToMatch</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>een lege tekenreeks of bevat een komma (,).       - of - <code>usernameToMatch</code> is een lege tekenreeks."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetAllRoles
  id: GetAllRoles
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetAllRoles()
  nameWithType: Roles.GetAllRoles()
  fullName: System.Web.Security.Roles.GetAllRoles()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee wordt een lijst met alle functies voor de toepassing."
  remarks: "De methodeaanroepen GetAllRoles de <xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=fullName>methode van de standaardprovider voor de rol voor een lijst van alle rollen van de gegevensbron voor een toepassing.</xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=fullName> Alleen de functies voor de toepassing die is opgegeven in de <xref:System.Web.Security.Roles.ApplicationName%2A>eigenschap worden opgehaald.</xref:System.Web.Security.Roles.ApplicationName%2A>"
  example:
  - "The following code example uses the GetAllRoles method to get the list of roles for an application and bind the results to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.ro_18_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_18_1.aspx)]"
  syntax:
    content: public static string[] GetAllRoles ();
    parameters: []
    return:
      type: System.String[]
      description: "Een string-matrix met de namen van de rollen die zijn opgeslagen in de gegevensbron voor de toepassing."
  overload: System.Web.Security.Roles.GetAllRoles*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetRolesForUser
  id: GetRolesForUser
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetRolesForUser()
  nameWithType: Roles.GetRolesForUser()
  fullName: System.Web.Security.Roles.GetRolesForUser()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Een lijst van de functies die de momenteel aangemelde gebruiker ophalen."
  remarks: "De methode GetRolesForUser roept de <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName>methode van de standaardprovider voor de rol op te halen uit de gegevensbron van de rollen die zich de momenteel aangemelde gebruiker.</xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName> De momenteel aangemelde gebruiker wordt geïdentificeerd door de <xref:System.Web.HttpContext.User%2A?displayProperty=fullName>eigenschap van het huidige <xref:System.Web.HttpContext?displayProperty=fullName>, of door <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>voor niet-HTTP-hostomgevingen.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> </xref:System.Web.HttpContext?displayProperty=fullName> </xref:System.Web.HttpContext.User%2A?displayProperty=fullName> Als er geen gebruiker is aangemeld, wordt er een uitzondering opgetreden. Alleen de functies voor de toepassing die is opgegeven in de <xref:System.Web.Security.Roles.ApplicationName%2A>eigenschap worden opgehaald.</xref:System.Web.Security.Roles.ApplicationName%2A>       Als <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>is `true`, en vervolgens de resultaten van de methode GetRolesForUser kunnen worden geretourneerd uit de cache van de rol in plaats van de opgegeven rolprovider.</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example uses the GetRolesForUser method to retrieve a list of roles for a specified user and bind the returned roles to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_14_1.aspx)]\n [!code-cs[System.Web.Security.Roles#4](~/add/codesnippet/csharp/m-system.web.security.ro_14_1.aspx)]"
  syntax:
    content: public static string[] GetRolesForUser ();
    parameters: []
    return:
      type: System.String[]
      description: "Een string-matrix met de namen van de functies die de momenteel aangemelde gebruiker in."
  overload: System.Web.Security.Roles.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Er is geen huidige aangemelde gebruiker."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetRolesForUser(System.String)
  id: GetRolesForUser(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetRolesForUser(String)
  nameWithType: Roles.GetRolesForUser(String)
  fullName: System.Web.Security.Roles.GetRolesForUser(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee haalt u een lijst van de functies die een gebruiker in."
  remarks: "De methode GetRolesForUser roept de <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName>methode van de Standaardrolprovider om op te halen uit de gegevensbron van de rollen dat de gebruiker zich.</xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName> Alleen de functies voor de toepassing die is opgegeven in de <xref:System.Web.Security.Roles.ApplicationName%2A>eigenschap worden opgehaald.</xref:System.Web.Security.Roles.ApplicationName%2A>       Als `username` gelijk is aan de huidige gebruiker is aangemeld en <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>is `true`, de resultaten van de GetRolesForUser methode kan worden geretourneerd uit de rol in de cache in plaats van de opgegeven <xref:System.Web.Security.Roles.Provider%2A>.</xref:System.Web.Security.Roles.Provider%2A> </xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetRolesForUser%2A> method to retrieve a list of roles for a specified user and bind the returned roles to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_15_1.aspx)]\n [!code-cs[System.Web.Security.Roles#4](~/add/codesnippet/csharp/m-system.web.security.ro_15_1.aspx)]"
  syntax:
    content: public static string[] GetRolesForUser (string username);
    parameters:
    - id: username
      type: System.String
      description: "De gebruiker een lijst van de rollen voor retourneren."
    return:
      type: System.String[]
      description: "Een string-matrix met de namen van de functies die de opgegeven gebruiker in."
  overload: System.Web.Security.Roles.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>username</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>username</code>bevat een komma (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.GetUsersInRole(System.String)
  id: GetUsersInRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: GetUsersInRole(String)
  nameWithType: Roles.GetUsersInRole(String)
  fullName: System.Web.Security.Roles.GetUsersInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee haalt een lijst met gebruikers in de opgegeven rol."
  remarks: "De methodeaanroepen GetUsersInRole de <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A>methode van de standaardprovider voor de rol voor het ophalen van de gebruikersnamen die zijn gekoppeld aan een functie uit de gegevensbron.</xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> Alleen de functies voor de toepassing die is opgegeven in de <xref:System.Web.Security.Roles.ApplicationName%2A>eigenschap worden opgehaald.</xref:System.Web.Security.Roles.ApplicationName%2A>"
  example:
  - "The following code example uses the GetUsersInRole method to get a list of the users in a particular role and binds the results to a <xref:System.Web.UI.WebControls.GridView> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_10_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_10_1.aspx)]"
  syntax:
    content: public static string[] GetUsersInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "De rol voor de lijst met gebruikers."
    return:
      type: System.String[]
      description: "Een string-matrix met de namen van alle gebruikers die lid van de opgegeven rol zijn."
  overload: System.Web.Security.Roles.GetUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>een lege tekenreeks of bevat een komma (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.IsUserInRole(System.String)
  id: IsUserInRole(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: IsUserInRole(String)
  nameWithType: Roles.IsUserInRole(String)
  fullName: System.Web.Security.Roles.IsUserInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee wordt een waarde die aangeeft of de momenteel aangemelde gebruiker in de opgegeven rol. De API is alleen bedoeld om te worden aangeroepen binnen de context van een ASP.NET-aanvraagthread en in dat geval erkende gebruik is het thread-safe."
  remarks: "De methodeaanroepen IsUserInRole de <xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=fullName>methode van de Standaardrolprovider om te bepalen of de momenteel aangemelde gebruiker gekoppeld aan een functie uit de gegevensbron voor de toepassing die is opgegeven is in de <xref:System.Web.Security.Roles.ApplicationName%2A>eigenschap.</xref:System.Web.Security.Roles.ApplicationName%2A> </xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=fullName> De momenteel aangemelde gebruiker wordt geïdentificeerd door de <xref:System.Web.HttpContext.User%2A?displayProperty=fullName>eigenschap van het huidige <xref:System.Web.HttpContext?displayProperty=fullName>, of door <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>voor niet-HTTP-hostomgevingen.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> </xref:System.Web.HttpContext?displayProperty=fullName> </xref:System.Web.HttpContext.User%2A?displayProperty=fullName> Als er geen gebruiker is aangemeld, wordt er een uitzondering opgetreden. Alleen de functies voor de toepassing die is opgegeven in de <xref:System.Web.Security.Roles.ApplicationName%2A>eigenschap worden opgehaald.</xref:System.Web.Security.Roles.ApplicationName%2A>       Als <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>is `true`, klikt u vervolgens `roleName` kan worden gecontroleerd tegen de cache van de rollen in plaats van de opgegeven rolprovider.</xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example programmatically checks whether the currently logged-on user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/m-system.web.security.ro_2_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_2_1.aspx)]"
  syntax:
    content: public static bool IsUserInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "De naam van de functie om in te zoeken."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de momenteel aangemelde gebruiker in de opgegeven rol; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - of - er is geen huidige aangemelde gebruiker."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>een lege tekenreeks of bevat een komma (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  id: IsUserInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: IsUserInRole(String,String)
  nameWithType: Roles.IsUserInRole(String,String)
  fullName: System.Web.Security.Roles.IsUserInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee wordt een waarde die aangeeft of de opgegeven gebruiker in de opgegeven rol. De API is alleen bedoeld om te worden aangeroepen binnen de context van een ASP.NET-aanvraagthread en in dat geval erkende gebruik is het thread-safe."
  remarks: "De methodeaanroepen IsUserInRole de <xref:System.Web.Security.RoleProvider.IsUserInRole%2A>methode van de Standaardrolprovider om te bepalen of de naam van een gebruiker gekoppeld aan een functie uit de gegevensbron voor de toepassing die is opgegeven is in de <xref:System.Web.Security.Roles.ApplicationName%2A>eigenschap.</xref:System.Web.Security.Roles.ApplicationName%2A> </xref:System.Web.Security.RoleProvider.IsUserInRole%2A>       Als `username` gelijk is aan de huidige aangemelde gebruiker en de <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>waarde voor eigenschap `true`, `roleName` kan worden gecontroleerd tegen de cache van de rol in plaats van de opgegeven <xref:System.Web.Security.Roles.Provider%2A>.</xref:System.Web.Security.Roles.Provider%2A> </xref:System.Web.Security.Roles.CacheRolesInCookie%2A>"
  example:
  - "The following code example programmatically checks whether a user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/m-system.web.security.ro_11_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/m-system.web.security.ro_11_1.aspx)]"
  syntax:
    content: public static bool IsUserInRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "De naam van de gebruiker om te zoeken."
    - id: roleName
      type: System.String
      description: "De naam van de functie om in te zoeken."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de opgegeven gebruiker in de opgegeven rol; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>een lege tekenreeks of bevat een komma (,).       - of - <code>username</code> bevat een komma (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.MaxCachedResults
  id: MaxCachedResults
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
  fullName: System.Web.Security.Roles.MaxCachedResults
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee haalt u het maximum aantal role-namen mogen worden opgeslagen voor een gebruiker."
  remarks: "De eigenschap MaxCachedResults is ingesteld met behulp van de `maxCachedResults` configuratiekenmerk. De waarde van de `maxCachedResults` configuratiekenmerk moet worden ingesteld op een geheel getal groter dan nul."
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the `maxCachedResults` attribute to 10.  \n  \n```  \n<roleManager  \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\"   \n  maxCachedResults=\"10\" />  \n```"
  syntax:
    content: public static int MaxCachedResults { get; }
    return:
      type: System.Int32
      description: "Het maximum aantal role-namen mogen worden opgeslagen voor een gebruiker. De standaardwaarde is 25."
  overload: System.Web.Security.Roles.MaxCachedResults*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.Roles.Provider
  id: Provider
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Provider
  nameWithType: Roles.Provider
  fullName: System.Web.Security.Roles.Provider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee haalt de standaardprovider voor de rol voor de toepassing."
  remarks: "De eigenschap Provider kunt u rechtstreeks verwijzen naar de standaardprovider voor de rol voor een toepassing. Dit wordt meestal gebruikt voor toegang tot aangepaste leden van de rolprovider die geen deel uitmaken van de <xref:System.Web.Security.RoleProvider>abstracte klasse.</xref:System.Web.Security.RoleProvider>       Bijvoorbeeld, de <xref:System.Web.Security.WindowsTokenRoleProvider>klasse bevat een overbelasting van de <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A>methode waarmee u om te bepalen of een gebruiker in een algemene Windows-rol met behulp van een <xref:System.Security.Principal.WindowsBuiltInRole>opsommingswaarde.</xref:System.Security.Principal.WindowsBuiltInRole> </xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> </xref:System.Web.Security.WindowsTokenRoleProvider> Een verwijzing naar de <xref:System.Web.Security.WindowsTokenRoleProvider>klasse voor een toepassing kan worden verkregen met behulp van de eigenschap Provider en kan worden geconverteerd als een <xref:System.Web.Security.WindowsTokenRoleProvider>om te verwijzen naar de <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A>overbelasting.</xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> </xref:System.Web.Security.WindowsTokenRoleProvider> </xref:System.Web.Security.WindowsTokenRoleProvider>       Als meerdere Rolproviders zijn geconfigureerd voor een toepassing, kunt u toegang tot andere Rolproviders met behulp van de <xref:System.Web.Security.Roles.Providers%2A>verzameling.</xref:System.Web.Security.Roles.Providers%2A>"
  example:
  - "The following code example casts the default role provider as a <xref:System.Web.Security.WindowsTokenRoleProvider> and checks whether the currently logged-on user is in the Administrators role before allowing the user to view roles settings for the application. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.WindowsTokenRoleProvider>.  \n  \n [!code-cs[System.Web.Security.WindowsTokenRoleProvider#2](~/add/codesnippet/csharp/p-system.web.security.ro_0_1.aspx)]\n [!code-vb[System.Web.Security.WindowsTokenRoleProvider#2](~/add/codesnippet/visualbasic/p-system.web.security.ro_0_1.aspx)]"
  syntax:
    content: public static System.Web.Security.RoleProvider Provider { get; }
    return:
      type: System.Web.Security.RoleProvider
      description: "De standaardprovider voor de rol voor de toepassing wordt weergegeven als een klasse die eigenschappen overneemt van de <xref:System.Web.Security.RoleProvider>abstracte klasse.</xref:System.Web.Security.RoleProvider>"
  overload: System.Web.Security.Roles.Provider*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.Providers
  id: Providers
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: Providers
  nameWithType: Roles.Providers
  fullName: System.Web.Security.Roles.Providers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee wordt een verzameling van de Rolproviders voor de ASP.NET-toepassing."
  remarks: "De eigenschap Providers verwijst naar alle functie-providers die worden ingeschakeld voor een toepassing, met inbegrip van alle providers toegevoegd in het bestand Web.config. U kunt bepalen welke rol providers zijn beschikbaar voor een toepassing met behulp van de `providers` element van de sectie in het bestand Web.config voor uw toepassing.       Het volgende voorbeeld ziet u een sectie die alle bestaande providers (zoals opgegeven in het Machine.config-bestand verwijdert) en voegt een <xref:System.Web.Security.SqlRoleProvider>-exemplaar, zoals de rolprovider voor de toepassing.</xref:System.Web.Security.SqlRoleProvider>      ```   <configuration>     <connectionStrings>       <add name=&quot;SqlServices&quot; connectionString=&quot;Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;&quot; />     </connectionStrings>        <system.web>       <roleManager defaultProvider=&quot;SqlProvider&quot;          enabled=&quot;true&quot;         cacheRolesInCookie=&quot;true&quot;         cookieName=&quot;.ASPROLES&quot;         cookieTimeout=&quot;30&quot;         cookiePath=&quot;/&quot;         cookieRequireSSL=&quot;false&quot;         cookieSlidingExpiration=&quot;true&quot;         cookieProtection=&quot;Encrypted&quot;>            <providers>           <clear/>           <add             name=&quot;SqlProvider&quot;             type=&quot;System.Web.Security.SqlRoleProvider&quot;             connectionStringName=&quot;SqlServices&quot;             applicationName=&quot;MyApplication&quot; />            </providers>          </roleManager>     </system.web>   </configuration>   ```U kunt een sterk getypeerde verwijzing naar een provider van de verzameling Providers verkrijgen door de rolprovider indexeren met de naam en het casten van als het gewenste type.       Kunt u een verwijzing naar de standaardprovider voor een toepassing met behulp van de <xref:System.Web.Security.Roles.Provider%2A>eigenschap.</xref:System.Web.Security.Roles.Provider%2A>"
  example:
  - "The following code example lists the providers enabled for an application and their respective types.  \n  \n [!code-cs[System.Web.Security.Roles#7](~/add/codesnippet/csharp/p-system.web.security.ro_4_1.aspx)]\n [!code-vb[System.Web.Security.Roles#7](~/add/codesnippet/visualbasic/p-system.web.security.ro_4_1.aspx)]"
  syntax:
    content: public static System.Web.Security.RoleProviderCollection Providers { get; }
    return:
      type: System.Web.Security.RoleProviderCollection
      description: "Een <xref href=&quot;System.Web.Security.RoleProviderCollection&quot;> </xref> die de Rolproviders geconfigureerd voor de ASP.NET-toepassing bevat."
  overload: System.Web.Security.Roles.Providers*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  id: RemoveUserFromRole(System.String,System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUserFromRole(String,String)
  nameWithType: Roles.RemoveUserFromRole(String,String)
  fullName: System.Web.Security.Roles.RemoveUserFromRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "De opgegeven gebruiker verwijdert uit de opgegeven rol."
  remarks: "De methode RemoveUserFromRole roept de standaardprovider voor de rol voor de opgegeven gebruiker verwijderen uit de opgegeven rol in de gegevensbron."
  example:
  - "The following code example removes a user from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/m-system.web.security.ro_5_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/m-system.web.security.ro_5_1.aspx)]"
  syntax:
    content: public static void RemoveUserFromRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "De gebruiker verwijderen uit de opgegeven rol."
    - id: roleName
      type: System.String
      description: "De rol te verwijderen van de opgegeven gebruiker uit."
  overload: System.Web.Security.Roles.RemoveUserFromRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>een lege tekenreeks of bevat een komma (,) <code>username</code> is een lege tekenreeks of bevat een komma (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  id: RemoveUserFromRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUserFromRoles(String,String[])
  nameWithType: Roles.RemoveUserFromRoles(String,String[])
  fullName: System.Web.Security.Roles.RemoveUserFromRoles(String,String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee verwijdert u de opgegeven gebruiker uit de opgegeven rollen."
  remarks: "De methode RemoveUserFromRoles roept de standaardprovider voor de rol voor de opgegeven gebruiker verwijderen uit de opgegeven functies op de gegevensbron.       Als de toepassing is geconfigureerd voor het gebruik van de <xref:System.Web.Security.SqlRoleProvider>klasse, de database-updates die worden uitgevoerd tijdens de aanroep van de RemoveUserFromRoles-methode worden gedaan binnen een transactie.</xref:System.Web.Security.SqlRoleProvider> Als een fout is opgetreden, zoals de gebruikersnaam van een die zich niet in de opgegeven rol, de transactie wordt teruggedraaid en er zijn geen updates worden uitgevoerd."
  example:
  - "The following code example uses the RemoveUserFromRoles method to remove a user from one or more roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-vb[System.Web.Security.Roles#10](~/add/codesnippet/visualbasic/m-system.web.security.ro_17_1.aspx)]\n [!code-cs[System.Web.Security.Roles#10](~/add/codesnippet/csharp/m-system.web.security.ro_17_1.aspx)]"
  syntax:
    content: public static void RemoveUserFromRoles (string username, string[] roleNames);
    parameters:
    - id: username
      type: System.String
      description: "De gebruiker om van de opgegeven rollen te verwijderen."
    - id: roleNames
      type: System.String[]
      description: "Een string-matrix van role-namen om te verwijderen van de opgegeven gebruiker uit."
  overload: System.Web.Security.Roles.RemoveUserFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the roles in <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>username</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Een van de rollen in <code> roleNames </code> is een lege tekenreeks of bevat een komma (,).       - of - <code> username </code> is een lege tekenreeks of bevat een komma (,).       - of - <code> roleNames </code> bevat een dubbel element."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  id: RemoveUsersFromRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUsersFromRole(String[],String)
  nameWithType: Roles.RemoveUsersFromRole(String[],String)
  fullName: System.Web.Security.Roles.RemoveUsersFromRole(String[],String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Verwijdert de opgegeven gebruikers van de opgegeven rol."
  remarks: "De methode RemoveUsersFromRole roept de standaardprovider voor de rol voor de opgegeven gebruikers verwijderen uit de opgegeven rol in de gegevensbron.       Als de toepassing gebruikt de <xref:System.Web.Security.SqlRoleProvider>klasse, de database-updates die worden uitgevoerd tijdens het aanroepen van de <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A>methode worden gedaan binnen een transactie.</xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Als een fout is opgetreden, zoals de gebruikersnaam van een die zich niet in de opgegeven rol, de transactie wordt teruggedraaid en er zijn geen updates worden uitgevoerd."
  example:
  - "The following code example uses the RemoveUsersFromRole method to remove one or more users from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.Roles#9](~/add/codesnippet/csharp/m-system.web.security.ro_13_1.aspx)]\n [!code-vb[System.Web.Security.Roles#9](~/add/codesnippet/visualbasic/m-system.web.security.ro_13_1.aspx)]"
  syntax:
    content: public static void RemoveUsersFromRole (string[] usernames, string roleName);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Een string-matrix van gebruikersnamen verwijderen uit de opgegeven rollen."
    - id: roleName
      type: System.String
      description: "De naam van de rol te verwijderen van de opgegeven gebruikers uit."
  overload: System.Web.Security.Roles.RemoveUsersFromRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - of - namen van een van de gebruiker <code>usernames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>een lege tekenreeks of bevat een komma (,).       - of - namen van een van de gebruiker <code>usernames</code> is een lege tekenreeks of bevat een komma (,).       - of - <code>usernames</code> bevat een dubbel element."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  id: RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: Roles.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.Roles.RemoveUsersFromRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Hiermee verwijdert u de opgegeven gebruikersnamen van de opgegeven rollen."
  remarks: "De methode RemoveUsersFromRoles roept de Standaardrolprovider voor de opgegeven gebruikers verwijderen uit de opgegeven functies op de gegevensbron.       Als de toepassing gebruikt de <xref:System.Web.Security.SqlRoleProvider>klasse, de database-updates die worden uitgevoerd tijdens het aanroepen van de <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A>methode worden gedaan binnen een transactie.</xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> </xref:System.Web.Security.SqlRoleProvider> Als een fout is opgetreden, zoals de gebruikersnaam van een die zich niet in de opgegeven rol, de transactie wordt teruggedraaid en er zijn geen updates worden uitgevoerd."
  example:
  - "The following code example uses the RemoveUsersFromRoles method to remove one or more users from one or more roles based on user input. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n [!code-cs[System.Web.Security.Roles#8](~/add/codesnippet/csharp/6dafcb6b-2398-4825-9291-_1.aspx)]\n [!code-vb[System.Web.Security.Roles#8](~/add/codesnippet/visualbasic/6dafcb6b-2398-4825-9291-_1.aspx)]"
  syntax:
    content: public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "Een string-matrix van gebruikersnamen verwijderen uit de opgegeven rollen."
    - id: roleNames
      type: System.String[]
      description: "Een string-matrix van role-namen om te verwijderen van de opgegeven gebruikers uit."
  overload: System.Web.Security.Roles.RemoveUsersFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Een van de rollen die zijn opgegeven in <code> roleNames </code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>.       - of - een van de gebruikers die zijn opgegeven <code> usernames </code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Een van de rollen die zijn opgegeven in <code> roleNames </code> is een lege tekenreeks of bevat een komma (,).       - of - een van de gebruikers die zijn opgegeven <code> usernames </code> is een lege tekenreeks of bevat een komma (,).       - of - <code> roleNames </code> bevat een dubbel element.       - of - <code> usernames </code> bevat een dubbel element."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
- uid: System.Web.Security.Roles.RoleExists(System.String)
  id: RoleExists(System.String)
  parent: System.Web.Security.Roles
  langs:
  - csharp
  name: RoleExists(String)
  nameWithType: Roles.RoleExists(String)
  fullName: System.Web.Security.Roles.RoleExists(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "Haalt een waarde die aangeeft of de opgegeven rolnaam bestaat al in de gegevensbron van de rol."
  remarks: "De methodeaanroepen RoleExists de `RoleExists` methode van de Standaardrolprovider om te bepalen of de naam van een rol in de gegevensbron voor de toepassing die is opgegeven bestaat in de <xref:System.Web.Security.Roles.ApplicationName%2A>eigenschap.</xref:System.Web.Security.Roles.ApplicationName%2A>"
  example:
  - "The following code example uses the RoleExists method to determine whether a role name already exists before creating the role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.Roles>.  \n  \n> [!IMPORTANT]\n>  This example contains a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.ro_4_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.ro_4_1.aspx)]"
  syntax:
    content: public static bool RoleExists (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "De naam van de rol die u zoekt in de gegevensbron."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de rolnaam al in de gegevensbron bestaat; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Security.Roles.RoleExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref> in Visual Basic)."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>een lege tekenreeks of bevat een komma (,)."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "Rollenbeheer is niet ingeschakeld."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Configuration.Provider.ProviderException
  parent: System.Configuration.Provider
  isExternal: false
  name: ProviderException
  nameWithType: ProviderException
  fullName: System.Configuration.Provider.ProviderException
- uid: System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRole(String[],String)
  nameWithType: Roles.AddUsersToRole(String[],String)
  fullName: System.Web.Security.Roles.AddUsersToRole(String[],String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRoles(String[],String[])
  nameWithType: Roles.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.Roles.AddUsersToRoles(String[],String[])
- uid: System.Web.Security.Roles.AddUserToRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRole(String,String)
  nameWithType: Roles.AddUserToRole(String,String)
  fullName: System.Web.Security.Roles.AddUserToRole(String,String)
- uid: System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRoles(String,String[])
  nameWithType: Roles.AddUserToRoles(String,String[])
  fullName: System.Web.Security.Roles.AddUserToRoles(String,String[])
- uid: System.Web.Security.Roles.ApplicationName
  parent: System.Web.Security.Roles
  isExternal: false
  name: ApplicationName
  nameWithType: Roles.ApplicationName
  fullName: System.Web.Security.Roles.ApplicationName
- uid: System.Web.Security.Roles.CacheRolesInCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
  fullName: System.Web.Security.Roles.CacheRolesInCookie
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Security.Roles.CookieName
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieName
  nameWithType: Roles.CookieName
  fullName: System.Web.Security.Roles.CookieName
- uid: System.Web.Security.Roles.CookiePath
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookiePath
  nameWithType: Roles.CookiePath
  fullName: System.Web.Security.Roles.CookiePath
- uid: System.Web.Security.Roles.CookieProtectionValue
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
  fullName: System.Web.Security.Roles.CookieProtectionValue
- uid: System.Web.Security.CookieProtection
  parent: System.Web.Security
  isExternal: false
  name: CookieProtection
  nameWithType: CookieProtection
  fullName: System.Web.Security.CookieProtection
- uid: System.Web.Security.Roles.CookieRequireSSL
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
  fullName: System.Web.Security.Roles.CookieRequireSSL
- uid: System.Web.Security.Roles.CookieSlidingExpiration
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
  fullName: System.Web.Security.Roles.CookieSlidingExpiration
- uid: System.Web.Security.Roles.CookieTimeout
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
  fullName: System.Web.Security.Roles.CookieTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Security.Roles.CreatePersistentCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
  fullName: System.Web.Security.Roles.CreatePersistentCookie
- uid: System.Web.Security.Roles.CreateRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreateRole(String)
  nameWithType: Roles.CreateRole(String)
  fullName: System.Web.Security.Roles.CreateRole(String)
- uid: System.Web.Security.Roles.DeleteCookie
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteCookie()
  nameWithType: Roles.DeleteCookie()
  fullName: System.Web.Security.Roles.DeleteCookie()
- uid: System.Web.Security.Roles.DeleteRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole(String)
  nameWithType: Roles.DeleteRole(String)
  fullName: System.Web.Security.Roles.DeleteRole(String)
- uid: System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole(String,Boolean)
  nameWithType: Roles.DeleteRole(String,Boolean)
  fullName: System.Web.Security.Roles.DeleteRole(String,Boolean)
- uid: System.Web.Security.Roles.Domain
  parent: System.Web.Security.Roles
  isExternal: false
  name: Domain
  nameWithType: Roles.Domain
  fullName: System.Web.Security.Roles.Domain
- uid: System.Web.Security.Roles.Enabled
  parent: System.Web.Security.Roles
  isExternal: false
  name: Enabled
  nameWithType: Roles.Enabled
  fullName: System.Web.Security.Roles.Enabled
- uid: System.Web.Security.Roles.FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: FindUsersInRole(String,String)
  nameWithType: Roles.FindUsersInRole(String,String)
  fullName: System.Web.Security.Roles.FindUsersInRole(String,String)
- uid: System.Web.Security.Roles.GetAllRoles
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetAllRoles()
  nameWithType: Roles.GetAllRoles()
  fullName: System.Web.Security.Roles.GetAllRoles()
- uid: System.Web.Security.Roles.GetRolesForUser
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser()
  nameWithType: Roles.GetRolesForUser()
  fullName: System.Web.Security.Roles.GetRolesForUser()
- uid: System.Web.Security.Roles.GetRolesForUser(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser(String)
  nameWithType: Roles.GetRolesForUser(String)
  fullName: System.Web.Security.Roles.GetRolesForUser(String)
- uid: System.Web.Security.Roles.GetUsersInRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetUsersInRole(String)
  nameWithType: Roles.GetUsersInRole(String)
  fullName: System.Web.Security.Roles.GetUsersInRole(String)
- uid: System.Web.Security.Roles.IsUserInRole(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole(String)
  nameWithType: Roles.IsUserInRole(String)
  fullName: System.Web.Security.Roles.IsUserInRole(String)
- uid: System.Web.Security.Roles.IsUserInRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole(String,String)
  nameWithType: Roles.IsUserInRole(String,String)
  fullName: System.Web.Security.Roles.IsUserInRole(String,String)
- uid: System.Web.Security.Roles.MaxCachedResults
  parent: System.Web.Security.Roles
  isExternal: false
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
  fullName: System.Web.Security.Roles.MaxCachedResults
- uid: System.Web.Security.Roles.Provider
  parent: System.Web.Security.Roles
  isExternal: false
  name: Provider
  nameWithType: Roles.Provider
  fullName: System.Web.Security.Roles.Provider
- uid: System.Web.Security.RoleProvider
  parent: System.Web.Security
  isExternal: true
  name: RoleProvider
  nameWithType: RoleProvider
  fullName: System.Web.Security.RoleProvider
- uid: System.Web.Security.Roles.Providers
  parent: System.Web.Security.Roles
  isExternal: false
  name: Providers
  nameWithType: Roles.Providers
  fullName: System.Web.Security.Roles.Providers
- uid: System.Web.Security.RoleProviderCollection
  parent: System.Web.Security
  isExternal: false
  name: RoleProviderCollection
  nameWithType: RoleProviderCollection
  fullName: System.Web.Security.RoleProviderCollection
- uid: System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRole(String,String)
  nameWithType: Roles.RemoveUserFromRole(String,String)
  fullName: System.Web.Security.Roles.RemoveUserFromRole(String,String)
- uid: System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRoles(String,String[])
  nameWithType: Roles.RemoveUserFromRoles(String,String[])
  fullName: System.Web.Security.Roles.RemoveUserFromRoles(String,String[])
- uid: System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRole(String[],String)
  nameWithType: Roles.RemoveUsersFromRole(String[],String)
  fullName: System.Web.Security.Roles.RemoveUsersFromRole(String[],String)
- uid: System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: Roles.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.Roles.RemoveUsersFromRoles(String[],String[])
- uid: System.Web.Security.Roles.RoleExists(System.String)
  parent: System.Web.Security.Roles
  isExternal: false
  name: RoleExists(String)
  nameWithType: Roles.RoleExists(String)
  fullName: System.Web.Security.Roles.RoleExists(String)
- uid: System.Web.Security.Roles.AddUsersToRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRole
  nameWithType: Roles.AddUsersToRole
- uid: System.Web.Security.Roles.AddUsersToRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUsersToRoles
  nameWithType: Roles.AddUsersToRoles
- uid: System.Web.Security.Roles.AddUserToRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRole
  nameWithType: Roles.AddUserToRole
- uid: System.Web.Security.Roles.AddUserToRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: AddUserToRoles
  nameWithType: Roles.AddUserToRoles
- uid: System.Web.Security.Roles.ApplicationName*
  parent: System.Web.Security.Roles
  isExternal: false
  name: ApplicationName
  nameWithType: Roles.ApplicationName
- uid: System.Web.Security.Roles.CacheRolesInCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CacheRolesInCookie
  nameWithType: Roles.CacheRolesInCookie
- uid: System.Web.Security.Roles.CookieName*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieName
  nameWithType: Roles.CookieName
- uid: System.Web.Security.Roles.CookiePath*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookiePath
  nameWithType: Roles.CookiePath
- uid: System.Web.Security.Roles.CookieProtectionValue*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieProtectionValue
  nameWithType: Roles.CookieProtectionValue
- uid: System.Web.Security.Roles.CookieRequireSSL*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieRequireSSL
  nameWithType: Roles.CookieRequireSSL
- uid: System.Web.Security.Roles.CookieSlidingExpiration*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieSlidingExpiration
  nameWithType: Roles.CookieSlidingExpiration
- uid: System.Web.Security.Roles.CookieTimeout*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CookieTimeout
  nameWithType: Roles.CookieTimeout
- uid: System.Web.Security.Roles.CreatePersistentCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreatePersistentCookie
  nameWithType: Roles.CreatePersistentCookie
- uid: System.Web.Security.Roles.CreateRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: CreateRole
  nameWithType: Roles.CreateRole
- uid: System.Web.Security.Roles.DeleteCookie*
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteCookie
  nameWithType: Roles.DeleteCookie
- uid: System.Web.Security.Roles.DeleteRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: DeleteRole
  nameWithType: Roles.DeleteRole
- uid: System.Web.Security.Roles.Domain*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Domain
  nameWithType: Roles.Domain
- uid: System.Web.Security.Roles.Enabled*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Enabled
  nameWithType: Roles.Enabled
- uid: System.Web.Security.Roles.FindUsersInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: FindUsersInRole
  nameWithType: Roles.FindUsersInRole
- uid: System.Web.Security.Roles.GetAllRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetAllRoles
  nameWithType: Roles.GetAllRoles
- uid: System.Web.Security.Roles.GetRolesForUser*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetRolesForUser
  nameWithType: Roles.GetRolesForUser
- uid: System.Web.Security.Roles.GetUsersInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: GetUsersInRole
  nameWithType: Roles.GetUsersInRole
- uid: System.Web.Security.Roles.IsUserInRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: IsUserInRole
  nameWithType: Roles.IsUserInRole
- uid: System.Web.Security.Roles.MaxCachedResults*
  parent: System.Web.Security.Roles
  isExternal: false
  name: MaxCachedResults
  nameWithType: Roles.MaxCachedResults
- uid: System.Web.Security.Roles.Provider*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Provider
  nameWithType: Roles.Provider
- uid: System.Web.Security.Roles.Providers*
  parent: System.Web.Security.Roles
  isExternal: false
  name: Providers
  nameWithType: Roles.Providers
- uid: System.Web.Security.Roles.RemoveUserFromRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRole
  nameWithType: Roles.RemoveUserFromRole
- uid: System.Web.Security.Roles.RemoveUserFromRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUserFromRoles
  nameWithType: Roles.RemoveUserFromRoles
- uid: System.Web.Security.Roles.RemoveUsersFromRole*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRole
  nameWithType: Roles.RemoveUsersFromRole
- uid: System.Web.Security.Roles.RemoveUsersFromRoles*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RemoveUsersFromRoles
  nameWithType: Roles.RemoveUsersFromRoles
- uid: System.Web.Security.Roles.RoleExists*
  parent: System.Web.Security.Roles
  isExternal: false
  name: RoleExists
  nameWithType: Roles.RoleExists
