### YamlMime:ManagedReference
items:
- uid: System.Web.DynamicData.FilterFactory
  id: FilterFactory
  children:
  - System.Web.DynamicData.FilterFactory.#ctor
  - System.Web.DynamicData.FilterFactory.CreateFilterControl(System.Web.DynamicData.MetaColumn,System.String)
  - System.Web.DynamicData.FilterFactory.GetFilterVirtualPath(System.Web.DynamicData.MetaColumn,System.String)
  langs:
  - csharp
  name: FilterFactory
  nameWithType: FilterFactory
  fullName: System.Web.DynamicData.FilterFactory
  type: Class
  summary: "Maakt een filtersjabloon."
  remarks: "De klasse FilterFactory wordt gebruikt tijdens de uitvoering door dynamische gegevens om een exemplaar van een filtersjabloon voor een specifieke kolomtype.       U kunt de methoden die zijn gedefinieerd in deze klasse om aan te passen hoe filter sjablonen zijn geladen overschrijven. Een aangepaste implementatie kan bijvoorbeeld de sjablonen filter laden van een andere locatie dan de standaardmap ~/DynamicData/Filters.       Dynamische gegevens biedt filter sjablonen op refererende sleutel, Booleaanse waarde en inventarisatie kolom van het type en worden ze met behulp van weergegeven een <xref:System.Web.UI.WebControls.DropDownList>besturingselement.</xref:System.Web.UI.WebControls.DropDownList> U kunt ook aangepaste filter sjablonen maken."
  example:
  - For an example of table row filtering uses the default filter templates, see the <xref:System.Web.DynamicData.QueryableFilterRepeater> class.
  syntax:
    content: public class FilterFactory
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.DynamicData.FilterFactory.#ctor
  id: '#ctor'
  parent: System.Web.DynamicData.FilterFactory
  langs:
  - csharp
  name: FilterFactory()
  nameWithType: FilterFactory.FilterFactory()
  fullName: System.Web.DynamicData.FilterFactory.FilterFactory()
  type: Constructor
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Web.DynamicData.FilterFactory&quot;> </xref> klasse."
  syntax:
    content: public FilterFactory ();
    parameters: []
  overload: System.Web.DynamicData.FilterFactory.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.FilterFactory.CreateFilterControl(System.Web.DynamicData.MetaColumn,System.String)
  id: CreateFilterControl(System.Web.DynamicData.MetaColumn,System.String)
  parent: System.Web.DynamicData.FilterFactory
  langs:
  - csharp
  name: CreateFilterControl(MetaColumn,String)
  nameWithType: FilterFactory.CreateFilterControl(MetaColumn,String)
  fullName: System.Web.DynamicData.FilterFactory.CreateFilterControl(MetaColumn,String)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Maakt een exemplaar van de filtersjabloon."
  remarks: "Deze methode wordt aangeroepen door dynamische gegevens om een exemplaar van een filtersjabloon. Afgeleide klassen kunnen negeren deze methode om aan te passen hoe exemplaren van filter sjablonen worden gemaakt. Een aangepaste implementatie kan bijvoorbeeld sjablonen laden vanuit een gecompileerde assembly in plaats van uit de standaardmap ~/DynamicData/Filters."
  syntax:
    content: public virtual System.Web.DynamicData.QueryableFilterUserControl CreateFilterControl (System.Web.DynamicData.MetaColumn column, string filterUIHint);
    parameters:
    - id: column
      type: System.Web.DynamicData.MetaColumn
      description: "De kolom waarop de filtersjabloon van toepassing is."
    - id: filterUIHint
      type: System.String
      description: "De naam van de filtersjabloon te gebruiken."
    return:
      type: System.Web.DynamicData.QueryableFilterUserControl
      description: "Een exemplaar van de <xref href=&quot;System.Web.DynamicData.QueryableFilterUserControl&quot;> </xref> klasse."
  overload: System.Web.DynamicData.FilterFactory.CreateFilterControl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>column</code>is **null**."
  platform:
  - net462
- uid: System.Web.DynamicData.FilterFactory.GetFilterVirtualPath(System.Web.DynamicData.MetaColumn,System.String)
  id: GetFilterVirtualPath(System.Web.DynamicData.MetaColumn,System.String)
  parent: System.Web.DynamicData.FilterFactory
  langs:
  - csharp
  name: GetFilterVirtualPath(MetaColumn,String)
  nameWithType: FilterFactory.GetFilterVirtualPath(MetaColumn,String)
  fullName: System.Web.DynamicData.FilterFactory.GetFilterVirtualPath(MetaColumn,String)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "Hiermee wordt het virtuele pad van de filtersjabloon opgehaald."
  remarks: "Standaard bevinden filter sjablonen zich in de map ~/DynamicData/Filers.       Deze methode bepaalt het virtuele pad van de map waarin de veldsjabloon. Afgeleide klassen kunnen u deze methode om filter-sjablonen uit een ander virtueel pad overschrijven."
  syntax:
    content: public virtual string GetFilterVirtualPath (System.Web.DynamicData.MetaColumn column, string filterUIHint);
    parameters:
    - id: column
      type: System.Web.DynamicData.MetaColumn
      description: "De kolom waarop de filtersjabloon van toepassing is."
    - id: filterUIHint
      type: System.String
      description: "De filtersjabloon te gebruiken."
    return:
      type: System.String
      description: "Het virtuele pad van de filtersjabloon."
  overload: System.Web.DynamicData.FilterFactory.GetFilterVirtualPath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>column</code>is **null**."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.DynamicData.FilterFactory.#ctor
  parent: System.Web.DynamicData.FilterFactory
  isExternal: false
  name: FilterFactory()
  nameWithType: FilterFactory.FilterFactory()
  fullName: System.Web.DynamicData.FilterFactory.FilterFactory()
- uid: System.Web.DynamicData.FilterFactory.CreateFilterControl(System.Web.DynamicData.MetaColumn,System.String)
  parent: System.Web.DynamicData.FilterFactory
  isExternal: false
  name: CreateFilterControl(MetaColumn,String)
  nameWithType: FilterFactory.CreateFilterControl(MetaColumn,String)
  fullName: System.Web.DynamicData.FilterFactory.CreateFilterControl(MetaColumn,String)
- uid: System.Web.DynamicData.QueryableFilterUserControl
  parent: System.Web.DynamicData
  isExternal: false
  name: QueryableFilterUserControl
  nameWithType: QueryableFilterUserControl
  fullName: System.Web.DynamicData.QueryableFilterUserControl
- uid: System.Web.DynamicData.MetaColumn
  parent: System.Web.DynamicData
  isExternal: false
  name: MetaColumn
  nameWithType: MetaColumn
  fullName: System.Web.DynamicData.MetaColumn
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.DynamicData.FilterFactory.GetFilterVirtualPath(System.Web.DynamicData.MetaColumn,System.String)
  parent: System.Web.DynamicData.FilterFactory
  isExternal: false
  name: GetFilterVirtualPath(MetaColumn,String)
  nameWithType: FilterFactory.GetFilterVirtualPath(MetaColumn,String)
  fullName: System.Web.DynamicData.FilterFactory.GetFilterVirtualPath(MetaColumn,String)
- uid: System.Web.DynamicData.FilterFactory.#ctor*
  parent: System.Web.DynamicData.FilterFactory
  isExternal: false
  name: FilterFactory
  nameWithType: FilterFactory.FilterFactory
- uid: System.Web.DynamicData.FilterFactory.CreateFilterControl*
  parent: System.Web.DynamicData.FilterFactory
  isExternal: false
  name: CreateFilterControl
  nameWithType: FilterFactory.CreateFilterControl
- uid: System.Web.DynamicData.FilterFactory.GetFilterVirtualPath*
  parent: System.Web.DynamicData.FilterFactory
  isExternal: false
  name: GetFilterVirtualPath
  nameWithType: FilterFactory.GetFilterVirtualPath
