### YamlMime:ManagedReference
items:
- uid: System.Windows.Threading.Dispatcher
  id: Dispatcher
  children:
  - System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])
  - System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  - System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  - System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  - System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  - System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)
  - System.Windows.Threading.Dispatcher.CheckAccess
  - System.Windows.Threading.Dispatcher.CurrentDispatcher
  - System.Windows.Threading.Dispatcher.DisableProcessing
  - System.Windows.Threading.Dispatcher.ExitAllFrames
  - System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)
  - System.Windows.Threading.Dispatcher.HasShutdownFinished
  - System.Windows.Threading.Dispatcher.HasShutdownStarted
  - System.Windows.Threading.Dispatcher.Hooks
  - System.Windows.Threading.Dispatcher.Invoke(System.Action)
  - System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)
  - System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])
  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  - System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  - System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])
  - System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)
  - System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  - System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])
  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)
  - System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])
  - System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})
  - System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  - System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  - System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  - System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)
  - System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)
  - System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  - System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})
  - System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  - System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  - System.Windows.Threading.Dispatcher.InvokeShutdown
  - System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)
  - System.Windows.Threading.Dispatcher.Run
  - System.Windows.Threading.Dispatcher.ShutdownFinished
  - System.Windows.Threading.Dispatcher.ShutdownStarted
  - System.Windows.Threading.Dispatcher.Thread
  - System.Windows.Threading.Dispatcher.UnhandledException
  - System.Windows.Threading.Dispatcher.UnhandledExceptionFilter
  - System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)
  - System.Windows.Threading.Dispatcher.VerifyAccess
  - System.Windows.Threading.Dispatcher.Yield
  - System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)
  langs:
  - csharp
  name: Dispatcher
  nameWithType: Dispatcher
  fullName: System.Windows.Threading.Dispatcher
  type: Class
  summary: "Biedt services voor het beheren van de wachtrij voor werkitems voor een thread."
  remarks: "De Dispatcher houdt een prioriteit wachtrij van werkitems voor een specifieke thread.       Wanneer een Dispatcher op een thread is gemaakt, wordt de enige Dispatcher die gekoppeld aan de thread worden kan, zelfs als de Dispatcher is afgesloten.       Als u probeert te krijgen de <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A>voor de huidige thread en een Dispatcher is niet gekoppeld aan de thread, een Dispatcher wordt gemaakt.</xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> Een Dispatcher wordt ook gemaakt wanneer u een <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> maken Als u een Dispatcher in een achtergrondthread maakt, zorg er dan voor dat de verzender afgesloten voordat de thread wordt afgesloten.       Als een Dispatcher is afgesloten, kan niet opnieuw gestart.       In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], een <xref:System.Windows.Threading.DispatcherObject>alleen toegankelijk zijn voor de Dispatcher is gekoppeld.</xref:System.Windows.Threading.DispatcherObject>  Bijvoorbeeld in een achtergrond-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gekoppeld aan de Dispatcher op de [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] thread.</xref:System.Windows.Controls.Button>  Opdat de achtergrondthread voor toegang tot de <xref:System.Windows.Controls.ContentControl.Content%2A>eigenschap van de <xref:System.Windows.Controls.Button>, de achtergrondthread moet delegeren het werk moet de Dispatcher die zijn gekoppeld aan de [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] thread.</xref:System.Windows.Controls.Button> </xref:System.Windows.Controls.ContentControl.Content%2A>  Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>  De bewerking is toegevoegd aan de wachtrij van de verzender op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority>       Als <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>in een Dispatcher die is afgesloten, de statuseigenschap van de geretourneerde <xref:System.Windows.Threading.DispatcherOperation>is ingesteld op <xref:System.Windows.Threading.DispatcherOperationStatus>.</xref:System.Windows.Threading.DispatcherOperationStatus> </xref:System.Windows.Threading.DispatcherOperation> wordt aangeroepen</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       Alle methoden in Dispatcher, met uitzondering van <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, zijn vrije threads.</xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>       Objecten die zijn afgeleid van <xref:System.Windows.Threading.DispatcherObject>thread-affiniteit hebben.</xref:System.Windows.Threading.DispatcherObject>       Objecten die zijn afgeleid van <xref:System.Windows.Freezable>zijn gratis thread wanneer ze worden bevroren.</xref:System.Windows.Freezable>  Zie voor meer informatie [Freezable objecten overzicht](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example shows how to place an operation onto a Dispatcher.  For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).  \n  \n First, a delegate is created that accepts no arguments.  \n  \n [!code-vb[ThreadingPrimeNumber#ThreadingPrimeNumberInit](~/add/codesnippet/visualbasic/t-system.windows.threadi_2_1.vb)]\n [!code-cs[ThreadingPrimeNumber#ThreadingPrimeNumberInit](~/add/codesnippet/csharp/t-system.windows.threadi_2_1.cs)]  \n  \n Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.  This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.  \n  \n [!code-vb[ThreadingPrimeNumber#ThreadingPrimeNumberBeingInvoke](~/add/codesnippet/visualbasic/t-system.windows.threadi_2_2.vb)]\n [!code-cs[ThreadingPrimeNumber#ThreadingPrimeNumberBeingInvoke](~/add/codesnippet/csharp/t-system.windows.threadi_2_2.cs)]"
  syntax:
    content: public sealed class Dispatcher
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])
  id: BeginInvoke(System.Delegate,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: BeginInvoke(Delegate,Object[])
  nameWithType: Dispatcher.BeginInvoke(Delegate,Object[])
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(Delegate,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "De opgegeven gemachtigde asynchroon met de opgegeven argumenten worden uitgevoerd op de thread die de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gemaakt op."
  remarks: "De <xref:System.Windows.Threading.DispatcherOperation>object dat wordt geretourneerd door <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>kan worden gebruikt op verschillende manieren om te communiceren met de opgegeven gemachtigde, zoals: - veranderende de <xref:System.Windows.Threading.DispatcherPriority>van de gemachtigde omdat de in behandeling kan worden uitgevoerd in de gebeurtenis in de wachtrij.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.DispatcherOperation>      -De gemachtigde verwijderen uit de wachtrij.      -Er wordt gewacht tot de gemachtigde om terug te keren.      -Verkrijgen van de waarde die de gemachtigde nadat deze retourneert is uitgevoerd.       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon; Daarom retourneert besturingselement onmiddellijk aan het object aanroepen nadat deze is aangeroepen.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], alleen de thread die gemaakt een <xref:System.Windows.Threading.DispatcherObject>mogelijk toegang tot dit object.</xref:System.Windows.Threading.DispatcherObject> Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gemaakt op de UI-thread.</xref:System.Windows.Controls.Button> Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het <xref:System.Windows.Controls.Button>, de achtergrondthread moet het werk te delegeren de <xref:System.Windows.Threading.Dispatcher>die zijn gekoppeld aan de UI-thread.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Controls.Button> Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A> De bewerking wordt toegevoegd aan de wachtrij van het <xref:System.Windows.Threading.Dispatcher>op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher>       Als <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>voor een <xref:System.Windows.Threading.Dispatcher>die is afgesloten, de statuseigenschap van de geretourneerde <xref:System.Windows.Threading.DispatcherOperation>is ingesteld op <xref:System.Windows.Threading.DispatcherOperationStatus>.</xref:System.Windows.Threading.DispatcherOperationStatus> </xref:System.Windows.Threading.DispatcherOperation> </xref:System.Windows.Threading.Dispatcher> wordt aangeroepen</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "De gemachtigde moet een methode die parameters die zijn opgegeven `args`, die naar doorgeschoven, is de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
    - id: args
      type: System.Object[]
      description: "Een matrix met objecten op te geven als argumenten aan de opgegeven methode. Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "Een object dat wordt geretourneerd onmiddellijk na de <xref:System.Windows.Threading.Dispatcher.BeginInvoke*>wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde omdat deze in behandeling kan worden uitgevoerd in de gebeurtenisstroom wachtrij.</xref:System.Windows.Threading.Dispatcher.BeginInvoke*>"
  overload: System.Windows.Threading.Dispatcher.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  id: BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: BeginInvoke(DispatcherPriority,Delegate)
  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority,Delegate)
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(DispatcherPriority,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "De opgegeven gemachtigde asynchroon op de opgegeven prioriteit op de thread wordt uitgevoerd de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld."
  remarks: "Als er meerdere BeginInvoke aanroepen worden aangebracht op hetzelfde <xref:System.Windows.Threading.DispatcherPriority>, deze worden uitgevoerd in de volgorde waarin de aanroepen zijn aangebracht.</xref:System.Windows.Threading.DispatcherPriority>       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>retourneert een <xref:System.Windows.Threading.DispatcherOperation>-object dat kan worden gebruikt om te communiceren met de gemachtigde wanneer de gemachtigde in de gebeurtenisstroom wachtrij is.</xref:System.Windows.Threading.DispatcherOperation></xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       De <xref:System.Windows.Threading.DispatcherOperation>object dat wordt geretourneerd door <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>kan worden gebruikt op verschillende manieren om te communiceren met de opgegeven gemachtigde, zoals: - veranderende de <xref:System.Windows.Threading.DispatcherPriority>van de gemachtigde omdat de in behandeling kan worden uitgevoerd in de gebeurtenis in de wachtrij.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.DispatcherOperation>      -De gemachtigde verwijderen uit de wachtrij.      -Er wordt gewacht tot de gemachtigde om terug te keren.      -Verkrijgen van de waarde die de gemachtigde nadat deze retourneert is uitgevoerd.       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon; Daarom retourneert besturingselement onmiddellijk aan het object aanroepen nadat deze is aangeroepen.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], alleen de thread die gemaakt een <xref:System.Windows.Threading.DispatcherObject>mogelijk toegang tot dit object.</xref:System.Windows.Threading.DispatcherObject>  Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gemaakt op de UI-thread.</xref:System.Windows.Controls.Button>  Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het <xref:System.Windows.Controls.Button>, de achtergrondthread moet het werk te delegeren de <xref:System.Windows.Threading.Dispatcher>die zijn gekoppeld aan de UI-thread.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Controls.Button>  Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>  De bewerking wordt toegevoegd aan de wachtrij van het <xref:System.Windows.Threading.Dispatcher>op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher>       Als <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>voor een <xref:System.Windows.Threading.Dispatcher>die is afgesloten, de statuseigenschap van de geretourneerde <xref:System.Windows.Threading.DispatcherOperation>is ingesteld op <xref:System.Windows.Threading.DispatcherOperationStatus>.</xref:System.Windows.Threading.DispatcherOperationStatus> </xref:System.Windows.Threading.DispatcherOperation> </xref:System.Windows.Threading.Dispatcher> wordt aangeroepen</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>"
  example:
  - "The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.  For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](http://go.microsoft.com/fwlink/?LinkID=160038).  \n  \n First, a delegate is created that accepts no arguments.  \n  \n [!code-vb[ThreadingPrimeNumber#ThreadingPrimeNumberInit](~/add/codesnippet/visualbasic/8c08cb62-5b5f-4560-a7bd-_1.vb)]\n [!code-cs[ThreadingPrimeNumber#ThreadingPrimeNumberInit](~/add/codesnippet/csharp/8c08cb62-5b5f-4560-a7bd-_1.cs)]  \n  \n Next, BeginInvoke is called.  Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.   The call to BeginInvoke takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.  \n  \n [!code-vb[ThreadingPrimeNumber#ThreadingPrimeNumberBeingInvoke](~/add/codesnippet/visualbasic/8c08cb62-5b5f-4560-a7bd-_2.vb)]\n [!code-cs[ThreadingPrimeNumber#ThreadingPrimeNumberBeingInvoke](~/add/codesnippet/csharp/8c08cb62-5b5f-4560-a7bd-_2.cs)]"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij, de opgegeven methode wordt aangeroepen."
    - id: method
      type: System.Delegate
      description: "De gemachtigde moet een methode die geen argumenten aanneemt, die naar doorgeschoven, is de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "Een object dat wordt geretourneerd onmiddellijk na de <xref:System.Windows.Threading.Dispatcher.BeginInvoke*>wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde omdat deze in behandeling kan worden uitgevoerd in de gebeurtenisstroom wachtrij.</xref:System.Windows.Threading.Dispatcher.BeginInvoke*>"
  overload: System.Windows.Threading.Dispatcher.BeginInvoke*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>is geen geldige <xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  id: BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: BeginInvoke(Delegate,DispatcherPriority,Object[])
  nameWithType: Dispatcher.BeginInvoke(Delegate,DispatcherPriority,Object[])
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(Delegate,DispatcherPriority,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "De opgegeven gemachtigde asynchroon met de opgegeven argumenten, klikt u op de opgegeven prioriteit op de thread wordt uitgevoerd die de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gemaakt op."
  remarks: "De <xref:System.Windows.Threading.DispatcherOperation>object dat wordt geretourneerd door <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>kan worden gebruikt op verschillende manieren om te communiceren met de opgegeven gemachtigde, zoals: - veranderende de <xref:System.Windows.Threading.DispatcherPriority>van de gemachtigde omdat de in behandeling kan worden uitgevoerd in de gebeurtenis in de wachtrij.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.DispatcherOperation>      -De gemachtigde verwijderen uit de wachtrij.      -Er wordt gewacht tot de gemachtigde om terug te keren.      -Verkrijgen van de waarde die de gemachtigde nadat deze retourneert is uitgevoerd.       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon; Daarom retourneert besturingselement onmiddellijk aan het object aanroepen nadat deze is aangeroepen.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], alleen de thread die gemaakt een <xref:System.Windows.Threading.DispatcherObject>mogelijk toegang tot dit object.</xref:System.Windows.Threading.DispatcherObject> Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gemaakt op de UI-thread.</xref:System.Windows.Controls.Button> Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het <xref:System.Windows.Controls.Button>, de achtergrondthread moet het werk te delegeren de <xref:System.Windows.Threading.Dispatcher>die zijn gekoppeld aan de UI-thread.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Controls.Button> Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A> De bewerking wordt toegevoegd aan de wachtrij van het <xref:System.Windows.Threading.Dispatcher>op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher>       Als <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>voor een <xref:System.Windows.Threading.Dispatcher>die is afgesloten, de statuseigenschap van de geretourneerde <xref:System.Windows.Threading.DispatcherOperation>is ingesteld op <xref:System.Windows.Threading.DispatcherOperationStatus>.</xref:System.Windows.Threading.DispatcherOperationStatus> </xref:System.Windows.Threading.DispatcherOperation> </xref:System.Windows.Threading.Dispatcher> wordt aangeroepen</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "De gemachtigde moet een methode die parameters die zijn opgegeven `args`, die naar doorgeschoven, is de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij, de opgegeven methode wordt aangeroepen."
    - id: args
      type: System.Object[]
      description: "Een matrix met objecten op te geven als argumenten aan de opgegeven methode. Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "Een object dat wordt geretourneerd onmiddellijk na de <xref:System.Windows.Threading.Dispatcher.BeginInvoke*>wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde omdat deze in behandeling kan worden uitgevoerd in de gebeurtenisstroom wachtrij.</xref:System.Windows.Threading.Dispatcher.BeginInvoke*>"
  overload: System.Windows.Threading.Dispatcher.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  id: BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: BeginInvoke(DispatcherPriority,Delegate,Object)
  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object)
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "De opgegeven gemachtigde asynchroon op de opgegeven prioriteit en met het opgegeven argument op de thread wordt uitgevoerd de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld."
  remarks: "`Arg`kan `null` als er geen argumenten nodig zijn.       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>retourneert een <xref:System.Windows.Threading.DispatcherOperation>-object dat kan worden gebruikt om te communiceren met de gemachtigde wanneer de gemachtigde in de gebeurtenisstroom wachtrij is.</xref:System.Windows.Threading.DispatcherOperation></xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       De <xref:System.Windows.Threading.DispatcherOperation>object dat wordt geretourneerd door <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>kan worden gebruikt op verschillende manieren om te communiceren met de opgegeven gemachtigde, zoals: - veranderende de <xref:System.Windows.Threading.DispatcherPriority>van de gemachtigde omdat de in behandeling kan worden uitgevoerd in de gebeurtenis in de wachtrij.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.DispatcherOperation>      -De gemachtigde verwijderen uit de wachtrij.      -Er wordt gewacht tot de gemachtigde om terug te keren.      -Verkrijgen van de waarde die de gemachtigde nadat deze retourneert is uitgevoerd.       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon; Daarom retourneert besturingselement onmiddellijk aan het object aanroepen nadat deze is aangeroepen.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], alleen de thread die gemaakt een <xref:System.Windows.Threading.DispatcherObject>mogelijk toegang tot dit object.</xref:System.Windows.Threading.DispatcherObject>  Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gemaakt op de UI-thread.</xref:System.Windows.Controls.Button>  Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het <xref:System.Windows.Controls.Button>, de achtergrondthread moet het werk te delegeren de <xref:System.Windows.Threading.Dispatcher>die zijn gekoppeld aan de UI-thread.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Controls.Button>  Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>  De bewerking wordt toegevoegd aan de wachtrij van het <xref:System.Windows.Threading.Dispatcher>op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher>       Als er meerdere <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>worden aangeroepen op dezelfde <xref:System.Windows.Threading.DispatcherPriority>, deze worden uitgevoerd in de volgorde waarin de aanroepen zijn aangebracht.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       Als <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>voor een <xref:System.Windows.Threading.Dispatcher>die is afgesloten, de statuseigenschap van de geretourneerde <xref:System.Windows.Threading.DispatcherOperation>is ingesteld op <xref:System.Windows.Threading.DispatcherOperationStatus>.</xref:System.Windows.Threading.DispatcherOperationStatus> </xref:System.Windows.Threading.DispatcherOperation> </xref:System.Windows.Threading.Dispatcher> wordt aangeroepen</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>"
  example:
  - "The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.  \n  \n First, a delegate is created that accepts one argument, in this case a string.  \n  \n [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/add/codesnippet/visualbasic/threadingweatherforecastsample/window1.xaml.vb#threadingweatherdelegates)]\n [!code-cs[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/add/codesnippet/csharp/ThreadingWeatherForecastSample/Window1.xaml.cs#threadingweatherdelegates)]  \n  \n Next, BeginInvoke is called.  Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`. The call to BeginInvoke takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.  \n  \n [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/add/codesnippet/visualbasic/threadingweatherforecastsample/window1.xaml.vb#threadingweatherdispatcheronearge)]\n [!code-cs[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/add/codesnippet/csharp/ThreadingWeatherForecastSample/Window1.xaml.cs#threadingweatherdispatcheronearge)]"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij, de opgegeven methode wordt aangeroepen."
    - id: method
      type: System.Delegate
      description: "Een gemachtigde van een methode die één argument is naar wordt doorgeschoven, de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
    - id: arg
      type: System.Object
      description: "Het object dat moet worden doorgegeven als argument aan de opgegeven methode."
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "Een object dat wordt geretourneerd onmiddellijk na de <xref:System.Windows.Threading.Dispatcher.BeginInvoke*>wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde omdat deze in behandeling kan worden uitgevoerd in de gebeurtenisstroom wachtrij.</xref:System.Windows.Threading.Dispatcher.BeginInvoke*>"
  overload: System.Windows.Threading.Dispatcher.BeginInvoke*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>is geen geldige <xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  id: BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: BeginInvoke(DispatcherPriority,Delegate,Object,Object[])
  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object,Object[])
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "De opgegeven gemachtigde asynchroon op de opgegeven prioriteit en met de opgegeven matrix van argumenten op de thread wordt uitgevoerd de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld."
  remarks: "De `arg` parameter is `null` als er geen argumenten nodig zijn.       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>retourneert een <xref:System.Windows.Threading.DispatcherOperation>-object dat kan worden gebruikt om te communiceren met de gemachtigde wanneer de gemachtigde in de gebeurtenisstroom wachtrij is.</xref:System.Windows.Threading.DispatcherOperation></xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       De <xref:System.Windows.Threading.DispatcherOperation>object dat wordt geretourneerd door <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>kan worden gebruikt op verschillende manieren om te communiceren met de opgegeven gemachtigde, zoals: - veranderende de <xref:System.Windows.Threading.DispatcherPriority>van de gemachtigde omdat de in behandeling kan worden uitgevoerd in de gebeurtenis in de wachtrij.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.DispatcherOperation>      -De gemachtigde verwijderen uit de wachtrij.      -Er wordt gewacht tot de gemachtigde om terug te keren.      -Verkrijgen van de waarde die de gemachtigde nadat deze retourneert is uitgevoerd.       <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon; Daarom retourneert besturingselement onmiddellijk aan het object aanroepen nadat deze is aangeroepen.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], alleen de thread die gemaakt een <xref:System.Windows.Threading.DispatcherObject>mogelijk toegang tot dit object.</xref:System.Windows.Threading.DispatcherObject>  Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gemaakt op de UI-thread.</xref:System.Windows.Controls.Button>  Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het <xref:System.Windows.Controls.Button>, de achtergrondthread moet het werk te delegeren de <xref:System.Windows.Threading.Dispatcher>die zijn gekoppeld aan de UI-thread.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Controls.Button>  Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>  De bewerking wordt toegevoegd aan de wachtrij van het <xref:System.Windows.Threading.Dispatcher>op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher>       Als er meerdere <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>worden aangeroepen op dezelfde <xref:System.Windows.Threading.DispatcherPriority>, deze worden uitgevoerd in de volgorde waarin de aanroepen zijn aangebracht.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>       Als <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>voor een <xref:System.Windows.Threading.Dispatcher>die is afgesloten, de statuseigenschap van de geretourneerde <xref:System.Windows.Threading.DispatcherOperation>is ingesteld op <xref:System.Windows.Threading.DispatcherOperationStatus>.</xref:System.Windows.Threading.DispatcherOperationStatus> </xref:System.Windows.Threading.DispatcherOperation> </xref:System.Windows.Threading.Dispatcher> wordt aangeroepen</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, object[] args);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij, de opgegeven methode wordt aangeroepen."
    - id: method
      type: System.Delegate
      description: "Een gemachtigde aan een methode die meerdere argumenten aanneemt, die naar doorgeschoven, is de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
    - id: arg
      type: System.Object
      description: "Het object dat moet worden doorgegeven als argument aan de opgegeven methode."
    - id: args
      type: System.Object[]
      description: "Een matrix met objecten op te geven als argumenten aan de opgegeven methode."
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "Een object dat wordt geretourneerd onmiddellijk na de <xref:System.Windows.Threading.Dispatcher.BeginInvoke*>wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde is zolang uitvoering in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij.</xref:System.Windows.Threading.Dispatcher.BeginInvoke*>"
  overload: System.Windows.Threading.Dispatcher.BeginInvoke*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;></xref>is niet een geldig prioriteit."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)
  id: BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: BeginInvokeShutdown(DispatcherPriority)
  nameWithType: Dispatcher.BeginInvokeShutdown(DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.BeginInvokeShutdown(DispatcherPriority)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Initieert afsluiten van de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> asynchroon."
  remarks: "BeginInvokeShutdown demands onbeperkte machtigingen van de gebruikersinterface.       Wanneer de <xref:System.Windows.Threading.Dispatcher>afgesloten, start de <xref:System.Windows.Threading.Dispatcher.ShutdownStarted>gebeurtenis is opgetreden en <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>is ingesteld op `true`.</xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> </xref:System.Windows.Threading.Dispatcher.ShutdownStarted> </xref:System.Windows.Threading.Dispatcher>       De <xref:System.Windows.Threading.Dispatcher>wordt niet afgesloten volledig totdat de wachtrij wordt afgewikkeld.</xref:System.Windows.Threading.Dispatcher>       Wanneer de Dispatcher klaar is met afsluiten, de <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>gebeurtenis is opgetreden en de <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>eigenschap is ingesteld op `true`.</xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> </xref:System.Windows.Threading.Dispatcher.ShutdownFinished>       Zodra de computer wordt gestart, alle in behandeling work worden items in de wachtrij afgebroken."
  syntax:
    content: public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit waarop u wilt beginnen met de dispatcher afgesloten."
  overload: System.Windows.Threading.Dispatcher.BeginInvokeShutdown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.CheckAccess
  id: CheckAccess
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: CheckAccess()
  nameWithType: Dispatcher.CheckAccess()
  fullName: System.Windows.Threading.Dispatcher.CheckAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Hiermee wordt bepaald of de aanroepende thread de thread die is gekoppeld aan dit <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
  remarks: "Alleen de <xref:System.Windows.Threading.Dispatcher>die een <xref:System.Windows.Threading.DispatcherObject>wordt gemaakt op mogelijk toegang tot het object.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.Dispatcher>  Gebruik <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>voor toegang tot het object van een andere thread.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>       CheckAccess kan worden aangeroepen vanuit een willekeurige thread.       Het verschil tussen CheckAccess en <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>is CheckAccess retourneert een Booleaanse waarde die aangeeft of de aanroepende thread toegang tot heeft de <xref:System.Windows.Threading.Dispatcher>en <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>er een uitzondering gegenereerd.</xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> </xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A>"
  example:
  - "The following example uses CheckAccess to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.  The CheckAccess method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.  If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.  The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.  \n  \n [!code-cs[DispatcherAccessSample#DispatcherAccessCheckAccess](~/add/codesnippet/csharp/DispatcherAccessSample/Window1.xaml.cs#dispatcheraccesscheckaccess)]\n [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/add/codesnippet/visualbasic/dispatcheraccesssample/window1.xaml.vb#dispatcheraccesscheckaccess)]"
  syntax:
    content: public bool CheckAccess ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de aanroepende thread de thread die is gekoppeld aan dit is <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Threading.Dispatcher.CheckAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.CurrentDispatcher
  id: CurrentDispatcher
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: CurrentDispatcher
  nameWithType: Dispatcher.CurrentDispatcher
  fullName: System.Windows.Threading.Dispatcher.CurrentDispatcher
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Haalt de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> voor de thread dat momenteel wordt uitgevoerd en maakt u een nieuwe <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> als deze nog niet gekoppeld aan de thread is."
  remarks: "Als een <xref:System.Windows.Threading.Dispatcher>is niet gekoppeld aan de huidige thread, een nieuwe <xref:System.Windows.Threading.Dispatcher>wordt gemaakt.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher>  Dit is niet het geval is bij de <xref:System.Windows.Threading.Dispatcher.FromThread%2A>methode.</xref:System.Windows.Threading.Dispatcher.FromThread%2A>  <xref:System.Windows.Threading.Dispatcher.FromThread%2A>retourneert `null` er is niet als een dispatcher die zijn gekoppeld aan de opgegeven thread.</xref:System.Windows.Threading.Dispatcher.FromThread%2A>"
  syntax:
    content: public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }
    return:
      type: System.Windows.Threading.Dispatcher
      description: "De dispatcher die zijn gekoppeld aan de huidige thread."
  overload: System.Windows.Threading.Dispatcher.CurrentDispatcher*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.DisableProcessing
  id: DisableProcessing
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: DisableProcessing()
  nameWithType: Dispatcher.DisableProcessing()
  fullName: System.Windows.Threading.Dispatcher.DisableProcessing()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Schakelt verwerking van de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
  remarks: "Uitschakelen dispatcherverwerking is een geavanceerde methode die is bedoeld om de kans op niet-verwante herintreding weg te nemen.       De effecten van het uitschakelen van verwerking als volgt zijn:- [!INCLUDE[TLA2#tla_clr#initcap](~/add/includes/tla2sharptla-clrsharpinitcap-md.md)] vergrendelingen wordt berichten niet intern pomp.      - <xref:System.Windows.Threading.DispatcherFrame>objecten mogen niet worden gepusht.</xref:System.Windows.Threading.DispatcherFrame>      -Berichtverwerking is niet toegestaan.       De <xref:System.Windows.Threading.DispatcherProcessingDisabled>-structuur die DisableProcessing als resultaat gegeven wanneer deze wordt aangeroepen, kan worden gebruikt voor de dispatcherverwerking opnieuw in te schakelen.</xref:System.Windows.Threading.DispatcherProcessingDisabled>  Het aanroepen van <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A>op de <xref:System.Windows.Threading.DispatcherProcessingDisabled>schakelt verwerking van de structuur.</xref:System.Windows.Threading.DispatcherProcessingDisabled> </xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A>       DisableProcessing kan alleen worden aangeroepen in de thread de <xref:System.Windows.Threading.Dispatcher>is gekoppeld.</xref:System.Windows.Threading.Dispatcher>"
  example:
  - "The following example shows how to disable dispatcher processing and re-enable dispatcher processing.  DisableProcessing is called in a **using** statement.  DisableProcessing returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.  When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.  \n  \n [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/add/codesnippet/visualbasic/dispatchersnippets/window1.xaml.vb#dispatcherdisableprocessing)]\n [!code-cs[DispatcherSnippets#DispatcherDisableProcessing](~/add/codesnippet/csharp/DispatcherSnippets/Window1.xaml.cs#dispatcherdisableprocessing)]"
  syntax:
    content: public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();
    parameters: []
    return:
      type: System.Windows.Threading.DispatcherProcessingDisabled
      description: "Een structuur die wordt gebruikt voor de dispatcherverwerking opnieuw in te schakelen."
  overload: System.Windows.Threading.Dispatcher.DisableProcessing*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.ExitAllFrames
  id: ExitAllFrames
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: ExitAllFrames()
  nameWithType: Dispatcher.ExitAllFrames()
  fullName: System.Windows.Threading.Dispatcher.ExitAllFrames()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Aanvragen die alle frames wordt afgesloten, met inbegrip van geneste frames."
  syntax:
    content: public static void ExitAllFrames ();
    parameters: []
  overload: System.Windows.Threading.Dispatcher.ExitAllFrames*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)
  id: FromThread(System.Threading.Thread)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: FromThread(Thread)
  nameWithType: Dispatcher.FromThread(Thread)
  fullName: System.Windows.Threading.Dispatcher.FromThread(Thread)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Haalt de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> voor de opgegeven thread."
  remarks: "Als een dispatcher niet beschikbaar voor de opgegeven thread is `null` wordt geretourneerd.       FromThread maakt geen een <xref:System.Windows.Threading.Dispatcher>op een thread die geen een <xref:System.Windows.Threading.Dispatcher>.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher>   Een nieuwe <xref:System.Windows.Threading.Dispatcher>wordt gemaakt op een thread die nog niet heeft een <xref:System.Windows.Threading.Dispatcher>bij het ophalen van de <xref:System.Windows.Threading.Dispatcher>met behulp van de <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A>eigenschap.</xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> </xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher>"
  syntax:
    content: public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);
    parameters:
    - id: thread
      type: System.Threading.Thread
      description: "De thread voor de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> uit."
    return:
      type: System.Windows.Threading.Dispatcher
      description: "De dispatcher voor <code> thread </code>."
  overload: System.Windows.Threading.Dispatcher.FromThread*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.HasShutdownFinished
  id: HasShutdownFinished
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: HasShutdownFinished
  nameWithType: Dispatcher.HasShutdownFinished
  fullName: System.Windows.Threading.Dispatcher.HasShutdownFinished
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Hiermee wordt bepaald of de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> afsluiten is voltooid."
  remarks: "Wanneer de <xref:System.Windows.Threading.Dispatcher>afgesloten, start de <xref:System.Windows.Threading.Dispatcher.ShutdownStarted>gebeurtenis is opgetreden en <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>is ingesteld op `true`.</xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> </xref:System.Windows.Threading.Dispatcher.ShutdownStarted> </xref:System.Windows.Threading.Dispatcher>       De <xref:System.Windows.Threading.Dispatcher>niet afsluiten volledig totdat de wachtrij wordt afgewikkeld.</xref:System.Windows.Threading.Dispatcher>       Wanneer de Dispatcher klaar is met afsluiten, de <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>gebeurtenis is opgetreden en de eigenschap HasShutdownFinished is ingesteld op `true`.</xref:System.Windows.Threading.Dispatcher.ShutdownFinished>       Zodra de computer wordt gestart, alle in behandeling work worden items in de wachtrij afgebroken."
  syntax:
    content: public bool HasShutdownFinished { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de dispatcher is voltooid met afgesloten; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Threading.Dispatcher.HasShutdownFinished*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.HasShutdownStarted
  id: HasShutdownStarted
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: HasShutdownStarted
  nameWithType: Dispatcher.HasShutdownStarted
  fullName: System.Windows.Threading.Dispatcher.HasShutdownStarted
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Hiermee wordt bepaald of de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wordt afgesloten."
  remarks: "Wanneer de <xref:System.Windows.Threading.Dispatcher>afgesloten, start de <xref:System.Windows.Threading.Dispatcher.ShutdownStarted>gebeurtenis is opgetreden en HasShutdownStarted is ingesteld op `true`.</xref:System.Windows.Threading.Dispatcher.ShutdownStarted> </xref:System.Windows.Threading.Dispatcher>       De <xref:System.Windows.Threading.Dispatcher>wordt niet afgesloten volledig totdat de wachtrij wordt afgewikkeld.</xref:System.Windows.Threading.Dispatcher>       Wanneer de Dispatcher klaar is met afsluiten, de <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>gebeurtenis is opgetreden en de <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>eigenschap is ingesteld op `true`.</xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> </xref:System.Windows.Threading.Dispatcher.ShutdownFinished>       Zodra de computer wordt gestart, alle in behandeling work worden items in de wachtrij afgebroken."
  syntax:
    content: public bool HasShutdownStarted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> afgesloten omlaag; anders is gestart <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Threading.Dispatcher.HasShutdownStarted*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Hooks
  id: Hooks
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Hooks
  nameWithType: Dispatcher.Hooks
  fullName: System.Windows.Threading.Dispatcher.Hooks
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Hiermee wordt de verzameling hooks die aanvullende gebeurtenisinformatie geven over de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
  remarks: "De <xref:System.Windows.Threading.DispatcherHooks>klasse biedt informatie over aanvullende gebeurtenissen over de <xref:System.Windows.Threading.Dispatcher>, bijvoorbeeld wanneer de <xref:System.Windows.Threading.Dispatcher>is niet actief of wanneer een bewerking is voltooid.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.DispatcherHooks>"
  syntax:
    content: public System.Windows.Threading.DispatcherHooks Hooks { get; }
    return:
      type: System.Windows.Threading.DispatcherHooks
      description: "De hooks die zijn gekoppeld aan dit <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
  overload: System.Windows.Threading.Dispatcher.Hooks*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action)
  id: Invoke(System.Action)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Action)
  nameWithType: Dispatcher.Invoke(Action)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Voert de opgegeven <xref:System.Action>synchroon in de thread de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld.</xref:System.Action>"
  syntax:
    content: public void Invoke (Action callback);
    parameters:
    - id: callback
      type: System.Action
      description: "Een gemachtigde aan te roepen via de dispatcher."
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)
  id: Invoke(System.Action,System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Action,DispatcherPriority)
  nameWithType: Dispatcher.Invoke(Action,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action,DispatcherPriority)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Voert de opgegeven <xref:System.Action>synchroon met de opgegeven prioriteit in de thread de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld.</xref:System.Action>"
  syntax:
    content: public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);
    parameters:
    - id: callback
      type: System.Action
      description: "Een gemachtigde aan te roepen via de dispatcher."
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit die bepaalt in welke volgorde de opgegeven retouraanroep wordt opgeroepen ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])
  id: Invoke(System.Delegate,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Delegate,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "De opgegeven gemachtigde met de opgegeven argumenten synchroon wordt uitgevoerd op de thread de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld."
  remarks: "In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], alleen de thread die gemaakt een <xref:System.Windows.Threading.DispatcherObject>mogelijk toegang tot dit object.</xref:System.Windows.Threading.DispatcherObject> Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gemaakt op de UI-thread.</xref:System.Windows.Controls.Button> Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het <xref:System.Windows.Controls.Button>, de achtergrondthread moet het werk te delegeren de <xref:System.Windows.Threading.Dispatcher>die zijn gekoppeld aan de UI-thread.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Controls.Button> Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A> De bewerking wordt toegevoegd aan de wachtrij van het <xref:System.Windows.Threading.Dispatcher>op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher>       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (Delegate method, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "Een gemachtigde van een methode die parameters die zijn opgegeven `args`, die naar doorgeschoven, is de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
    - id: args
      type: System.Object[]
      description: "Een matrix met objecten op te geven als argumenten aan de opgegeven methode. Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Object
      description: "De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als de gemachtigde geen retourwaarde heeft."
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  id: Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(DispatcherPriority,Delegate)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,Delegate)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Hiermee voert u de opgegeven gemachtigde synchroon met de opgegeven prioriteit op de thread waarop het <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld."
  remarks: "In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], alleen de thread die gemaakt een <xref:System.Windows.Threading.DispatcherObject>mogelijk toegang tot dit object.</xref:System.Windows.Threading.DispatcherObject>  Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gemaakt op de UI-thread.</xref:System.Windows.Controls.Button>  Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het <xref:System.Windows.Controls.Button>, de achtergrondthread moet het werk te delegeren de <xref:System.Windows.Threading.Dispatcher>die zijn gekoppeld aan de UI-thread.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Controls.Button>  Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>  De bewerking wordt toegevoegd aan de wachtrij van het <xref:System.Windows.Threading.Dispatcher>op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher>       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  example:
  - "The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority> using Invoke.  \n  \n [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/add/codesnippet/visualbasic/invalidaterequerywithsystemtimer/window1.xaml.vb#systemtimerdispatcherinvoke)]\n [!code-cs[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/add/codesnippet/csharp/InvalidateRequeryWithSystemTimer/Window1.xaml.cs#systemtimerdispatcherinvoke)]"
  syntax:
    content: public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij, de opgegeven methode wordt aangeroepen."
    - id: method
      type: System.Delegate
      description: "Een gemachtigde aan een methode die geen argumenten aanneemt, die naar doorgeschoven, is de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
    return:
      type: System.Object
      description: "De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als de gemachtigde geen retourwaarde heeft."
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>priority</code>is gelijk aan <xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;> </xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>is niet een geldig prioriteit."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  id: Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Action,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Voert de opgegeven <xref:System.Action>synchroon met de opgegeven prioriteit in de thread de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld.</xref:System.Action>"
  syntax:
    content: public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: callback
      type: System.Action
      description: "Een gemachtigde aan te roepen via de dispatcher."
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit die bepaalt in welke volgorde de opgegeven retouraanroep wordt opgeroepen ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Een object dat Hiermee wordt aangegeven of de bewerking geannuleerd."
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])
  id: Invoke(System.Delegate,System.TimeSpan,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Delegate,TimeSpan,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,TimeSpan,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,TimeSpan,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "De opgegeven gemachtigde binnen de toegewezen tijdsduur op de opgegeven prioriteit met de opgegeven argumenten synchroon wordt uitgevoerd op de thread de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld."
  remarks: "In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], alleen de thread die gemaakt een <xref:System.Windows.Threading.DispatcherObject>mogelijk toegang tot dit object.</xref:System.Windows.Threading.DispatcherObject> Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gemaakt op de UI-thread.</xref:System.Windows.Controls.Button> Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het <xref:System.Windows.Controls.Button>, de achtergrondthread moet het werk te delegeren de <xref:System.Windows.Threading.Dispatcher>die zijn gekoppeld aan de UI-thread.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Controls.Button> Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A> De bewerking wordt toegevoegd aan de wachtrij van het <xref:System.Windows.Threading.Dispatcher>op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher>       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (Delegate method, TimeSpan timeout, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "Een gemachtigde van een methode die parameters die zijn opgegeven `args`, die naar doorgeschoven, is de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
    - id: timeout
      type: System.TimeSpan
      description: "De maximale hoeveelheid tijd wachten totdat de bewerking is voltooid."
    - id: args
      type: System.Object[]
      description: "Een matrix met objecten op te geven als argumenten aan de opgegeven methode. Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Object
      description: "De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als de gemachtigde geen retourwaarde heeft."
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  id: Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Delegate,DispatcherPriority,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,DispatcherPriority,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,DispatcherPriority,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "De opgegeven gemachtigde met de opgegeven prioriteit met de opgegeven argumenten synchroon wordt uitgevoerd op de thread de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld."
  remarks: "In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], alleen de thread die gemaakt een <xref:System.Windows.Threading.DispatcherObject>mogelijk toegang tot dit object.</xref:System.Windows.Threading.DispatcherObject> Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gemaakt op de UI-thread.</xref:System.Windows.Controls.Button> Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het <xref:System.Windows.Controls.Button>, de achtergrondthread moet het werk te delegeren de <xref:System.Windows.Threading.Dispatcher>die zijn gekoppeld aan de UI-thread.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Controls.Button> Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A> De bewerking wordt toegevoegd aan de wachtrij van het <xref:System.Windows.Threading.Dispatcher>op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher>       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "Een gemachtigde van een methode die parameters die zijn opgegeven `args`, die naar doorgeschoven, is de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij, de opgegeven methode wordt aangeroepen."
    - id: args
      type: System.Object[]
      description: "Een matrix met objecten op te geven als argumenten aan de opgegeven methode. Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Object
      description: "De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als de gemachtigde geen retourwaarde heeft."
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  id: Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(DispatcherPriority,Delegate,Object)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,Delegate,Object)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,Delegate,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "De opgegeven gemachtigde met de opgegeven prioriteit met het opgegeven argument synchroon wordt uitgevoerd op de thread de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld."
  remarks: "`Arg`kan `null` als een argument is niet nodig [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], alleen de thread die gemaakt een <xref:System.Windows.Threading.DispatcherObject>mogelijk toegang tot dit object.</xref:System.Windows.Threading.DispatcherObject>  Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gemaakt op de UI-thread.</xref:System.Windows.Controls.Button>  Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het <xref:System.Windows.Controls.Button>, de achtergrondthread moet het werk te delegeren de <xref:System.Windows.Threading.Dispatcher>die zijn gekoppeld aan de UI-thread.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Controls.Button>  Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>  De bewerking wordt toegevoegd aan de wachtrij van het <xref:System.Windows.Threading.Dispatcher>op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher>       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij, de opgegeven methode wordt aangeroepen."
    - id: method
      type: System.Delegate
      description: "Een gemachtigde van een methode die één argument is naar wordt doorgeschoven, de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
    - id: arg
      type: System.Object
      description: "Een object worden doorgegeven als argument aan de opgegeven methode."
    return:
      type: System.Object
      description: "De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als de gemachtigde geen retourwaarde heeft."
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>priority</code>is gelijk aan <xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;> </xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>is niet een geldig prioriteit."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)
  id: Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(DispatcherPriority,TimeSpan,Delegate)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "De opgegeven gemachtigde synchroon met de opgegeven prioriteit en met de opgegeven time-outwaarde op de thread wordt uitgevoerd de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gemaakt."
  remarks: "In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], alleen de thread die gemaakt een <xref:System.Windows.Threading.DispatcherObject>mogelijk toegang tot dit object.</xref:System.Windows.Threading.DispatcherObject>  Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gemaakt op de UI-thread.</xref:System.Windows.Controls.Button>  Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het <xref:System.Windows.Controls.Button>, de achtergrondthread moet het werk te delegeren de <xref:System.Windows.Threading.Dispatcher>die zijn gekoppeld aan de UI-thread.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Controls.Button>  Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>  De bewerking wordt toegevoegd aan de wachtrij van het <xref:System.Windows.Threading.Dispatcher>op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher>       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij, de opgegeven methode wordt aangeroepen."
    - id: timeout
      type: System.TimeSpan
      description: "De maximale tijd wacht u totdat de bewerking te voltooien."
    - id: method
      type: System.Delegate
      description: "De gemachtigde moet een methode die geen argumenten aanneemt, die naar doorgeschoven, is de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
    return:
      type: System.Object
      description: "De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als de gemachtigde geen retourwaarde heeft."
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  id: Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Action,DispatcherPriority,CancellationToken,TimeSpan)
  nameWithType: Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken,TimeSpan)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken,TimeSpan)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Voert de opgegeven <xref:System.Action>synchroon met de opgegeven prioriteit in de thread de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld.</xref:System.Action>"
  syntax:
    content: public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);
    parameters:
    - id: callback
      type: System.Action
      description: "Een gemachtigde aan te roepen via de dispatcher."
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit die bepaalt in welke volgorde de opgegeven retouraanroep wordt opgeroepen ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Een object dat Hiermee wordt aangegeven of de bewerking geannuleerd."
    - id: timeout
      type: System.TimeSpan
      description: "De minimale hoeveelheid wachttijd voor het opnieuw te starten."
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])
  id: Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Delegate,TimeSpan,DispatcherPriority,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,TimeSpan,DispatcherPriority,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,TimeSpan,DispatcherPriority,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "De opgegeven gemachtigde binnen de toegewezen tijdsduur op de opgegeven prioriteit met de opgegeven argumenten synchroon wordt uitgevoerd op de thread de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld."
  remarks: "In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], alleen de thread die gemaakt een <xref:System.Windows.Threading.DispatcherObject>mogelijk toegang tot dit object.</xref:System.Windows.Threading.DispatcherObject> Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gemaakt op de UI-thread.</xref:System.Windows.Controls.Button> Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het <xref:System.Windows.Controls.Button>, de achtergrondthread moet het werk te delegeren de <xref:System.Windows.Threading.Dispatcher>die zijn gekoppeld aan de UI-thread.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Controls.Button> Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A> <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A> De bewerking wordt toegevoegd aan de wachtrij van het <xref:System.Windows.Threading.Dispatcher>op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher>       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "Een gemachtigde van een methode die parameters die zijn opgegeven `args`, die naar doorgeschoven, is de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
    - id: timeout
      type: System.TimeSpan
      description: "De maximale hoeveelheid tijd wachten totdat de bewerking is voltooid."
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij, de opgegeven methode wordt aangeroepen."
    - id: args
      type: System.Object[]
      description: "Een matrix met objecten op te geven als argumenten aan de opgegeven methode. Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Object
      description: "De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als de gemachtigde geen retourwaarde heeft."
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  id: Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(DispatcherPriority,Delegate,Object,Object[])
  nameWithType: Dispatcher.Invoke(DispatcherPriority,Delegate,Object,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,Delegate,Object,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "De opgegeven gemachtigde met de opgegeven prioriteit met de opgegeven argumenten synchroon wordt uitgevoerd op de thread de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld."
  remarks: "`Arg`kan `null` als een argument is niet nodig [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], alleen de thread die gemaakt een <xref:System.Windows.Threading.DispatcherObject>mogelijk toegang tot dit object.</xref:System.Windows.Threading.DispatcherObject>  Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gemaakt op de UI-thread.</xref:System.Windows.Controls.Button>  Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het <xref:System.Windows.Controls.Button>, de achtergrondthread moet het werk te delegeren de <xref:System.Windows.Threading.Dispatcher>die zijn gekoppeld aan de UI-thread.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Controls.Button>  Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>  De bewerking wordt toegevoegd aan de wachtrij van het <xref:System.Windows.Threading.Dispatcher>op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher>       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, object[] args);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij, de opgegeven methode wordt aangeroepen."
    - id: method
      type: System.Delegate
      description: "Een gemachtigde aan een methode die meerdere argumenten aanneemt, die naar doorgeschoven, is de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
    - id: arg
      type: System.Object
      description: "Een object worden doorgegeven als argument aan de opgegeven methode."
    - id: args
      type: System.Object[]
      description: "Een matrix met objecten op te geven als argumenten aan de opgegeven methode."
    return:
      type: System.Object
      description: "De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als de gemachtigde geen retourwaarde heeft."
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>priority</code>is gelijk aan <xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;> </xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>is niet een geldig prioriteit."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)
  id: Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(DispatcherPriority,TimeSpan,Delegate,Object)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "De opgegeven gemachtigde met de opgegeven prioriteit met het opgegeven argument synchroon wordt uitgevoerd op de thread de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld."
  remarks: "`Arg`kan `null` als een argument is niet nodig [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], alleen de thread die gemaakt een <xref:System.Windows.Threading.DispatcherObject>mogelijk toegang tot dit object.</xref:System.Windows.Threading.DispatcherObject>  Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gemaakt op de UI-thread.</xref:System.Windows.Controls.Button>  Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het <xref:System.Windows.Controls.Button>, de achtergrondthread moet het werk te delegeren de <xref:System.Windows.Threading.Dispatcher>die zijn gekoppeld aan de UI-thread.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Controls.Button>  Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>  De bewerking wordt toegevoegd aan de wachtrij van het <xref:System.Windows.Threading.Dispatcher>op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher>       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij, de opgegeven methode wordt aangeroepen."
    - id: timeout
      type: System.TimeSpan
      description: "De maximale tijd wacht u totdat de bewerking te voltooien."
    - id: method
      type: System.Delegate
      description: "Een gemachtigde aan een methode die meerdere argumenten aanneemt, die naar doorgeschoven, is de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
    - id: arg
      type: System.Object
      description: "Een object worden doorgegeven als argument aan de opgegeven methode. Dit kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als er geen argumenten nodig zijn."
    return:
      type: System.Object
      description: "De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als de gemachtigde geen retourwaarde heeft."
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>priority</code>is gelijk aan <xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;> </xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>is niet een geldig prioriteit."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])
  id: Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(DispatcherPriority,TimeSpan,Delegate,Object,Object[])
  nameWithType: Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object,Object[])
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "De opgegeven gemachtigde met de opgegeven prioriteit met de opgegeven argumenten synchroon wordt uitgevoerd op de thread de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld."
  remarks: "`Arg`kan `null` als een argument is niet nodig.       In [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)], alleen de thread die gemaakt een <xref:System.Windows.Threading.DispatcherObject>mogelijk toegang tot dit object.</xref:System.Windows.Threading.DispatcherObject>  Bijvoorbeeld in een achtergrondthread die wordt ingezet uitschakelen van de belangrijkste UI-thread kan niet worden bijgewerkt met de inhoud van een <xref:System.Windows.Controls.Button>die is gemaakt op de UI-thread.</xref:System.Windows.Controls.Button>  Opdat de achtergrondthread voor toegang tot de inhoudseigenschap van het <xref:System.Windows.Controls.Button>, de achtergrondthread moet het werk te delegeren de <xref:System.Windows.Threading.Dispatcher>die zijn gekoppeld aan de UI-thread.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Controls.Button>  Dit kan worden bereikt via <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>  <xref:System.Windows.Threading.Dispatcher.Invoke%2A>synchroon is en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is asynchroon.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A></xref:System.Windows.Threading.Dispatcher.Invoke%2A>  De bewerking wordt toegevoegd aan de wachtrij van het <xref:System.Windows.Threading.Dispatcher>op de opgegeven <xref:System.Windows.Threading.DispatcherPriority>.</xref:System.Windows.Threading.DispatcherPriority> </xref:System.Windows.Threading.Dispatcher>       <xref:System.Windows.Threading.Dispatcher.Invoke%2A>is een synchrone bewerking; Daarom wordt pas weer voor de aanroepend object pas nadat de callback retourneert.</xref:System.Windows.Threading.Dispatcher.Invoke%2A>"
  syntax:
    content: public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, object[] args);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit, ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij, de opgegeven methode wordt aangeroepen."
    - id: timeout
      type: System.TimeSpan
      description: "De maximale tijd wacht u totdat de bewerking te voltooien."
    - id: method
      type: System.Delegate
      description: "Een gemachtigde aan een methode die meerdere argumenten aanneemt, die naar doorgeschoven, is de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> wachtrij."
    - id: arg
      type: System.Object
      description: "Een object moeten worden doorgegeven als argument aan de opgegeven methode."
    - id: args
      type: System.Object[]
      description: "Een matrix met objecten op te geven als argumenten aan de opgegeven methode."
    return:
      type: System.Object
      description: "De geretourneerde waarde van de gemachtigde die wordt aangeroepen of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als de gemachtigde geen retourwaarde heeft."
  overload: System.Windows.Threading.Dispatcher.Invoke*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>priority</code>is gelijk aan <xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;> </xref>."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>is geen geldige <xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>method</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})
  id: Invoke``1(System.Func{``0})
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Func<TResult>)
  nameWithType: Dispatcher.Invoke(Func<TResult>)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  syntax:
    content: public TResult Invoke<TResult> (Func<TResult> callback);
    parameters:
    - id: callback
      type: System.Func{TResult}
      description: "Moet worden toegevoegd."
    return:
      type: TResult
      description: "Moet worden toegevoegd."
  overload: System.Windows.Threading.Dispatcher.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  id: Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Func<TResult>,DispatcherPriority)
  nameWithType: Dispatcher.Invoke(Func<TResult>,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>,DispatcherPriority)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  syntax:
    content: public TResult Invoke<TResult> (Func<TResult> callback, System.Windows.Threading.DispatcherPriority priority);
    parameters:
    - id: callback
      type: System.Func{TResult}
      description: "Moet worden toegevoegd."
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "Moet worden toegevoegd."
    return:
      type: TResult
      description: "Moet worden toegevoegd."
  overload: System.Windows.Threading.Dispatcher.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  id: Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Func<TResult>,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  syntax:
    content: public TResult Invoke<TResult> (Func<TResult> callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: callback
      type: System.Func{TResult}
      description: "Moet worden toegevoegd."
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "Moet worden toegevoegd."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Moet worden toegevoegd."
    return:
      type: TResult
      description: "Moet worden toegevoegd."
  overload: System.Windows.Threading.Dispatcher.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  id: Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Invoke(Func<TResult>,DispatcherPriority,CancellationToken,TimeSpan)
  nameWithType: Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken,TimeSpan)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken,TimeSpan)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  syntax:
    content: public TResult Invoke<TResult> (Func<TResult> callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);
    parameters:
    - id: callback
      type: System.Func{TResult}
      description: "Moet worden toegevoegd."
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "Moet worden toegevoegd."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Moet worden toegevoegd."
    - id: timeout
      type: System.TimeSpan
      description: "Moet worden toegevoegd."
    return:
      type: TResult
      description: "Moet worden toegevoegd."
  overload: System.Windows.Threading.Dispatcher.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)
  id: InvokeAsync(System.Action)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: InvokeAsync(Action)
  nameWithType: Dispatcher.InvokeAsync(Action)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Action)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Voert de opgegeven <xref:System.Action>asynchroon op thread de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld.</xref:System.Action>"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);
    parameters:
    - id: callback
      type: System.Action
      description: "Een gemachtigde aan te roepen via de dispatcher."
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "Een object dat wordt geretourneerd onmiddellijk nadat InvokeAsync wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde omdat deze in behandeling kan worden uitgevoerd in de gebeurtenisstroom wachtrij."
  overload: System.Windows.Threading.Dispatcher.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)
  id: InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: InvokeAsync(Action,DispatcherPriority)
  nameWithType: Dispatcher.InvokeAsync(Action,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Action,DispatcherPriority)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Voert de opgegeven <xref:System.Action>asynchroon op de opgegeven prioriteit in de thread de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld.</xref:System.Action>"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);
    parameters:
    - id: callback
      type: System.Action
      description: "Een gemachtigde aan te roepen via de dispatcher."
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit die bepaalt in welke volgorde de opgegeven retouraanroep wordt opgeroepen ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "Een object dat wordt geretourneerd onmiddellijk nadat InvokeAsync wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde omdat deze in behandeling kan worden uitgevoerd in de gebeurtenisstroom wachtrij."
  overload: System.Windows.Threading.Dispatcher.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  id: InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: InvokeAsync(Action,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.InvokeAsync(Action,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Action,DispatcherPriority,CancellationToken)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Voert de opgegeven <xref:System.Action>asynchroon op de opgegeven prioriteit in de thread de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld.</xref:System.Action>"
  syntax:
    content: public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: callback
      type: System.Action
      description: "Een gemachtigde aan te roepen via de dispatcher."
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit die bepaalt in welke volgorde de opgegeven retouraanroep wordt opgeroepen ten opzichte van de andere in behandeling zijnde bewerkingen in de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Een object dat Hiermee wordt aangegeven of de bewerking geannuleerd."
    return:
      type: System.Windows.Threading.DispatcherOperation
      description: "Een object dat wordt geretourneerd onmiddellijk nadat InvokeAsync wordt genoemd, die kunnen worden gebruikt om te communiceren met de gemachtigde omdat deze in behandeling kan worden uitgevoerd in de gebeurtenisstroom wachtrij."
  overload: System.Windows.Threading.Dispatcher.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})
  id: InvokeAsync``1(System.Func{``0})
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: InvokeAsync(Func<TResult>)
  nameWithType: Dispatcher.InvokeAsync(Func<TResult>)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Func<TResult>)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  syntax:
    content: public System.Windows.Threading.DispatcherOperation<TResult> InvokeAsync<TResult> (Func<TResult> callback);
    parameters:
    - id: callback
      type: System.Func{TResult}
      description: "Moet worden toegevoegd."
    return:
      type: System.Windows.Threading.DispatcherOperation`1
      description: "Moet worden toegevoegd."
  overload: System.Windows.Threading.Dispatcher.InvokeAsync<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  id: InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: InvokeAsync(Func<TResult>,DispatcherPriority)
  nameWithType: Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  syntax:
    content: public System.Windows.Threading.DispatcherOperation<TResult> InvokeAsync<TResult> (Func<TResult> callback, System.Windows.Threading.DispatcherPriority priority);
    parameters:
    - id: callback
      type: System.Func{TResult}
      description: "Moet worden toegevoegd."
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "Moet worden toegevoegd."
    return:
      type: System.Windows.Threading.DispatcherOperation`1
      description: "Moet worden toegevoegd."
  overload: System.Windows.Threading.Dispatcher.InvokeAsync<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  id: InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: InvokeAsync(Func<TResult>,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority,CancellationToken)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  syntax:
    content: public System.Windows.Threading.DispatcherOperation<TResult> InvokeAsync<TResult> (Func<TResult> callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: callback
      type: System.Func{TResult}
      description: "Moet worden toegevoegd."
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "Moet worden toegevoegd."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "Moet worden toegevoegd."
    return:
      type: System.Windows.Threading.DispatcherOperation`1
      description: "Moet worden toegevoegd."
  overload: System.Windows.Threading.Dispatcher.InvokeAsync<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.InvokeShutdown
  id: InvokeShutdown
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: InvokeShutdown()
  nameWithType: Dispatcher.InvokeShutdown()
  fullName: System.Windows.Threading.Dispatcher.InvokeShutdown()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Start het afsluitproces van de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> synchroon."
  remarks: "InvokeShutdown demands onbeperkte machtigingen van de gebruikersinterface.       Wanneer de <xref:System.Windows.Threading.Dispatcher>afgesloten, start de <xref:System.Windows.Threading.Dispatcher.ShutdownStarted>gebeurtenis is opgetreden en <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>is ingesteld op `true`.</xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> </xref:System.Windows.Threading.Dispatcher.ShutdownStarted> </xref:System.Windows.Threading.Dispatcher>       De <xref:System.Windows.Threading.Dispatcher>wordt niet afgesloten volledig totdat de wachtrij wordt afgewikkeld.</xref:System.Windows.Threading.Dispatcher>       Wanneer de Dispatcher klaar is met afsluiten, de <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>gebeurtenis is opgetreden en de <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>eigenschap is ingesteld op `true`.</xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> </xref:System.Windows.Threading.Dispatcher.ShutdownFinished>       Zodra de computer wordt gestart, alle in behandeling work worden items in de wachtrij afgebroken."
  syntax:
    content: public void InvokeShutdown ();
    parameters: []
  overload: System.Windows.Threading.Dispatcher.InvokeShutdown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)
  id: PushFrame(System.Windows.Threading.DispatcherFrame)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: PushFrame(DispatcherFrame)
  nameWithType: Dispatcher.PushFrame(DispatcherFrame)
  fullName: System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Voert een lus uitvoeren."
  remarks: "Een <xref:System.Windows.Threading.DispatcherFrame>vertegenwoordigt een lus die in behandeling werkitems verwerkt.</xref:System.Windows.Threading.DispatcherFrame>       De Dispatcher verwerkt de wachtrij voor werkitems in een lus.  De lus wordt aangeduid als een frame.  De eerste lus wordt doorgaans door de toepassing gestart door het aanroepen van <xref:System.Windows.Threading.Dispatcher.Run%2A>.</xref:System.Windows.Threading.Dispatcher.Run%2A>       PushFrame krijgt een lus dat wordt vertegenwoordigd door de parameter `frame`.  Bij elke herhaling van de lus, de <xref:System.Windows.Threading.Dispatcher>controleert de <xref:System.Windows.Threading.DispatcherFrame.Continue%2A>-eigenschap op de <xref:System.Windows.Threading.DispatcherFrame>klasse om te bepalen of de lus blijven moet of als het moet worden gestopt.</xref:System.Windows.Threading.DispatcherFrame> </xref:System.Windows.Threading.DispatcherFrame.Continue%2A> </xref:System.Windows.Threading.Dispatcher>       <xref:System.Windows.Threading.DispatcherFrame>kunt u de <xref:System.Windows.Threading.DispatcherFrame.Continue%2A>eigenschap moet expliciet worden ingesteld en de <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>eigenschap op de <xref:System.Windows.Threading.Dispatcher>.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> respecteert</xref:System.Windows.Threading.DispatcherFrame.Continue%2A></xref:System.Windows.Threading.DispatcherFrame>  Dit betekent dat wanneer de <xref:System.Windows.Threading.Dispatcher>begint af te sluiten, frames die de standaard <xref:System.Windows.Threading.DispatcherFrame>implementatie wordt afgesloten, waardoor alle geneste frames om af te sluiten.</xref:System.Windows.Threading.DispatcherFrame> </xref:System.Windows.Threading.Dispatcher>"
  example:
  - "The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.  \n  \n [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/add/codesnippet/visualbasic/dispatchersnippets/window1.xaml.vb#dispatcherdispatcherframedoevents)]\n [!code-cs[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/add/codesnippet/csharp/DispatcherSnippets/Window1.xaml.cs#dispatcherdispatcherframedoevents)]"
  syntax:
    content: public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);
    parameters:
    - id: frame
      type: System.Windows.Threading.DispatcherFrame
      description: "Het frame voor de dispatcher worden verwerkt."
  overload: System.Windows.Threading.Dispatcher.PushFrame*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>frame</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*>is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>       -or-       <code>frame</code> is running on a different <xref href=&quot;System.Windows.Threading.Dispatcher&quot;></xref>.</xref:System.Windows.Threading.Dispatcher.HasShutdownFinished*>       - of - Dispatcher verwerking is uitgeschakeld."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Run
  id: Run
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Run()
  nameWithType: Dispatcher.Run()
  fullName: System.Windows.Threading.Dispatcher.Run()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Het belangrijkste uitvoering frame pushes in de wachtrij van de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
  remarks: "De <xref:System.Windows.Threading.Dispatcher>verwerkt de wachtrij in een lus.</xref:System.Windows.Threading.Dispatcher>  De lus wordt aangeduid als een frame.  De eerste lus wordt doorgaans door de toepassing gestart door het aanroepen van uitvoeren.       Het belangrijkste uitvoering frame blijft totdat de <xref:System.Windows.Threading.Dispatcher>wordt afgesloten.</xref:System.Windows.Threading.Dispatcher>"
  syntax:
    content: public static void Run ();
    parameters: []
  overload: System.Windows.Threading.Dispatcher.Run*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.ShutdownFinished
  id: ShutdownFinished
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: ShutdownFinished
  nameWithType: Dispatcher.ShutdownFinished
  fullName: System.Windows.Threading.Dispatcher.ShutdownFinished
  type: Event
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Deze gebeurtenis treedt op wanneer de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> klaar is met afsluiten."
  remarks: "Bij het afsluiten van een <xref:System.Windows.Threading.Dispatcher>wordt gestart, de <xref:System.Windows.Threading.Dispatcher.ShutdownStarted>gebeurtenis is opgetreden en <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>is ingesteld op `true`.</xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> </xref:System.Windows.Threading.Dispatcher.ShutdownStarted> </xref:System.Windows.Threading.Dispatcher>       De <xref:System.Windows.Threading.Dispatcher>niet afsluiten volledig totdat de wachtrij wordt afgewikkeld.</xref:System.Windows.Threading.Dispatcher>       Wanneer de Dispatcher afgesloten is, de ShutdownFinished-gebeurtenis wordt geactiveerd en de <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>eigenschap is ingesteld op `true`.</xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>       Zodra de computer wordt gestart, alle in behandeling work worden items in de wachtrij afgebroken."
  syntax:
    content: public event EventHandler ShutdownFinished;
    return:
      type: System.EventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.ShutdownStarted
  id: ShutdownStarted
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: ShutdownStarted
  nameWithType: Dispatcher.ShutdownStarted
  fullName: System.Windows.Threading.Dispatcher.ShutdownStarted
  type: Event
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Deze gebeurtenis treedt op wanneer de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> begint af te sluiten."
  remarks: "Bij het afsluiten van een <xref:System.Windows.Threading.Dispatcher>is gestart, wordt de ShutdownStarted-gebeurtenis geactiveerd en <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A>is ingesteld op `true`.</xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> </xref:System.Windows.Threading.Dispatcher>       De <xref:System.Windows.Threading.Dispatcher>niet afsluiten volledig totdat de wachtrij wordt afgewikkeld.</xref:System.Windows.Threading.Dispatcher>       Wanneer de Dispatcher klaar is met afsluiten, de <xref:System.Windows.Threading.Dispatcher.ShutdownFinished>gebeurtenis is opgetreden en de <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A>eigenschap is ingesteld op `true`.</xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> </xref:System.Windows.Threading.Dispatcher.ShutdownFinished>       Zodra de computer wordt gestart, alle in behandeling work worden items in de wachtrij afgebroken."
  syntax:
    content: public event EventHandler ShutdownStarted;
    return:
      type: System.EventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Thread
  id: Thread
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Thread
  nameWithType: Dispatcher.Thread
  fullName: System.Windows.Threading.Dispatcher.Thread
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "De thread wordt dit <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> is gekoppeld."
  syntax:
    content: public System.Threading.Thread Thread { get; }
    return:
      type: System.Threading.Thread
      description: "De thread."
  overload: System.Windows.Threading.Dispatcher.Thread*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.UnhandledException
  id: UnhandledException
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: UnhandledException
  nameWithType: Dispatcher.UnhandledException
  fullName: System.Windows.Threading.Dispatcher.UnhandledException
  type: Event
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Treedt op wanneer een thread-uitzondering veroorzaakt en tijdens het uitvoeren van een gemachtigde van onbekende <> </> *> of <> </> *>."
  remarks: "Deze gebeurtenis treedt op wanneer een uitzondering die is opgetreden tijdens het uitvoeren van een gemachtigde van <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>is niet-onderschepte.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>       Een handler kunt markeren de uitzondering als verwerkt, dit voorkomt dat de handler voor de interne uitzondering wordt aangeroepen.       Gebeurtenis-handlers voor deze gebeurtenis moeten worden geschreven zorgvuldig om te voorkomen dat secundaire uitzonderingen maken en om af te vangen eventuele die zich voordoen. Het verdient aanbeveling om te voorkomen dat het toewijzen van geheugen of rekenintensieve bewerkingen in de handler voor een resource doet.       De <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>gebeurtenis biedt een manier om niet afkomstig van de gebeurtenis UnhandledException.</xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>  De <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>gebeurtenis eerst is opgetreden en als <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A>op de <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs>is ingesteld op `false`, de gebeurtenis UnhandledException niet verschijnt.</xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> </xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> </xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter>"
  syntax:
    content: public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;
    return:
      type: System.Windows.Threading.DispatcherUnhandledExceptionEventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.UnhandledExceptionFilter
  id: UnhandledExceptionFilter
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: UnhandledExceptionFilter
  nameWithType: Dispatcher.UnhandledExceptionFilter
  fullName: System.Windows.Threading.Dispatcher.UnhandledExceptionFilter
  type: Event
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Treedt op wanneer een thread-uitzondering veroorzaakt en tijdens het uitvoeren van een gemachtigde van onbekende <> </> *> of <> </> *> wanneer in de fase van het filter."
  remarks: "Deze gebeurtenis is opgetreden tijdens de fase van het filter voor een uitzondering die is opgetreden tijdens de uitvoering van een gemachtigde van <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>en is niet-onderschepte.</xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>       Er is geen de aanroepstack afgewikkeld op dit punt (eerste kans uitzondering).       Gebeurtenis-handlers voor deze gebeurtenis moeten worden geschreven zorgvuldig om te voorkomen dat secundaire uitzonderingen maken en om af te vangen eventuele die zich voordoen.  Het verdient aanbeveling om te voorkomen dat het toewijzen van geheugen of rekenintensieve bewerkingen in de handler voor een resource doet.       De gebeurtenis UnhandledExceptionFilter biedt een manier om niet afkomstig van de <xref:System.Windows.Threading.Dispatcher.UnhandledException>gebeurtenis.</xref:System.Windows.Threading.Dispatcher.UnhandledException>  De gebeurtenis UnhandledExceptionFilter eerst wordt gegenereerd en als <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A>op de <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs>is ingesteld op `false`, wordt de <xref:System.Windows.Threading.Dispatcher.UnhandledException>gebeurtenis wordt niet worden verhoogd.</xref:System.Windows.Threading.Dispatcher.UnhandledException> </xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> </xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A>"
  syntax:
    content: public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;
    return:
      type: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)
  id: ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: ValidatePriority(DispatcherPriority,String)
  nameWithType: Dispatcher.ValidatePriority(DispatcherPriority,String)
  fullName: System.Windows.Threading.Dispatcher.ValidatePriority(DispatcherPriority,String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Hiermee wordt bepaald of de opgegeven <xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;> </xref> is een geldige prioriteit."
  syntax:
    content: public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit te controleren."
    - id: parameterName
      type: System.String
      description: "Een tekenreeks die wordt geretourneerd door de uitzondering die deze gebeurtenis treedt op als de prioriteit ongeldig is."
  overload: System.Windows.Threading.Dispatcher.ValidatePriority*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>priority</code>is geen geldige <xref href=&quot;System.Windows.Threading.DispatcherPriority&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.VerifyAccess
  id: VerifyAccess
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: VerifyAccess()
  nameWithType: Dispatcher.VerifyAccess()
  fullName: System.Windows.Threading.Dispatcher.VerifyAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Hiermee wordt bepaald of de aanroepende thread toegang tot dit <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
  remarks: "Alleen de thread de <xref:System.Windows.Threading.Dispatcher>wordt gemaakt op mogelijk toegang tot de <xref:System.Windows.Threading.Dispatcher>.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher>       Deze methode is openbare; Daarom kunt een willekeurige thread controleren of deze toegang tot de <xref:System.Windows.Threading.Dispatcher>.</xref:System.Windows.Threading.Dispatcher> heeft       Het verschil tussen <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>en VerifyAccess <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>retourneert een Booleaanse waarde als de aanroepende thread geen toegang tot heeft de <xref:System.Windows.Threading.Dispatcher>en VerifyAccess er een uitzondering gegenereerd.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> </xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>"
  example:
  - "The following example uses VerifyAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.  The VerifyAccess method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.  \n  \n If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.  \n  \n If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.  This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.  This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.  \n  \n [!code-cs[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/add/codesnippet/csharp/DispatcherAccessSample/Window1.xaml.cs#dispatcheraccessverifyaccess)]\n [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/add/codesnippet/visualbasic/dispatcheraccesssample/window1.xaml.vb#dispatcheraccessverifyaccess)]"
  syntax:
    content: public void VerifyAccess ();
    parameters: []
  overload: System.Windows.Threading.Dispatcher.VerifyAccess*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De aanroepende thread heeft geen toegang tot dit <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Yield
  id: Yield
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Yield()
  nameWithType: Dispatcher.Yield()
  fullName: System.Windows.Threading.Dispatcher.Yield()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Maakt een afgewacht object die asynchroon besturingselement levert terug naar de huidige dispatcher en biedt de mogelijkheid voor de dispatcher om andere gebeurtenissen te verwerken."
  remarks: "Deze methode biedt een manier om uitvoering beheer om de huidige dispatcher tijdelijk vrijgeven zodat deze andere taken, zoals andere gebeurtenissen verwerken kunt doen. Gebruik de `await`, of `Await` in Visual Basic kunt operator op de retourwaarde besturingselement terugkeren naar de huidige dispatcher. Gebruik deze methode als uw app geven een kans om gebeurtenissen te verwerken terwijl u de app veel werk op de UI-thread doet. Bijvoorbeeld, kunt u deze methode in een lus langlopende waarmee een besturingselement wordt bijgewerkt.       Deze methode is gelijk aan het aanroepen van de <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29>methode en doorgeven in <xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName>.</xref:System.Windows.Threading.DispatcherPriority?displayProperty=fullName> </xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29>"
  syntax:
    content: public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();
    parameters: []
    return:
      type: System.Windows.Threading.DispatcherPriorityAwaitable
      description: "Een object van het type afgewacht die asynchroon besturingselement levert terug naar de huidige dispatcher en biedt de mogelijkheid voor de dispatcher om andere gebeurtenissen te verwerken."
  overload: System.Windows.Threading.Dispatcher.Yield*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)
  id: Yield(System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  langs:
  - csharp
  name: Yield(DispatcherPriority)
  nameWithType: Dispatcher.Yield(DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.Yield(DispatcherPriority)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Maakt een afgewacht object die asynchroon besturingselement levert terug naar de huidige dispatcher en biedt de mogelijkheid voor de dispatcher om andere gebeurtenissen te verwerken.  Het werk dat deze gebeurtenis treedt op wanneer u keert terug naar de code in afwachting van het resultaat van deze methode is gepland met de opgegeven prioriteit."
  remarks: "Deze methode biedt een manier om uitvoering beheer om de huidige dispatcher tijdelijk vrijgeven zodat deze andere taken, zoals andere gebeurtenissen verwerken kunt doen. Gebruik de `await`, of `Await` in Visual Basic kunt operator op de retourwaarde besturingselement terugkeren naar de huidige dispatcher. Gebruik deze methode als uw app geven een kans om gebeurtenissen te verwerken terwijl u de app veel werk op de UI-thread doet. Bijvoorbeeld, kunt u deze methode in een lus langlopende waarmee een besturingselement wordt bijgewerkt."
  syntax:
    content: public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);
    parameters:
    - id: priority
      type: System.Windows.Threading.DispatcherPriority
      description: "De prioriteit waarmee de voortzetting plannen."
    return:
      type: System.Windows.Threading.DispatcherPriorityAwaitable
      description: "Een object van het type afgewacht die asynchroon besturingselement levert terug naar de huidige dispatcher en biedt de mogelijkheid voor de dispatcher om andere gebeurtenissen te verwerken."
  overload: System.Windows.Threading.Dispatcher.Yield*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvoke(Delegate,Object[])
  nameWithType: Dispatcher.BeginInvoke(Delegate,Object[])
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(Delegate,Object[])
- uid: System.Windows.Threading.DispatcherOperation
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherOperation
  nameWithType: DispatcherOperation
  fullName: System.Windows.Threading.DispatcherOperation
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvoke(DispatcherPriority,Delegate)
  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority,Delegate)
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(DispatcherPriority,Delegate)
- uid: System.Windows.Threading.DispatcherPriority
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherPriority
  nameWithType: DispatcherPriority
  fullName: System.Windows.Threading.DispatcherPriority
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvoke(Delegate,DispatcherPriority,Object[])
  nameWithType: Dispatcher.BeginInvoke(Delegate,DispatcherPriority,Object[])
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(Delegate,DispatcherPriority,Object[])
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvoke(DispatcherPriority,Delegate,Object)
  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object)
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object)
- uid: System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvoke(DispatcherPriority,Delegate,Object,Object[])
  nameWithType: Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object,Object[])
  fullName: System.Windows.Threading.Dispatcher.BeginInvoke(DispatcherPriority,Delegate,Object,Object[])
- uid: System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvokeShutdown(DispatcherPriority)
  nameWithType: Dispatcher.BeginInvokeShutdown(DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.BeginInvokeShutdown(DispatcherPriority)
- uid: System.Windows.Threading.Dispatcher.CheckAccess
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: CheckAccess()
  nameWithType: Dispatcher.CheckAccess()
  fullName: System.Windows.Threading.Dispatcher.CheckAccess()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Threading.Dispatcher.CurrentDispatcher
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: CurrentDispatcher
  nameWithType: Dispatcher.CurrentDispatcher
  fullName: System.Windows.Threading.Dispatcher.CurrentDispatcher
- uid: System.Windows.Threading.Dispatcher
  parent: System.Windows.Threading
  isExternal: false
  name: Dispatcher
  nameWithType: Dispatcher
  fullName: System.Windows.Threading.Dispatcher
- uid: System.Windows.Threading.Dispatcher.DisableProcessing
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: DisableProcessing()
  nameWithType: Dispatcher.DisableProcessing()
  fullName: System.Windows.Threading.Dispatcher.DisableProcessing()
- uid: System.Windows.Threading.DispatcherProcessingDisabled
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherProcessingDisabled
  nameWithType: DispatcherProcessingDisabled
  fullName: System.Windows.Threading.DispatcherProcessingDisabled
- uid: System.Windows.Threading.Dispatcher.ExitAllFrames
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: ExitAllFrames()
  nameWithType: Dispatcher.ExitAllFrames()
  fullName: System.Windows.Threading.Dispatcher.ExitAllFrames()
- uid: System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: FromThread(Thread)
  nameWithType: Dispatcher.FromThread(Thread)
  fullName: System.Windows.Threading.Dispatcher.FromThread(Thread)
- uid: System.Threading.Thread
  parent: System.Threading
  isExternal: false
  name: Thread
  nameWithType: Thread
  fullName: System.Threading.Thread
- uid: System.Windows.Threading.Dispatcher.HasShutdownFinished
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: HasShutdownFinished
  nameWithType: Dispatcher.HasShutdownFinished
  fullName: System.Windows.Threading.Dispatcher.HasShutdownFinished
- uid: System.Windows.Threading.Dispatcher.HasShutdownStarted
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: HasShutdownStarted
  nameWithType: Dispatcher.HasShutdownStarted
  fullName: System.Windows.Threading.Dispatcher.HasShutdownStarted
- uid: System.Windows.Threading.Dispatcher.Hooks
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Hooks
  nameWithType: Dispatcher.Hooks
  fullName: System.Windows.Threading.Dispatcher.Hooks
- uid: System.Windows.Threading.DispatcherHooks
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherHooks
  nameWithType: DispatcherHooks
  fullName: System.Windows.Threading.DispatcherHooks
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Action)
  nameWithType: Dispatcher.Invoke(Action)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action)
- uid: System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Action,DispatcherPriority)
  nameWithType: Dispatcher.Invoke(Action,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action,DispatcherPriority)
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Delegate,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,Object[])
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(DispatcherPriority,Delegate)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,Delegate)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,Delegate)
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Action,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Delegate,TimeSpan,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,TimeSpan,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,TimeSpan,Object[])
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Delegate,DispatcherPriority,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,DispatcherPriority,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,DispatcherPriority,Object[])
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(DispatcherPriority,Delegate,Object)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,Delegate,Object)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,Delegate,Object)
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(DispatcherPriority,TimeSpan,Delegate)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate)
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Action,DispatcherPriority,CancellationToken,TimeSpan)
  nameWithType: Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken,TimeSpan)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Action,DispatcherPriority,CancellationToken,TimeSpan)
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Delegate,TimeSpan,DispatcherPriority,Object[])
  nameWithType: Dispatcher.Invoke(Delegate,TimeSpan,DispatcherPriority,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(Delegate,TimeSpan,DispatcherPriority,Object[])
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(DispatcherPriority,Delegate,Object,Object[])
  nameWithType: Dispatcher.Invoke(DispatcherPriority,Delegate,Object,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,Delegate,Object,Object[])
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(DispatcherPriority,TimeSpan,Delegate,Object)
  nameWithType: Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object)
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object)
- uid: System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(DispatcherPriority,TimeSpan,Delegate,Object,Object[])
  nameWithType: Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object,Object[])
  fullName: System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority,TimeSpan,Delegate,Object,Object[])
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Func<TResult>)
  nameWithType: Dispatcher.Invoke(Func<TResult>)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>)
- uid: TResult
  isExternal: true
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func{TResult}
  parent: System
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Func<TResult>,DispatcherPriority)
  nameWithType: Dispatcher.Invoke(Func<TResult>,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>,DispatcherPriority)
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Func<TResult>,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken)
- uid: System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke(Func<TResult>,DispatcherPriority,CancellationToken,TimeSpan)
  nameWithType: Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken,TimeSpan)
  fullName: System.Windows.Threading.Dispatcher.Invoke(Func<TResult>,DispatcherPriority,CancellationToken,TimeSpan)
- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync(Action)
  nameWithType: Dispatcher.InvokeAsync(Action)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Action)
- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync(Action,DispatcherPriority)
  nameWithType: Dispatcher.InvokeAsync(Action,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Action,DispatcherPriority)
- uid: System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync(Action,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.InvokeAsync(Action,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Action,DispatcherPriority,CancellationToken)
- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync(Func<TResult>)
  nameWithType: Dispatcher.InvokeAsync(Func<TResult>)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Func<TResult>)
- uid: System.Windows.Threading.DispatcherOperation`1
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherOperation<TResult>
  nameWithType: DispatcherOperation<TResult>
  fullName: System.Windows.Threading.DispatcherOperation<TResult>
- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync(Func<TResult>,DispatcherPriority)
  nameWithType: Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority)
- uid: System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync(Func<TResult>,DispatcherPriority,CancellationToken)
  nameWithType: Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority,CancellationToken)
  fullName: System.Windows.Threading.Dispatcher.InvokeAsync(Func<TResult>,DispatcherPriority,CancellationToken)
- uid: System.Windows.Threading.Dispatcher.InvokeShutdown
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeShutdown()
  nameWithType: Dispatcher.InvokeShutdown()
  fullName: System.Windows.Threading.Dispatcher.InvokeShutdown()
- uid: System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: PushFrame(DispatcherFrame)
  nameWithType: Dispatcher.PushFrame(DispatcherFrame)
  fullName: System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame)
- uid: System.Windows.Threading.DispatcherFrame
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherFrame
  nameWithType: DispatcherFrame
  fullName: System.Windows.Threading.DispatcherFrame
- uid: System.Windows.Threading.Dispatcher.Run
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Run()
  nameWithType: Dispatcher.Run()
  fullName: System.Windows.Threading.Dispatcher.Run()
- uid: System.Windows.Threading.Dispatcher.ShutdownFinished
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: ShutdownFinished
  nameWithType: Dispatcher.ShutdownFinished
  fullName: System.Windows.Threading.Dispatcher.ShutdownFinished
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Threading.Dispatcher.ShutdownStarted
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: ShutdownStarted
  nameWithType: Dispatcher.ShutdownStarted
  fullName: System.Windows.Threading.Dispatcher.ShutdownStarted
- uid: System.Windows.Threading.Dispatcher.Thread
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Thread
  nameWithType: Dispatcher.Thread
  fullName: System.Windows.Threading.Dispatcher.Thread
- uid: System.Windows.Threading.Dispatcher.UnhandledException
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: UnhandledException
  nameWithType: Dispatcher.UnhandledException
  fullName: System.Windows.Threading.Dispatcher.UnhandledException
- uid: System.Windows.Threading.DispatcherUnhandledExceptionEventHandler
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherUnhandledExceptionEventHandler
  nameWithType: DispatcherUnhandledExceptionEventHandler
  fullName: System.Windows.Threading.DispatcherUnhandledExceptionEventHandler
- uid: System.Windows.Threading.Dispatcher.UnhandledExceptionFilter
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: UnhandledExceptionFilter
  nameWithType: Dispatcher.UnhandledExceptionFilter
  fullName: System.Windows.Threading.Dispatcher.UnhandledExceptionFilter
- uid: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherUnhandledExceptionFilterEventHandler
  nameWithType: DispatcherUnhandledExceptionFilterEventHandler
  fullName: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler
- uid: System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: ValidatePriority(DispatcherPriority,String)
  nameWithType: Dispatcher.ValidatePriority(DispatcherPriority,String)
  fullName: System.Windows.Threading.Dispatcher.ValidatePriority(DispatcherPriority,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Threading.Dispatcher.VerifyAccess
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: VerifyAccess()
  nameWithType: Dispatcher.VerifyAccess()
  fullName: System.Windows.Threading.Dispatcher.VerifyAccess()
- uid: System.Windows.Threading.Dispatcher.Yield
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Yield()
  nameWithType: Dispatcher.Yield()
  fullName: System.Windows.Threading.Dispatcher.Yield()
- uid: System.Windows.Threading.DispatcherPriorityAwaitable
  parent: System.Windows.Threading
  isExternal: false
  name: DispatcherPriorityAwaitable
  nameWithType: DispatcherPriorityAwaitable
  fullName: System.Windows.Threading.DispatcherPriorityAwaitable
- uid: System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Yield(DispatcherPriority)
  nameWithType: Dispatcher.Yield(DispatcherPriority)
  fullName: System.Windows.Threading.Dispatcher.Yield(DispatcherPriority)
- uid: System.Windows.Threading.Dispatcher.BeginInvoke*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvoke
  nameWithType: Dispatcher.BeginInvoke
- uid: System.Windows.Threading.Dispatcher.BeginInvokeShutdown*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: BeginInvokeShutdown
  nameWithType: Dispatcher.BeginInvokeShutdown
- uid: System.Windows.Threading.Dispatcher.CheckAccess*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: CheckAccess
  nameWithType: Dispatcher.CheckAccess
- uid: System.Windows.Threading.Dispatcher.CurrentDispatcher*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: CurrentDispatcher
  nameWithType: Dispatcher.CurrentDispatcher
- uid: System.Windows.Threading.Dispatcher.DisableProcessing*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: DisableProcessing
  nameWithType: Dispatcher.DisableProcessing
- uid: System.Windows.Threading.Dispatcher.ExitAllFrames*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: ExitAllFrames
  nameWithType: Dispatcher.ExitAllFrames
- uid: System.Windows.Threading.Dispatcher.FromThread*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: FromThread
  nameWithType: Dispatcher.FromThread
- uid: System.Windows.Threading.Dispatcher.HasShutdownFinished*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: HasShutdownFinished
  nameWithType: Dispatcher.HasShutdownFinished
- uid: System.Windows.Threading.Dispatcher.HasShutdownStarted*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: HasShutdownStarted
  nameWithType: Dispatcher.HasShutdownStarted
- uid: System.Windows.Threading.Dispatcher.Hooks*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Hooks
  nameWithType: Dispatcher.Hooks
- uid: System.Windows.Threading.Dispatcher.Invoke*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke
  nameWithType: Dispatcher.Invoke
- uid: System.Windows.Threading.Dispatcher.Invoke<TResult>*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Invoke<TResult>
  nameWithType: Dispatcher.Invoke<TResult>
- uid: System.Windows.Threading.Dispatcher.InvokeAsync*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync
  nameWithType: Dispatcher.InvokeAsync
- uid: System.Windows.Threading.Dispatcher.InvokeAsync<TResult>*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeAsync<TResult>
  nameWithType: Dispatcher.InvokeAsync<TResult>
- uid: System.Windows.Threading.Dispatcher.InvokeShutdown*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: InvokeShutdown
  nameWithType: Dispatcher.InvokeShutdown
- uid: System.Windows.Threading.Dispatcher.PushFrame*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: PushFrame
  nameWithType: Dispatcher.PushFrame
- uid: System.Windows.Threading.Dispatcher.Run*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Run
  nameWithType: Dispatcher.Run
- uid: System.Windows.Threading.Dispatcher.Thread*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Thread
  nameWithType: Dispatcher.Thread
- uid: System.Windows.Threading.Dispatcher.ValidatePriority*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: ValidatePriority
  nameWithType: Dispatcher.ValidatePriority
- uid: System.Windows.Threading.Dispatcher.VerifyAccess*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: VerifyAccess
  nameWithType: Dispatcher.VerifyAccess
- uid: System.Windows.Threading.Dispatcher.Yield*
  parent: System.Windows.Threading.Dispatcher
  isExternal: false
  name: Yield
  nameWithType: Dispatcher.Yield
