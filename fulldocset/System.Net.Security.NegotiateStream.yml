### YamlMime:ManagedReference
items:
- uid: System.Net.Security.NegotiateStream
  id: NegotiateStream
  children:
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.NegotiateStream.CanRead
  - System.Net.Security.NegotiateStream.CanSeek
  - System.Net.Security.NegotiateStream.CanTimeout
  - System.Net.Security.NegotiateStream.CanWrite
  - System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  - System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  - System.Net.Security.NegotiateStream.Flush
  - System.Net.Security.NegotiateStream.ImpersonationLevel
  - System.Net.Security.NegotiateStream.IsAuthenticated
  - System.Net.Security.NegotiateStream.IsEncrypted
  - System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  - System.Net.Security.NegotiateStream.IsServer
  - System.Net.Security.NegotiateStream.IsSigned
  - System.Net.Security.NegotiateStream.Length
  - System.Net.Security.NegotiateStream.Position
  - System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.ReadTimeout
  - System.Net.Security.NegotiateStream.RemoteIdentity
  - System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Net.Security.NegotiateStream.SetLength(System.Int64)
  - System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.WriteTimeout
  langs:
  - csharp
  name: NegotiateStream
  nameWithType: NegotiateStream
  fullName: System.Net.Security.NegotiateStream
  type: Class
  summary: "Biedt een stroom die het beveiligingsprotocol Negotiate gebruikt om te verifiÃ«ren van de client en eventueel op de server, in client-servercommunicatie."
  remarks: "De klasse NegotiateStream gebruiken voor verificatie en ter beveiliging van gegevens tussen een client en server verzonden. NegotiateStream gebruikt, kunt u het volgende doen.      -Referenties van de client naar de server verzonden voor imitatie of delegering.      -Aanvraag server-verificatie.      -Versleutelen en/of voordat deze gegevens te ondertekenen.       Verificatie moet worden uitgevoerd voordat het verzenden van gegevens. Clients vragen verificatie met behulp van de synchrone <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>methoden blokkeren totdat de verificatie is voltooid, of de asynchrone <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>methoden, die niet geblokkeerd tijdens het wachten op voor de verificatie te voltooien.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Servers aanvragen verificatie met behulp van de synchrone <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>of asynchrone <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>methoden.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> De client en eventueel op de server wordt geverifieerd met het beveiligingsprotocol Negotiate. Op Windows 95/98-systemen is Windows NT LAN Manager (NTLM) het protocol dat wordt gebruikt voor verificatie. Op andere platforms het Kerberos wordt protocol voor verificatie gebruikt als zowel client als server wordt ondersteund. anders wordt NTLM gebruikt. Zie de Platform-SDK-documentatie op MSDN, op msdn.microsoft.com/library/ voor gedetailleerde beschrijvingen van deze protocollen. De klasse NegotiateStream voert de verificatie met behulp van de Security Support Provider Interface (SSPI).       Als verificatie is geslaagd, moet u controleren de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>en <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices wordt gebruikt door de NegotiateStream om te helpen beveiligen van uw gegevens tijdens de verzending.</xref:System.Net.Security.NegotiateStream.IsSigned%2A> </xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> Krijgt u informatie over de externe client of server met de <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>eigenschap.</xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen.       Verzenden van gegevens met behulp van de synchrone <xref:System.Net.Security.NegotiateStream.Write%2A>of asynchrone <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>methoden.</xref:System.Net.Security.NegotiateStream.BeginWrite%2A> </xref:System.Net.Security.NegotiateStream.Write%2A> Ontvangen van gegevens met behulp van de synchrone <xref:System.Net.Security.NegotiateStream.Read%2A>of asynchrone <xref:System.Net.Security.NegotiateStream.BeginRead%2A>methoden.</xref:System.Net.Security.NegotiateStream.BeginRead%2A> </xref:System.Net.Security.NegotiateStream.Read%2A> Als beveiliging services, zoals codering of ondertekening zijn ingeschakeld, worden deze automatisch toegepast op uw gegevens door de NegotiateStream.       De NegotiateStream brengt gegevens over met behulp van een stroom die u opgeeft bij het maken van de NegotiateStream. Wanneer u deze onderliggende stroom opgeeft, hebt u de mogelijkheid te geven of sluiten van de NegotiateStream ook Hiermee sluit u de onderliggende stroom."
  example:
  - "The following code example demonstrates the client side of a client-server connection that uses the NegotiateStream. The client authenticates and sends a message to the server asynchronously.  \n  \n [!code-cpp[NclNegoAsyncClient#0](~/add/codesnippet/cpp/t-system.net.security.ne_1.cpp)]\n [!code-cs[NclNegoAsyncClient#0](~/add/codesnippet/csharp/t-system.net.security.ne_1.cs)]  \n  \n The following code example demonstrates the server side of a client-server connection that uses the NegotiateStream to authenticate the client and read a message sent by the client.  \n  \n [!code-cs[NclNegoAsyncServer#0](~/add/codesnippet/csharp/t-system.net.security.ne_2.cs)]\n [!code-cpp[NclNegoAsyncServer#0](~/add/codesnippet/cpp/t-system.net.security.ne_2.cpp)]"
  syntax:
    content: 'public class NegotiateStream : System.Net.Security.AuthenticatedStream'
  inheritance:
  - System.IO.Stream
  - System.Net.Security.AuthenticatedStream
  implements: []
  inheritedMembers:
  - System.Net.Security.AuthenticatedStream.InnerStream
  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: NegotiateStream(Stream)
  nameWithType: NegotiateStream.NegotiateStream(Stream)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> klasse met behulp van de opgegeven <xref:System.IO.Stream>.</xref:System.IO.Stream>"
  remarks: ''
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cs[NclNegoSyncClient#3](~/add/codesnippet/csharp/m-system.net.security.ne_1_1.cs)]\n [!code-cpp[NclNegoSyncClient#3](~/add/codesnippet/cpp/m-system.net.security.ne_1_1.cpp)]"
  syntax:
    content: public NegotiateStream (System.IO.Stream innerStream);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "Een <xref:System.IO.Stream>object dat wordt gebruikt door de <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> voor het verzenden en ontvangen van gegevens.</xref:System.IO.Stream>"
  overload: System.Net.Security.NegotiateStream.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: NegotiateStream(Stream,Boolean)
  nameWithType: NegotiateStream.NegotiateStream(Stream,Boolean)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> met behulp van de opgegeven klasse <xref:System.IO.Stream>en te streamen sluiting gedrag.</xref:System.IO.Stream>"
  remarks: "Wanneer u opgeeft `true` voor de `leaveStreamOpen` parameter, sluit de <xref:System.Net.Security.NegotiateStream>heeft geen effect op de `innerStream` stream; u moet expliciet sluiten `innerStream` wanneer u deze niet langer hoeft</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates calling this constructor. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \n  \n [!code-cpp[NclNegoAsyncClient#1](~/add/codesnippet/cpp/m-system.net.security.ne_4_1.cpp)]\n [!code-cs[NclNegoAsyncClient#1](~/add/codesnippet/csharp/m-system.net.security.ne_4_1.cs)]"
  syntax:
    content: public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "Een <xref:System.IO.Stream>object dat wordt gebruikt door de <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> voor het verzenden en ontvangen van gegevens.</xref:System.IO.Stream>"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>om aan te geven dat dit sluiten <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> heeft geen effect op `innerstream`; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> om aan te geven dat dit sluiten <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> ook wordt gesloten `innerStream`. Zie de sectie met opmerkingen voor meer informatie."
  overload: System.Net.Security.NegotiateStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>innerStream</code> is equal to <xref:System.IO.Stream.Null>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient
  id: AuthenticateAsClient
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient()
  nameWithType: NegotiateStream.AuthenticateAsClient()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door clients om de client en eventueel de-server in een client / server-verbinding te verifiÃ«ren."
  remarks: "De verificatie wordt gebruikt voor de client <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Geen Service Principal Name (SPN) is opgegeven voor de server. Het imitatieniveau is <xref:System.Security.Principal.TokenImpersonationLevel>, het beveiligingsniveau is <xref:System.Net.Security.ProtectionLevel>, en wederzijdse verificatie is aangevraagd.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> De <xref:System.Net.Security.NegotiateStream>klasse wordt de SPN-naam gebruikt voor wederzijdse verificatie samenstellen.</xref:System.Net.Security.NegotiateStream>       Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual void AuthenticateAsClient ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door clients om de client en eventueel de-server in een client / server-verbinding te verifiÃ«ren. Het verificatieproces maakt gebruik van de opgegeven client-referentie."
  remarks: "Het imitatieniveau is <xref:System.Security.Principal.TokenImpersonationLevel>, het beveiligingsniveau is <xref:System.Net.Security.ProtectionLevel>, en wederzijdse verificatie is aangevraagd.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> De <xref:System.Net.Security.NegotiateStream>klasse wordt de SPN-naam gebruikt voor wederzijdse verificatie samenstellen.</xref:System.Net.Security.NegotiateStream>       Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "De Service SPN (Principal Name) die een unieke identificatie van de server om te verifiÃ«ren."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door clients om de client en eventueel de-server in een client / server-verbinding te verifiÃ«ren. Het verificatieproces maakt gebruik van de opgegeven client-referentie en de kanaalbinding."
  remarks: "Het imitatieniveau is <xref:System.Security.Principal.TokenImpersonationLevel>, het beveiligingsniveau is <xref:System.Net.Security.ProtectionLevel>, en wederzijdse verificatie is aangevraagd.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> De <xref:System.Net.Security.NegotiateStream>klasse wordt de SPN-naam gebruikt voor wederzijdse verificatie samenstellen.</xref:System.Net.Security.NegotiateStream>       De <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>gebruikt voor uitgebreide beveiliging die wordt doorgegeven aan deze methode in de `binding` parameter zou worden opgehaald door een toepassing van de <xref:System.Net.Security.SslStream.TransportContext%2A>eigenschap op de bijbehorende <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "De <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>die wordt gebruikt voor uitgebreide beveiliging.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "De Service SPN (Principal Name) die een unieke identificatie van de server om te verifiÃ«ren."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door clients om de client en eventueel de-server in een client / server-verbinding te verifiÃ«ren. Het verificatieproces maakt gebruik van de opgegeven referenties en opties voor verificatie."
  remarks: "Gebruik de `requiredProtectionLevel` -parameter voor aanvraag beveiligingsservices voor gegevens die worden overgedragen met behulp van de geverifieerde stroom. Bijvoorbeeld, als u de gegevens versleuteld en ondertekend, geef de <xref:System.Net.Security.ProtectionLevel>waarde.</xref:System.Net.Security.ProtectionLevel> Geslaagde verificatie wordt niet gegarandeerd dat de gevraagde <xref:System.Net.Security.ProtectionLevel>heeft gekregen.</xref:System.Net.Security.ProtectionLevel> U moet de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "De Service SPN (Principal Name) die een unieke identificatie van de server om te verifiÃ«ren."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Een van de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> waarden, die de beveiligingsservices voor de stroom aangeeft."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Een van de <xref:System.Security.Principal.TokenImpersonationLevel>waarden, waarmee wordt aangegeven hoe de server de referenties van de client kan gebruiken voor toegang tot bronnen.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>is geen geldige waarde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>is null."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door clients om de client en eventueel de-server in een client / server-verbinding te verifiÃ«ren. Het verificatieproces maakt gebruik van de opgegeven referentie, opties voor verificatie en kanaalbinding."
  remarks: "Gebruik de `requiredProtectionLevel` -parameter voor aanvraag beveiligingsservices voor gegevens die worden overgedragen met behulp van de geverifieerde stroom. Bijvoorbeeld, als u de gegevens versleuteld en ondertekend, geef de <xref:System.Net.Security.ProtectionLevel>waarde.</xref:System.Net.Security.ProtectionLevel> Geslaagde verificatie wordt niet gegarandeerd dat de gevraagde <xref:System.Net.Security.ProtectionLevel>heeft gekregen.</xref:System.Net.Security.ProtectionLevel> U moet de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren       De <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>gebruikt voor uitgebreide beveiliging die wordt doorgegeven aan deze methode in de `binding` parameter zou worden opgehaald door een toepassing van de <xref:System.Net.Security.SslStream.TransportContext%2A>eigenschap op de bijbehorende <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "De <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>die wordt gebruikt voor uitgebreide beveiliging.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "De Service SPN (Principal Name) die een unieke identificatie van de server om te verifiÃ«ren."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Een van de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> waarden, die de beveiligingsservices voor de stroom aangeeft."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Een van de <xref:System.Security.Principal.TokenImpersonationLevel>waarden, waarmee wordt aangegeven hoe de server de referenties van de client kan gebruiken voor toegang tot bronnen.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>is geen geldige waarde."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  id: AuthenticateAsClientAsync
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync()
  nameWithType: NegotiateStream.AuthenticateAsClientAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door clients te verifiÃ«ren van de client en eventueel op de server, in een client / server-verbinding als een asynchrone bewerking."
  remarks: "De verificatie wordt gebruikt voor de client <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Geen Service Principal Name (SPN) is opgegeven voor de server. Het imitatieniveau is <xref:System.Security.Principal.TokenImpersonationLevel>, het beveiligingsniveau is <xref:System.Net.Security.ProtectionLevel>, en wederzijdse verificatie is aangevraagd.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> De <xref:System.Net.Security.NegotiateStream>klasse wordt de SPN-naam gebruikt voor wederzijdse verificatie samenstellen.</xref:System.Net.Security.NegotiateStream>       Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "Retourneert <xref:System.Threading.Tasks.Task>het taakobject dat de asynchrone bewerking vertegenwoordigt.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door clients te verifiÃ«ren van de client en eventueel op de server, in een client / server-verbinding als een asynchrone bewerking. Het verificatieproces maakt gebruik van de opgegeven client-referentie."
  remarks: "Het imitatieniveau is <xref:System.Security.Principal.TokenImpersonationLevel>, het beveiligingsniveau is <xref:System.Net.Security.ProtectionLevel>, en wederzijdse verificatie is aangevraagd.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> De <xref:System.Net.Security.NegotiateStream>klasse wordt de SPN-naam gebruikt voor wederzijdse verificatie samenstellen.</xref:System.Net.Security.NegotiateStream>       Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "De Service SPN (Principal Name) die een unieke identificatie van de server om te verifiÃ«ren."
    return:
      type: System.Threading.Tasks.Task
      description: "Retourneert <xref:System.Threading.Tasks.Task>het taakobject dat de asynchrone bewerking vertegenwoordigt.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door clients te verifiÃ«ren van de client en eventueel op de server, in een client / server-verbinding als een asynchrone bewerking. Het verificatieproces maakt gebruik van de opgegeven client-referentie en de kanaalbinding."
  remarks: "Het imitatieniveau is <xref:System.Security.Principal.TokenImpersonationLevel>, het beveiligingsniveau is <xref:System.Net.Security.ProtectionLevel>, en wederzijdse verificatie is aangevraagd.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> De <xref:System.Net.Security.NegotiateStream>klasse wordt de SPN-naam gebruikt voor wederzijdse verificatie samenstellen.</xref:System.Net.Security.NegotiateStream>       De <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>gebruikt voor uitgebreide beveiliging die wordt doorgegeven aan deze methode in de `binding` parameter zou worden opgehaald door een toepassing van de <xref:System.Net.Security.SslStream.TransportContext%2A>eigenschap op de bijbehorende <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "De <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>die wordt gebruikt voor uitgebreide beveiliging.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "De Service SPN (Principal Name) die een unieke identificatie van de server om te verifiÃ«ren."
    return:
      type: System.Threading.Tasks.Task
      description: "Retourneert <xref:System.Threading.Tasks.Task>het taakobject dat de asynchrone bewerking vertegenwoordigt.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door clients te verifiÃ«ren van de client en eventueel op de server, in een client / server-verbinding als een asynchrone bewerking. Het verificatieproces maakt gebruik van de opgegeven referenties en opties voor verificatie."
  remarks: "Gebruik de `requiredProtectionLevel` -parameter voor aanvraag beveiligingsservices voor gegevens die worden overgedragen met behulp van de geverifieerde stroom. Bijvoorbeeld, als u de gegevens versleuteld en ondertekend, geef de <xref:System.Net.Security.ProtectionLevel>waarde.</xref:System.Net.Security.ProtectionLevel> Geslaagde verificatie wordt niet gegarandeerd dat de gevraagde <xref:System.Net.Security.ProtectionLevel>heeft gekregen.</xref:System.Net.Security.ProtectionLevel> U moet de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "De Service SPN (Principal Name) die een unieke identificatie van de server om te verifiÃ«ren."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Een van de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> waarden, die de beveiligingsservices voor de stroom aangeeft."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Een van de <xref:System.Security.Principal.TokenImpersonationLevel>waarden, waarmee wordt aangegeven hoe de server de referenties van de client kan gebruiken voor toegang tot bronnen.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Retourneert <xref:System.Threading.Tasks.Task>het taakobject dat de asynchrone bewerking vertegenwoordigt.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>is geen geldige waarde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code>is null."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door clients te verifiÃ«ren van de client en eventueel op de server, in een client / server-verbinding als een asynchrone bewerking. Het verificatieproces maakt gebruik van de opgegeven referentie, opties voor verificatie en kanaalbinding."
  remarks: "Gebruik de `requiredProtectionLevel` -parameter voor aanvraag beveiligingsservices voor gegevens die worden overgedragen met behulp van de geverifieerde stroom. Bijvoorbeeld, als u de gegevens versleuteld en ondertekend, geef de <xref:System.Net.Security.ProtectionLevel>waarde.</xref:System.Net.Security.ProtectionLevel> Geslaagde verificatie wordt niet gegarandeerd dat de gevraagde <xref:System.Net.Security.ProtectionLevel>heeft gekregen.</xref:System.Net.Security.ProtectionLevel> U moet de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren       De <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>gebruikt voor uitgebreide beveiliging die wordt doorgegeven aan deze methode in de `binding` parameter zou worden opgehaald door een toepassing van de <xref:System.Net.Security.SslStream.TransportContext%2A>eigenschap op de bijbehorende <xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream> </xref:System.Net.Security.SslStream.TransportContext%2A> </xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "De <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>die wordt gebruikt voor uitgebreide beveiliging.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "De Service SPN (Principal Name) die een unieke identificatie van de server om te verifiÃ«ren."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Een van de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> waarden, die de beveiligingsservices voor de stroom aangeeft."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Een van de <xref:System.Security.Principal.TokenImpersonationLevel>waarden, waarmee wordt aangegeven hoe de server de referenties van de client kan gebruiken voor toegang tot bronnen.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Retourneert <xref:System.Threading.Tasks.Task>het taakobject dat de asynchrone bewerking vertegenwoordigt.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>allowedImpersonationLevel</code>is geen geldige waarde."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer
  id: AuthenticateAsServer
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer()
  nameWithType: NegotiateStream.AuthenticateAsServer()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door servers om de client te verifiÃ«ren en desgewenst op de server, in een client / server-verbinding."
  remarks: "De verificatie wordt gebruikt voor de server <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Geen Service Principal Name (SPN) is opgegeven voor de server. Het imitatieniveau is <xref:System.Security.Principal.TokenImpersonationLevel>, en het beveiligingsniveau is <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Deze methode worden geblokkeerd totdat de bewerking is voltooid. Om te voorkomen dat geblokkeerd tot de bewerking is voltooid, gebruikt u een van de <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>methode overloads.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual void AuthenticateAsServer ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 en Windows 98 worden niet ondersteund."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  id: AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door servers om de client te verifiÃ«ren en desgewenst op de server, in een client / server-verbinding. Het verificatieproces maakt gebruik van het beleid opgegeven uitgebreide beveiliging."
  remarks: "De verificatie wordt gebruikt voor de server <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Geen Service Principal Name (SPN) is opgegeven voor de server. Het imitatieniveau is <xref:System.Security.Principal.TokenImpersonationLevel>, en het beveiligingsniveau is <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Als de `policy` parameter `null`, wordt een uitgebreid beveiligingsbeleid gebruikt die <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>ingesteld op <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> is</xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Deze methode worden geblokkeerd totdat de bewerking is voltooid. Om te voorkomen dat geblokkeerd tot de bewerking is voltooid, gebruikt u een van de <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>methode overloads.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "De <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> die wordt gebruikt voor uitgebreide beveiliging."
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <> </> *> en <> </> *> op uitgebreide-beveiligingsbeleid doorgegeven de <code> policy </code> parameter zijn beide <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 en Windows 98 worden niet ondersteund."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "De <code> policy </code> parameter is ingesteld op <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> op een platform waarmee biedt geen ondersteuning voor uitgebreide beveiliging."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door servers om de client te verifiÃ«ren en desgewenst op de server, in een client / server-verbinding. Het verificatieproces maakt gebruik van de opgegeven serverreferenties en opties voor verificatie."
  remarks: "Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Deze methode worden geblokkeerd totdat de bewerking is voltooid. Om te voorkomen dat geblokkeerd tot de bewerking is voltooid, gebruikt u een van de <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>methode overloads.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de server.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Een van de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> waarden, die de beveiligingsservices voor de stroom aangeeft."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Een van de <xref:System.Security.Principal.TokenImpersonationLevel>waarden, waarmee wordt aangegeven hoe de server de referenties van de client kan gebruiken voor toegang tot bronnen.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object r verifiÃ«ren."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 en Windows 98 worden niet ondersteund."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door servers om de client te verifiÃ«ren en desgewenst op de server, in een client / server-verbinding. Het verificatieproces gebruikt de referenties van de opgegeven server, de verificatie-opties en extended protection-beleid."
  remarks: "Als de `policy` parameter `null`, wordt een uitgebreid beveiligingsbeleid gebruikt die <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>ingesteld op <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> is</xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Deze methode worden geblokkeerd totdat de bewerking is voltooid. Om te voorkomen dat geblokkeerd tot de bewerking is voltooid, gebruikt u een van de <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>methode overloads.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "De <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> die wordt gebruikt voor uitgebreide beveiliging."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Een van de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> waarden, die de beveiligingsservices voor de stroom aangeeft."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Een van de <xref:System.Security.Principal.TokenImpersonationLevel>waarden, waarmee wordt aangegeven hoe de server de referenties van de client kan gebruiken voor toegang tot bronnen.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <> </> *> en <> </> *> op uitgebreide-beveiligingsbeleid doorgegeven de <code> policy </code> parameter zijn beide <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object r verifiÃ«ren."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 en Windows 98 worden niet ondersteund."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "De <code> policy </code> parameter is ingesteld op <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> op een platform waarmee biedt geen ondersteuning voor uitgebreide beveiliging."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  id: AuthenticateAsServerAsync
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync()
  nameWithType: NegotiateStream.AuthenticateAsServerAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door servers om de client te verifiÃ«ren en desgewenst op de server, in een client / server-verbinding als een asynchrone bewerking."
  remarks: "De verificatie wordt gebruikt voor de server <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Geen Service Principal Name (SPN) is opgegeven voor de server. Het imitatieniveau is <xref:System.Security.Principal.TokenImpersonationLevel>, en het beveiligingsniveau is <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "Retourneert <xref:System.Threading.Tasks.Task>het taakobject dat de asynchrone bewerking vertegenwoordigt.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 en Windows 98 worden niet ondersteund."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  id: AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door servers om de client te verifiÃ«ren en desgewenst op de server, in een client / server-verbinding als een asynchrone bewerking. Het verificatieproces maakt gebruik van het beleid opgegeven uitgebreide beveiliging."
  remarks: "De verificatie wordt gebruikt voor de server <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Geen Service Principal Name (SPN) is opgegeven voor de server. Het imitatieniveau is <xref:System.Security.Principal.TokenImpersonationLevel>, en het beveiligingsniveau is <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Als de `policy` parameter `null`, wordt een uitgebreid beveiligingsbeleid gebruikt die <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>ingesteld op <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> is</xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "De <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> die wordt gebruikt voor uitgebreide beveiliging."
    return:
      type: System.Threading.Tasks.Task
      description: "Retourneert <xref:System.Threading.Tasks.Task>het taakobject dat de asynchrone bewerking vertegenwoordigt.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <> </> *> en <> </> *> op uitgebreide-beveiligingsbeleid doorgegeven de <code> policy </code> parameter zijn beide <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 en Windows 98 worden niet ondersteund."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "De <code> policy </code> parameter is ingesteld op <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> op een platform waarmee biedt geen ondersteuning voor uitgebreide beveiliging."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door servers om de client te verifiÃ«ren en desgewenst op de server, in een client / server-verbinding als een asynchrone bewerking. Het verificatieproces maakt gebruik van de opgegeven serverreferenties en opties voor verificatie."
  remarks: "Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de server.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Een van de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> waarden, die de beveiligingsservices voor de stroom aangeeft."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Een van de <xref:System.Security.Principal.TokenImpersonationLevel>waarden, waarmee wordt aangegeven hoe de server de referenties van de client kan gebruiken voor toegang tot bronnen.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Retourneert <xref:System.Threading.Tasks.Task>het taakobject dat de asynchrone bewerking vertegenwoordigt.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object r verifiÃ«ren."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 en Windows 98 worden niet ondersteund."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door servers om de client te verifiÃ«ren en desgewenst op de server, in een client / server-verbinding als een asynchrone bewerking. Het verificatieproces gebruikt de referenties van de opgegeven server, de verificatie-opties en extended protection-beleid."
  remarks: "Als de `policy` parameter `null`, wordt een uitgebreid beveiligingsbeleid gebruikt die <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>ingesteld op <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> is</xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "De <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> die wordt gebruikt voor uitgebreide beveiliging."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Een van de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> waarden, die de beveiligingsservices voor de stroom aangeeft."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Een van de <xref:System.Security.Principal.TokenImpersonationLevel>waarden, waarmee wordt aangegeven hoe de server de referenties van de client kan gebruiken voor toegang tot bronnen.</xref:System.Security.Principal.TokenImpersonationLevel>"
    return:
      type: System.Threading.Tasks.Task
      description: "Retourneert <xref:System.Threading.Tasks.Task>het taakobject dat de asynchrone bewerking vertegenwoordigt.</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <> </> *> en <> </> *> op uitgebreide-beveiligingsbeleid doorgegeven de <code> policy </code> parameter zijn beide <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object r verifiÃ«ren."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 en Windows 98 worden niet ondersteund."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "De <code> policy </code> parameter is ingesteld op <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> op een platform waarmee biedt geen ondersteuning voor uitgebreide beveiliging."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door clients om te beginnen met een asynchrone bewerking om te verifiÃ«ren van de client en eventueel op de server, in een client / server-verbinding. Deze methode worden niet geblokkeerd."
  remarks: "De verificatie wordt gebruikt voor de client <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Geen Service Principal Name (SPN) is opgegeven voor de server. Het imitatieniveau is <xref:System.Security.Principal.TokenImpersonationLevel>, en het beveiligingsniveau is <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel> De <xref:System.Net.Security.NegotiateStream>klasse wordt de SPN-naam gebruikt voor wederzijdse verificatie samenstellen.</xref:System.Net.Security.NegotiateStream>       Deze methode is asynchroon en worden niet geblokkeerd terwijl de bewerking is voltooid. Als u wilt blokkeren totdat de bewerking is voltooid, gebruikt u een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>methode overloads.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       De asynchrone verificatiebewerking moet worden uitgevoerd door het aanroepen van de <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>methode.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Normaal gesproken de methode wordt aangeroepen door de `asyncCallback` delegeren. Zie voor gedetailleerde informatie over het gebruik van de asynchrone programmeermodel [asynchroon synchrone methoden aanroepen](~/add/includes/ajax-current-ext-md.md) als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  example:
  - "The following code example demonstrates calling this method to begin an asynchronous authentication for the client.  \n  \n [!code-cpp[NclNegoAsyncClient#2](~/add/codesnippet/cpp/66fdfed9-ce77-41e0-af55-_1.cpp)]\n [!code-cs[NclNegoAsyncClient#2](~/add/codesnippet/csharp/66fdfed9-ce77-41e0-af55-_1.cs)]"
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen als de verificatie voltooid is.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Een gebruiker gedefinieerde-object dat informatie bevat over het opnieuw. Dit object wordt doorgegeven aan de `asyncCallback` delegeren wanneer de bewerking is voltooid."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>object met de status van de asynchrone bewerking.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door clients om te beginnen met een asynchrone bewerking om te verifiÃ«ren van de client en eventueel op de server, in een client / server-verbinding. Het verificatieproces maakt gebruik van de opgegeven referenties. Deze methode worden niet geblokkeerd."
  remarks: "Deze methode is asynchroon en worden niet geblokkeerd terwijl de bewerking is voltooid. Als u wilt blokkeren totdat de bewerking is voltooid, gebruikt u een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>methode overloads.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       De asynchrone verificatiebewerking moet worden uitgevoerd door het aanroepen van de <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>methode.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Normaal gesproken de methode wordt aangeroepen door de `asyncCallback` delegeren. Zie voor gedetailleerde informatie over het gebruik van de asynchrone programmeermodel [asynchroon synchrone methoden aanroepen](~/add/includes/ajax-current-ext-md.md) als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "De Service SPN (Principal Name) die een unieke identificatie van de server om te verifiÃ«ren."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen als de verificatie voltooid is.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Een gebruiker gedefinieerde-object dat informatie bevat over de schrijfbewerking. Dit object wordt doorgegeven aan de `asyncCallback` delegeren wanneer de bewerking is voltooid."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>object met de status van de asynchrone bewerking.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door clients om te beginnen met een asynchrone bewerking om te verifiÃ«ren van de client en eventueel op de server, in een client / server-verbinding. Het verificatieproces maakt gebruik van de opgegeven referenties en de kanaalbinding. Deze methode worden niet geblokkeerd."
  remarks: "Deze methode is asynchroon en worden niet geblokkeerd terwijl de bewerking is voltooid. Als u wilt blokkeren totdat de bewerking is voltooid, gebruikt u een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>methode overloads.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       De asynchrone verificatiebewerking moet worden uitgevoerd door het aanroepen van de <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>methode.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Normaal gesproken de methode wordt aangeroepen door de `asyncCallback` delegeren. Zie voor gedetailleerde informatie over het gebruik van de asynchrone programmeermodel [asynchroon synchrone methoden aanroepen](~/add/includes/ajax-current-ext-md.md) als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "De <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>die wordt gebruikt voor uitgebreide beveiliging.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "De Service SPN (Principal Name) die een unieke identificatie van de server om te verifiÃ«ren."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen als de verificatie voltooid is.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Een gebruiker gedefinieerde-object dat informatie bevat over de schrijfbewerking. Dit object wordt doorgegeven aan de `asyncCallback` delegeren wanneer de bewerking is voltooid."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>object met de status van de asynchrone bewerking.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door clients om te beginnen met een asynchrone bewerking om te verifiÃ«ren van de client en eventueel op de server, in een client / server-verbinding. Het verificatieproces maakt gebruik van de opgegeven referenties en opties voor verificatie. Deze methode worden niet geblokkeerd."
  remarks: "Gebruik de `requiredProtectionLevel` -parameter voor aanvraag beveiligingsservices voor gegevens die worden overgedragen met behulp van de geverifieerde stroom. Bijvoorbeeld, als u de gegevens versleuteld en ondertekend, geef de <xref:System.Net.Security.ProtectionLevel>waarde.</xref:System.Net.Security.ProtectionLevel> Geslaagde verificatie wordt niet gegarandeerd dat de gevraagde <xref:System.Net.Security.ProtectionLevel>heeft gekregen.</xref:System.Net.Security.ProtectionLevel> U moet de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren       Deze methode is asynchroon en worden niet geblokkeerd terwijl de bewerking is voltooid. Als u wilt blokkeren totdat de bewerking is voltooid, gebruikt u een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>methode overloads.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       De asynchrone verificatiebewerking moet worden uitgevoerd door het aanroepen van de <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>methode.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Normaal gesproken de methode wordt aangeroepen door de `asyncCallback` delegeren. Zie voor gedetailleerde informatie over het gebruik van de asynchrone programmeermodel [asynchroon synchrone methoden aanroepen](~/add/includes/ajax-current-ext-md.md) als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: targetName
      type: System.String
      description: "De Service SPN (Principal Name) die een unieke identificatie van de server om te verifiÃ«ren."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Een van de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> waarden, die de beveiligingsservices voor de stroom aangeeft."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Een van de <xref:System.Security.Principal.TokenImpersonationLevel>waarden, waarmee wordt aangegeven hoe de server de referenties van de client kan gebruiken voor toegang tot bronnen.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen als de verificatie voltooid is.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Een gebruiker gedefinieerde-object dat informatie bevat over de schrijfbewerking. Dit object wordt doorgegeven aan de `asyncCallback` delegeren wanneer de bewerking is voltooid."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>object met de status van de asynchrone bewerking.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door clients om te beginnen met een asynchrone bewerking om te verifiÃ«ren van de client en eventueel op de server, in een client / server-verbinding. Het verificatieproces maakt gebruik van de opgegeven referenties, opties voor verificatie en kanaalbinding. Deze methode worden niet geblokkeerd."
  remarks: "Gebruik de `requiredProtectionLevel` -parameter voor aanvraag beveiligingsservices voor gegevens die worden overgedragen met behulp van de geverifieerde stroom. Bijvoorbeeld, als u de gegevens versleuteld en ondertekend, geef de <xref:System.Net.Security.ProtectionLevel>waarde.</xref:System.Net.Security.ProtectionLevel> Geslaagde verificatie wordt niet gegarandeerd dat de gevraagde <xref:System.Net.Security.ProtectionLevel>heeft gekregen.</xref:System.Net.Security.ProtectionLevel> U moet de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren       Deze methode is asynchroon en worden niet geblokkeerd terwijl de bewerking is voltooid. Als u wilt blokkeren totdat de bewerking is voltooid, gebruikt u een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>methode overloads.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       De asynchrone verificatiebewerking moet worden uitgevoerd door het aanroepen van de <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>methode.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> Normaal gesproken de methode wordt aangeroepen door de `asyncCallback` delegeren. Zie voor gedetailleerde informatie over het gebruik van de asynchrone programmeermodel [asynchroon synchrone methoden aanroepen](~/add/includes/ajax-current-ext-md.md) als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "De <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>die wordt gebruikt voor uitgebreide beveiliging.</xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>"
    - id: targetName
      type: System.String
      description: "De Service SPN (Principal Name) die een unieke identificatie van de server om te verifiÃ«ren."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Een van de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> waarden, die de beveiligingsservices voor de stroom aangeeft."
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Een van de <xref:System.Security.Principal.TokenImpersonationLevel>waarden, waarmee wordt aangegeven hoe de server de referenties van de client kan gebruiken voor toegang tot bronnen.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen als de verificatie voltooid is.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Een gebruiker gedefinieerde-object dat informatie bevat over de schrijfbewerking. Dit object wordt doorgegeven aan de `asyncCallback` delegeren wanneer de bewerking is voltooid."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>object met de status van de asynchrone bewerking.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>targetName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door servers om te beginnen met een asynchrone bewerking om te verifiÃ«ren van de client en eventueel op de server, in een client / server-verbinding. Deze methode worden niet geblokkeerd."
  remarks: "De verificatie wordt gebruikt voor de server <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Geen Service Principal Name (SPN) is opgegeven voor de server. Het imitatieniveau is <xref:System.Security.Principal.TokenImpersonationLevel>, het beveiligingsniveau is <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Als u wilt blokkeren totdat de bewerking is voltooid, gebruikt u een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>methode overloads.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen als de verificatie voltooid is.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Een gebruiker gedefinieerde-object dat informatie bevat over het opnieuw. Dit object wordt doorgegeven aan de `asyncCallback` delegeren wanneer de bewerking is voltooid."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>object met de status van de asynchrone bewerking.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 en Windows 98 worden niet ondersteund."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door servers om te beginnen met een asynchrone bewerking om te verifiÃ«ren van de client en eventueel op de server, in een client / server-verbinding. Het verificatieproces maakt gebruik van het beleid opgegeven uitgebreide beveiliging. Deze methode worden niet geblokkeerd."
  remarks: "De verificatie wordt gebruikt voor de server <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</xref:System.Net.CredentialCache.DefaultCredentials%2A> Geen Service Principal Name (SPN) is opgegeven voor de server. Het imitatieniveau is <xref:System.Security.Principal.TokenImpersonationLevel>, het beveiligingsniveau is <xref:System.Net.Security.ProtectionLevel>.</xref:System.Net.Security.ProtectionLevel> </xref:System.Security.Principal.TokenImpersonationLevel>       Als de `policy` parameter `null`, wordt een uitgebreid beveiligingsbeleid gebruikt die <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>ingesteld op <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> is</xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Als u wilt blokkeren totdat de bewerking is voltooid, gebruikt u een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>methode overloads.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "De <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> die wordt gebruikt voor uitgebreide beveiliging."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen als de verificatie voltooid is.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Een gebruiker gedefinieerde-object dat informatie bevat over de schrijfbewerking. Dit object wordt doorgegeven aan de `asyncCallback` delegeren wanneer de bewerking is voltooid."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>object met de status van de asynchrone bewerking.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <> </> *> en <> </> *> op uitgebreide-beveiligingsbeleid doorgegeven de <code> policy </code> parameter zijn beide <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 en Windows 98 worden niet ondersteund."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "De <code> policy </code> parameter is ingesteld op <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> op een platform waarmee biedt geen ondersteuning voor uitgebreide beveiliging."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door servers om te beginnen met een asynchrone bewerking om te verifiÃ«ren van de client en eventueel op de server, in een client / server-verbinding. Het verificatieproces maakt gebruik van de opgegeven serverreferenties en opties voor verificatie. Deze methode worden niet geblokkeerd."
  remarks: "Gebruik de `requiredProtectionLevel` -parameter voor aanvraag beveiligingsservices voor gegevens die worden overgedragen met behulp van de geverifieerde stroom. Bijvoorbeeld, als u de gegevens versleuteld en ondertekend, geef de <xref:System.Net.Security.ProtectionLevel>waarde.</xref:System.Net.Security.ProtectionLevel> Geslaagde verificatie wordt niet gegarandeerd dat de gevraagde <xref:System.Net.Security.ProtectionLevel>heeft gekregen.</xref:System.Net.Security.ProtectionLevel> U moet de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren       Deze methode is asynchroon en worden niet geblokkeerd terwijl de bewerking is voltooid. Als u wilt blokkeren totdat de bewerking is voltooid, gebruikt u een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>methode overloads.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       De asynchrone verificatiebewerking moet worden uitgevoerd door het aanroepen van de <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>methode.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> Normaal gesproken de methode wordt aangeroepen door de `asyncCallback` delegeren. Zie voor gedetailleerde informatie over het gebruik van de asynchrone programmeermodel [asynchroon synchrone methoden aanroepen](~/add/includes/ajax-current-ext-md.md) als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Een van de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> waarden, die de beveiligingsservices voor de stroom aangeeft."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Een van de <xref:System.Security.Principal.TokenImpersonationLevel>waarden, waarmee wordt aangegeven hoe de server de referenties van de client kan gebruiken voor toegang tot bronnen.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen als de verificatie voltooid is.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Een gebruiker gedefinieerde-object dat informatie bevat over het opnieuw. Dit object wordt doorgegeven aan de `asyncCallback` delegeren wanneer de bewerking is voltooid."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>object met de status van de asynchrone bewerking.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 en Windows 98 worden niet ondersteund."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Aangeroepen door servers om te beginnen met een asynchrone bewerking om te verifiÃ«ren van de client en eventueel op de server, in een client / server-verbinding. Het verificatieproces gebruikt de referenties van de opgegeven server, de verificatie-opties en extended protection-beleid. Deze methode worden niet geblokkeerd."
  remarks: "Gebruik de `requiredProtectionLevel` -parameter voor aanvraag beveiligingsservices voor gegevens die worden overgedragen met behulp van de geverifieerde stroom. Bijvoorbeeld, als u de gegevens versleuteld en ondertekend, geef de <xref:System.Net.Security.ProtectionLevel>waarde.</xref:System.Net.Security.ProtectionLevel> Geslaagde verificatie wordt niet gegarandeerd dat de gevraagde <xref:System.Net.Security.ProtectionLevel>heeft gekregen.</xref:System.Net.Security.ProtectionLevel> U moet de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren       Als de `policy` parameter `null`, wordt een uitgebreid beveiligingsbeleid gebruikt die <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>ingesteld op <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement>.</xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement> is</xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>       Deze methode is asynchroon en worden niet geblokkeerd terwijl de bewerking is voltooid. Als u wilt blokkeren totdat de bewerking is voltooid, gebruikt u een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>methode overloads.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>       De asynchrone verificatiebewerking moet worden uitgevoerd door het aanroepen van de <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>methode.</xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> Normaal gesproken de methode wordt aangeroepen door de `asyncCallback` delegeren. Zie voor gedetailleerde informatie over het gebruik van de asynchrone programmeermodel [asynchroon synchrone methoden aanroepen](~/add/includes/ajax-current-ext-md.md) als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen."
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: credential
      type: System.Net.NetworkCredential
      description: "De <xref:System.Net.NetworkCredential>die wordt gebruikt voor het vaststellen van de identiteit van de client.</xref:System.Net.NetworkCredential>"
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: "De <xref href=&quot;System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot;> </xref> die wordt gebruikt voor uitgebreide beveiliging."
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
      description: "Een van de <xref href=&quot;System.Net.Security.ProtectionLevel&quot;> </xref> waarden, die de beveiligingsservices voor de stroom aangeeft."
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Een van de <xref:System.Security.Principal.TokenImpersonationLevel>waarden, waarmee wordt aangegeven hoe de server de referenties van de client kan gebruiken voor toegang tot bronnen.</xref:System.Security.Principal.TokenImpersonationLevel>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen als de verificatie voltooid is.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Een gebruiker gedefinieerde-object dat informatie bevat over de schrijfbewerking. Dit object wordt doorgegeven aan de `asyncCallback` delegeren wanneer de bewerking is voltooid."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>object met de status van de asynchrone bewerking.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <> </> *> en <> </> *> op uitgebreide-beveiligingsbeleid doorgegeven de <code> policy </code> parameter zijn beide <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>credential</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>requiredImpersonationLevel</code>must be <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>, or <xref:System.Security.Principal.TokenImpersonationLevel>,"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Authentication has already occurred.  \n  \n \\- or -  \n  \n This stream was used previously to attempt authentication as the client. You cannot use the stream to retry authentication as the server."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Windows 95 en Windows 98 worden niet ondersteund."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "De <code> policy </code> parameter is ingesteld op <xref href=&quot;System.Security.Authentication.ExtendedProtection.PolicyEnforcement&quot;> </xref> op een platform waarmee biedt geen ondersteuning voor uitgebreide beveiliging."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Een asynchrone leesbewerking die gegevens leest uit de stroom en slaat ze op in de opgegeven matrix begint."
  remarks: "Als versleuteling, ondertekening of versleuteling en ondertekening zijn ingeschakeld, de leesbewerking leest de gegevens van de onderliggende stroom controleert de integriteit van de gegevens en ontsleuteld. Als geen beveiliging services, zoals versleuteling van gegevens of ondertekening worden gebruikt, begint deze methode een asynchrone leesbewerking op de onderliggende stroom.       Deze methode is asynchroon en worden niet geblokkeerd terwijl de bewerking is voltooid. Als u wilt blokkeren totdat de bewerking is voltooid, gebruiken de <xref:System.Net.Security.NegotiateStream.Read%2A>methode.</xref:System.Net.Security.NegotiateStream.Read%2A>       De asynchrone leesbewerking moet worden uitgevoerd door het aanroepen van de <xref:System.Net.Security.NegotiateStream.EndRead%2A>methode.</xref:System.Net.Security.NegotiateStream.EndRead%2A> Normaal gesproken de methode wordt aangeroepen door de `asyncCallback` delegeren. Zie voor gedetailleerde informatie over het gebruik van de asynchrone programmeermodel [asynchroon synchrone methoden aanroepen](~/add/includes/ajax-current-ext-md.md) de <xref:System.Net.Security.NegotiateStream>klasse biedt geen ondersteuning voor meerdere gelijktijdige lees-en schrijfopdrachten.</xref:System.Net.Security.NegotiateStream> Als u probeert een leesbewerking starten tijdens het lezen van een andere bewerking wordt al uitgevoerd op de dezelfde stroom een <xref:System.NotSupportedException>uitzondering gegenereerd.</xref:System.NotSupportedException>       U kunt deze methode niet aanroepen totdat u bent geverifieerd. Aanroepen om te verifiÃ«ren, een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, of <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>methoden.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates starting an asynchronous read operation. This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.  \n  \n [!code-cs[NclNegoAsyncServer#1](~/add/codesnippet/csharp/45085c2d-bb14-48e7-a75f-_1.cs)]\n [!code-cpp[NclNegoAsyncServer#1](~/add/codesnippet/cpp/45085c2d-bb14-48e7-a75f-_1.cpp)]"
  syntax:
    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Een <xref:System.Byte>matrix die ontvangt van het aantal bytes uit de stroom lezen.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "De op nul gebaseerde locatie in `buffer` waarop u wilt beginnen met opslaan van de gegevens lezen uit deze stroom."
    - id: count
      type: System.Int32
      description: "Het maximum aantal bytes lezen uit de stroom."
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen wanneer de leesbewerking voltooid is.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Een gebruiker gedefinieerde-object dat informatie bevat over de leesbewerking. Dit object wordt doorgegeven aan de `asyncCallback` delegeren wanneer de bewerking is voltooid."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>object met de status van de asynchrone bewerking.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code> is less than 0.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus <code>count</code> is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The read operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be decrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Er bestaat al een leesbewerking uitgevoerd."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Geen heeft verificatie plaatsgevonden."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Een asynchrone schrijfbewerking die schrijft begint <xref:System.Byte>s uit de opgegeven buffer naar de stroom.</xref:System.Byte>"
  remarks: "Als versleuteling, ondertekening of versleuteling en ondertekening zijn ingeschakeld, deze methode leest de gegevens van de buffer versleutelt, tekens of versleutelt en tekent het en verzendt met behulp van de onderliggende stroom. Als geen beveiliging services, zoals versleuteling van gegevens of ondertekening worden gebruikt, begint deze methode een asynchrone schrijfbewerking voor de onderliggende stroom.       Deze methode is asynchroon en worden niet geblokkeerd terwijl de bewerking is voltooid. Als u wilt blokkeren totdat de bewerking is voltooid, gebruiken de <xref:System.Net.Security.NegotiateStream.Read%2A>methode.</xref:System.Net.Security.NegotiateStream.Read%2A>       De asynchrone leesbewerking moet worden uitgevoerd door het aanroepen van de <xref:System.Net.Security.NegotiateStream.EndWrite%2A>methode.</xref:System.Net.Security.NegotiateStream.EndWrite%2A> Normaal gesproken de methode wordt aangeroepen door de `asyncCallback` delegeren. Zie voor gedetailleerde informatie over het gebruik van de asynchrone programmeermodel [asynchroon synchrone methoden aanroepen](~/add/includes/ajax-current-ext-md.md) de <xref:System.Net.Security.NegotiateStream>klasse biedt geen ondersteuning voor meerdere gelijktijdige schrijfbewerkingen.</xref:System.Net.Security.NegotiateStream> Als u probeert een schrijfbewerking starten terwijl een andere schrijfbewerking wordt al uitgevoerd op de dezelfde stroom een <xref:System.NotSupportedException>uitzondering gegenereerd.</xref:System.NotSupportedException>       U kunt deze methode niet aanroepen totdat u bent geverifieerd. Aanroepen om te verifiÃ«ren, een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, of <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>methoden.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates beginning an asynchronous write operation.  \n  \n [!code-cpp[NclNegoAsyncClient#3](~/add/codesnippet/cpp/5748c807-4e74-4d4c-a4e4-_1.cpp)]\n [!code-cs[NclNegoAsyncClient#3](~/add/codesnippet/csharp/5748c807-4e74-4d4c-a4e4-_1.cs)]  \n  \n The following method is called when the operation completes.  \n  \n [!code-cpp[NclNegoAsyncClient#4](~/add/codesnippet/cpp/5748c807-4e74-4d4c-a4e4-_2.cpp)]\n [!code-cs[NclNegoAsyncClient#4](~/add/codesnippet/csharp/5748c807-4e74-4d4c-a4e4-_2.cs)]"
  syntax:
    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Een <xref:System.Byte>matrix waaruit de bytes te worden geschreven naar de stroom.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "De op nul gebaseerde locatie in `buffer` waarop u wilt beginnen te lezen bytes worden geschreven naar de stroom."
    - id: count
      type: System.Int32
      description: "Een <xref:System.Int32>waarde waarmee het aantal bytes lezen uit `buffer`.</xref:System.Int32>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen wanneer de write-bewerking voltooid is.</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "Een gebruiker gedefinieerde-object dat informatie bevat over de schrijfbewerking. Dit object wordt doorgegeven aan de `asyncCallback` delegeren wanneer de bewerking is voltooid."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>object met de status van de asynchrone bewerking.</xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.BeginWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset is less than 0</code>.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus count is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be encrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Er bestaat al een schrijfbewerking uitgevoerd."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Geen heeft verificatie plaatsgevonden."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanRead
  id: CanRead
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanRead
  nameWithType: NegotiateStream.CanRead
  fullName: System.Net.Security.NegotiateStream.CanRead
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Haalt een <xref:System.Boolean>waarde die aangeeft of de onderliggende stroom kan worden gelezen.</xref:System.Boolean>"
  remarks: "Als u geslaagde verificatie heeft plaatsgevonden, deze eigenschap retourneert de waarde die is geretourneerd door het aanroepen van de <xref:System.IO.Stream.CanRead%2A>-eigenschap op de onderliggende stroom.</xref:System.IO.Stream.CanRead%2A> De onderliggende stroom is opgegeven bij het maken van een exemplaar van de <xref:System.Net.Security.NegotiateStream>klasse.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_4_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_4_1.cpp)]"
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als verificatie heeft plaatsgevonden en de onderliggende stroom kan worden gelezen; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanSeek
  id: CanSeek
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
  fullName: System.Net.Security.NegotiateStream.CanSeek
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Haalt een <xref:System.Boolean>waarde die aangeeft of de onderliggende stroom kan worden doorzocht.</xref:System.Boolean>"
  remarks: "U moet niet proberen in te stellen van de positie van de <xref:System.Net.Security.NegotiateStream>object of de onderliggende stroom.</xref:System.Net.Security.NegotiateStream> De onderliggende stroom is opgegeven bij het maken van een exemplaar van de <xref:System.Net.Security.NegotiateStream>klasse.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_3_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_3_1.cpp)]"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "Deze eigenschap retourneert altijd <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanTimeout
  id: CanTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
  fullName: System.Net.Security.NegotiateStream.CanTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Haalt een <xref:System.Boolean>waarde die aangeeft of de onderliggende stroom time-outs ondersteunt.</xref:System.Boolean>"
  remarks: "Deze eigenschap retourneert de waarde die is geretourneerd door het aanroepen van de <xref:System.IO.Stream.CanTimeout%2A>-eigenschap op de onderliggende stroom.</xref:System.IO.Stream.CanTimeout%2A> De onderliggende stroom is opgegeven bij het maken van een exemplaar van de <xref:System.Net.Security.NegotiateStream>klasse.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_2_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_2_1.cpp)]"
  syntax:
    content: public override bool CanTimeout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de onderliggende stroom time-outs ondersteunt; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.CanWrite
  id: CanWrite
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
  fullName: System.Net.Security.NegotiateStream.CanWrite
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Haalt een <xref:System.Boolean>waarde die aangeeft of de onderliggende stroom geschreven worden.</xref:System.Boolean>"
  remarks: "Als u geslaagde verificatie heeft plaatsgevonden, deze eigenschap retourneert de waarde die is geretourneerd door het aanroepen van de <xref:System.IO.Stream.CanWrite%2A>-eigenschap op de onderliggende stroom.</xref:System.IO.Stream.CanWrite%2A> De onderliggende stroom is opgegeven bij het maken van een exemplaar van de <xref:System.Net.Security.NegotiateStream>klasse.</xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_6_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_6_1.cpp)]"
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als verificatie heeft plaatsgevonden, en de onderliggende stroom beschrijfbare; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: NegotiateStream.Dispose(Boolean)
  fullName: System.Net.Security.NegotiateStream.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Heft de niet-beheerde bronnen worden gebruikt door de <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> en eventueel de beheerde bronnen vrij."
  remarks: "Deze methode wordt aangeroepen door het publiek `Dispose()`methode en de <xref:System.Object.Finalize%2A>methode.</xref:System.Object.Finalize%2A> `Dispose()`Hiermee wordt de beveiligde `Dispose(Boolean)` methode met de `disposing` parameter ingesteld op `true`. <xref:System.Object.Finalize%2A>roept `Dispose` met `disposing` ingesteld op `false`.</xref:System.Object.Finalize%2A>       Wanneer de `disposing` parameter is ingesteld op true, wordt deze methode worden alle resources die beheerde objecten waarover vrijgegeven dat dit <xref:System.Net.Security.NegotiateStream>verwijzingen.</xref:System.Net.Security.NegotiateStream> Deze methode roept de `Dispose()` methode van elk object waarnaar wordt verwezen."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>voor het vrijgeven van zowel beheerde als onbeheerde hulpbronnen; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> om alleen niet-beheerde bronnen vrij te geven."
  overload: System.Net.Security.NegotiateStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  id: EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Een wachtende asynchrone verificatie clientbewerking die is gestart met een aanroep naar <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*> eindigt"
  remarks: "Als de bewerking is niet voltooid, wordt deze methode blokkeert totdat dit het geval is. Als de verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen.       Om deze bewerking synchroon uitvoeren, gebruikt u een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>methode.</xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  syntax:
    content: public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>exemplaar is geretourneerd door een aanroep naar <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>is niet gemaakt door een aanroep naar <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Er is geen clientverificatie in behandeling om te voltooien."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  id: EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Een wachtende asynchrone verificatie clientbewerking die is gestart met een aanroep naar <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*> eindigt"
  remarks: "Als de bewerking is niet voltooid, wordt deze methode blokkeert totdat dit het geval is.       Als verificatie is geslaagd, moet u de <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> <xref:System.Net.Security.NegotiateStream.IsSigned%2A>Eigenschappen om te bepalen welke beveiligingsservices worden gebruikt door de <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream> </xref:System.Net.Security.NegotiateStream.IsSigned%2A> en</xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> controleren Controleer de <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>eigenschap om te bepalen of er wederzijdse verificatie is opgetreden.</xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>       Als de verificatie is mislukt, ontvangt u een <xref:System.Security.Authentication.AuthenticationException>of een <xref:System.Security.Authentication.InvalidCredentialException>.</xref:System.Security.Authentication.InvalidCredentialException> </xref:System.Security.Authentication.AuthenticationException> In dit geval kunt u de verificatie met een andere referentie opnieuw proberen.       Gebruik voor deze bewerking synchroon uitvoeren, de <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>methode.</xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  syntax:
    content: public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>exemplaar is geretourneerd door een aanroep naar <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>is niet gemaakt door een aanroep naar <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.Security.Authentication.InvalidCredentialException
    commentId: T:System.Security.Authentication.InvalidCredentialException
    description: "De verificatie is mislukt. U kunt dit object gebruiken om opnieuw te proberen de verificatie."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Er is geen in behandeling verificatie te voltooien."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  id: EndRead(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndRead(IAsyncResult)
  nameWithType: NegotiateStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndRead(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Een asynchrone leesbewerking die is gestart met een aanroep naar <xref:System.Net.Security.NegotiateStream.BeginRead*>.</xref:System.Net.Security.NegotiateStream.BeginRead*> eindigt"
  remarks: "Als de bewerking is niet voltooid, wordt deze methode blokkeert totdat dit het geval is.       Gebruik voor deze bewerking synchroon uitvoeren, de <xref:System.Net.Security.NegotiateStream.Read%2A>methode.</xref:System.Net.Security.NegotiateStream.Read%2A>       U kunt deze methode niet aanroepen totdat u bent geverifieerd. Aanroepen om te verifiÃ«ren, een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, of <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>methoden.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates ending an asynchronous read operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.  \n  \n [!code-cs[NclNegoAsyncServer#3](~/add/codesnippet/csharp/m-system.net.security.ne_2_1.cs)]\n [!code-cpp[NclNegoAsyncServer#3](~/add/codesnippet/cpp/m-system.net.security.ne_2_1.cpp)]"
  syntax:
    content: public override int EndRead (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>exemplaar geretourneerd door een aanroep naar <xref:System.Net.Security.NegotiateStream.BeginRead*></xref:System.Net.Security.NegotiateStream.BeginRead*> </xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "Een <xref:System.Int32>waarde waarmee het aantal bytes lezen uit de onderliggende stroom.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.EndRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Het asyncResult is niet gemaakt door een aanroep naar <xref:System.Net.Security.NegotiateStream.BeginRead*>.</xref:System.Net.Security.NegotiateStream.BeginRead*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Geen heeft verificatie plaatsgevonden."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "De leesbewerking is mislukt."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  id: EndWrite(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: EndWrite(IAsyncResult)
  nameWithType: NegotiateStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndWrite(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Een asynchrone schrijfbewerking die is gestart met een aanroep naar <xref:System.Net.Security.NegotiateStream.BeginWrite*>.</xref:System.Net.Security.NegotiateStream.BeginWrite*> eindigt"
  remarks: "Als de bewerking is niet voltooid, wordt deze methode blokkeert totdat dit het geval is.       U kunt deze methode niet aanroepen totdat u bent geverifieerd. Aanroepen om te verifiÃ«ren, een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, of <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>methoden.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Gebruik voor deze bewerking synchroon uitvoeren, de <xref:System.Net.Security.NegotiateStream.Write%2A>methode.</xref:System.Net.Security.NegotiateStream.Write%2A>"
  example:
  - "The following code example demonstrates a method that is called to complete the asynchronous write operation. For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.  \n  \n [!code-cpp[NclNegoAsyncClient#4](~/add/codesnippet/cpp/m-system.net.security.ne_0_1.cpp)]\n [!code-cs[NclNegoAsyncClient#4](~/add/codesnippet/csharp/m-system.net.security.ne_0_1.cs)]"
  syntax:
    content: public override void EndWrite (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>exemplaar geretourneerd door een aanroep naar <xref:System.Net.Security.NegotiateStream.BeginWrite*></xref:System.Net.Security.NegotiateStream.BeginWrite*> </xref:System.IAsyncResult>"
  overload: System.Net.Security.NegotiateStream.EndWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Het asyncResult is niet gemaakt door een aanroep naar <xref:System.Net.Security.NegotiateStream.BeginWrite*>.</xref:System.Net.Security.NegotiateStream.BeginWrite*>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Geen heeft verificatie plaatsgevonden."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "De schrijfbewerking is mislukt."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Flush
  id: Flush
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Flush()
  nameWithType: NegotiateStream.Flush()
  fullName: System.Net.Security.NegotiateStream.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Zorgt ervoor dat de gegevens naar de onderliggende apparaat moeten worden geschreven."
  remarks: "Deze methode wordt aangeroepen <xref:System.IO.Stream.Flush%2A>op de onderliggende stroom.</xref:System.IO.Stream.Flush%2A>"
  example:
  - "The following code example demonstrates flushing the stream.  \n  \n [!code-cs[NclNegoSyncClient#4](~/add/codesnippet/csharp/m-system.net.security.ne_3_1.cs)]\n [!code-cpp[NclNegoSyncClient#4](~/add/codesnippet/cpp/m-system.net.security.ne_3_1.cpp)]"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.Net.Security.NegotiateStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Haalt een waarde die aangeeft hoe referenties van de client op de server kunt gebruiken."
  remarks: "U moet verifiÃ«ren voordat u deze methode aanroept. Clients het imitatieniveau opgeven bij het aanvragen van verificatie door een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>of <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>methoden.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Als u verificatie zonder op te geven een <xref:System.Security.Principal.TokenImpersonationLevel>, <xref:System.Security.Principal.TokenImpersonationLevel>wordt gebruikt.</xref:System.Security.Principal.TokenImpersonationLevel> </xref:System.Security.Principal.TokenImpersonationLevel>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_5_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_5_1.cpp)]"
  syntax:
    content: public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "Een van de <xref:System.Security.Principal.TokenImpersonationLevel>waarden.</xref:System.Security.Principal.TokenImpersonationLevel>"
  overload: System.Net.Security.NegotiateStream.ImpersonationLevel*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Verificatie is mislukt of nog niet heeft plaatsgevonden."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Haalt een <xref:System.Boolean>waarde die aangeeft of verificatie gelukt is.</xref:System.Boolean>"
  remarks: "Clients verifiÃ«ren door het aanroepen van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>of <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>methoden.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> Servers verifiÃ«ren door het aanroepen van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>of <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>methoden.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_10_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_10_1.cpp)]"
  syntax:
    content: public override bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als er geen geslaagde verificatie uitgevoerd; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsEncrypted
  id: IsEncrypted
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
  fullName: System.Net.Security.NegotiateStream.IsEncrypted
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Haalt een <xref:System.Boolean>waarde die aangeeft of dit <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> gegevensversleuteling gebruikt.</xref:System.Boolean>"
  remarks: "Versleuteling helpt bij de bescherming van de privacy van de gegevens. dat wil zeggen nuttig het om ervoor te zorgen dat als gegevens onderweg deze kan niet worden ontcijferd door derden."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_8_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_8_1.cpp)]"
  syntax:
    content: public override bool IsEncrypted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als gegevens worden versleuteld voordat het wordt verzonden via het netwerk en ontsleuteld wanneer deze bereikt het externe eindpunt; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsEncrypted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  id: IsMutuallyAuthenticated
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Haalt een <xref:System.Boolean>waarde die aangeeft of zowel de server als de client zijn geverifieerd.</xref:System.Boolean>"
  remarks: "Wederzijdse verificatie is opgegeven door de client wanneer de client wil de server om uw referenties voor verificatie. Clients vragen standaard wederzijdse verificatie.       Het protocol Negotiate selecteert NTLM of Kerberos, afhankelijk van de beveiligingsprotocollen die worden ondersteund door de client en server. NTLM biedt geen ondersteuning voor wederzijdse verificatie."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_7_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_7_1.cpp)]"
  syntax:
    content: public override bool IsMutuallyAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de server is geverifieerd; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsServer
  id: IsServer
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsServer
  nameWithType: NegotiateStream.IsServer
  fullName: System.Net.Security.NegotiateStream.IsServer
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Haalt een <xref:System.Boolean>waarde die aangeeft of de lokale kant van de verbinding wordt gebruikt door dit <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref> als de server is geverifieerd.</xref:System.Boolean>"
  remarks: "Verificatie is mislukt of is niet uitgevoerd, retourneert deze eigenschap `false`.       Aanroepen om te verifiÃ«ren als de server, de <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>of <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>methoden.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_0_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_0_1.cpp)]"
  syntax:
    content: public override bool IsServer { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het lokale eindpunt is geverifieerd als het servergedeelte van de geverifieerde verbinding; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsServer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.IsSigned
  id: IsSigned
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
  fullName: System.Net.Security.NegotiateStream.IsSigned
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Haalt een <xref:System.Boolean>waarde die aangeeft of de gegevens die worden verzonden met behulp van deze stroom is ondertekend.</xref:System.Boolean>"
  remarks: "Gegevensondertekening helpt bij de bescherming van de integriteit van de gegevens. dat wil zeggen kunt zo u de ontvanger kan zien of de gegevens onderweg is geknoeid."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#1](~/add/codesnippet/csharp/p-system.net.security.ne_13_1.cs)]\n [!code-cpp[NclNegoSyncClient#1](~/add/codesnippet/cpp/p-system.net.security.ne_13_1.cpp)]"
  syntax:
    content: public override bool IsSigned { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de gegevens is ondertekend voordat het wordt verzonden; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Security.NegotiateStream.IsSigned*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Length
  id: Length
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Length
  nameWithType: NegotiateStream.Length
  fullName: System.Net.Security.NegotiateStream.Length
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hiermee haalt u de lengte van de onderliggende stroom."
  remarks: "Deze eigenschap retourneert de waarde die is geretourneerd door het aanroepen van de <xref:System.IO.Stream.Length%2A>-eigenschap op de onderliggende stroom.</xref:System.IO.Stream.Length%2A> Als de onderliggende stroom niet kan worden doorzocht, wordt deze eigenschap doorgaans Veroorzaak een uitzondering. De runtime-type van de onderliggende stroom bepaalt de runtime-type van de uitzondering die is gegenereerd."
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_9_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_9_1.cpp)]"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "Een <xref:System.Int64>die aangeeft dat de lengte van de onderliggende stroom.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.Length*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De waarde van deze eigenschap wordt niet ondersteund wanneer de onderliggende stroom een <xref href=&quot;System.Net.Sockets.NetworkStream&quot;> </xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Position
  id: Position
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Position
  nameWithType: NegotiateStream.Position
  fullName: System.Net.Security.NegotiateStream.Position
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Opgehaald of ingesteld van de huidige positie in de onderliggende stroom."
  remarks: "Deze eigenschap retourneert de waarde die is geretourneerd door het aanroepen van de <xref:System.IO.Stream.Position%2A>-eigenschap op de onderliggende stroom.</xref:System.IO.Stream.Position%2A> Als de onderliggende stroom niet kan worden doorzocht, wordt deze eigenschap doorgaans Veroorzaak een uitzondering. De runtime-type van de onderliggende stroom bepaalt de runtime-type van de uitzondering die is gegenereerd."
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "Een <xref:System.Int64>die aangeeft dat de huidige positie in de onderliggende stroom.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.Position*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Setting this property is not supported.  \n  \n \\- or -  \n  \n Getting the value of this property is not supported when the underlying stream is a <xref href=\"System.Net.Sockets.NetworkStream\"></xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Leest de gegevens uit deze stroom en slaat ze op in de opgegeven matrix."
  remarks: "De methode wordt gelezen maximaal `count` bytes uit de huidige stream en slaat ze op in `buffer` beginnen bij `offset`.       U kunt deze methode niet aanroepen totdat u bent geverifieerd. Aanroepen om te verifiÃ«ren, een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, of <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>methoden.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       Gebruik voor deze bewerking asynchroon uitvoeren, de <xref:System.Net.Security.NegotiateStream.BeginRead%2A>methode.</xref:System.Net.Security.NegotiateStream.BeginRead%2A>"
  example:
  - "The following code example demonstrates reading from a <xref:System.Net.Security.NegotiateStream>.  \n  \n [!code-cs[NclNegoSyncServer#1](~/add/codesnippet/csharp/e81792fe-7974-494d-8076-_1.cs)]\n [!code-cpp[NclNegoSyncServer#1](~/add/codesnippet/cpp/e81792fe-7974-494d-8076-_1.cpp)]"
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Een <xref:System.Byte>matrix die ontvangt van het aantal bytes uit de stroom lezen.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "Een <xref:System.Int32>met de op nul gebaseerde locatie in `buffer` waarop u wilt beginnen met opslaan van de gegevens lezen uit deze stroom.</xref:System.Int32>"
    - id: count
      type: System.Int32
      description: "Een <xref:System.Int32>met het maximum aantal bytes lezen uit de stroom.</xref:System.Int32>"
    return:
      type: System.Int32
      description: "Een <xref:System.Int32>waarde waarmee het aantal bytes lezen uit de onderliggende stroom.</xref:System.Int32> Wanneer er geen gegevens meer worden gelezen, resulteert in 0."
  overload: System.Net.Security.NegotiateStream.Read*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "De leesbewerking is mislukt."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Geen heeft verificatie plaatsgevonden."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Een leesbewerking wordt al uitgevoerd."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.ReadTimeout
  id: ReadTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
  fullName: System.Net.Security.NegotiateStream.ReadTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Opgehaald of ingesteld van de hoeveelheid tijd die een leesbewerking wachten op gegevens blokkeert."
  remarks: "Deze eigenschap retourneert de waarde die is geretourneerd door het aanroepen van de <xref:System.IO.Stream.ReadTimeout%2A>-eigenschap op de onderliggende stroom.</xref:System.IO.Stream.ReadTimeout%2A> Wanneer u deze eigenschap instellen de <xref:System.IO.Stream.ReadTimeout%2A>waarde van de onderliggende stroom is ingesteld op de opgegeven waarde.</xref:System.IO.Stream.ReadTimeout%2A>       Als de onderliggende stroom een <xref:System.Net.Sockets.NetworkStream>, ReadTimeout in milliseconden en is ingesteld op <xref:System.Threading.Timeout.Infinite>standaard zodat die lezen bewerkingen kunnen geen time-out.</xref:System.Threading.Timeout.Infinite> </xref:System.Net.Sockets.NetworkStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_12_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_12_1.cpp)]"
  syntax:
    content: public override int ReadTimeout { get; set; }
    return:
      type: System.Int32
      description: "Een <xref:System.Int32>Hiermee worden de tijdsduur die verstrijkt voordat een leesbewerking is mislukt.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.ReadTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.RemoteIdentity
  id: RemoteIdentity
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
  fullName: System.Net.Security.NegotiateStream.RemoteIdentity
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hiermee haalt u informatie over de identiteit van de externe partij delen deze geverifieerde stroom."
  remarks: "Wanneer deze worden geopend door de client, wordt deze eigenschap geeft een <xref:System.Security.Principal.GenericIdentity>met de Service Principal Name (SPN) van de server en het verificatieprotocol dat wordt gebruikt.</xref:System.Security.Principal.GenericIdentity> Door de server toegankelijk is, retourneert deze eigenschap een <xref:System.Security.Principal.WindowsIdentity>die de client wordt beschreven.</xref:System.Security.Principal.WindowsIdentity> Als de <xref:System.Security.Principal.WindowsIdentity>is niet beschikbaar is, informatie over de client wordt geretourneerd naar de server in een <xref:System.Security.Principal.GenericIdentity>.</xref:System.Security.Principal.GenericIdentity> </xref:System.Security.Principal.WindowsIdentity>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoAsyncServer#2](~/add/codesnippet/csharp/p-system.net.security.ne_1_1.cs)]\n [!code-cpp[NclNegoAsyncServer#2](~/add/codesnippet/cpp/p-system.net.security.ne_1_1.cpp)]"
  syntax:
    content: public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }
    return:
      type: System.Security.Principal.IIdentity
      description: "Een <xref:System.Security.Principal.IIdentity>-object dat de identiteit van het externe eindpunt beschrijft.</xref:System.Security.Principal.IIdentity>"
  overload: System.Net.Security.NegotiateStream.RemoteIdentity*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Verificatie is mislukt of nog niet heeft plaatsgevonden."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: NegotiateStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.NegotiateStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Er wordt <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  remarks: "Roep deze methode niet. Deze is overgenomen, maar wordt niet ondersteund door <xref:System.Net.Security.NegotiateStream>.</xref:System.Net.Security.NegotiateStream>"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "Deze waarde wordt genegeerd."
    - id: origin
      type: System.IO.SeekOrigin
      description: "Deze waarde wordt genegeerd."
    return:
      type: System.Int64
      description: "Altijd genereert een <xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  overload: System.Net.Security.NegotiateStream.Seek*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Zoeken wordt niet ondersteund op <xref href=&quot;System.Net.Security.NegotiateStream&quot;> </xref>."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: NegotiateStream.SetLength(Int64)
  fullName: System.Net.Security.NegotiateStream.SetLength(Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Hiermee stelt u de lengte van de onderliggende stroom."
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "Een <xref:System.Int64>waarde waarmee de lengte van de stroom.</xref:System.Int64>"
  overload: System.Net.Security.NegotiateStream.SetLength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Het opgegeven aantal schrijven <xref:System.Byte>s naar de onderliggende stroom met de opgegeven buffer en offset.</xref:System.Byte>"
  remarks: "Als versleuteling, ondertekening of versleuteling en ondertekening zijn ingeschakeld, deze methode leest de gegevens van de buffer versleutelt, tekens of versleutelt en tekent het en verzendt met behulp van de onderliggende stroom. Als geen beveiliging services, zoals versleuteling van gegevens of ondertekening worden gebruikt, wordt deze methode aanroept <xref:System.IO.Stream.Write%2A>op de onderliggende stroom.</xref:System.IO.Stream.Write%2A>       Deze methode blokkeert terwijl de schrijfbewerking wordt voltooid. Om te voorkomen dat blokkeert terwijl de bewerking is voltooid, gebruik de methode schrijven.       U kunt deze methode niet aanroepen totdat u bent geverifieerd. Aanroepen om te verifiÃ«ren, een van de <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, of <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>methoden.</xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> </xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>       De <xref:System.Net.Security.NegotiateStream>klasse biedt geen ondersteuning voor meerdere gelijktijdige schrijfbewerkingen.</xref:System.Net.Security.NegotiateStream> Als u probeert een schrijfbewerking starten terwijl een andere schrijfbewerking wordt al uitgevoerd op de dezelfde stroom een <xref:System.NotSupportedException>uitzondering gegenereerd.</xref:System.NotSupportedException>"
  example:
  - "The following code example demonstrates writing to a <xref:System.Net.Security.NegotiateStream>.  \n  \n [!code-cs[NclNegoSyncClient#4](~/add/codesnippet/csharp/1536316b-fecf-4b4a-b33a-_1.cs)]\n [!code-cpp[NclNegoSyncClient#4](~/add/codesnippet/cpp/1536316b-fecf-4b4a-b33a-_1.cpp)]"
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "Een <xref:System.Byte>matrix die het aantal bytes geschreven naar de stroom levert.</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "Een <xref:System.Int32>met de op nul gebaseerde locatie in `buffer` waarop u wilt beginnen te lezen bytes worden geschreven naar de stroom.</xref:System.Int32>"
    - id: count
      type: System.Int32
      description: "Een <xref:System.Int32>met het aantal bytes lezen uit `buffer`.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset is less than 0</code>.  \n  \n \\- or -  \n  \n <code>offset</code> is greater than the length of <code>buffer</code>.  \n  \n \\- or -  \n  \n <code>offset</code> plus count is greater than the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The write operation failed.  \n  \n \\- or -  \n  \n Encryption is in use, but the data could not be encrypted."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Er bestaat al een schrijfbewerking uitgevoerd."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "Dit object is gesloten."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Geen heeft verificatie plaatsgevonden."
  platform:
  - net462
- uid: System.Net.Security.NegotiateStream.WriteTimeout
  id: WriteTimeout
  parent: System.Net.Security.NegotiateStream
  langs:
  - csharp
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
  fullName: System.Net.Security.NegotiateStream.WriteTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "Opgehaald of ingesteld van de hoeveelheid tijd die een schrijfbewerking wachten op gegevens blokkeert."
  remarks: "Deze eigenschap retourneert de waarde die is geretourneerd door het aanroepen van de <xref:System.IO.Stream.WriteTimeout%2A>-eigenschap op de onderliggende stroom.</xref:System.IO.Stream.WriteTimeout%2A> Voor set-bewerkingen, de opgegeven waarde bepaalt de <xref:System.IO.Stream.WriteTimeout%2A>waarde van de onderliggende stroom.</xref:System.IO.Stream.WriteTimeout%2A>       Als de onderliggende stroom een <xref:System.Net.Sockets.NetworkStream>, WriteTimeout in milliseconden en is ingesteld op <xref:System.Threading.Timeout.Infinite>standaard zodat die schrijven bewerkingen kunnen geen time-out.</xref:System.Threading.Timeout.Infinite> </xref:System.Net.Sockets.NetworkStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cs[NclNegoSyncClient#2](~/add/codesnippet/csharp/p-system.net.security.ne_11_1.cs)]\n [!code-cpp[NclNegoSyncClient#2](~/add/codesnippet/cpp/p-system.net.security.ne_11_1.cpp)]"
  syntax:
    content: public override int WriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "Een <xref:System.Int32>Hiermee worden de tijdsduur die verstrijkt voordat een schrijfbewerking is mislukt.</xref:System.Int32>"
  overload: System.Net.Security.NegotiateStream.WriteTimeout*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: System.Net.Security.AuthenticatedStream
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Authentication.AuthenticationException
  parent: System.Security.Authentication
  isExternal: false
  name: AuthenticationException
  nameWithType: AuthenticationException
  fullName: System.Security.Authentication.AuthenticationException
- uid: System.Security.Authentication.InvalidCredentialException
  parent: System.Security.Authentication
  isExternal: false
  name: InvalidCredentialException
  nameWithType: InvalidCredentialException
  fullName: System.Security.Authentication.InvalidCredentialException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream(Stream)
  nameWithType: NegotiateStream.NegotiateStream(Stream)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream(Stream,Boolean)
  nameWithType: NegotiateStream.NegotiateStream(Stream,Boolean)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(Stream,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient()
  nameWithType: NegotiateStream.AuthenticateAsClient()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String)
- uid: System.Net.NetworkCredential
  parent: System.Net
  isExternal: true
  name: NetworkCredential
  nameWithType: NetworkCredential
  fullName: System.Net.NetworkCredential
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String)
- uid: System.Security.Authentication.ExtendedProtection.ChannelBinding
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: true
  name: ChannelBinding
  nameWithType: ChannelBinding
  fullName: System.Security.Authentication.ExtendedProtection.ChannelBinding
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.ProtectionLevel
  parent: System.Net.Security
  isExternal: false
  name: ProtectionLevel
  nameWithType: ProtectionLevel
  fullName: System.Net.Security.ProtectionLevel
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: true
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync()
  nameWithType: NegotiateStream.AuthenticateAsClientAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer()
  nameWithType: NegotiateStream.AuthenticateAsServer()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(ExtendedProtectionPolicy)
- uid: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: ExtendedProtectionPolicy
  nameWithType: ExtendedProtectionPolicy
  fullName: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync()
  nameWithType: NegotiateStream.AuthenticateAsServerAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(ExtendedProtectionPolicy)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  nameWithType: NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(NetworkCredential,ChannelBinding,String,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(ExtendedProtectionPolicy,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(NetworkCredential,ExtendedProtectionPolicy,ProtectionLevel,TokenImpersonationLevel,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.NegotiateStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Net.Security.NegotiateStream.CanRead
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanRead
  nameWithType: NegotiateStream.CanRead
  fullName: System.Net.Security.NegotiateStream.CanRead
- uid: System.Net.Security.NegotiateStream.CanSeek
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
  fullName: System.Net.Security.NegotiateStream.CanSeek
- uid: System.Net.Security.NegotiateStream.CanTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
  fullName: System.Net.Security.NegotiateStream.CanTimeout
- uid: System.Net.Security.NegotiateStream.CanWrite
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
  fullName: System.Net.Security.NegotiateStream.CanWrite
- uid: System.Net.Security.NegotiateStream.Dispose(System.Boolean)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: NegotiateStream.Dispose(Boolean)
  fullName: System.Net.Security.NegotiateStream.Dispose(Boolean)
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsClient(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndAuthenticateAsServer(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndRead(IAsyncResult)
  nameWithType: NegotiateStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndRead(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndWrite(IAsyncResult)
  nameWithType: NegotiateStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.NegotiateStream.EndWrite(IAsyncResult)
- uid: System.Net.Security.NegotiateStream.Flush
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Flush()
  nameWithType: NegotiateStream.Flush()
  fullName: System.Net.Security.NegotiateStream.Flush()
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel
- uid: System.Net.Security.NegotiateStream.IsAuthenticated
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsAuthenticated
- uid: System.Net.Security.NegotiateStream.IsEncrypted
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
  fullName: System.Net.Security.NegotiateStream.IsEncrypted
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
- uid: System.Net.Security.NegotiateStream.IsServer
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsServer
  nameWithType: NegotiateStream.IsServer
  fullName: System.Net.Security.NegotiateStream.IsServer
- uid: System.Net.Security.NegotiateStream.IsSigned
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
  fullName: System.Net.Security.NegotiateStream.IsSigned
- uid: System.Net.Security.NegotiateStream.Length
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Length
  nameWithType: NegotiateStream.Length
  fullName: System.Net.Security.NegotiateStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Security.NegotiateStream.Position
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Position
  nameWithType: NegotiateStream.Position
  fullName: System.Net.Security.NegotiateStream.Position
- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Read(Byte[],Int32,Int32)
- uid: System.Net.Security.NegotiateStream.ReadTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
  fullName: System.Net.Security.NegotiateStream.ReadTimeout
- uid: System.Net.Security.NegotiateStream.RemoteIdentity
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
  fullName: System.Net.Security.NegotiateStream.RemoteIdentity
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: NegotiateStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.NegotiateStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: NegotiateStream.SetLength(Int64)
  fullName: System.Net.Security.NegotiateStream.SetLength(Int64)
- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: NegotiateStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.NegotiateStream.Write(Byte[],Int32,Int32)
- uid: System.Net.Security.NegotiateStream.WriteTimeout
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
  fullName: System.Net.Security.NegotiateStream.WriteTimeout
- uid: System.Net.Security.NegotiateStream.#ctor*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: NegotiateStream
  nameWithType: NegotiateStream.NegotiateStream
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClient
  nameWithType: NegotiateStream.AuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsClientAsync
  nameWithType: NegotiateStream.AuthenticateAsClientAsync
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServer
  nameWithType: NegotiateStream.AuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: AuthenticateAsServerAsync
  nameWithType: NegotiateStream.AuthenticateAsServerAsync
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsClient
  nameWithType: NegotiateStream.BeginAuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.BeginAuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginAuthenticateAsServer
  nameWithType: NegotiateStream.BeginAuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.BeginRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginRead
  nameWithType: NegotiateStream.BeginRead
- uid: System.Net.Security.NegotiateStream.BeginWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: BeginWrite
  nameWithType: NegotiateStream.BeginWrite
- uid: System.Net.Security.NegotiateStream.CanRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanRead
  nameWithType: NegotiateStream.CanRead
- uid: System.Net.Security.NegotiateStream.CanSeek*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanSeek
  nameWithType: NegotiateStream.CanSeek
- uid: System.Net.Security.NegotiateStream.CanTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanTimeout
  nameWithType: NegotiateStream.CanTimeout
- uid: System.Net.Security.NegotiateStream.CanWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: CanWrite
  nameWithType: NegotiateStream.CanWrite
- uid: System.Net.Security.NegotiateStream.Dispose*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Dispose
  nameWithType: NegotiateStream.Dispose
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsClient*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsClient
  nameWithType: NegotiateStream.EndAuthenticateAsClient
- uid: System.Net.Security.NegotiateStream.EndAuthenticateAsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndAuthenticateAsServer
  nameWithType: NegotiateStream.EndAuthenticateAsServer
- uid: System.Net.Security.NegotiateStream.EndRead*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndRead
  nameWithType: NegotiateStream.EndRead
- uid: System.Net.Security.NegotiateStream.EndWrite*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: EndWrite
  nameWithType: NegotiateStream.EndWrite
- uid: System.Net.Security.NegotiateStream.Flush*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Flush
  nameWithType: NegotiateStream.Flush
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ImpersonationLevel
  nameWithType: NegotiateStream.ImpersonationLevel
- uid: System.Net.Security.NegotiateStream.IsAuthenticated*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: NegotiateStream.IsAuthenticated
- uid: System.Net.Security.NegotiateStream.IsEncrypted*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsEncrypted
  nameWithType: NegotiateStream.IsEncrypted
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: NegotiateStream.IsMutuallyAuthenticated
- uid: System.Net.Security.NegotiateStream.IsServer*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsServer
  nameWithType: NegotiateStream.IsServer
- uid: System.Net.Security.NegotiateStream.IsSigned*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: IsSigned
  nameWithType: NegotiateStream.IsSigned
- uid: System.Net.Security.NegotiateStream.Length*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Length
  nameWithType: NegotiateStream.Length
- uid: System.Net.Security.NegotiateStream.Position*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Position
  nameWithType: NegotiateStream.Position
- uid: System.Net.Security.NegotiateStream.Read*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Read
  nameWithType: NegotiateStream.Read
- uid: System.Net.Security.NegotiateStream.ReadTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: ReadTimeout
  nameWithType: NegotiateStream.ReadTimeout
- uid: System.Net.Security.NegotiateStream.RemoteIdentity*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: RemoteIdentity
  nameWithType: NegotiateStream.RemoteIdentity
- uid: System.Net.Security.NegotiateStream.Seek*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Seek
  nameWithType: NegotiateStream.Seek
- uid: System.Net.Security.NegotiateStream.SetLength*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: SetLength
  nameWithType: NegotiateStream.SetLength
- uid: System.Net.Security.NegotiateStream.Write*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: Write
  nameWithType: NegotiateStream.Write
- uid: System.Net.Security.NegotiateStream.WriteTimeout*
  parent: System.Net.Security.NegotiateStream
  isExternal: false
  name: WriteTimeout
  nameWithType: NegotiateStream.WriteTimeout
