### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Collection
  id: Collection
  children:
  - Microsoft.VisualBasic.Collection.#ctor
  - Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)
  - Microsoft.VisualBasic.Collection.Clear
  - Microsoft.VisualBasic.Collection.Contains(System.String)
  - Microsoft.VisualBasic.Collection.Count
  - Microsoft.VisualBasic.Collection.GetEnumerator
  - Microsoft.VisualBasic.Collection.Item(System.Int32)
  - Microsoft.VisualBasic.Collection.Item(System.Object)
  - Microsoft.VisualBasic.Collection.Item(System.String)
  - Microsoft.VisualBasic.Collection.Remove(System.Int32)
  - Microsoft.VisualBasic.Collection.Remove(System.String)
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized
  - Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot
  - Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Clear
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem(System.Int32)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)
  - Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)
  - Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: Collection
  nameWithType: Collection
  fullName: Microsoft.VisualBasic.Collection
  type: Class
  summary: "Een Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> is een geordende reeks items die kunnen worden aangeduid als een eenheid."
  remarks: "> [!NOTE]> Indien mogelijk moet u de algemene verzamelingen in de <xref:System.Collections.Generic?displayProperty=fullName>naamruimte of het <xref:System.Collections.Concurrent>naamruimte in plaats van een Visual Basic `Collection`.</xref:System.Collections.Concurrent> </xref:System.Collections.Generic?displayProperty=fullName> Zie voor meer informatie [verzamelingen](~/add/includes/ajax-current-ext-md.md).       Het in Visual Basic `Collection` object biedt een handige manier om te verwijzen naar een bijbehorende groep items als een enkel object. De items of *elementen*in een verzameling alleen door het feit dat ze in de verzameling aanwezig moet zijn gerelateerd. Onderdelen van een verzameling geen delen van hetzelfde gegevenstype.       Kunt u een verzameling maken van andere objecten, net zoals in het volgende voorbeeld te zien.      ```   Dim coll As New Microsoft.VisualBasic.Collection()   ```Nadat u een verzameling hebt gemaakt, kunt u een van de volgende kunt doen:-toevoegen van een element met de <xref:Microsoft.VisualBasic.Collection.Add%2A>methode.</xref:Microsoft.VisualBasic.Collection.Add%2A>      -Verwijderen van een element met de <xref:Microsoft.VisualBasic.Collection.Remove%2A>methode.</xref:Microsoft.VisualBasic.Collection.Remove%2A>      -Verwijder alle elementen met de <xref:Microsoft.VisualBasic.Collection.Clear%2A>methode.</xref:Microsoft.VisualBasic.Collection.Clear%2A>      -Lees het aantal elementen in de verzameling met bevat de <xref:Microsoft.VisualBasic.Collection.Count%2A>eigenschap.</xref:Microsoft.VisualBasic.Collection.Count%2A>      -Controleer of een specifiek element aanwezig zijn bij de <xref:Microsoft.VisualBasic.Collection.Contains%2A>methode.</xref:Microsoft.VisualBasic.Collection.Contains%2A>      -Retourneren een specifiek element uit de verzameling met de <xref:Microsoft.VisualBasic.Collection.Item%2A>eigenschap.</xref:Microsoft.VisualBasic.Collection.Item%2A>      -Doorlopen van de volledige verzameling met de [voor elk... Instructie Next](~/add/includes/ajax-current-ext-md.md).          > [!NOTE] > Hoewel het in Visual Basic `Collection` -object heeft de functionaliteit is identiek aan de `Collection` object in Visual Basic 6.0, de twee kan niet samenwerken in een COM-omgeving.          > [!CAUTION] > Doorloopt een Visual Basic `Collection` is geen procedure thread-safe. Zelfs als de verzameling wordt gesynchroniseerd, kunnen andere threads nog steeds de verzameling, de enumerator is een uitzondering veroorzaakt wijzigen. Om te garanderen thread veiligheid tijdens de opsomming, de verzameling vergrendelen of het gevolg van wijzigingen die door andere threads uitzonderingen wordt onderschept. Zie voor meer informatie over het vergrendelen van een programmeerelement [SyncLock-instructie](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example creates the `Collection` object `names` and a dialog box with which a user can add objects (names) to the collection. It then displays the names in the collection, and finally empties the collection without disposing of the `Collection` object itself.  \n  \n To see how this works, choose the **Add Class** command from the **Project** menu and declare a public variable called `instanceName` at the module level of `nameClass` (type `Public instanceName`) to hold the names of each instance. Leave the default name as `nameClass`. Copy and paste the following code into the **General** section of another module, and then start it with the statement `classNamer` in another procedure. (This example works only with host applications that support classes.)  \n  \n [!code-vb[VbVbalrCollectionObject#1](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#1)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))]

      public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Collection()
  nameWithType: Collection.Collection()
  fullName: Microsoft.VisualBasic.Collection.Collection()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Maakt en retourneert een nieuwe [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object."
  remarks: "De [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] verzameling geretourneerd door deze constructor is leeg en heeft geen een initiÃ«le capaciteit toegewezen.       [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]verzamelingen zijn niet compatibel met de [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] verzamelingen die beschikbaar zijn in de <xref:System.Collections?displayProperty=fullName>, <xref:System.Collections.Generic?displayProperty=fullName>, en <xref:System.Collections.Specialized?displayProperty=fullName>naamruimten.</xref:System.Collections.Specialized?displayProperty=fullName> </xref:System.Collections.Generic?displayProperty=fullName> </xref:System.Collections?displayProperty=fullName>"
  example:
  - "The following example creates a new [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] collection and assigns it to the variable `coll`:  \n  \n```  \nDim coll As New Microsoft.VisualBasic.Collection()  \n```  \n  \n This `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property. [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)] collections hold elements of type <xref:System.Object>."
  syntax:
    content: public Collection ();
    parameters: []
  overload: Microsoft.VisualBasic.Collection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)
  id: Add(System.Object,System.String,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Add(Object,String,Object,Object)
  nameWithType: Collection.Add(Object,String,Object,Object)
  fullName: Microsoft.VisualBasic.Collection.Add(Object,String,Object,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Voegt een element dat u wilt een <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> object."
  remarks: "De `Before` of `After` argument moet verwijzen naar een bestaand element van de verzameling; anders wordt er een fout optreedt.       Als zowel de `Before` en `After` argumenten worden weggelaten, wordt het nieuwe object toegevoegd aan het einde van de verzameling.       Een fout vindt ook plaats wanneer een opgegeven `Key` waarde komt overeen met de sleutel voor een bestaand element van de verzameling."
  example:
  - "The following example uses the `Add` method to add `child` objects â instances of a class called `child` containing a `Public` property `name` â to a collection called `family`. To see how this works, create a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.Button> controls and set their <xref:System.Windows.Forms.Control.Text%2A> properties to `Add` and `List`. Add the `child` class definition and the `family` declaration to the form code. Modify the `_Click` event handlers for the **Add** and **List** buttons as shown. The **Add** button allows you to add children. The **List** button displays the names of all the children.  \n  \n [!code-vb[VbVbalrCollectionObject#2](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Form1.vb#2)]"
  syntax:
    content: public void Add (object Item, string Key = null, object Before = null, object After = null);
    parameters:
    - id: Item
      type: System.Object
      description: "Vereist. Een object van het type dat Hiermee geeft u het element dat u wilt toevoegen aan de verzameling."
    - id: Key
      type: System.String
      description: "Optioneel. Een unieke <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie waarmee een sleutelreeks die kan worden gebruikt in plaats van een positionele index voor toegang tot deze nieuwe element in de verzameling."
    - id: Before
      type: System.Object
      description: "Optioneel. Een expressie waarmee een relatieve positie in de verzameling. Het element dat moet worden toegevoegd is geplaatst in de verzameling voordat het element dat wordt geÃ¯dentificeerd door de `Before` argument. Als `Before` is een numerieke expressie, deze moet een getal van 1 tot en met de waarde van de verzameling <xref:Microsoft.VisualBasic.Collection.Count*>eigenschap.</xref:Microsoft.VisualBasic.Collection.Count*> Als `Before` is een <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie, moet deze corresponderen met de sleutel tekenreeks die is opgegeven bij het element waarnaar wordt verwezen is toegevoegd aan de verzameling. U kunt niet beide opgeven `Before` en `After`."
    - id: After
      type: System.Object
      description: "Optioneel. Een expressie waarmee een relatieve positie in de verzameling. Het element dat moet worden toegevoegd is geplaatst in de verzameling na het element dat wordt geÃ¯dentificeerd door de `After` argument. Als `After` is een numerieke expressie, deze moet een getal van 1 tot en met de waarde van de verzameling <xref uid=&quot;langword_csharp_Count&quot; name=&quot;Count&quot; href=&quot;&quot;> </xref> eigenschap. Als `After` is een <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie, moet deze corresponderen met de sleutel tekenreeks die is opgegeven bij het element waarnaar wordt verwezen is toegevoegd aan de verzameling. U kunt niet beide opgeven `Before` en `After`."
  overload: Microsoft.VisualBasic.Collection.Add*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Clear
  id: Clear
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Clear()
  nameWithType: Collection.Clear()
  fullName: Microsoft.VisualBasic.Collection.Clear()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Hiermee verwijdert u alle elementen van een Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> object."
  remarks: "De `Clear` methode leegt van de verzameling en herstelt u de <xref:Microsoft.VisualBasic.Collection.Count%2A>eigenschap in op 0.</xref:Microsoft.VisualBasic.Collection.Count%2A>"
  example:
  - '[!code-vb[VbVbalrCollectionObject#3](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#3)]'
  syntax:
    content: public void Clear ();
    parameters: []
  overload: Microsoft.VisualBasic.Collection.Clear*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Contains(System.String)
  id: Contains(System.String)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: Collection.Contains(String)
  fullName: Microsoft.VisualBasic.Collection.Contains(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> waarde die aangeeft of een Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> object bevat een element met een specifieke sleutel."
  remarks: "`Contains`retourneert `True` als de verzameling bevat een element met een sleutel die exact overeenkomt met `Key`. Anders `Contains` retourneert `False`. Aanvraag wordt genegeerd wanneer die overeenkomt met de sleutelwaarden.       Een Visual Basic `Collection` bepaalde elementen die sleutels en andere elementen zonder sleutels kan bevatten. Dit is afhankelijk van of u de aanroep van de <xref:Microsoft.VisualBasic.Collection.Add%2A>methode levert een argument voor de optionele `Key` parameter.</xref:Microsoft.VisualBasic.Collection.Add%2A>"
  example:
  - "[!code-vb[VbVbalrCollectionObject#4](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#4)]  \n  \n If you intend to search the collection for elements using their keys, remember to supply the `Key` argument every time you call the `Add` method."
  syntax:
    content: public bool Contains (string Key);
    parameters:
    - id: Key
      type: System.String
      description: "Vereist. Een <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie waarmee de sleutel voor waarnaar u zoekt de elementen van de verzameling."
    return:
      type: System.Boolean
      description: "Retourneert een <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> waarde die aangeeft of een Visual Basic <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> object bevat een element met een specifieke sleutel."
  overload: Microsoft.VisualBasic.Collection.Contains*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Count
  id: Count
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Count
  nameWithType: Collection.Count
  fullName: Microsoft.VisualBasic.Collection.Count
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> met het aantal elementen in een verzameling. Alleen-lezen."
  remarks: "Gebruik de `Count` eigenschap om te bepalen het aantal elementen in een `Collection` object."
  example:
  - "This example illustrates the use of the `Count` property to display the number of elements in a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#6](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#6)]  \n  \n The `Collection` object is one-based, which means that the index values of the elements range from 1 through the value of the `Count` property."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Retourneert een <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref> met het aantal elementen in een verzameling. Alleen-lezen."
  overload: Microsoft.VisualBasic.Collection.Count*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: Collection.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.GetEnumerator()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een verwijzing naar een enumerator-object dat wordt gebruikt om via een <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object."
  remarks: "De [voor elk... Instructie Next](~/add/includes/ajax-current-ext-md.md) aanroepen `GetEnumerator` verkrijgen van een enumerator-object voor de ondersteuning van herhaling via een verzameling elementen. Normaal gesproken gebruikt u een `For Each`... `Next` herhalen om een verzameling of een matrix en hoeft u niet aan te roepen `GetEnumerator` expliciet.       Als u meer controle over de herhaling dan moet de `For Each`... `Next` instructies bieden, kunt u de `GetEnumerator` methode voor het uitvoeren van een aangepaste traversal. Hier volgen enkele gevallen waarin u moet mogelijk u dit doet.      -U mogelijk wilt terugkeren naar het begin van de verzameling en de herhaling opnieuw starten voordat deze is voltooid.      -U wilt mogelijk een of meer elementen voor een aantal redenen overslaan.      -U hebt mogelijk de onderdelen van de verzameling in het midden van een traversal wijzigen. In dit geval moet u een nieuw object van de enumerator verkrijgen omdat de vorige bewerking is ongeldig gemaakt."
  example:
  - "The following example shows how to use `GetEnumerator` to retrieve all the elements of a `Collection` object.  \n  \n [!code-vb[VbVbalrCollectionObject#7](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#7)]  \n  \n `GetEnumerator` constructs and returns an enumerator object, which implements the <xref:System.Collections.IEnumerator> interface of the <xref:System.Collections> namespace. The enumerator object exposes the <xref:System.Collections.IEnumerator.Current%2A> property and the <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Reset%2A> methods. For more information, see [For Each...Next Statement](../Topic/For%20Each...Next%20Statement%20\\(Visual%20Basic\\).md)."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Retourneert een verwijzing naar een enumerator-object dat wordt gebruikt om via een <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object."
  overload: Microsoft.VisualBasic.Collection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: Collection.Item(Int32)
  fullName: Microsoft.VisualBasic.Collection.Item(Int32)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een bepaald element van een <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> object positie of sleutel. Alleen-lezen."
  remarks: "Als `Index` is van het type `Object`, wordt de `Item` eigenschap probeert te behandelen als een `String`, `Char`, `Char` matrix of een geheel getal. Als `Item` kan niet worden geconverteerd `Index` naar `String` of `Integer`, het genereert een <xref:System.ArgumentException>uitzondering.</xref:System.ArgumentException>       De `Item` eigenschap is de standaardinstelling voor de eigenschap voor een verzameling. Daarom zijn de volgende regels code equivalent.      ```   MsgBox(CStr(customers.Item(1)))   MsgBox(CStr(customers(1)))   ```"
  example:
  - "The following example uses the `Item` property to retrieve a reference to an object in a collection. It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `\"Bill\"` as the `Index` argument.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#8](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#8)]  \n  \n Note that the first call explicitly specifies the `Item` property, but the second does not. Both calls work because the `Item` property is the default property for a `Collection` object."
  syntax:
    content: public object this[int Index] { get; }
    parameters:
    - id: Index
      type: System.Int32
      description: "(A) een numerieke expressie waarmee de positie van een element van de verzameling. `Index`moet een getal tussen 1 en de waarde van de verzameling <xref:Microsoft.VisualBasic.Collection.Count*>eigenschap.</xref:Microsoft.VisualBasic.Collection.Count*> Of (B) een <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> expressie waarmee de positie of sleutel tekenreeks van een element van de verzameling."
    return:
      type: System.Object
      description: "Retourneert een bepaald element van een <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> object positie of sleutel. Alleen-lezen."
  overload: Microsoft.VisualBasic.Collection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Item(System.Object)
  id: Item(System.Object)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Item(Object)
  nameWithType: Collection.Item(Object)
  fullName: Microsoft.VisualBasic.Collection.Item(Object)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een bepaald element van een <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> object positie of sleutel. Alleen-lezen."
  remarks: "Als `Index` is van het type `Object`, wordt de `Item` eigenschap probeert te behandelen als een `String`, `Char`, `Char` matrix of een geheel getal. Als `Item` kan niet worden geconverteerd `Index` naar `String` of `Integer`, het genereert een <xref:System.ArgumentException>uitzondering.</xref:System.ArgumentException>       De `Item` eigenschap is de standaardinstelling voor de eigenschap voor een verzameling. Daarom zijn de volgende regels code equivalent.      ```   MsgBox(CStr(customers.Item(1)))   MsgBox(CStr(customers(1)))   ```"
  example:
  - "The following example uses the `Item` property to retrieve a reference to an object in a collection. It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `\"Bill\"` as the `Index` argument.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#8](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#8)]  \n  \n Note that the first call explicitly specifies the `Item` property, but the second does not. Both calls work because the `Item` property is the default property for a `Collection` object."
  syntax:
    content: public object this[object Index] { get; }
    parameters:
    - id: Index
      type: System.Object
      description: "(A) een numerieke expressie waarmee de positie van een element van de verzameling. `Index`moet een getal tussen 1 en de waarde van de verzameling <xref:Microsoft.VisualBasic.Collection.Count*>eigenschap.</xref:Microsoft.VisualBasic.Collection.Count*> Of (B) een <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> expressie waarmee de positie of sleutel tekenreeks van een element van de verzameling."
    return:
      type: System.Object
      description: "Retourneert een bepaald element van een <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> object positie of sleutel. Alleen-lezen."
  overload: Microsoft.VisualBasic.Collection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Item(System.String)
  id: Item(System.String)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Item(String)
  nameWithType: Collection.Item(String)
  fullName: Microsoft.VisualBasic.Collection.Item(String)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een bepaald element van een <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> object positie of sleutel. Alleen-lezen."
  remarks: "Als `Index` is van het type `Object`, wordt de `Item` eigenschap probeert te behandelen als een `String`, `Char`, `Char` matrix of een geheel getal. Als `Item` kan niet worden geconverteerd `Index` naar `String` of `Integer`, het genereert een <xref:System.ArgumentException>uitzondering.</xref:System.ArgumentException>       De `Item` eigenschap is de standaardinstelling voor de eigenschap voor een verzameling. Daarom zijn de volgende regels code equivalent.      ```   MsgBox(CStr(customers.Item(1)))   MsgBox(CStr(customers(1)))   ```"
  example:
  - "The following example uses the `Item` property to retrieve a reference to an object in a collection. It creates `birthdays` as a `Collection` object and then retrieves the object representing Bill's birthday, using the key `\"Bill\"` as the `Index` argument.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#8](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#8)]  \n  \n Note that the first call explicitly specifies the `Item` property, but the second does not. Both calls work because the `Item` property is the default property for a `Collection` object."
  syntax:
    content: public object this[string Key] { get; }
    parameters:
    - id: Key
      type: System.String
      description: "Een unieke <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie waarmee een sleutelreeks die kan worden gebruikt, in plaats van een positionele index voor toegang tot een element van de verzameling. `Key`moet overeenkomen met de `Key` argument opgegeven waarop het element is toegevoegd aan de verzameling."
    return:
      type: System.Object
      description: "Retourneert een bepaald element van een <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> object positie of sleutel. Alleen-lezen."
  overload: Microsoft.VisualBasic.Collection.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Remove(System.Int32)
  id: Remove(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Remove(Int32)
  nameWithType: Collection.Remove(Int32)
  fullName: Microsoft.VisualBasic.Collection.Remove(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Hiermee verwijdert u een element vanuit een <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> object."
  remarks: "Wanneer `Remove` een element van een verzameling, verwijdert deze afloopt in stappen van de verzameling <xref:Microsoft.VisualBasic.Collection.Count%2A>eigenschap door een.</xref:Microsoft.VisualBasic.Collection.Count%2A> Deze ook verlaagt de `Index` waarde van elk element dat voorheen gevolgd verwijderde element in de verzameling.       Als een element is toegevoegd aan de verzameling zonder een `Key`, moet u de `Index` te verwijderen."
  example:
  - "This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#9](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#9)]  \n  \n Following the four calls to the `Add` method, the `Count` property contains 4, element `\"Bill\"` has index value 1, and element `\"Pete\"` has index value 4.  \n  \n Following the first call to `Remove`, `Count` is 3, element `\"Bill\"` is deleted, and element `\"Pete\"` has index value 3.  \n  \n Following the second call to `Remove`, `Count` is 2, element `\"Mike\"` is deleted, and element `\"Pete\"` has index value 2."
  syntax:
    content: public void Remove (int Index);
    parameters:
    - id: Index
      type: System.Int32
      description: "Een numerieke expressie waarmee de positie van een element van de verzameling. `Index`moet een getal tussen 1 en de waarde van de verzameling <xref:Microsoft.VisualBasic.Collection.Count*>eigenschap.</xref:Microsoft.VisualBasic.Collection.Count*>"
  overload: Microsoft.VisualBasic.Collection.Remove*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.Remove(System.String)
  id: Remove(System.String)
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: Remove(String)
  nameWithType: Collection.Remove(String)
  fullName: Microsoft.VisualBasic.Collection.Remove(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Hiermee verwijdert u een element vanuit een <xref uid=&quot;langword_csharp_Collection&quot; name=&quot;Collection&quot; href=&quot;&quot;> </xref> object."
  remarks: "Wanneer `Remove` een element van een verzameling, verwijdert deze afloopt in stappen van de verzameling <xref:Microsoft.VisualBasic.Collection.Count%2A>eigenschap door een.</xref:Microsoft.VisualBasic.Collection.Count%2A> Deze ook verlaagt de `Index` waarde van elk element dat voorheen gevolgd verwijderde element in de verzameling.       Als een element is toegevoegd aan de verzameling zonder een `Key`, moet u de `Index` te verwijderen."
  example:
  - "This example illustrates the use of the `Remove` method to remove objects from a <xref:Microsoft.VisualBasic.Collection> object in the variable `birthdays`.  \n  \n [!code-vb[VbVbalrCollectionObject#5](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#5)]  \n[!code-vb[VbVbalrCollectionObject#9](~/add/codesnippet/visualbasic/VbVbalrCollectionObject/Class1.vb#9)]  \n  \n Following the four calls to the `Add` method, the `Count` property contains 4, element `\"Bill\"` has index value 1, and element `\"Pete\"` has index value 4.  \n  \n Following the first call to `Remove`, `Count` is 3, element `\"Bill\"` is deleted, and element `\"Pete\"` has index value 3.  \n  \n Following the second call to `Remove`, `Count` is 2, element `\"Mike\"` is deleted, and element `\"Pete\"` has index value 2."
  syntax:
    content: public void Remove (string Key);
    parameters:
    - id: Key
      type: System.String
      description: "Een unieke <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie waarmee een sleutelreeks die kan worden gebruikt, in plaats van een positionele index voor toegang tot een element van de verzameling. `Key`moet overeenkomen met de `Key` argument opgegeven waarop het element is toegevoegd aan de verzameling."
  overload: Microsoft.VisualBasic.Collection.Remove*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: Collection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Kopieert de elementen van de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> naar een <xref:System.Array>, te beginnen bij een bepaalde <xref:System.Array>index.</xref:System.Array> </xref:System.Array> Implementeert de <xref:System.Collections.ICollection>interface.</xref:System.Collections.ICollection>"
  remarks: "De elementen zijn gekopieerd naar de <xref:System.Array>in dezelfde volgorde als waarin de enumerator doorloopt de <xref:Microsoft.VisualBasic.Collection>object.</xref:Microsoft.VisualBasic.Collection> </xref:System.Array>       Deze methode is een O (`n`)-bewerking, waarbij `n` wordt opgehaald uit de <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count%2A>.</xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count%2A>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "De eendimensionale <xref:System.Array>die het doel van de elementen die zijn gekopieerd uit <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object.</xref:System.Array> De <xref:System.Array>moet hebben op nul gebaseerde indexering.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index in `array` welke kopiÃ«ren begint."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>is multidimensionaal.       - of - het aantal elementen in de bron <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object is groter dan de beschikbare ruimte vanaf <code>index</code> aan het einde van de bestemming <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Het type van de bron <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object kan niet automatisch worden geconverteerd naar het type van de bestemming <code> array </code>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount
  id: System#Collections#ICollection#ICollectionCount
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.ICollectionCount
  nameWithType: Collection.System.Collections.ICollection.ICollectionCount
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionCount
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: int System.Collections.ICollection.ICollectionCount { get; }
    return:
      type: System.Int32
      description: "Moet worden toegevoegd."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized
  id: System#Collections#ICollection#ICollectionIsSynchronized
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.ICollectionIsSynchronized
  nameWithType: Collection.System.Collections.ICollection.ICollectionIsSynchronized
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionIsSynchronized
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: bool System.Collections.ICollection.ICollectionIsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Moet worden toegevoegd."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot
  id: System#Collections#ICollection#ICollectionSyncRoot
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.ICollection.ICollectionSyncRoot
  nameWithType: Collection.System.Collections.ICollection.ICollectionSyncRoot
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionSyncRoot
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: object System.Collections.ICollection.ICollectionSyncRoot { get; }
    return:
      type: System.Object
      description: "Moet worden toegevoegd."
  overload: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Collection.System.Collections.IEnumerable.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een enumerator die de verzameling doorlopen. Implementeert de <xref:System.Collections.ICollection>interface.</xref:System.Collections.ICollection>"
  remarks: "[Visual Basic C#]       De `foreach` -instructie van de taal C# (`for each` in Visual Basic) de complexiteit van de opsommingen worden verborgen. Daarom kan het gebruik `foreach` wordt aanbevolen, in plaats van rechtstreeks bewerken van de enumerator.       Enumerators kunnen worden gebruikt om de gegevens in de verzameling te lezen, maar ze kunnen niet worden gebruikt om de onderliggende verzameling niet wijzigen.       In eerste instantie bevindt de enumerator zich vÃ³Ã³r het eerste element in de verzameling. De <xref:System.Collections.IEnumerator.Reset%2A>methode brengt ook de enumerator terug naar deze positie.</xref:System.Collections.IEnumerator.Reset%2A> Op deze positie de <xref:System.Collections.IEnumerator.Current%2A>eigenschap is niet gedefinieerd.</xref:System.Collections.IEnumerator.Current%2A> Daarom moet u de <xref:System.Collections.IEnumerator.MoveNext%2A>methode om door te gaan van de enumerator voor het eerste element van de verzameling voordat het lezen van <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> aanroepen       <xref:System.Collections.IEnumerator.Current%2A>retourneert de hetzelfde object totdat de <xref:System.Collections.IEnumerator.MoveNext%2A>of <xref:System.Collections.IEnumerator.Reset%2A>wordt aangeroepen.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Hiermee stelt u <xref:System.Collections.IEnumerator.Current%2A>naar het volgende element.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Als <xref:System.Collections.IEnumerator.MoveNext%2A>geeft het einde van de verzameling, de enumerator bevindt zich na het laatste element in de verzameling en <xref:System.Collections.IEnumerator.MoveNext%2A>retourneert `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Wanneer de enumerator is op deze positie, volgende aanroepen naar <xref:System.Collections.IEnumerator.MoveNext%2A>ook retourneren `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Als de laatste aanroep aan <xref:System.Collections.IEnumerator.MoveNext%2A>retourneert `false`, <xref:System.Collections.IEnumerator.Current%2A>is niet gedefinieerd.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>U kunt naar het eerste element van de verzameling opnieuw aanroepen <xref:System.Collections.IEnumerator.Reset%2A>gevolgd door <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> instellen       Een enumerator blijft geldig zolang de verzameling ongewijzigd blijft. Als er wijzigingen zijn aangebracht aan de verzameling, zoals het toevoegen, wijzigen of verwijderen van elementen, de enumerator is permanent ongeldig en het gedrag is niet gedefinieerd.       De enumerator heeft geen exclusieve toegang tot de verzameling; inventariseren door middel van een verzameling is daarom intrinsiek geen procedure thread-safe. Om te garanderen thread veiligheid tijdens de opsomming, vergrendelt u de verzameling gedurende de volledige inventarisatie. Als u wilt toestaan dat de verzameling worden geopend door meerdere threads voor lezen en schrijven, moet u uw eigen synchronisatie implementeren."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Een <xref:System.Collections.IEnumerator>-object dat kan worden gebruikt voor de collectie doorlopen.</xref:System.Collections.IEnumerator>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: Collection.System.Collections.IList.Add(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Voegt een item naar de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object. Implementeert de <xref:System.Collections.IList>interface.</xref:System.Collections.IList>"
  remarks: "U kunt ook de <xref:Microsoft.VisualBasic.Collection.Item%2A>eigenschap toevoegen van nieuwe elementen door de waarde van een sleutel die niet bestaat de <xref:Microsoft.VisualBasic.Collection>object.</xref:Microsoft.VisualBasic.Collection> </xref:Microsoft.VisualBasic.Collection.Item%2A>"
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>toevoegen aan de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object.</xref:System.Object>"
    return:
      type: System.Int32
      description: "De positie waarin het nieuwe element is ingevoegd."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object is alleen-lezen.       - of - de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> -object heeft een vaste grootte."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Clear()
  nameWithType: Collection.System.Collections.IList.Clear()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Clear()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Hiermee verwijdert u alle items uit de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object. Implementeert de <xref:System.Collections.IList>interface.</xref:System.Collections.IList>"
  remarks: "Deze methode verwijdert u alle items uit de <xref:Microsoft.VisualBasic.Collection>object.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void IList.Clear ();
    parameters: []
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref:System.Collections.IList>is alleen-lezen.</xref:System.Collections.IList>"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: Collection.System.Collections.IList.Contains(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Hiermee wordt bepaald of de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object bevat een bepaalde waarde. Implementeert de <xref:System.Collections.IList>interface.</xref:System.Collections.IList>"
  remarks: "Deze methode bepaalt of de <xref:Microsoft.VisualBasic.Collection>object bevat een bepaalde waarde.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>te vinden in de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object.</xref:System.Object>"
    return:
      type: System.Boolean
      description: "Retourneert <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> als de <xref:System.Object>is gevonden in de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object; anders <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>.</xref:System.Object>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize
  id: System#Collections#IList#IListIsFixedSize
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IListIsFixedSize
  nameWithType: Collection.System.Collections.IList.IListIsFixedSize
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsFixedSize
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: bool System.Collections.IList.IListIsFixedSize { get; }
    return:
      type: System.Boolean
      description: "Moet worden toegevoegd."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly
  id: System#Collections#IList#IListIsReadOnly
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IListIsReadOnly
  nameWithType: Collection.System.Collections.IList.IListIsReadOnly
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsReadOnly
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: bool System.Collections.IList.IListIsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Moet worden toegevoegd."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem(System.Int32)
  id: System#Collections#IList#IListItem(System.Int32)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IListItem(Int32)
  nameWithType: Collection.System.Collections.IList.IListItem(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListItem(Int32)
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: object System.Collections.IList.IListItem[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "Moet worden toegevoegd."
    return:
      type: System.Object
      description: "Moet worden toegevoegd."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: Collection.System.Collections.IList.IndexOf(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Bepaalt de index van een specifiek item in de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object. Implementeert de <xref:System.Collections.IList>interface.</xref:System.Collections.IList>"
  remarks: "Deze methode bepaalt de index van een specifiek item in de <xref:Microsoft.VisualBasic.Collection>object.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>te vinden in de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object.</xref:System.Object>"
    return:
      type: System.Int32
      description: "De index van <code> value </code> als gevonden in de verzameling, anders wordt -1."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: Collection.System.Collections.IList.Insert(Int32,Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Voegt een item naar de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object in de opgegeven index. Implementeert de <xref:System.Collections.IList>interface.</xref:System.Collections.IList>"
  remarks: "Als `index` gelijk is aan het aantal items in de <xref:Microsoft.VisualBasic.Collection>object vervolgens `value` is toegevoegd aan het einde.</xref:Microsoft.VisualBasic.Collection>       Geschikt voor het nieuwe element in verzamelingen van aangrenzende elementen, zoals lijsten, de elementen die achter de invoegpositie omlaag te verplaatsen. Als de verzameling is geÃ¯ndexeerd, worden de indexen van de elementen die verplaatst worden ook bijgewerkt. Dit gedrag is niet van toepassing op verzamelingen waar elementen conceptueel gezien zijn gegroepeerd in buckets, zoals een hash-tabel."
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index waarop `value` moet worden ingevoegd."
    - id: value
      type: System.Object
      description: "De <xref:System.Object>worden ingevoegd in de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object.</xref:System.Object>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is geen geldige index in de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object is alleen-lezen.       - of - de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> -object heeft een vaste grootte."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>value</code>is null-verwijzing in de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: Collection.System.Collections.IList.Remove(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Hiermee verwijdert u het eerste exemplaar van een specifiek object van het <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object. Implementeert de <xref:System.Collections.IList>interface.</xref:System.Collections.IList>"
  remarks: "In verzamelingen van aangrenzende elementen, zoals lijsten, verplaatsen de elementen die achter de verwijderde element omhoog naar de vrijgekomen spot in beslag nemen. Als de verzameling is geÃ¯ndexeerd, worden de indexen van de elementen die verplaatst worden ook bijgewerkt. Dit gedrag is niet van toepassing op verzamelingen waar elementen conceptueel gezien zijn gegroepeerd in buckets, zoals een hash-tabel. Als `value` is niet gevonden in de <xref:Microsoft.VisualBasic.Collection>object, de <xref:Microsoft.VisualBasic.Collection>object blijft ongewijzigd, en er is geen uitzondering.</xref:Microsoft.VisualBasic.Collection> </xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>verwijderen uit de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object.</xref:System.Object>"
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object is alleen-lezen.       - of - de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> -object heeft een vaste grootte."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: Collection.System.Collections.IList.RemoveAt(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.RemoveAt(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Hiermee verwijdert u de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object item in de opgegeven index. Implementeert de <xref:System.Collections.IList>interface.</xref:System.Collections.IList>"
  remarks: "In verzamelingen van aangrenzende elementen, zoals lijsten, verplaatsen de elementen die achter de verwijderde element omhoog naar de vrijgekomen spot in beslag nemen. Als de verzameling is geÃ¯ndexeerd, worden de indexen van de elementen die verplaatst worden ook bijgewerkt. Dit gedrag is niet van toepassing op verzamelingen waar elementen conceptueel gezien zijn gegroepeerd in buckets, zoals een hash-tabel."
  syntax:
    content: void IList.RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index van het item te verwijderen."
  overload: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is geen geldige index in de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object is alleen-lezen.       - of - de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> -object heeft een vaste grootte."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Wordt uitgevoerd nadat de hele <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> objectgrafiek is gedeserialiseerd. Implementeert de <xref href=&quot;System.Runtime.Serialization.IDeserializationCallback&quot;> </xref> interface."
  remarks: "Deze methode wordt aangeroepen nadat de hele <xref:Microsoft.VisualBasic.Collection>objectgrafiek is gedeserialiseerd.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "Het object dat de retouraanroep wordt gestart."
  overload: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: Microsoft.VisualBasic.Collection
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert de gegevens die nodig zijn voor het serialiseren van de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object. Implementeert de <xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref> interface."
  remarks: "Deze methode retourneert de gegevens die nodig zijn voor het serialiseren van de <xref:Microsoft.VisualBasic.Collection>object.</xref:Microsoft.VisualBasic.Collection>"
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "Een <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> -object met de informatie die is vereist voor het serialiseren van de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Een <xref:System.Runtime.Serialization.StreamingContext>object met de bron en bestemming van de geserialiseerde stroom die zijn gekoppeld aan de <xref href=&quot;Microsoft.VisualBasic.Collection&quot;> </xref> object.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: Microsoft.VisualBasic.Collection.#ctor
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Collection()
  nameWithType: Collection.Collection()
  fullName: Microsoft.VisualBasic.Collection.Collection()
- uid: Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Add(Object,String,Object,Object)
  nameWithType: Collection.Add(Object,String,Object,Object)
  fullName: Microsoft.VisualBasic.Collection.Add(Object,String,Object,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Collection.Clear
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Clear()
  nameWithType: Collection.Clear()
  fullName: Microsoft.VisualBasic.Collection.Clear()
- uid: Microsoft.VisualBasic.Collection.Contains(System.String)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Contains(String)
  nameWithType: Collection.Contains(String)
  fullName: Microsoft.VisualBasic.Collection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Collection.Count
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Count
  nameWithType: Collection.Count
  fullName: Microsoft.VisualBasic.Collection.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Collection.GetEnumerator
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: GetEnumerator()
  nameWithType: Collection.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: Microsoft.VisualBasic.Collection.Item(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item(Int32)
  nameWithType: Collection.Item(Int32)
  fullName: Microsoft.VisualBasic.Collection.Item(Int32)
- uid: Microsoft.VisualBasic.Collection.Item(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item(Object)
  nameWithType: Collection.Item(Object)
  fullName: Microsoft.VisualBasic.Collection.Item(Object)
- uid: Microsoft.VisualBasic.Collection.Item(System.String)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item(String)
  nameWithType: Collection.Item(String)
  fullName: Microsoft.VisualBasic.Collection.Item(String)
- uid: Microsoft.VisualBasic.Collection.Remove(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Remove(Int32)
  nameWithType: Collection.Remove(Int32)
  fullName: Microsoft.VisualBasic.Collection.Remove(Int32)
- uid: Microsoft.VisualBasic.Collection.Remove(System.String)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Remove(String)
  nameWithType: Collection.Remove(String)
  fullName: Microsoft.VisualBasic.Collection.Remove(String)
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: Collection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionCount
  nameWithType: Collection.System.Collections.ICollection.ICollectionCount
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionCount
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionIsSynchronized
  nameWithType: Collection.System.Collections.ICollection.ICollectionIsSynchronized
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionIsSynchronized
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionSyncRoot
  nameWithType: Collection.System.Collections.ICollection.ICollectionSyncRoot
  fullName: Microsoft.VisualBasic.Collection.System.Collections.ICollection.ICollectionSyncRoot
- uid: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: Collection.System.Collections.IEnumerable.GetEnumerator()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: Collection.System.Collections.IList.Add(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Add(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Clear()
  nameWithType: Collection.System.Collections.IList.Clear()
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Clear()
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: Collection.System.Collections.IList.Contains(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Contains(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsFixedSize
  nameWithType: Collection.System.Collections.IList.IListIsFixedSize
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsFixedSize
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsReadOnly
  nameWithType: Collection.System.Collections.IList.IListIsReadOnly
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListIsReadOnly
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListItem(Int32)
  nameWithType: Collection.System.Collections.IList.IListItem(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IListItem(Int32)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: Collection.System.Collections.IList.IndexOf(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.IndexOf(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: Collection.System.Collections.IList.Insert(Int32,Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Insert(Int32,Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: Collection.System.Collections.IList.Remove(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.Remove(Object)
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.RemoveAt(Int32)
  nameWithType: Collection.System.Collections.IList.RemoveAt(Int32)
  fullName: Microsoft.VisualBasic.Collection.System.Collections.IList.RemoveAt(Int32)
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: Microsoft.VisualBasic.Collection.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: Microsoft.VisualBasic.Collection.#ctor*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Collection
  nameWithType: Collection.Collection
- uid: Microsoft.VisualBasic.Collection.Add*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Add
  nameWithType: Collection.Add
- uid: Microsoft.VisualBasic.Collection.Clear*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Clear
  nameWithType: Collection.Clear
- uid: Microsoft.VisualBasic.Collection.Contains*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Contains
  nameWithType: Collection.Contains
- uid: Microsoft.VisualBasic.Collection.Count*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Count
  nameWithType: Collection.Count
- uid: Microsoft.VisualBasic.Collection.GetEnumerator*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: GetEnumerator
  nameWithType: Collection.GetEnumerator
- uid: Microsoft.VisualBasic.Collection.Item*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Item
  nameWithType: Collection.Item
- uid: Microsoft.VisualBasic.Collection.Remove*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: Remove
  nameWithType: Collection.Remove
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: Collection.System.Collections.ICollection.CopyTo
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionCount*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionCount
  nameWithType: Collection.System.Collections.ICollection.ICollectionCount
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionIsSynchronized*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionIsSynchronized
  nameWithType: Collection.System.Collections.ICollection.ICollectionIsSynchronized
- uid: Microsoft.VisualBasic.Collection.System#Collections#ICollection#ICollectionSyncRoot*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.ICollection.ICollectionSyncRoot
  nameWithType: Collection.System.Collections.ICollection.ICollectionSyncRoot
- uid: Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: Collection.System.Collections.IEnumerable.GetEnumerator
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Add*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: Collection.System.Collections.IList.Add
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Clear*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Clear
  nameWithType: Collection.System.Collections.IList.Clear
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Contains*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: Collection.System.Collections.IList.Contains
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsFixedSize*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsFixedSize
  nameWithType: Collection.System.Collections.IList.IListIsFixedSize
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListIsReadOnly*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListIsReadOnly
  nameWithType: Collection.System.Collections.IList.IListIsReadOnly
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IListItem*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IListItem
  nameWithType: Collection.System.Collections.IList.IListItem
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: Collection.System.Collections.IList.IndexOf
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Insert*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: Collection.System.Collections.IList.Insert
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#Remove*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: Collection.System.Collections.IList.Remove
- uid: Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Collections.IList.RemoveAt
  nameWithType: Collection.System.Collections.IList.RemoveAt
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: Collection.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
- uid: Microsoft.VisualBasic.Collection.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: Microsoft.VisualBasic.Collection
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: Collection.System.Runtime.Serialization.ISerializable.GetObjectData
