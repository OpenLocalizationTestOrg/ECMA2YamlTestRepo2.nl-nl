### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Description.IServiceBehavior
  id: IServiceBehavior
  children:
  - System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  - System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  - System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  langs:
  - csharp
  name: IServiceBehavior
  nameWithType: IServiceBehavior
  fullName: System.ServiceModel.Description.IServiceBehavior
  type: Interface
  summary: "Biedt een mechanisme om te wijzigen of aangepaste extensies invoegen in een hele service, inclusief de <xref href=&quot;System.ServiceModel.ServiceHostBase&quot;> </xref>."
  remarks: "IServiceBehavior wilt wijzigen, bekijken of uitbreiden van een bepaald aspect van de hele service uitvoering op toepassingsniveau geïmplementeerd:-Gebruik de <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A>methode te wijzigen van eigenschapswaarden runtime- of aangepaste extensie objecten zoals fout-handlers, bericht of parameter interceptors beveiligingsuitbreidingen en andere aangepaste extensie-objecten invoegen.</xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A>      -Gebruik de <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A>methode om te onderzoeken van de beschrijving voordat [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)] vormt van de service wordt uitgevoerd om te bevestigen dat dit goed kunt uitvoeren.</xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A>      -Gebruik de <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A>methode doorgeven aan een bindingselement de aangepaste gegevens voor de service zodat de service juist kan worden ondersteund.</xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A>       IServiceBehavior objecten kunnen maken gebruik van een van deze methoden, maar vaak maar één belangrijk. in dergelijke gevallen kunnen de ongebruikte methoden zonder een waarde geretourneerd.      > [!NOTE] > Alle methoden IServiceBehavior doorgeven <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>en <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>objecten als een parameters.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> De <xref:System.ServiceModel.Description.ServiceDescription>-parameter voor alleen onderzoek is; als u deze objecten wijzigt het uitvoeringsgedrag is niet gedefinieerd.</xref:System.ServiceModel.Description.ServiceDescription>       De aanpassing als taak wilt uitvoeren waarvoor deze is bestemd, de IServiceBehavior-object moet worden toegevoegd aan de <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>eigenschap voorafgaand aan de constructie van de service-runtime.</xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> Er zijn drie manieren om dit te doen: - programmatisch toevoegen van het gedrag van de aangepaste service naar de <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>eigenschap vóór het punt waar de <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName>methode wordt aangeroepen voor de <xref:System.ServiceModel.ServiceHost?displayProperty=fullName>object.</xref:System.ServiceModel.ServiceHost?displayProperty=fullName> </xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A>      : Maak een aangepast kenmerk dat IServiceBehavior implementeert en gebruiken om te markeren serviceklassen die moeten worden gewijzigd. Wanneer een <xref:System.ServiceModel.ServiceHost>-object is gemaakt, [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] reflectie gebruikt voor het detecteren van de kenmerken van het servicetype.</xref:System.ServiceModel.ServiceHost> Als geen kenmerken IServiceBehavior implementeert, worden ze toegevoegd aan de verzameling met gedragsinstellingen op <xref:System.ServiceModel.Description.ServiceDescription>.</xref:System.ServiceModel.Description.ServiceDescription>      -Uitbreiden de <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>klasse ter ondersteuning van de specificatie van het gedrag in een toepassing of computerconfiguratiebestand.</xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName> Zie de sectie Voorbeeld voor meer informatie.       Voorbeelden van servicegedrag in [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] omvatten de <xref:System.ServiceModel.ServiceBehaviorAttribute>kenmerk, de <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=fullName>, wordt de <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=fullName>en de <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=fullName>gedrag.</xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=fullName> </xref:System.ServiceModel.ServiceBehaviorAttribute>"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following IServiceBehavior implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public interface IServiceBehavior
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  id: AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  nameWithType: IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  fullName: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "Biedt de mogelijkheid te geven van aangepaste gegevens aan bindingelementen ter ondersteuning van de contractimplementatie."
  remarks: "Gebruik de methode AddBindingParameters om het toevoegen van aangepaste gegevensobjecten die moeten worden de `parameters` verzameling die bindingelementen gebruiken kunt voor meer informatie als u wilt inschakelen ter ondersteuning van het contract.       Deze methode wordt één keer aangeroepen voor elke luister-URI. Bijvoorbeeld als een service vier eindpunten heeft en deze twee hebben luister dezelfde-URI, en vervolgens drie keer door deze methode wordt aangeroepen. De reden is dat de `bindingParameters` doel van elke stack kanaal en er is een kanaal-stack voor elke luister-URI. Omdat elke aanroep deze eindpunten op die luister-URI ontvangt, twee roept elke get één <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>, en één aanroep Hiermee wordt een verzameling van twee <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>objecten.</xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName>      > [!NOTE] > Alle van de <xref:System.ServiceModel.Description.IServiceBehavior>methoden doorgeven <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>en <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>objecten als een parameters.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior> De <xref:System.ServiceModel.Description.ServiceDescription>parameter is voor onderzoek en het invoegen van aanpassingen alleen; als u deze objecten anders wijzigt het uitvoeringsgedrag is niet gedefinieerd.</xref:System.ServiceModel.Description.ServiceDescription>"
  syntax:
    content: public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "De servicebeschrijving van de service."
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "De host van de service."
    - id: endpoints
      type: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint}
      description: "De service-eindpunten."
    - id: bindingParameters
      type: System.ServiceModel.Channels.BindingParameterCollection
      description: "Aangepaste objecten waarop de bindende elementen toegang hebben."
  overload: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  id: ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "Biedt de mogelijkheid de runtime-eigenschapswaarden wijzigen of invoegen van aangepaste extensie objecten zoals fout-handlers, bericht of parameter interceptors beveiligingsuitbreidingen en andere aangepaste extensie-objecten."
  remarks: "Implementeert u de methode ApplyDispatchBehavior om te controleren of wijzig de <xref:System.ServiceModel.ServiceHostBase>-object dat er ter ondersteuning van bepaalde aangepaste uitvoering scenario wordt samengesteld.</xref:System.ServiceModel.ServiceHostBase>      > [!NOTE] > Alle van de <xref:System.ServiceModel.Description.IServiceBehavior>methoden doorgeven <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>en <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>objecten als een parameters.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior> De <xref:System.ServiceModel.Description.ServiceDescription>parameter is voor onderzoek en het invoegen van aanpassingen alleen; als u deze objecten anders wijzigt het uitvoeringsgedrag is niet gedefinieerd.</xref:System.ServiceModel.Description.ServiceDescription>"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "De beschrijving van de service."
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "De host die wordt samengesteld."
  overload: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  id: Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  langs:
  - csharp
  name: Validate(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "Biedt de mogelijkheid om te controleren van de ServiceHost en de beschrijving van de service om te bevestigen dat de service kan probleemloos worden uitgevoerd."
  remarks: "Gebruik de methode Validate om te controleren of de huidige service correct kan worden uitgevoerd volgens uw scenario.      > [!NOTE] > Alle van de <xref:System.ServiceModel.Description.IServiceBehavior>methoden doorgeven <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName>en <xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName>objecten als een parameters.</xref:System.ServiceModel.ServiceHostBase?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceDescription?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior> De <xref:System.ServiceModel.Description.ServiceDescription>parameter is voor onderzoek en het invoegen van aanpassingen alleen; als u deze objecten anders wijzigt het uitvoeringsgedrag is niet gedefinieerd.</xref:System.ServiceModel.Description.ServiceDescription>"
  example:
  - "The following code example shows the use of a service behavior specified in a configuration file to insert a custom error handler in a service application. In this example, the error handler catches all exceptions and converts them into a custom `GreetingFault` SOAP fault that is then returned to the client.  \n  \n The following <xref:System.ServiceModel.Description.IServiceBehavior> implementation adds no binding parameter objects, adds the custom <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=fullName> object to each <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=fullName> property, and validates that each operation of the service to which the service behavior is applied and has a <xref:System.ServiceModel.FaultContractAttribute?displayProperty=fullName> of type `GreetingFault`.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n In this example, the behavior class also implements <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=fullName>, which enables the service behavior to be inserted by using it in an application configuration file, as the following code example demonstrates.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);
    parameters:
    - id: serviceDescription
      type: System.ServiceModel.Description.ServiceDescription
      description: "De beschrijving van de service."
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "De ServiceHost die momenteel wordt samengesteld."
  overload: System.ServiceModel.Description.IServiceBehavior.Validate*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  nameWithType: IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  fullName: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
- uid: System.ServiceModel.Description.ServiceDescription
  parent: System.ServiceModel.Description
  isExternal: false
  name: ServiceDescription
  nameWithType: ServiceDescription
  fullName: System.ServiceModel.Description.ServiceDescription
- uid: System.ServiceModel.ServiceHostBase
  parent: System.ServiceModel
  isExternal: false
  name: ServiceHostBase
  nameWithType: ServiceHostBase
  fullName: System.ServiceModel.ServiceHostBase
- uid: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ServiceEndpoint>
  nameWithType: Collection<ServiceEndpoint>
  fullName: System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.ServiceModel.Description.ServiceEndpoint>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Description.ServiceEndpoint
    name: ServiceEndpoint
    nameWithType: ServiceEndpoint
    fullName: ServiceEndpoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Channels.BindingParameterCollection
  parent: System.ServiceModel.Channels
  isExternal: true
  name: BindingParameterCollection
  nameWithType: BindingParameterCollection
  fullName: System.ServiceModel.Channels.BindingParameterCollection
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
- uid: System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: Validate(ServiceDescription,ServiceHostBase)
  nameWithType: IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
- uid: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: AddBindingParameters
  nameWithType: IServiceBehavior.AddBindingParameters
- uid: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: ApplyDispatchBehavior
  nameWithType: IServiceBehavior.ApplyDispatchBehavior
- uid: System.ServiceModel.Description.IServiceBehavior.Validate*
  parent: System.ServiceModel.Description.IServiceBehavior
  isExternal: false
  name: Validate
  nameWithType: IServiceBehavior.Validate
