### YamlMime:ManagedReference
items:
- uid: System.Windows.CoerceValueCallback
  id: CoerceValueCallback
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
  type: Delegate
  summary: "Biedt een sjabloon voor een methode die wordt aangeroepen wanneer de waarde van een afhankelijkheid eigenschap opnieuw wordt geëvalueerd of afdwingen specifiek is aangevraagd."
  remarks: "Retouraanroepen op basis van CoerceValueCallback kunnen worden toegewezen aan een afhankelijkheidseigenschap via diverse verschillende technieken. Elk van deze technieken, moet u eerst een nieuwe eigenschap metagegevensobject (<xref:System.Windows.PropertyMetadata>, of een afgeleide klasse zoals <xref:System.Windows.FrameworkPropertyMetadata>).</xref:System.Windows.FrameworkPropertyMetadata> </xref:System.Windows.PropertyMetadata> Maken van het metagegevensobject met de handtekening van een constructor die nodig is de `coerceValueCallback` parameter, en die parameter toewijzen aan de retouraanroep-handler. Of het samenstellen van de metagegevens door een handtekening en stel de <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>eigenschap voordat u de metagegevens in gebruik.</xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>       Als u deze metagegevens hebt, kunt u:-een nieuwe afhankelijkheidseigenschap definiëren voor een nieuwe klasse, met behulp van de handtekening van <xref:System.Windows.DependencyProperty.Register%2A>, waardoor de metagegevens als de `typeMetadata` waarde.</xref:System.Windows.DependencyProperty.Register%2A>      -De metagegevens overschrijven (aanroepen <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) voor een bestaande afhankelijkheidseigenschap, wanneer u afgeleid van de klasse die eigenaar is van de afhankelijkheidseigenschap.</xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>      -Een bestaand afhankelijkheidseigenschap toevoegen aan een nieuwe <xref:System.Windows.DependencyObject>klasse, met nieuwe metagegevens, door het aanroepen van <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> </xref:System.Windows.DependencyObject>       Implementaties van deze retouraanroep de waarde moeten inchecken `baseValue` en bepalen op basis van de waarde of het type of dit is een waarde die moet worden verder gedwongen.       De <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>voor een afhankelijkheid eigenschap elke keer dat het systeem eigenschap of een andere aanroeper roept wordt aangeroepen <xref:System.Windows.DependencyObject.CoerceValue%2A>op een <xref:System.Windows.DependencyObject>exemplaar en geeft deze eigenschap-id als de `dp`.</xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObject.CoerceValue%2A> </xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>       Een mogelijke deelnemer in het systeem eigenschap van de wijzigingen in de waarde van eigenschap hebt afkomstig. Dit omvat stijlen, algemene ongeldig maken, triggers, waarde Eigenschapsovername en lokale waarde-instelling.       In het algemeen moet u niet opgeven van meer dan één <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>voor een bepaalde afhankelijkheidseigenschap (onderdrukken of toe te voegen met nieuwe metagegevens voor een afhankelijkheidseigenschap die al een <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>).</xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> </xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> Slechts één van de callbacks is mogelijk om te fungeren. De callback fungeert zijn die is toegepast op de meest afgeleide klasse in de overname in vergelijking met op de <xref:System.Windows.DependencyObject>aanroeper.</xref:System.Windows.DependencyObject> Andere retouraanroepen die is toegewezen aan de metagegevens voor de afhankelijkheidseigenschap zoals deze bestond hoger in de hiërarchie eigenaar worden vervangen wanneer u de metagegevens wordt overschreven."
  example:
  - "The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value. In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] (not shown) to remove that dropdown from the effective choices.  \n  \n [!code-cs[DPCustom#CoerceValueCallback](~/add/codesnippet/csharp/DPCustom/default.xaml.cs#coercevaluecallback)]\n [!code-vb[DPCustom#CoerceValueCallback](~/add/codesnippet/visualbasic/dpcustom/default.xaml.vb#coercevaluecallback)]"
  syntax:
    content: public delegate object CoerceValueCallback(DependencyObject d, object baseValue);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
