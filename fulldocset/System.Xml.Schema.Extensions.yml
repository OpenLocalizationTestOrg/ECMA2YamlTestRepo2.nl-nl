### YamlMime:ManagedReference
items:
- uid: System.Xml.Schema.Extensions
  id: Extensions
  children:
  - System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute@)
  - System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement@)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  langs:
  - csharp
  name: Extensions
  nameWithType: Extensions
  fullName: System.Xml.Schema.Extensions
  type: Class
  summary: "Deze klasse bevat de [!INCLUDE[sqltecxlinq](~/add/includes/sqltecxlinq-md.md)] uitbreidingsmethoden voor XSD-validatie."
  remarks: "Deze klasse bevat ook de methoden voor het ophalen van de na-schema-validatie infoset (PSVI) van een gevalideerde XML-knooppunt.       Wanneer u controleren of een <xref:System.Xml.Linq.XDocument>, <xref:System.Xml.Linq.XElement>, of <xref:System.Xml.Linq.XAttribute>, u kunt eventueel ook de XML-structuur met de infoset na schema validatie vullen.</xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Linq.XElement> </xref:System.Xml.Linq.XDocument> PSVI informatie is als van het type <xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=fullName>.</xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=fullName> van een aantekening toegevoegd"
  example:
  - "The XSD in [Sample XSD File: Customers and Orders](~/add/includes/ajax-current-ext-md.md) contains a schema that can be used to validate the XML document in [Sample XML File: Customers and Orders (LINQ to XML)](~/add/includes/ajax-current-ext-md.md). The following example loads the schema and the document, validates the document, changes the document so that the `xs:key` and `xs:keyref` relationship is not valid, and then attempts to validate again.  \n  \n```c#  \n  \n                XmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", \"CustomersOrders.xsd\");  \n  \nXDocument custOrd = XDocument.Load(\"CustomersOrders.xml\");  \n  \nConsole.WriteLine(\"Validating custOrd\");  \nbool errors = false;  \ncustOrd.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"custOrd {0}\", errors ? \"did not validate\" : \"validated\");  \n  \n// Modify the custOrd tree so that it is no longer valid.  \ncustOrd.Root.Element(\"Orders\").Element(\"Order\").Element(\"CustomerID\").Value = \"AAAAA\";  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating custOrd\");  \nerrors = false;  \ncustOrd.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"custOrd {0}\", errors ? \"did not validate\" : \"validated\");  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", \"CustomersOrders.xsd\")  \n  \n    Console.WriteLine(\"Validating custOrd\")  \n    Dim custOrd As XDocument = XDocument.Load(\"CustomersOrders.xml\")  \n    errors = False  \n    custOrd.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"custOrd {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating custOrd\")  \n    ' Modify the source document so that it will not validate.  \n    custOrd.Root.Element(\"Orders\").Element(\"Order\").Element(\"CustomerID\").Value = \"AAAAA\"  \n    errors = False  \n    custOrd.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"custOrd {0}\", IIf(errors, \"did not validate\", \"validated\"))  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating custOrd  \ncustOrd validated  \n  \nValidating custOrd  \nThe key sequence 'AAAAA' in Keyref fails to refer to some key.  \ncustOrd did not validate  \n```"
  syntax:
    content: public static class Extensions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute@)
  id: GetSchemaInfo(System.Xml.Linq.XAttribute@)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: GetSchemaInfo(XAttribute)
  nameWithType: Extensions.GetSchemaInfo(XAttribute)
  fullName: System.Xml.Schema.Extensions.GetSchemaInfo(XAttribute)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Hiermee wordt de na-schema-validatie infoset (PSVI) van een kenmerk gevalideerde opgehaald."
  remarks: "U kunt de <xref:System.Xml.Schema.IXmlSchemaInfo>geretourneerd door deze methode om te bepalen van bepaalde kenmerken van een kenmerk gevalideerde.</xref:System.Xml.Schema.IXmlSchemaInfo> U kunt bijvoorbeeld bepalen als het kenmerk afkomstig zijn van een standaard-kenmerkwaarde in XSD.       U gebruikt de <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A>eigenschap ophalen van een type voor partiële validatie (<xref:System.Xml.Schema.XmlSchemaAttribute>).</xref:System.Xml.Schema.XmlSchemaAttribute> </xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> U kunt het valideren van een kenmerk zonder een hele document wordt gevalideerd.       Zie voor een voorbeeld van deze eigenschap <xref:System.Xml.Schema.Extensions.Validate%2A>.</xref:System.Xml.Schema.Extensions.Validate%2A>"
  syntax:
    content: public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XAttribute source);
    parameters:
    - id: source
      type: System.Xml.Linq.XAttribute
      description: "Een <xref:System.Xml.Linq.XAttribute>die eerder is gevalideerd.</xref:System.Xml.Linq.XAttribute>"
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "Een <xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;> </xref> die de infoset na schema validatie voor een <xref:System.Xml.Linq.XAttribute>.</xref:System.Xml.Linq.XAttribute> bevat"
  overload: System.Xml.Schema.Extensions.GetSchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement@)
  id: GetSchemaInfo(System.Xml.Linq.XElement@)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: GetSchemaInfo(XElement)
  nameWithType: Extensions.GetSchemaInfo(XElement)
  fullName: System.Xml.Schema.Extensions.GetSchemaInfo(XElement)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Hiermee wordt de na-schema-validatie infoset (PSVI) van een gevalideerde element opgehaald."
  remarks: "U kunt de <xref:System.Xml.Schema.IXmlSchemaInfo>geretourneerd door deze methode om te bepalen van bepaalde kenmerken van een element gevalideerde.</xref:System.Xml.Schema.IXmlSchemaInfo> U kunt bijvoorbeeld bepalen dat het schematype dynamische van het element.       U gebruikt de <xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A>eigenschap ophalen van een type voor partiële validatie (<xref:System.Xml.Schema.XmlSchemaElement>).</xref:System.Xml.Schema.XmlSchemaElement> </xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> U kunt deze validatie een substructuur met een element in de hoofdmap uitvoeren zonder een hele document valideren.       Zie voor een voorbeeld van deze eigenschap <xref:System.Xml.Schema.Extensions.Validate%2A>.</xref:System.Xml.Schema.Extensions.Validate%2A>"
  example:
  - "The following example populates the tree with a PSVI. After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.  \n  \n```c#  \n  \n                static void DumpInvalidNodes(XElement el)  \n{  \n    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n        Console.WriteLine(\"Invalid Element {0}\",  \n            el.AncestorsAndSelf()  \n            .InDocumentOrder()  \n            .Aggregate(\"\", (s, i) => s + \"/\" + i.Name.ToString()));  \n    foreach (XAttribute att in el.Attributes())  \n        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n            Console.WriteLine(\"Invalid Attribute {0}\",  \n                att  \n                .Parent  \n                .AncestorsAndSelf()  \n                .InDocumentOrder()  \n                .Aggregate(\"\",  \n                    (s, i) => s + \"/\" + i.Name.ToString()) + \"/@\" + att.Name.ToString()  \n                );  \n    foreach (XElement child in el.Elements())  \n        DumpInvalidNodes(child);  \n}  \n  \nstatic void Main(string[] args)  \n{  \n    string xsdMarkup =  \n         @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n   <xsd:simpleType name='GCType'>  \n    <xsd:restriction base='xsd:token'>  \n     <xsd:enumeration value='AAA'/>  \n     <xsd:enumeration value='BBB'/>  \n    </xsd:restriction>  \n   </xsd:simpleType>  \n   <xsd:element name='Root'>  \n    <xsd:complexType>  \n     <xsd:sequence>  \n      <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n       <xsd:complexType>  \n        <xsd:sequence>  \n         <xsd:element name='GrandChild1' type='GCType'/>  \n         <xsd:element name='GrandChild2' type='GCType'/>  \n         <xsd:element name='GrandChild3' type='GCType'/>  \n        </xsd:sequence>  \n       </xsd:complexType>  \n      </xsd:element>  \n     </xsd:sequence>  \n    </xsd:complexType>  \n   </xsd:element>  \n  </xsd:schema>\";  \n  \n    XmlSchemaSet schemas = new XmlSchemaSet();  \n    schemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \n    XDocument doc1 = new XDocument(  \n        new XElement(\"Root\",  \n            new XElement(\"Child1\",  \n                new XElement(\"GrandChild1\", \"AAA\"),  \n                new XElement(\"GrandChild2\", \"ZZZ\"),  \n                new XElement(\"GrandChild3\", \"ZZZ\")  \n            )  \n        )  \n    );  \n  \n    Console.WriteLine(\"Validating doc1 ...\");  \n    bool errors = false;  \n    doc1.Validate(schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n    DumpInvalidNodes(doc1.Root);  \n}  \n```  \n  \n```vb  \n  \n                Private Sub DumpInvalidNodes(ByVal el As XElement)  \n    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n        Console.WriteLine(\"Invalid Element {0}\", _  \n            el _  \n            .AncestorsAndSelf _  \n            .InDocumentOrder() _  \n            .Aggregate(\"\", _  \n                Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()))  \n    End If  \n    For Each att As XAttribute In el.Attributes()  \n        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n            Console.WriteLine(\"Invalid Attribute {0}\", _  \n                att _  \n                .Parent _  \n                .AncestorsAndSelf() _  \n                .InDocumentOrder() _  \n                .Aggregate(\"\", _  \n                    Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()) + _  \n                    \"/@\" + att.Name.ToString())  \n        End If  \n    Next  \n    For Each child As XElement In el.Elements()  \n        DumpInvalidNodes(child)  \n    Next  \nEnd Sub  \n  \nDim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n    <?xml version='1.0'?>  \n    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n        <xsd:simpleType name='GCType'>  \n            <xsd:restriction base='xsd:token'>  \n                <xsd:enumeration value='AAA'/>  \n                <xsd:enumeration value='BBB'/>  \n            </xsd:restriction>  \n        </xsd:simpleType>  \n        <xsd:element name='Root'>  \n            <xsd:complexType>  \n                <xsd:sequence>  \n                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n                        <xsd:complexType>  \n                            <xsd:sequence>  \n                                <xsd:element name='GrandChild1' type='GCType'/>  \n                                <xsd:element name='GrandChild2' type='GCType'/>  \n                                <xsd:element name='GrandChild3' type='GCType'/>  \n                            </xsd:sequence>  \n                        </xsd:complexType>  \n                    </xsd:element>  \n                </xsd:sequence>  \n            </xsd:complexType>  \n        </xsd:element>  \n    </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n    <?xml version='1.0'?>  \n    <Root>  \n        <Child1>  \n            <GrandChild1>AAA</GrandChild1>  \n            <GrandChild2>ZZZ</GrandChild2>  \n            <GrandChild3>ZZZ</GrandChild3>  \n        </Child1>  \n    </Root>  \n  \n    Console.WriteLine(\"Validating doc1 ...\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n    DumpInvalidNodes(doc1.Root)  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1 ...  \nThe 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \nThe 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \ndoc1 did not validate  \nInvalid Element /Root  \nInvalid Element /Root/Child1  \nInvalid Element /Root/Child1/GrandChild2  \nInvalid Element /Root/Child1/GrandChild3  \n```"
  syntax:
    content: public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XElement source);
    parameters:
    - id: source
      type: System.Xml.Linq.XElement
      description: "Een <xref:System.Xml.Linq.XElement>die eerder is gevalideerd.</xref:System.Xml.Linq.XElement>"
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "Een <xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;> </xref> die de na-schema-validatie infoset (PSVI) voor een <xref:System.Xml.Linq.XElement>.</xref:System.Xml.Linq.XElement> bevat"
  overload: System.Xml.Schema.Extensions.GetSchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  id: Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Deze methode valideert dat een <xref:System.Xml.Linq.XDocument>voldoet aan een XSD in een <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>.</xref:System.Xml.Linq.XDocument>"
  remarks: "Deze extensiemethode valideert dat het <xref:System.Xml.Linq.XDocument>voldoet aan het schema inhoudsmodel in <xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Linq.XDocument>"
  example:
  - "The following example creates an <xref:System.Xml.Schema.XmlSchemaSet>, then validates two <xref:System.Xml.Linq.XDocument> objects against the schema set. One of the documents is valid, the other is not.  \n  \n```c#  \n  \n                string xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:sequence>  \n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  \n         </xsd:sequence>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"content1\"),  \n        new XElement(\"Child2\", \"content1\")  \n    )  \n);  \n  \nXDocument doc2 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"content1\"),  \n        new XElement(\"Child3\", \"content1\")  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1\");  \nbool errors = false;  \ndoc1.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating doc2\");  \nerrors = false;  \ndoc2.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"doc2 {0}\", errors ? \"did not validate\" : \"validated\");  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n    <?xml version='1.0'?>  \n    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n        <xsd:element name='Root'>  \n            <xsd:complexType>  \n                <xsd:sequence>  \n                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  \n                </xsd:sequence>  \n            </xsd:complexType>  \n        </xsd:element>  \n    </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n    <?xml version='1.0'?>  \n    <Root>  \n        <Child1>content1</Child1>  \n        <Child2>content2</Child2>  \n    </Root>  \n  \n    Dim doc2 As XDocument = _  \n    <?xml version='1.0'?>  \n    <Root>  \n        <Child1>content1</Child1>  \n        <Child3>content1</Child3>  \n    </Root>  \n  \n    Console.WriteLine(\"Validating doc1\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating doc2\")  \n    errors = False  \n    doc2.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"doc2 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1  \ndoc1 validated  \n  \nValidating doc2  \nThe element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  \ndoc2 did not validate  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);
    parameters:
    - id: source
      type: System.Xml.Linq.XDocument
      description: "De <xref:System.Xml.Linq.XDocument>om te valideren.</xref:System.Xml.Linq.XDocument>"
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "Een <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> voor de validatie."
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "Een <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> voor een gebeurtenis die optreedt wanneer de lezer validatiefouten tegenkomt. Als <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, er een uitzondering gegenereerd bij validatiefouten."
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Gegenereerd XML-Schema Definition Language (XSD) validatiefouten."
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  id: Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Deze methode valideert dat een <xref:System.Xml.Linq.XAttribute>voldoet aan een opgegeven <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> en een <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>.</xref:System.Xml.Linq.XAttribute>"
  remarks: "U kunt deze methode gebruiken om te valideren dat een <xref:System.Xml.Linq.XAttribute>voldoet aan een schema.</xref:System.Xml.Linq.XAttribute> Gebruik deze methode meestal in wanneer u een kenmerk hebt gewijzigd en u ervoor zorgen wilt dat het nog steeds aan het schema voldoet. U kunt het hele document kan valideren, maar duurt het minder verwerkingstijd voor het valideren van alleen het kenmerk.       Als u doorgeeft `null` voor `validationEventHandler`, genereert deze methode een uitzondering op validatiefouten. Van Validatiewaarschuwingen wordt een uitzondering niet verhogen.       Voor het valideren van een kenmerk u een exemplaar van <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject> gebruiken U kunt dit exemplaar op verschillende manieren verkrijgen. Een eenvoudige manier is als volgt: 1.  Valideren dat een document aan een schema voldoet.      2.  De na-schema-validatie infoset (PSVI) toevoegen door het aanroepen van de <xref:System.Xml.Schema.Extensions.Validate%2A>uitbreidingsmethode.</xref:System.Xml.Schema.Extensions.Validate%2A>      3.  De <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>extensiemethode voor het ophalen van een object dat wordt geïmplementeerd <xref:System.Xml.Schema.IXmlSchemaInfo>.</xref:System.Xml.Schema.IXmlSchemaInfo> </xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> aanroepen U kunt een <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject> ophalen van de opgehaalde-object          -Als u een <xref:System.Xml.Schema.XmlSchemaObject>voor een <xref:System.Xml.Linq.XElement>is het type <xref:System.Xml.Schema.XmlSchemaElement>.</xref:System.Xml.Schema.XmlSchemaElement> krijgt</xref:System.Xml.Linq.XElement> </xref:System.Xml.Schema.XmlSchemaObject>          -Als u een <xref:System.Xml.Schema.XmlSchemaObject>voor een <xref:System.Xml.Linq.XAttribute>is het type <xref:System.Xml.Schema.XmlSchemaAttribute>.</xref:System.Xml.Schema.XmlSchemaAttribute> krijgt</xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Schema.XmlSchemaObject>       Nadat u een exemplaar van hebt een <xref:System.Xml.Schema.XmlSchemaObject>, kunt u deze methode voor het valideren van een kenmerk.</xref:System.Xml.Schema.XmlSchemaObject>"
  example:
  - "```c#  \n  \n                string xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:simpleContent>  \n          <xsd:extension base='xsd:string'>  \n           <xsd:attribute name='Lang' use='required'>  \n            <xsd:simpleType>  \n             <xsd:restriction base='xsd:token'>  \n              <xsd:enumeration value='C#'/>  \n              <xsd:enumeration value='VB'/>  \n             </xsd:restriction>  \n            </xsd:simpleType>  \n           </xsd:attribute>  \n          </xsd:extension>  \n         </xsd:simpleContent>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \n  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XAttribute(\"Lang\", \"C#\")  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1 ...\");  \nbool errors = false;  \ndoc1.Validate(schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating Lang attribute ...\");  \nXAttribute lang = doc1.Root.Attribute(\"Lang\");  \n  \nerrors = false;  \nlang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(\"lang {0}\", errors ? \"did not validate\" : \"validated\");  \n  \n// the following makes the Lang attribute invalid according to the schema  \nlang.Value = \"VC\";  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating Lang attribute ...\");  \n  \nerrors = false;  \nlang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(\"lang {0}\", errors ? \"did not validate\" : \"validated\");  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n      <?xml version='1.0'?>  \n      <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n          <xsd:element name='Root'>  \n              <xsd:complexType>  \n                  <xsd:simpleContent>  \n                      <xsd:extension base='xsd:string'>  \n                          <xsd:attribute name='Lang' use='required'>  \n                              <xsd:simpleType>  \n                                  <xsd:restriction base='xsd:token'>  \n                                      <xsd:enumeration value='C#'/>  \n                                      <xsd:enumeration value='VB'/>  \n                                  </xsd:restriction>  \n                              </xsd:simpleType>  \n                          </xsd:attribute>  \n                      </xsd:extension>  \n                  </xsd:simpleContent>  \n              </xsd:complexType>  \n          </xsd:element>  \n      </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = <?xml version='1.0'?>  \n                            <Root Lang='C#'/>  \n  \n    Console.WriteLine(\"Validating doc1 ...\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Lang attribute ...\")  \n    Dim lang As XAttribute = doc1.Root.Attribute(\"Lang\")  \n  \n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"lang {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    ' the following makes the Lang attribute invalid according to the schema  \n    lang.Value = \"VC\"  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Lang attribute ...\")  \n  \n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"lang {0}\", IIf(errors, \"did not validate\", \"validated\"))  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1 ...  \ndoc1 validated  \n  \nValidating Lang attribute ...  \nlang validated  \n  \nValidating Lang attribute ...  \nThe 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  \nlang did not validate  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);
    parameters:
    - id: source
      type: System.Xml.Linq.XAttribute
      description: "De <xref:System.Xml.Linq.XAttribute>om te valideren.</xref:System.Xml.Linq.XAttribute>"
    - id: partialValidationType
      type: System.Xml.Schema.XmlSchemaObject
      description: "Een <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> Hiermee worden de substructuur om te valideren."
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "Een <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> voor de validatie."
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "Een <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> voor een gebeurtenis die optreedt wanneer de lezer validatiefouten tegenkomt. Als <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, er een uitzondering gegenereerd bij validatiefouten."
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Gegenereerd XML-Schema Definition Language (XSD) validatiefouten."
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  id: Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Valideert dat een <xref:System.Xml.Linq.XDocument>voldoet aan een XSD in een <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>desgewenst de XML-structuur met de na-schema-validatie infoset (PSVI) in te vullen.</xref:System.Xml.Linq.XDocument>"
  remarks: "Deze extensiemethode valideert dat het <xref:System.Xml.Linq.XDocument>voldoet aan het schema inhoudsmodel in <xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Linq.XDocument>       Als `addSchemaInfo` is `true`, deze methode vult de XML-structuur met de na-schema-validatie infoset (PSVI).       Er zijn twee stappen voor het vullen van de XML-structuur met de PSVI.      1.  Eerst een aantekening is toegevoegd aan alle knooppunten in de boomstructuur waarmee u aan te roepen <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName>of <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName>voor een element of kenmerk in de boomstructuur.</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> </xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName>      2.  Ten tweede worden standaardelementen en kenmerken zijn gedefinieerd in de XSD toegevoegd aan de XML-structuur. Door het aanroepen van een van de <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>methoden, kunt u bepalen als een specifiek element of kenmerk van het XSD is toegevoegd als een standaardelement of kenmerk.</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>"
  example:
  - "The following example contains an XSD that defines the `Child2` element with an `Att1` attribute with a default value. After successfully validating the document, the attribute with the default value is added to the XML tree. Note that the default attribute is not added to `doc2`, which does not validate against the schema.  \n  \n```c#  \n  \n                string xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:sequence>  \n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \n           <xsd:complexType>  \n            <xsd:simpleContent>  \n             <xsd:extension base='xsd:string'>  \n              <xsd:attribute name='Att1' default='Att1 Default Value'/>  \n             </xsd:extension>  \n            </xsd:simpleContent>  \n           </xsd:complexType>  \n          </xsd:element>  \n         </xsd:sequence>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"c1\"),  \n        new XElement(\"Child2\", \"c2\")  \n    )  \n);  \n  \nXDocument doc2 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"content1\"),  \n        new XElement(\"Child3\", \"content1\")  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1\");  \nbool errors = false;  \ndoc1.Validate(schemas, (o, e) =>  \n                           {  \n                               Console.WriteLine(\"{0}\", e.Message);  \n                               errors = true;  \n                           }, true);  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating doc2\");  \nerrors = false;  \ndoc2.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     }, true);  \nConsole.WriteLine(\"doc2 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Contents of doc1:\");  \nConsole.WriteLine(doc1);  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Contents of doc2:\");  \nConsole.WriteLine(doc2);  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n    <?xml version='1.0'?>  \n    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n        <xsd:element name='Root'>  \n            <xsd:complexType>  \n                <xsd:sequence>  \n                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \n                        <xsd:complexType>  \n                            <xsd:simpleContent>  \n                                <xsd:extension base='xsd:string'>  \n                                    <xsd:attribute name='Att1' default='Att1 Default Value'/>  \n                                </xsd:extension>  \n                            </xsd:simpleContent>  \n                        </xsd:complexType>  \n                    </xsd:element>  \n                </xsd:sequence>  \n            </xsd:complexType>  \n        </xsd:element>  \n    </xsd:schema>  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = <?xml version='1.0'?>  \n                            <Root>  \n                                <Child1>c1</Child1>  \n                                <Child2>c2</Child2>  \n                            </Root>  \n    Dim doc2 As XDocument = <?xml version='1.0'?>  \n                            <Root>  \n                                <Child1>content1</Child1>  \n                                <Child3>content1</Child3>  \n                            </Root>  \n  \n    Console.WriteLine(\"Validating doc1\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating doc2\")  \n    errors = False  \n    doc2.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc2 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Contents of doc1:\")  \n    Console.WriteLine(doc1)  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Contents of doc2:\")  \n    Console.WriteLine(doc2)  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1  \ndoc1 validated  \n  \nValidating doc2  \nThe element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  \ndoc2 did not validate  \n  \nContents of doc1:  \n<Root>  \n  <Child1>c1</Child1>  \n  <Child2 Att1=\"Att1 Default Value\">c2</Child2>  \n</Root>  \n  \nContents of doc2:  \n<Root>  \n  <Child1>content1</Child1>  \n  <Child3>content1</Child3>  \n</Root>  \n```  \n  \n The following example populates the tree with PSVI. After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.  \n  \n```c#  \n  \n                static void DumpInvalidNodes(XElement el)  \n{  \n    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n        Console.WriteLine(\"Invalid Element {0}\",  \n            el.AncestorsAndSelf()  \n            .InDocumentOrder()  \n            .Aggregate(\"\", (s, i) => s + \"/\" + i.Name.ToString()));  \n    foreach (XAttribute att in el.Attributes())  \n        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n            Console.WriteLine(\"Invalid Attribute {0}\",  \n                att  \n                .Parent  \n                .AncestorsAndSelf()  \n                .InDocumentOrder()  \n                .Aggregate(\"\",  \n                    (s, i) => s + \"/\" + i.Name.ToString()) + \"/@\" + att.Name.ToString()  \n                );  \n    foreach (XElement child in el.Elements())  \n        DumpInvalidNodes(child);  \n}  \n  \nstatic void Main(string[] args)  \n{  \n   string xsdMarkup =  \n        @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n           <xsd:simpleType name='GCType'>  \n            <xsd:restriction base='xsd:token'>  \n             <xsd:enumeration value='AAA'/>  \n             <xsd:enumeration value='BBB'/>  \n            </xsd:restriction>  \n           </xsd:simpleType>  \n           <xsd:element name='Root'>  \n            <xsd:complexType>  \n             <xsd:sequence>  \n              <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n               <xsd:complexType>  \n                <xsd:sequence>  \n                 <xsd:element name='GrandChild1' type='GCType'/>  \n                 <xsd:element name='GrandChild2' type='GCType'/>  \n                 <xsd:element name='GrandChild3' type='GCType'/>  \n                </xsd:sequence>  \n               </xsd:complexType>  \n              </xsd:element>  \n             </xsd:sequence>  \n            </xsd:complexType>  \n           </xsd:element>  \n          </xsd:schema>\";  \n  \n    XmlSchemaSet schemas = new XmlSchemaSet();  \n    schemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \n    XDocument doc1 = new XDocument(  \n        new XElement(\"Root\",  \n            new XElement(\"Child1\",  \n                new XElement(\"GrandChild1\", \"AAA\"),  \n                new XElement(\"GrandChild2\", \"ZZZ\"),  \n                new XElement(\"GrandChild3\", \"ZZZ\")  \n            )  \n        )  \n    );  \n  \n    Console.WriteLine(\"Validating doc1 ...\");  \n    bool errors = false;  \n    doc1.Validate(schemas, (sender, e) =>  \n        {  \n            Console.WriteLine(e.Message);  \n            errors = true;  \n        }, true);  \n    Console.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n    DumpInvalidNodes(doc1.Root);  \n}  \n```  \n  \n```vb  \n  \n                Private Sub DumpInvalidNodes(ByVal el As XElement)  \n    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n        Console.WriteLine(\"Invalid Element {0}\", _  \n            el _  \n            .AncestorsAndSelf _  \n            .InDocumentOrder() _  \n            .Aggregate(\"\", _  \n                Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()))  \n    End If  \n    For Each att As XAttribute In el.Attributes()  \n        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n            Console.WriteLine(\"Invalid Attribute {0}\", _  \n                att _  \n                .Parent _  \n                .AncestorsAndSelf() _  \n                .InDocumentOrder() _  \n                .Aggregate(\"\", _  \n                    Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()) + _  \n                    \"/@\" + att.Name.ToString())  \n        End If  \n    Next  \n    For Each child As XElement In el.Elements()  \n        DumpInvalidNodes(child)  \n    Next  \nEnd Sub  \n  \nDim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n        <?xml version='1.0'?>  \n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n            <xsd:simpleType name='GCType'>  \n                <xsd:restriction base='xsd:token'>  \n                    <xsd:enumeration value='AAA'/>  \n                    <xsd:enumeration value='BBB'/>  \n                </xsd:restriction>  \n            </xsd:simpleType>  \n            <xsd:element name='Root'>  \n                <xsd:complexType>  \n                    <xsd:sequence>  \n                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n                            <xsd:complexType>  \n                                <xsd:sequence>  \n                                    <xsd:element name='GrandChild1' type='GCType'/>  \n                                    <xsd:element name='GrandChild2' type='GCType'/>  \n                                    <xsd:element name='GrandChild3' type='GCType'/>  \n                                </xsd:sequence>  \n                            </xsd:complexType>  \n                        </xsd:element>  \n                    </xsd:sequence>  \n                </xsd:complexType>  \n            </xsd:element>  \n        </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n        <?xml version='1.0'?>  \n        <Root>  \n            <Child1>  \n                <GrandChild1>AAA</GrandChild1>  \n                <GrandChild2>ZZZ</GrandChild2>  \n                <GrandChild3>ZZZ</GrandChild3>  \n            </Child1>  \n        </Root>  \n  \n    Console.WriteLine(\"Validating doc1 ...\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n    DumpInvalidNodes(doc1.Root)  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1 ...  \nThe 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \nThe 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \ndoc1 did not validate  \nInvalid Element /Root  \nInvalid Element /Root/Child1  \nInvalid Element /Root/Child1/GrandChild2  \nInvalid Element /Root/Child1/GrandChild3  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);
    parameters:
    - id: source
      type: System.Xml.Linq.XDocument
      description: "De <xref:System.Xml.Linq.XDocument>om te valideren.</xref:System.Xml.Linq.XDocument>"
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "Een <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> voor de validatie."
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "Een <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> voor een gebeurtenis die optreedt wanneer de lezer validatiefouten tegenkomt. Als <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, er een uitzondering gegenereerd bij validatiefouten."
    - id: addSchemaInfo
      type: System.Boolean
      description: "Een <xref:System.Boolean>waarmee wordt aangegeven of voor het vullen van de na-schema-validatie infoset (PSVI).</xref:System.Boolean>"
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Gegenereerd XML-Schema Definition Language (XSD) validatiefouten."
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  id: Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Deze methode valideert dat een <xref:System.Xml.Linq.XElement>substructuur voldoet aan een opgegeven <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> en een <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>.</xref:System.Xml.Linq.XElement>"
  remarks: "U kunt deze methode gebruiken om te valideren dat een substructuur (met een <xref:System.Xml.Linq.XElement>hoofdmap) voldoet aan een schema.</xref:System.Xml.Linq.XElement> Gebruik deze methode meestal in wanneer u een substructuur hebt gewijzigd en u ervoor zorgen wilt dat het nog steeds aan het schema voldoet. U kunt het hele document kan valideren, maar het duurt minder verwerkingstijd voor het valideren van een alleen een substructuur.       Als u doorgeeft `null` voor `validationEventHandler`, en vervolgens deze methode een uitzondering op validatiefouten genereert. Van Validatiewaarschuwingen wordt een uitzondering niet verhogen.       Voor het valideren van een substructuur u een exemplaar van <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject> gebruiken U kunt dit exemplaar op verschillende manieren verkrijgen. Een eenvoudige manier is als volgt: 1.  Valideren dat een document aan een schema voldoet.      2.  De na-schema-validatie infoset (PSVI) toevoegen door het aanroepen van de <xref:System.Xml.Schema.Extensions.Validate%2A>uitbreidingsmethode.</xref:System.Xml.Schema.Extensions.Validate%2A>      3.  De <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>extensiemethode voor het ophalen van een object dat wordt geïmplementeerd <xref:System.Xml.Schema.IXmlSchemaInfo>.</xref:System.Xml.Schema.IXmlSchemaInfo> </xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> aanroepen U kunt een <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject> ophalen van de opgehaalde-object          -Als u een <xref:System.Xml.Schema.XmlSchemaObject>voor een <xref:System.Xml.Linq.XElement>is het type <xref:System.Xml.Schema.XmlSchemaElement>.</xref:System.Xml.Schema.XmlSchemaElement> krijgt</xref:System.Xml.Linq.XElement> </xref:System.Xml.Schema.XmlSchemaObject>          -Als u een <xref:System.Xml.Schema.XmlSchemaObject>voor een <xref:System.Xml.Linq.XAttribute>is het type <xref:System.Xml.Schema.XmlSchemaAttribute>.</xref:System.Xml.Schema.XmlSchemaAttribute> krijgt</xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Schema.XmlSchemaObject>       Nadat u een exemplaar van hebt een <xref:System.Xml.Schema.XmlSchemaObject>, kunt u deze methode voor het valideren van een substructuur.</xref:System.Xml.Schema.XmlSchemaObject>"
  example:
  - "```c#  \n  \n                string xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:sequence>  \n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n           <xsd:complexType>  \n            <xsd:sequence>  \n             <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  \n             <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  \n            </xsd:sequence>  \n           </xsd:complexType>  \n          </xsd:element>  \n         </xsd:sequence>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \n  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\",  \n            new XElement(\"GrandChild1\", \"gc\"),  \n            new XElement(\"GrandChild2\", \"gc\")  \n        )  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1 ...\");  \nbool errors = false;  \ndoc1.Validate(schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating Child1 after first edit ...\");  \nXElement child1 = doc1.Element(\"Root\").Element(\"Child1\");  \nchild1.Add(new XElement(\"GrandChild2\", \"gc\"));  \nerrors = false;  \nchild1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(\"child1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \n// the following makes the Child1 element invalid according to the schema  \nchild1.Add(new XElement(\"GrandChild3\", \"gc\"));  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating Child1 after second edit ...\");  \nchild1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(\"child1 {0}\", errors ? \"did not validate\" : \"validated\");  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n  \n    Dim xsdMarkup As XDocument = _  \n        <?xml version='1.0'?>  \n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n            <xsd:element name='Root'>  \n                <xsd:complexType>  \n                    <xsd:sequence>  \n                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n                            <xsd:complexType>  \n                                <xsd:sequence>  \n                                    <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  \n                                    <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  \n                                </xsd:sequence>  \n                            </xsd:complexType>  \n                        </xsd:element>  \n                    </xsd:sequence>  \n                </xsd:complexType>  \n            </xsd:element>  \n        </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n        <?xml version='1.0'?>  \n        <Root>  \n            <Child1>  \n                <GrandChild1>gc</GrandChild1>  \n                <GrandChild2>gc</GrandChild2>  \n            </Child1>  \n        </Root>  \n  \n    Console.WriteLine(\"Validating doc1 ...\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Child1 after first edit ...\")  \n    Dim child1 As XElement = doc1.Element(\"Root\").Element(\"Child1\")  \n    child1.Add(<GrandChild2>gc</GrandChild2>)  \n    errors = False  \n    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"child1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    ' the following makes the Child1 element invalid according to the schema  \n    child1.Add(<GrandChild3>gc</GrandChild3>)  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Child1 after second edit ...\")  \n    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"child1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1 ...  \ndoc1 validated  \n  \nValidating Child1 after first edit ...  \nchild1 validated  \n  \nValidating Child1 after second edit ...  \nThe element 'Child1' has invalid child element 'GrandChild3'.  \nchild1 did not validate  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);
    parameters:
    - id: source
      type: System.Xml.Linq.XElement
      description: "De <xref:System.Xml.Linq.XElement>om te valideren.</xref:System.Xml.Linq.XElement>"
    - id: partialValidationType
      type: System.Xml.Schema.XmlSchemaObject
      description: "Een <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> Hiermee worden de substructuur om te valideren."
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "Een <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> voor de validatie."
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "Een <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> voor een gebeurtenis die optreedt wanneer de lezer validatiefouten tegenkomt. Als <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, er een uitzondering gegenereerd bij validatiefouten."
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Gegenereerd XML-Schema Definition Language (XSD) validatiefouten."
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  id: Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Valideert dat een <xref:System.Xml.Linq.XAttribute>voldoet aan een opgegeven <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> en een <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>desgewenst de XML-structuur met de na-schema-validatie infoset (PSVI) in te vullen.</xref:System.Xml.Linq.XAttribute>"
  remarks: "U kunt deze methode gebruiken om te valideren dat een <xref:System.Xml.Linq.XAttribute>voldoet aan een schema.</xref:System.Xml.Linq.XAttribute> Gebruik deze methode meestal in wanneer u een kenmerk hebt gewijzigd en u ervoor zorgen wilt dat het nog steeds aan het schema voldoet. U kunt het hele document kan valideren, maar duurt het minder verwerkingstijd voor het valideren van alleen het kenmerk.       Als `addSchemaInfo` is `true`, het kenmerk met de na-schema-validatie infoset (PSVI) door deze methode wordt gevuld. Nadat u de XML-structuur met de PSVI hebt ingevuld, kunt u aanroepen <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName>op het kenmerk gevalideerde.</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> Dit is handig als u bij het schrijven van code die is gebaseerd op gegevens die zijn geretourneerd door <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>.</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>       Als u doorgeeft `null` voor `validationEventHandler`, en vervolgens deze methode een uitzondering op validatiefouten genereert. Van Validatiewaarschuwingen wordt een uitzondering niet verhogen.       Voor het valideren van een kenmerk u een exemplaar van <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject> gebruiken U kunt dit exemplaar op verschillende manieren verkrijgen. Een eenvoudige manier is als volgt: 1.  Valideren dat een document aan een schema voldoet.      2.  De na-schema-validatie infoset (PSVI) toevoegen door het aanroepen van de <xref:System.Xml.Schema.Extensions.Validate%2A>uitbreidingsmethode.</xref:System.Xml.Schema.Extensions.Validate%2A>      3.  De <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>extensiemethode voor het ophalen van een object dat wordt geïmplementeerd <xref:System.Xml.Schema.IXmlSchemaInfo>.</xref:System.Xml.Schema.IXmlSchemaInfo> </xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> aanroepen U kunt een <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject> ophalen van de opgehaalde-object          -Als u een <xref:System.Xml.Schema.XmlSchemaObject>voor een <xref:System.Xml.Linq.XElement>is het type <xref:System.Xml.Schema.XmlSchemaElement>.</xref:System.Xml.Schema.XmlSchemaElement> krijgt</xref:System.Xml.Linq.XElement> </xref:System.Xml.Schema.XmlSchemaObject>          -Als u een <xref:System.Xml.Schema.XmlSchemaObject>voor een <xref:System.Xml.Linq.XAttribute>is het type <xref:System.Xml.Schema.XmlSchemaAttribute>.</xref:System.Xml.Schema.XmlSchemaAttribute> krijgt</xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Schema.XmlSchemaObject>       Nadat u een exemplaar van hebt een <xref:System.Xml.Schema.XmlSchemaObject>, kunt u deze methode voor het valideren van een kenmerk.</xref:System.Xml.Schema.XmlSchemaObject>"
  example:
  - "```c#  \n  \n                static void DumpInvalidNodes(XElement el)  \n{  \n    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n        Console.WriteLine(\"Invalid Element {0}\",  \n            el.AncestorsAndSelf()  \n            .InDocumentOrder()  \n            .Aggregate(\"\", (s, i) => s + \"/\" + i.Name.ToString()));  \n    foreach (XAttribute att in el.Attributes())  \n        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n            Console.WriteLine(\"Invalid Attribute {0}\",  \n                att  \n                .Parent  \n                .AncestorsAndSelf()  \n                .InDocumentOrder()  \n                .Aggregate(\"\",  \n                    (s, i) => s + \"/\" + i.Name.ToString()) + \"/@\" + att.Name.ToString()  \n                );  \n    foreach (XElement child in el.Elements())  \n        DumpInvalidNodes(child);  \n}  \n  \nstatic void Main(string[] args)  \n{  \n    string xsdMarkup =  \n        @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:simpleContent>  \n          <xsd:extension base='xsd:string'>  \n           <xsd:attribute name='Lang' use='required'>  \n            <xsd:simpleType>  \n             <xsd:restriction base='xsd:token'>  \n              <xsd:enumeration value='C#'/>  \n              <xsd:enumeration value='VB'/>  \n             </xsd:restriction>  \n            </xsd:simpleType>  \n           </xsd:attribute>  \n          </xsd:extension>  \n         </xsd:simpleContent>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \n  \n    XmlSchemaSet schemas = new XmlSchemaSet();  \n    schemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \n    XDocument doc1 = new XDocument(  \n        new XElement(\"Root\",  \n            new XAttribute(\"Lang\", \"C#\")  \n        )  \n    );  \n  \n    Console.WriteLine(\"Validating doc1 ...\");  \n    bool errors = false;  \n    doc1.Validate(schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n    DumpInvalidNodes(doc1.Root);  \n  \n    Console.WriteLine();  \n    Console.WriteLine(\"Validating Lang attribute ...\");  \n    XAttribute lang = doc1.Element(\"Root\").Attribute(\"Lang\");  \n  \n    errors = false;  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(\"lang {0}\", errors ? \"did not validate\" : \"validated\");  \n    DumpInvalidNodes(doc1.Root);  \n  \n    // the following makes the Lang attribute invalid according to the schema  \n    lang.Value = \"VC\";  \n  \n    Console.WriteLine();  \n    Console.WriteLine(\"Validating Lang attribute ...\");  \n  \n    errors = false;  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(\"lang {0}\", errors ? \"did not validate\" : \"validated\");  \n    DumpInvalidNodes(doc1.Root);  \n}  \n```  \n  \n```vb  \n  \n                Private Sub DumpInvalidNodes(ByVal el As XElement)  \n    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n        Console.WriteLine(\"Invalid Element {0}\", _  \n            el _  \n            .AncestorsAndSelf _  \n            .InDocumentOrder() _  \n            .Aggregate(\"\", _  \n                Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()))  \n    End If  \n    For Each att As XAttribute In el.Attributes()  \n        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n            Console.WriteLine(\"Invalid Attribute {0}\", _  \n                att _  \n                .Parent _  \n                .AncestorsAndSelf() _  \n                .InDocumentOrder() _  \n                .Aggregate(\"\", _  \n                    Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()) + _  \n                    \"/@\" + att.Name.ToString())  \n        End If  \n    Next  \n    For Each child As XElement In el.Elements()  \n        DumpInvalidNodes(child)  \n    Next  \nEnd Sub  \n  \nDim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n  \n    Dim xsdMarkup As XDocument = _  \n        <?xml version='1.0'?>  \n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n            <xsd:element name='Root'>  \n                <xsd:complexType>  \n                    <xsd:simpleContent>  \n                        <xsd:extension base='xsd:string'>  \n                            <xsd:attribute name='Lang' use='required'>  \n                                <xsd:simpleType>  \n                                    <xsd:restriction base='xsd:token'>  \n                                        <xsd:enumeration value='C#'/>  \n                                        <xsd:enumeration value='VB'/>  \n                                    </xsd:restriction>  \n                                </xsd:simpleType>  \n                            </xsd:attribute>  \n                        </xsd:extension>  \n                    </xsd:simpleContent>  \n                </xsd:complexType>  \n            </xsd:element>  \n        </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = <?xml version='1.0'?>  \n                            <Root Lang='C#'/>  \n  \n    Console.WriteLine(\"Validating doc1 ...\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n    DumpInvalidNodes(doc1.Root)  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Lang attribute ...\")  \n    Dim lang As XAttribute = doc1.Element(\"Root\").Attribute(\"Lang\")  \n  \n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"lang {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n    DumpInvalidNodes(doc1.Root)  \n  \n    ' the following makes the Lang attribute invalid according to the schema  \n    lang.Value = \"VC\"  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Lang attribute ...\")  \n  \n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"lang {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n    DumpInvalidNodes(doc1.Root)  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1 ...  \ndoc1 validated  \n  \nValidating Lang attribute ...  \nlang validated  \n  \nValidating Lang attribute ...  \nThe 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  \nlang did not validate  \nInvalid Attribute /Root/@Lang  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);
    parameters:
    - id: source
      type: System.Xml.Linq.XAttribute
      description: "De <xref:System.Xml.Linq.XAttribute>om te valideren.</xref:System.Xml.Linq.XAttribute>"
    - id: partialValidationType
      type: System.Xml.Schema.XmlSchemaObject
      description: "Een <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> Hiermee worden de substructuur om te valideren."
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "Een <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> voor de validatie."
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "Een <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> voor een gebeurtenis die optreedt wanneer de lezer validatiefouten tegenkomt. Als <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, er een uitzondering gegenereerd bij validatiefouten."
    - id: addSchemaInfo
      type: System.Boolean
      description: "Een <xref:System.Boolean>waarmee wordt aangegeven of voor het vullen van de na-schema-validatie infoset (PSVI).</xref:System.Boolean>"
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Gegenereerd XML-Schema Definition Language (XSD) validatiefouten."
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  id: Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "Valideert dat een <xref:System.Xml.Linq.XElement>substructuur voldoet aan een opgegeven <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> en een <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>desgewenst de XML-structuur met de na-schema-validatie infoset (PSVI) in te vullen.</xref:System.Xml.Linq.XElement>"
  remarks: "U kunt deze methode gebruiken om te valideren dat een substructuur (met een <xref:System.Xml.Linq.XElement>in de hoofdmap van de substructuur) voldoet aan een schema.</xref:System.Xml.Linq.XElement> Gebruik deze methode meestal in wanneer u een substructuur hebt gewijzigd en u ervoor zorgen wilt dat het nog steeds aan het schema voldoet. U kunt het hele document kan valideren, maar het duurt minder verwerkingstijd voor het valideren van een alleen een substructuur.       Als `addSchemaInfo` is `true`, en vervolgens de XML-structuur met de na-schema-validatie infoset (PSVI) door deze methode wordt gevuld.       Er zijn twee aspecten van de XML-structuur met de PSVI in te vullen.       Eerst een aantekening is toegevoegd aan alle knooppunten in de boomstructuur zodat u kunt nu aanroepen <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>voor een element of kenmerk in de boomstructuur.</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>       Ten tweede worden standaardelementen en kenmerken zijn gedefinieerd in de XSD toegevoegd aan de XML-structuur. Door het aanroepen van een van de <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>methoden, kunt u bepalen als een specifiek element of kenmerk van het XSD is toegevoegd als een standaardelement of kenmerk.</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>       Als u doorgeeft `null` voor `validationEventHandler`, en vervolgens deze methode een uitzondering op validatiefouten genereert. Van Validatiewaarschuwingen wordt een uitzondering niet verhogen.       Voor het valideren van een substructuur u een exemplaar van <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject> gebruiken U kunt dit exemplaar op verschillende manieren verkrijgen. Een eenvoudige manier is als volgt: 1.  Valideren dat een document aan een schema voldoet.      2.  De na-schema-validatie infoset (PSVI) toevoegen door het aanroepen van de <xref:System.Xml.Schema.Extensions.Validate%2A>uitbreidingsmethode.</xref:System.Xml.Schema.Extensions.Validate%2A>      3.  De <xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>extensiemethode voor het ophalen van een object dat wordt geïmplementeerd <xref:System.Xml.Schema.IXmlSchemaInfo>.</xref:System.Xml.Schema.IXmlSchemaInfo> </xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> aanroepen U kunt een <xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject> ophalen van de opgehaalde-object          -Als u een <xref:System.Xml.Schema.XmlSchemaObject>voor een <xref:System.Xml.Linq.XElement>is het type <xref:System.Xml.Schema.XmlSchemaElement>.</xref:System.Xml.Schema.XmlSchemaElement> krijgt</xref:System.Xml.Linq.XElement> </xref:System.Xml.Schema.XmlSchemaObject>          -Als u een <xref:System.Xml.Schema.XmlSchemaObject>voor een <xref:System.Xml.Linq.XAttribute>is het type <xref:System.Xml.Schema.XmlSchemaAttribute>.</xref:System.Xml.Schema.XmlSchemaAttribute> krijgt</xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Schema.XmlSchemaObject>       Nadat u een exemplaar van een <xref:System.Xml.Schema.XmlSchemaObject>kunt u deze methode voor het valideren van een substructuur hebt...</xref:System.Xml.Schema.XmlSchemaObject>"
  example:
  - "```c#  \n  \n                string xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:sequence>  \n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \n           <xsd:complexType>  \n            <xsd:simpleContent>  \n             <xsd:extension base='xsd:string'>  \n              <xsd:attribute name='Att1' default='Att1 Default Value'/>  \n             </xsd:extension>  \n            </xsd:simpleContent>  \n           </xsd:complexType>  \n          </xsd:element>  \n         </xsd:sequence>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"c1\"),  \n        new XElement(\"Child2\", \"c2\")  \n    )  \n);  \n  \nXDocument doc2 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"content1\"),  \n        new XElement(\"Child3\", \"content1\")  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1\");  \nbool errors = false;  \ndoc1.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     }, true);  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating doc2\");  \nerrors = false;  \ndoc2.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     }, true);  \nConsole.WriteLine(\"doc2 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Contents of doc1:\");  \nConsole.WriteLine(doc1);  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Contents of doc2:\");  \nConsole.WriteLine(doc2);  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n        <?xml version='1.0'?>  \n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n            <xsd:element name='Root'>  \n                <xsd:complexType>  \n                    <xsd:sequence>  \n                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n                        <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \n                            <xsd:complexType>  \n                                <xsd:simpleContent>  \n                                    <xsd:extension base='xsd:string'>  \n                                        <xsd:attribute name='Att1' default='Att1 Default Value'/>  \n                                    </xsd:extension>  \n                                </xsd:simpleContent>  \n                            </xsd:complexType>  \n                        </xsd:element>  \n                    </xsd:sequence>  \n                </xsd:complexType>  \n            </xsd:element>  \n        </xsd:schema>  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n        <?xml version='1.0'?>  \n        <Root>  \n            <Child1>c1</Child1>  \n            <Child2>c2</Child2>  \n        </Root>  \n  \n    Dim doc2 As XDocument = _  \n        <?xml version='1.0'?>  \n        <Root>  \n            <Child1>content1</Child1>  \n            <Child3>content1</Child3>  \n        </Root>  \n  \n    Console.WriteLine(\"Validating doc1\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating doc2\")  \n    errors = False  \n    doc2.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc2 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Contents of doc1:\")  \n    Console.WriteLine(doc1)  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Contents of doc2:\")  \n    Console.WriteLine(doc2)  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1  \ndoc1 validated  \n  \nValidating doc2  \nThe element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  \ndoc2 did not validate  \n  \nContents of doc1:  \n<Root>  \n  <Child1>c1</Child1>  \n  <Child2 Att1=\"Att1 Default Value\">c2</Child2>  \n</Root>  \n  \nContents of doc2:  \n<Root>  \n  <Child1>content1</Child1>  \n  <Child3>content1</Child3>  \n</Root>  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);
    parameters:
    - id: source
      type: System.Xml.Linq.XElement
      description: "De <xref:System.Xml.Linq.XElement>om te valideren.</xref:System.Xml.Linq.XElement>"
    - id: partialValidationType
      type: System.Xml.Schema.XmlSchemaObject
      description: "Een <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> Hiermee worden de substructuur om te valideren."
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "Een <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> voor de validatie."
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "Een <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref> voor een gebeurtenis die optreedt wanneer de lezer validatiefouten tegenkomt. Als <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, er een uitzondering gegenereerd bij validatiefouten."
    - id: addSchemaInfo
      type: System.Boolean
      description: "Een <xref:System.Boolean>waarmee wordt aangegeven of voor het vullen van de na-schema-validatie infoset (PSVI).</xref:System.Boolean>"
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "Gegenereerd XML-Schema Definition Language (XSD) validatiefouten."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xml.Schema.XmlSchemaValidationException
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaValidationException
  nameWithType: XmlSchemaValidationException
  fullName: System.Xml.Schema.XmlSchemaValidationException
- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute@)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: GetSchemaInfo(XAttribute)
  nameWithType: Extensions.GetSchemaInfo(XAttribute)
  fullName: System.Xml.Schema.Extensions.GetSchemaInfo(XAttribute)
- uid: System.Xml.Schema.IXmlSchemaInfo
  parent: System.Xml.Schema
  isExternal: false
  name: IXmlSchemaInfo
  nameWithType: IXmlSchemaInfo
  fullName: System.Xml.Schema.IXmlSchemaInfo
- uid: System.Xml.Linq.XAttribute
  parent: System.Xml.Linq
  isExternal: true
  name: XAttribute
  nameWithType: XAttribute
  fullName: System.Xml.Linq.XAttribute
- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement@)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: GetSchemaInfo(XElement)
  nameWithType: Extensions.GetSchemaInfo(XElement)
  fullName: System.Xml.Schema.Extensions.GetSchemaInfo(XElement)
- uid: System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: true
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
- uid: System.Xml.Linq.XDocument
  parent: System.Xml.Linq
  isExternal: true
  name: XDocument
  nameWithType: XDocument
  fullName: System.Xml.Linq.XDocument
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.Schema.ValidationEventHandler
  parent: System.Xml.Schema
  isExternal: false
  name: ValidationEventHandler
  nameWithType: ValidationEventHandler
  fullName: System.Xml.Schema.ValidationEventHandler
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
- uid: System.Xml.Schema.XmlSchemaObject
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaObject
  nameWithType: XmlSchemaObject
  fullName: System.Xml.Schema.XmlSchemaObject
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
- uid: System.Xml.Schema.Extensions.GetSchemaInfo*
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: GetSchemaInfo
  nameWithType: Extensions.GetSchemaInfo
- uid: System.Xml.Schema.Extensions.Validate*
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate
  nameWithType: Extensions.Validate
