### YamlMime:ManagedReference
items:
- uid: System.Windows.Documents.TextPointer
  id: TextPointer
  children:
  - System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  - System.Windows.Documents.TextPointer.DocumentEnd
  - System.Windows.Documents.TextPointer.DocumentStart
  - System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  - System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  - System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  - System.Windows.Documents.TextPointer.HasValidLayout
  - System.Windows.Documents.TextPointer.InsertLineBreak
  - System.Windows.Documents.TextPointer.InsertParagraphBreak
  - System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  - System.Windows.Documents.TextPointer.IsAtInsertionPosition
  - System.Windows.Documents.TextPointer.IsAtLineStartPosition
  - System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  - System.Windows.Documents.TextPointer.LogicalDirection
  - System.Windows.Documents.TextPointer.Paragraph
  - System.Windows.Documents.TextPointer.Parent
  - System.Windows.Documents.TextPointer.ToString
  langs:
  - csharp
  name: TextPointer
  nameWithType: TextPointer
  fullName: System.Windows.Documents.TextPointer
  type: Class
  summary: "Hiermee geeft u een positie binnen een <xref href=&quot;System.Windows.Documents.FlowDocument&quot;> </xref> of <xref href=&quot;System.Windows.Controls.TextBlock&quot;> </xref>."
  remarks: "De klasse TextPointer introduceert de volgende terminologie: - positie - inherent, een TextPointer altijd verwijst naar een *positie* in inhoud.  Deze posities ofwel vallen tussen tekens in de inhoud, of tussen stroom inhoud element tags die structuur voor de inhoud te definiëren.      -De huidige positie - omdat een TextPointer wordt altijd aangegeven met een positie en omdat veel van de bewerkingen die kunnen worden uitgevoerd via een TextPointer ten opzichte van de momenteel met de TextPointer aangegeven positie zijn, is het verstandig alleen verwijzen naar de positie van een TextPointer als de *huidige positie*.      -Invoegen positie - een *invoegen positie* wordt de positie waar de nieuwe inhoud zonder dat u een semantische regels voor de bijbehorende inhoud kan worden toegevoegd.  In de praktijk is de positie van een invoeging overal in de inhoud, waarbij een dakje kan worden geplaatst.  Een voorbeeld van een geldige TextPointer positie die niet de positie van een invoeging is de positie tussen twee aangrenzende <xref:System.Windows.Documents.Paragraph>labels (dat wil zeggen, tussen de afsluitcode van de vorige alinea en de begincode van de volgende alinea).</xref:System.Windows.Documents.Paragraph>      -Symbool - voor de doeleinden van TextPointer bewerkingen die betrekking hebben op een van de volgende symbolen wordt beschouwd als een *symbool*:: een openen of sluiten van de tag voor een <xref:System.Windows.Documents.TextElement>element.</xref:System.Windows.Documents.TextElement>          -Een <xref:System.Windows.UIElement>element zich in een <xref:System.Windows.Documents.InlineUIContainer>of <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Opmerking, dat deze een <xref:System.Windows.UIElement>worden altijd geteld als één symbool; eventuele aanvullende inhoud of elementen die deel uitmaken van de <xref:System.Windows.UIElement>worden niet meegeteld als symbolen.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>          -Elke 16-bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] teken binnen een tekst <xref:System.Windows.Documents.Run>element.</xref:System.Windows.Documents.Run>      -Tekst Container - A *tekstcontainer* is het element dat de ultieme rand voor de inhoud van de stroom op dat moment vormt; de positie van een TextPointer altijd valt binnen een tekstcontainer.  Op dit moment moet een tekst-container ofwel een <xref:System.Windows.Documents.FlowDocument>of een <xref:System.Windows.Controls.TextBlock>.</xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.FlowDocument>  Normaal gesproken worden bewerkingen tussen TextPointer-exemplaren in andere tekstcontainers niet ondersteund.      Container - document - de inhoud van een tekst wordt aangeduid als een *document*als in de <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>methode en de <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>en <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>Eigenschappen.</xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> </xref:System.Windows.Documents.TextPointer.DocumentStart%2A> </xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A>       De klasse TextPointer is bedoeld om u te vergemakkelijken traversal en manipuleren van inhoud die wordt vertegenwoordigd door [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] inhoudelementen stromen; in het algemeen dergelijke elementen zijn afgeleid van <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement>  Sommige van de bewerkingen die TextPointer vereenvoudigt het volgende bevatten:-uitvoeren van een rangtelwoord vergelijking van de huidige positie met een tweede opgegeven positie.  Zie de <xref:System.Windows.Documents.TextPointer.CompareTo%2A>methode.</xref:System.Windows.Documents.TextPointer.CompareTo%2A>      -Bepalen het type inhoud aangrenzend object voor de huidige positie in een opgegeven richting.  Zie de <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>methode en <xref:System.Windows.Documents.TextPointerContext>opsomming.</xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>      -U de <xref:System.Windows.Documents.TextElement>die scopes of aangrenzend object voor de huidige positie.</xref:System.Windows.Documents.TextElement>  Zie <xref:System.Windows.Documents.Paragraph>en de <xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A>methode.</xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A> </xref:System.Windows.Documents.Paragraph>      -De tekstcontainer die het huidige document scopes niet ophalen.  Zie de <xref:System.Windows.Documents.TextPointer.Parent%2A>eigenschap.</xref:System.Windows.Documents.TextPointer.Parent%2A>      -Een opgegeven aantal tekens vóór of na de huidige positie ophalen.  Zie de <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>methode.</xref:System.Windows.Documents.TextPointer.GetTextInRun%2A>      -Een reeks tekens plaats op de huidige positie.  Zie de <xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>methode.</xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A>      -De grenzen van de regel niet vinden in de inhoud.  Zie de <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>methode en <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>eigenschap.</xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> </xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>      -Vertalen tussen TextPointer posities en symbool verschuivingen in de inhoud.  Zie de <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>en <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>methoden.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>      -Visual treffers tests door omzetting tussen een positie TextPointer uitvoeren en een <xref:System.Windows.Point>voor relatieve coördinaten.</xref:System.Windows.Point>      -Een nabijgelegen invoegen positie niet vinden of Controleer of de huidige positie de positie van een invoegen.  Zie de <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>en <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>methoden en de <xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A>eigenschap.</xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A>       De positie en <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>aangegeven door een TextPointer-object zijn niet-wijzigbaar.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>  Wanneer inhoud wordt bewerkt of gewijzigd, wordt de positie van een TextPointer niet gewijzigd ten opzichte van de omringende tekst. in plaats daarvan bepaalt wordt de verschuiving van die positie vanaf het begin van inhoud navenant aangepast aan de nieuwe relatieve positie in de inhoud.  Bijvoorbeeld, blijft een TextPointer die een positie aan het begin van een opgegeven lid verwijzen naar het begin van dit lid, zelfs wanneer inhoud wordt ingevoegd of verwijderd vóór of na de alinea.       De klasse TextPointer biedt geen een publieke constructors.  Een exemplaar van TextPointer is gemaakt met behulp van de eigenschappen en methoden van andere objecten (inclusief andere objecten TextPointer). De volgende lijst bevat enkele voorbeelden van methoden en eigenschappen die maken en een TextPointer terug.  Deze lijst is niet volledig: - van een <xref:System.Windows.Documents.TextRange>: <xref:System.Windows.Documents.TextRange.Start%2A>en <xref:System.Windows.Documents.TextRange.End%2A>.</xref:System.Windows.Documents.TextRange.End%2A> </xref:System.Windows.Documents.TextRange.Start%2A> </xref:System.Windows.Documents.TextRange>      -   From a <xref:System.Windows.Documents.TextElement>:  <xref:System.Windows.Documents.TextElement.ContentStart%2A>, <xref:System.Windows.Documents.TextElement.ContentEnd%2A>, <xref:System.Windows.Documents.TextElement.ElementStart%2A>, and <xref:System.Windows.Documents.TextElement.ElementEnd%2A>.</xref:System.Windows.Documents.TextElement.ElementEnd%2A></xref:System.Windows.Documents.TextElement.ElementStart%2A></xref:System.Windows.Documents.TextElement.ContentEnd%2A></xref:System.Windows.Documents.TextElement.ContentStart%2A></xref:System.Windows.Documents.TextElement>      -Van een <xref:System.Windows.Controls.TextBlock>(tekstcontainer): <xref:System.Windows.Controls.TextBlock.ContentStart%2A>, <xref:System.Windows.Controls.TextBlock.ContentEnd%2A>, en <xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A>.</xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A> </xref:System.Windows.Controls.TextBlock.ContentEnd%2A> </xref:System.Windows.Controls.TextBlock.ContentStart%2A> </xref:System.Windows.Controls.TextBlock>      -Van een <xref:System.Windows.Documents.FlowDocument>(tekstcontainer): <xref:System.Windows.Documents.FlowDocument.ContentStart%2A>, en <xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>- van een bestaande TextPointer: <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>, <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>, <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>, en <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> </xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> </xref:System.Windows.Documents.TextPointer.DocumentStart%2A> </xref:System.Windows.Documents.FlowDocument.ContentEnd%2A> </xref:System.Windows.Documents.FlowDocument.ContentStart%2A> </xref:System.Windows.Documents.FlowDocument>"
  example:
  - "The following example demonstrates how to use a TextPointer to find a position just inside of the first <xref:System.Windows.Documents.Run> element in a specified text container.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_TextPointer1](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_textpointer1)]\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer1](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_textpointer1)]  \n  \n The following example implements a simplistic find algorithm using TextPointer facilities.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_TextPointer2](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_textpointer2)]\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer2](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_textpointer2)]"
  syntax:
    content: 'public class TextPointer : System.Windows.Documents.ContentPosition'
  inheritance:
  - System.Object
  - System.Windows.Documents.ContentPosition
  implements: []
  inheritedMembers:
  - System.Windows.Documents.ContentPosition.Missing
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  id: CompareTo(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: CompareTo(TextPointer)
  nameWithType: TextPointer.CompareTo(TextPointer)
  fullName: System.Windows.Documents.TextPointer.CompareTo(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Rangtelwoord vergelijking tussen de opgegeven door de huidige posities <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> en een tweede opgegeven <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "De waarde -1 geeft aan dat de positie wordt opgegeven door de huidige <xref:System.Windows.Documents.TextPointer>voorafgaat aan de positie die is opgegeven door `position`.</xref:System.Windows.Documents.TextPointer>  Een waarde van 0 geeft aan dat de opgegeven posities gelijk zijn.  Een waarde van positieve +&1; geeft aan dat de positie moet worden opgegeven door de huidige <xref:System.Windows.Documents.TextPointer>volgt de positie die is opgegeven door `position`.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method.  In the example, the CompareTo method is used in conjunction with the <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> method to test whether a specified <xref:System.Windows.Documents.TextElement> is empty.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getinsertionposition)]"
  syntax:
    content: public int CompareTo (System.Windows.Documents.TextPointer position);
    parameters:
    - id: position
      type: System.Windows.Documents.TextPointer
      description: "Een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> die aangeeft dat een positie moet worden vergeleken met de huidige positie."
    return:
      type: System.Int32
      description: "– 1 als de huidige <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> vóór <code> position </code>; 0 als de locaties hetzelfde; + 1 als de huidige <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> volgt <code> position </code>."
  overload: System.Windows.Documents.TextPointer.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>position</code>Hiermee geeft u een positie buiten de tekstcontainer die zijn gekoppeld aan de huidige positie."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  id: DeleteTextInRun(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DeleteTextInRun(Int32)
  nameWithType: TextPointer.DeleteTextInRun(Int32)
  fullName: System.Windows.Documents.TextPointer.DeleteTextInRun(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hiermee verwijdert u het opgegeven aantal tekens uit de positie van de huidige <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Geef een positieve waarde voor het verwijderen van de tekens na de huidige positie (zoals in <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>); Geef een negatieve waarde voor het verwijderen van de tekens die vóór de huidige positie (zoals in <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).</xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName> </xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>       Het aantal tekens dat is verwijderd, kan kleiner zijn dan het opgegeven aantal bij `count`.  Dit gebeurt in gevallen waar `count` meer tekens dan bestaan om te worden verwijderd."
  syntax:
    content: public int DeleteTextInRun (int count);
    parameters:
    - id: count
      type: System.Int32
      description: "Het aantal tekens dat u wilt verwijderen, beginnen bij de huidige positie. Geef een positieve waarde voor het verwijderen van de tekens die de huidige positie; volgen Geef een negatieve waarde voor het verwijderen van de tekens die vóór de huidige positie."
    return:
      type: System.Int32
      description: "Het aantal tekens dat is verwijderd."
  overload: System.Windows.Documents.TextPointer.DeleteTextInRun*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De methode wordt aangeroepen op de positie waar tekst is niet toegestaan."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DocumentEnd
  id: DocumentEnd
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
  fullName: System.Windows.Documents.TextPointer.DocumentEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Haalt een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> aan het einde van inhoud in de tekstcontainer die is gekoppeld aan de huidige positie."
  remarks: "De <xref:System.Windows.Documents.TextPointer.Parent%2A>voor de geretourneerde <xref:System.Windows.Documents.TextPointer>is altijd een tekstcontainer (<xref:System.Windows.Controls.TextBlock> of <xref:System.Windows.Documents.FlowDocument>), in plaats van een <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.FlowDocument> </xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.Parent%2A>"
  syntax:
    content: public System.Windows.Documents.TextPointer DocumentEnd { get; }
    return:
      type: System.Windows.Documents.TextPointer
      description: "Een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> aan het einde van inhoud in de tekstcontainer die is gekoppeld aan de huidige positie."
  overload: System.Windows.Documents.TextPointer.DocumentEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.DocumentStart
  id: DocumentStart
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
  fullName: System.Windows.Documents.TextPointer.DocumentStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Haalt een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> aan het begin van de inhoud in de tekstcontainer die is gekoppeld aan de huidige positie."
  remarks: "Gebruik de positie die door deze eigenschap wordt geretourneerd als de positie van een basislijn waaruit u wilt werken met relatieve verschuivingen naar andere functies.  De <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>en <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>upmethoden voor de omzetting tussen posities en positie worden verschoven.</xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>       De <xref:System.Windows.Documents.TextPointer.Parent%2A>voor de geretourneerde <xref:System.Windows.Documents.TextPointer>is altijd een tekstcontainer (<xref:System.Windows.Controls.TextBlock> of <xref:System.Windows.Documents.FlowDocument>), in plaats van een <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.FlowDocument> </xref:System.Windows.Controls.TextBlock> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.Parent%2A>"
  syntax:
    content: public System.Windows.Documents.TextPointer DocumentStart { get; }
    return:
      type: System.Windows.Documents.TextPointer
      description: "Een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> aan het begin van de inhoud in de tekstcontainer die is gekoppeld aan de huidige positie."
  overload: System.Windows.Documents.TextPointer.DocumentStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  id: GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetAdjacentElement(LogicalDirection)
  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetAdjacentElement(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retourneert het element, indien van toepassing, die de huidige randen <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> in de opgegeven logische richting."
  remarks: "Het geretourneerde element is doorgaans een <xref:System.Windows.Documents.TextElement>.</xref:System.Windows.Documents.TextElement>  Een <xref:System.Windows.UIElement>kan worden geretourneerd wanneer de <xref:System.Windows.Documents.TextPointer>geeft een positie in een <xref:System.Windows.Documents.BlockUIContainer>element of een <xref:System.Windows.Documents.InlineUIContainer>element.</xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.UIElement>"
  syntax:
    content: public System.Windows.DependencyObject GetAdjacentElement (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Een van de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> waarden die de logische richting waarin u wilt zoeken naar een aangrenzende elementen."
    return:
      type: System.Windows.DependencyObject
      description: "De aangrenzende elementen in de opgegeven <code> direction </code>, of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als geen aangrenzende element bestaat."
  overload: System.Windows.Documents.TextPointer.GetAdjacentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  id: GetCharacterRect(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetCharacterRect(LogicalDirection)
  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetCharacterRect(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retourneert een selectiekader (<xref href=&quot;System.Windows.Rect&quot;></xref>) voor inhoud die de huidige randen <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> in de opgegeven logische richting."
  remarks: "<xref:System.Windows.Documents.TextElement>randen worden niet beschouwd als inhoud voor de doeleinden van deze methode.</xref:System.Windows.Documents.TextElement>  Als de <xref:System.Windows.Documents.TextPointer>is geplaatst voordat een <xref:System.Windows.Documents.TextElement>edge, de geretourneerde waarde is een selectiekader voor de volgende niet -<xref:System.Windows.Documents.TextElement> inhoud in de opgegeven richting.</xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.TextElement> </xref:System.Windows.Documents.TextPointer>  Als er geen inhoud in de opgegeven richting, een nul-breedte is <xref:System.Windows.Rect>wordt geretourneerd met een hoogte die overeenkomt met de hoogte van alle voorgaande inhoud.</xref:System.Windows.Rect>       De bewerking die door deze methode wordt uitgevoerd, is afhankelijk van een geldige indeling.  Indien nodig, zodat probeert deze methode automatisch een geldige indeling, voordat u doorgaat met de bewerking opnieuw te genereren.  Opnieuw genereren van een lay-out kan een relatief veeleisende bewerking zijn.  Gebruik de <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>eigenschap om te controleren op een geldige indeling voor het uitvoeren van bewerkingen die de lay-out kunnen genereren.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Zie voor meer informatie [indeling](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Rect GetCharacterRect (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Een van de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> waarden die de logische richting waarin een begrenzingsvak inhoud vinden."
    return:
      type: System.Windows.Rect
      description: "Een selectiekader voor inhoud die de huidige randen <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> in de opgegeven richting of &lt;xref:System.Windows.Rect.Empty%2A?displayProperty=fullName&gt; als huidige, informatie over de geldige opmaak is niet beschikbaar."
  overload: System.Windows.Documents.TextPointer.GetCharacterRect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  id: GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetInsertionPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retourneert een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> naar de dichtstbijzijnde invoegen positie in de opgegeven logische richting."
  remarks: "De positie van een invoeging is de positie waar de nieuwe inhoud zonder dat u een semantische regels voor de bijbehorende inhoud kan worden toegevoegd.  In de praktijk is de positie van een invoeging overal in de inhoud, waarbij een dakje kan worden geplaatst.  Een voorbeeld van een geldige <xref:System.Windows.Documents.TextPointer>positie die niet de positie van een invoeging is de positie tussen twee aangrenzende <xref:System.Windows.Documents.Paragraph>labels (dat wil zeggen, tussen de afsluitcode van de vorige alinea en de begincode van de volgende alinea).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>       Als de <xref:System.Windows.Documents.TextPointer>al verwijst naar een positie geldig invoegen, maar de eindtag voor een niet-lege opmaak reeks volgt rechtstreeks op die positie in de opgegeven richting, wordt de <xref:System.Windows.Documents.TextPointer>geretourneerd door deze methode om te verwijzen naar de positie invoegen direct na het sluiten van de opmaak van de takenreeks wordt aangepast.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>    Stel dat u de opmaak van de takenreeks `<Bold>``a``</Bold>``b`.  Houd er rekening mee dat er twee invoegposities tussen de letters zijn `a` en `b`— die voorafgaat aan de afsluitende `Bold` label en een direct na de afsluitende `Bold` label.  Als GetInsertionPosition wordt aangeroepen voor een <xref:System.Windows.Documents.TextPointer>naar de positie direct na de letter `a` en vóór van de afsluiting `Bold` label, en met een `direction` van <xref:System.Windows.Documents.LogicalDirection>, de geretourneerde <xref:System.Windows.Documents.TextPointer>is aangepast, zodat deze verwijzen naar de positie vlak voordat de letter `b`, na het afsluitende `Bold` label.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.LogicalDirection> </xref:System.Windows.Documents.TextPointer>  Een vergelijkbaar aanpassing wordt uitgevoerd voor het openen van opmaak labels als u werkt in de tegengestelde richting logische.  Deze methode is bedoeld om de mogelijkheid van disambiguation tussen invoegposities in dergelijke gevallen.       Deze methode kan ook worden gebruikt om selectief te zijn over invoegen punten wanneer u een reeks structurele tags is betrokken. Bijvoorbeeld, wanneer op de positie tussen begincodes voor alinea&quot;s te sluiten en de parameter direction kan worden gebruikt om te selecteren van de dichtstbijzijnde invoegpositie aan het begin van de volgende alinea (door te geven <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>) of aan het einde van de vorige alinea (door te geven <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).</xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName> </xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>       Als de aanwijzer zich al op de positie invoegen en er geen aangrenzende opmaak labels in de opgegeven zijn `direction`, wordt het <xref:System.Windows.Documents.TextPointer>verwijst naar dezelfde positie als de aanroep <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer> geretourneerd       Het is mogelijk dat er geen geldige invoegen positie ten opzichte van de positie waarnaar wordt verwezen door een <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer> is  Dit kan gebeuren als de inhoud waarnaar wordt verwezen structureel onvolledig is, zoals in een lege tabel of de lijst is.  In dergelijke gevallen retourneert deze methode gewoon een <xref:System.Windows.Documents.TextPointer>op dezelfde positie als de <xref:System.Windows.Documents.TextPointer>van deze methode is aangeroepen.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer>  Deze methode retourneert altijd een geldig <xref:System.Windows.Documents.TextPointer>.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "This example shows how to use the GetInsertionPosition method to check whether a specified <xref:System.Windows.Documents.TextElement> is empty of printable content.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getinsertionposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetInsertionPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Een van de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> waarden die de logische richting waarin u wilt zoeken naar de dichtstbijzijnde invoegen positie."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> naar de dichtstbijzijnde invoegen positie in de opgegeven richting."
  overload: System.Windows.Documents.TextPointer.GetInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  id: GetLineStartPosition(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetLineStartPosition(Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retourneert een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> aan het begin van een regel die is opgegeven ten opzichte van de huidige <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Als de <xref:System.Windows.Documents.TextPointer>verwijst naar de positie van een niet-eenduidige bijvoorbeeld tussen twee regels, de regel in de richting opgegeven door <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>is geselecteerd als de relatieve beginregel.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>       De bewerking die door deze methode wordt uitgevoerd, is afhankelijk van een geldige indeling.  Indien nodig, zodat probeert deze methode automatisch een geldige indeling, voordat u doorgaat met de bewerking opnieuw te genereren.  Opnieuw genereren van een lay-out kan een relatief veeleisende bewerking zijn.  Gebruik <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>om te controleren op een geldige indeling voor het uitvoeren van bewerkingen die de lay-out kunnen genereren.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Zie voor meer informatie [indeling](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count);
    parameters:
    - id: count
      type: System.Int32
      description: "Het aantal begin-of-line-markeringen moet worden overgeslagen bij het bepalen van de regel waarvan u de beginpositie. Negatieve waarden opgeven voorgaande regels, 0, geeft u de huidige regel en positieve waarden volgende regels opgeven."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> die verwijst naar het begin van de opgegeven regel (met de <xref:System.Windows.Documents.TextPointer.LogicalDirection*>ingesteld op <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref>), of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als de opgegeven regel buiten het bereik valt of anderszins kan niet gevonden worden.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  id: GetLineStartPosition(System.Int32,System.Int32@)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetLineStartPosition(Int32,Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32,Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retourneert een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> aan het begin van een regel die is opgegeven ten opzichte van de huidige <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>, en rapporteert het aantal regels zijn overgeslagen."
  remarks: "Als de <xref:System.Windows.Documents.TextPointer>verwijst naar de positie van een niet-eenduidige bijvoorbeeld tussen twee regels, de regel in de richting opgegeven door de <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>eigenschap is geselecteerd als de relatieve beginregel.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count, out int actualCount);
    parameters:
    - id: count
      type: System.Int32
      description: "Het aantal begin-of-line-markeringen moet worden overgeslagen bij het bepalen van de regel waarvan u de beginpositie. Negatieve waarden opgeven voorgaande regels, 0, geeft u de huidige regel en positieve waarden volgende regels opgeven."
    - id: actualCount
      type: System.Int32
      description: "Wanneer deze methode retourneert, bevat het werkelijke aantal begin-of-line-markeringen die zijn overgeslagen bij het bepalen van de regel waarvan u de beginpositie.  Deze waarde is minder dan `count` als het begin of einde van inhoud wordt aangetroffen voordat het opgegeven aantal regels worden overgeslagen. Deze parameter wordt doorgegeven niet geïnitialiseerd."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> die verwijst naar het begin van de opgegeven regel (met de <xref:System.Windows.Documents.TextPointer.LogicalDirection*>ingesteld op <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref>), of naar het begin van de regel die het dichtst bij de opgegeven regel als de opgegeven regel buiten het bereik is.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  id: GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetNextContextPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextContextPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retourneert een verwijzing naar het volgende symbool in de opgegeven richting logische."
  remarks: "Het volgende wordt beschouwd als een symbool:: een openen of sluiten van de tag voor een <xref:System.Windows.Documents.TextElement>element.</xref:System.Windows.Documents.TextElement>      -Een <xref:System.Windows.UIElement>element is opgenomen in een <xref:System.Windows.Documents.InlineUIContainer>of <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Opmerking, dat deze een <xref:System.Windows.UIElement>worden altijd geteld als één symbool; eventuele aanvullende inhoud of elementen die deel uitmaken van de <xref:System.Windows.UIElement>worden niet meegeteld als symbolen.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -Een 16-bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] teken binnen een tekst <xref:System.Windows.Documents.Run>element.</xref:System.Windows.Documents.Run>       Als het volgende teken is geclassificeerd als <xref:System.Windows.Documents.TextPointerContext>, <xref:System.Windows.Documents.TextPointerContext>, of <xref:System.Windows.Documents.TextPointerContext>(aangeduid met de <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A>methode), wordt de <xref:System.Windows.Documents.TextPointer>geretourneerd door deze methode is geavanceerde door precies één teken vanaf de huidige positie.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext>       Als het volgende teken is geclassificeerd als <xref:System.Windows.Documents.TextPointerContext>, wordt de <xref:System.Windows.Documents.TextPointer>geretourneerd door deze methode is geavanceerde voorbij de tekst op het volgende niet-tekstwaarden symbool (dat wil zeggen, de volgende plaats waar de <xref:System.Windows.Documents.TextPointerContext>is niet <xref:System.Windows.Documents.TextPointerContext>).</xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointerContext> </xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  De exacte symbool aantal overschreden vooraf kan worden berekend door het aanroepen van de <xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>methode.</xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A>"
  example:
  - "The following example demonstrates a use for this method.  The example uses the GetNextContextPosition method in conjunction with the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method to traverse and extract the symbols in a specified <xref:System.Windows.Documents.TextElement>.  \n  \n While the example can be used to extract a [!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)] structure for the contents of a given <xref:System.Windows.Documents.TextElement>, it is intended for illustrative purposes only, and should not be used in production code.  See the <xref:System.Xml> namespace for a rich set of types designed for working with and processing XML.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getnextcontextposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getnextcontextposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetNextContextPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Een van de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> waarden die de logische richting waarin u wilt zoeken naar de volgende symbool."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> op het volgende symbool in de gevraagde richting of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als de huidige <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> randen van het begin of einde van inhoud."
  overload: System.Windows.Documents.TextPointer.GetNextContextPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  id: GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetNextInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextInsertionPosition(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retourneert een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> naar de volgende invoegen positie in de opgegeven logische richting."
  remarks: "Een *invoegen positie* wordt de positie waar de nieuwe inhoud zonder dat u een semantische regels voor de bijbehorende inhoud kan worden toegevoegd.  In de praktijk is de positie van een invoeging overal in de inhoud, waarbij een dakje kan worden geplaatst.  Een voorbeeld van een geldige <xref:System.Windows.Documents.TextPointer>positie die niet de positie van een invoeging is de positie tussen twee aangrenzende <xref:System.Windows.Documents.Paragraph>labels (dat wil zeggen, tussen de afsluitcode van de vorige alinea en de begincode van de volgende alinea).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetNextInsertionPosition method to traverse content element boundaries in order to count the number of <xref:System.Windows.Documents.Paragraph> elements present between two specified <xref:System.Windows.Documents.TextPointer> instances.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getnextinsertionposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getnextinsertionposition)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetNextInsertionPosition (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Een van de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> waarden die de logische richting waarin u wilt zoeken naar de volgende invoegen positie."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> waarmee u zich de volgende invoegen positie in de gevraagde richting of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als er geen volgende invoegen positie kan worden gevonden."
  overload: System.Windows.Documents.TextPointer.GetNextInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  id: GetOffsetToPosition(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetOffsetToPosition(TextPointer)
  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)
  fullName: System.Windows.Documents.TextPointer.GetOffsetToPosition(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retourneert de telling van symbolen tussen de huidige <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> en een tweede opgegeven <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Het volgende wordt beschouwd als een symbool:: een openen of sluiten van de tag voor een <xref:System.Windows.Documents.TextElement>element.</xref:System.Windows.Documents.TextElement>      -Een <xref:System.Windows.UIElement>element is opgenomen in een <xref:System.Windows.Documents.InlineUIContainer>of <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Opmerking, dat deze een <xref:System.Windows.UIElement>worden altijd geteld als één symbool; eventuele aanvullende inhoud of elementen die deel uitmaken van de <xref:System.Windows.UIElement>worden niet meegeteld als symbolen.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -Een 16-bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] teken binnen een tekst <xref:System.Windows.Documents.Run>element.</xref:System.Windows.Documents.Run>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetOffsetToPosition method to find the offsets for two <xref:System.Windows.Documents.TextPointer> instances, and then uses this information to save and restore the selection in a <xref:System.Windows.Controls.RichTextBox>.  The example assumes that the contents of the <xref:System.Windows.Controls.RichTextBox> have not changed between a selection save and a selection restore.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getoffsettoposition)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getoffsettoposition)]"
  syntax:
    content: public int GetOffsetToPosition (System.Windows.Documents.TextPointer position);
    parameters:
    - id: position
      type: System.Windows.Documents.TextPointer
      description: "Een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> die aangeeft dat de positie zoeken van de afstand (in tekens) voor."
    return:
      type: System.Int32
      description: "Het relatieve aantal symbolen tussen de huidige <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> en <code> position </code>.  Een negatieve waarde geeft aan dat de huidige <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> volgt de positie die is opgegeven door <code> position </code>, 0 geeft aan dat de posities gelijk zijn, en een positieve waarde geeft aan dat de huidige <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> voorafgaat aan de positie die is opgegeven door <code> position </code>."
  overload: System.Windows.Documents.TextPointer.GetOffsetToPosition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>position</code>Hiermee geeft u een positie buiten de tekstcontainer die zijn gekoppeld aan de huidige positie."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  id: GetPointerContext(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPointerContext(LogicalDirection)
  nameWithType: TextPointer.GetPointerContext(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPointerContext(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retourneert een categorie indicator voor de inhoud naar het huidige aangrenzende <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> in de opgegeven logische richting."
  remarks: ''
  example:
  - "The following example demonstrates a use for this method. The example uses the GetPointerContext method to implement an algorithm for calculating the balance of opening and closing element tags between two specified <xref:System.Windows.Documents.TextPointer> positions.  Each opening element tag is counted as +1, and each closing element tag is counted as –1.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getoffsettoposition2)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getoffsettoposition2)]"
  syntax:
    content: public System.Windows.Documents.TextPointerContext GetPointerContext (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Een van de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> waarden die de logische richting waarin de categorie voor aangrenzende inhoud bepalen."
    return:
      type: System.Windows.Documents.TextPointerContext
      description: "Een van de <xref href=&quot;System.Windows.Documents.TextPointerContext&quot;> </xref> waarden die de categorie van de aangrenzende inhoud in de opgegeven logische richting aangeeft."
  overload: System.Windows.Documents.TextPointer.GetPointerContext*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  id: GetPositionAtOffset(System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPositionAtOffset(Int32)
  nameWithType: TextPointer.GetPositionAtOffset(Int32)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retourneert een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> de positie van de opgegeven verschuiving in tekens, vanaf het begin van de huidige <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
  remarks: "Het volgende wordt beschouwd als een symbool:: een openen of sluiten van de tag voor de <xref:System.Windows.Documents.TextElement>element.</xref:System.Windows.Documents.TextElement>      -Een <xref:System.Windows.UIElement>element is opgenomen in een <xref:System.Windows.Documents.InlineUIContainer>of <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Opmerking, dat deze een <xref:System.Windows.UIElement>worden altijd geteld als één symbool; eventuele aanvullende inhoud of elementen die deel uitmaken van de <xref:System.Windows.UIElement>worden niet meegeteld als symbolen.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -Een 16-bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] teken binnen een tekst <xref:System.Windows.Documents.Run>element.</xref:System.Windows.Documents.Run>"
  example:
  - "The following example demonstrates a use for this method. The example uses the GetPositionAtOffset method to implement a pair of methods, one to calculate the offset to a specified position relative to any hosting paragraph, and the other to return a <xref:System.Windows.Documents.TextPointer> to a specified offset in a specified paragraph.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_getpositionatoffset)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_getpositionatoffset)]"
  syntax:
    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset);
    parameters:
    - id: offset
      type: System.Int32
      description: "Een verschuiving in symbolen waarnaar moet worden berekend en retourneert de positie.  Als de verschuiving negatief is, de positie wordt berekend in de logische richting tegenovergestelde van dat aangegeven door de <xref:System.Windows.Documents.TextPointer.LogicalDirection*>eigenschap.</xref:System.Windows.Documents.TextPointer.LogicalDirection*>"
    return:
      type: System.Windows.Documents.TextPointer
      description: "Een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> de positie van de opgegeven offset of<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>als er geen overeenkomende positie kan worden gevonden."
  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  id: GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetPositionAtOffset(Int32,LogicalDirection)
  nameWithType: TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retourneert een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> de positie van de opgegeven verschuiving in tekens, vanaf het begin van de huidige <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> en in de opgegeven richting."
  remarks: "Het volgende wordt beschouwd als een symbool:: een openen of sluiten van de tag voor de <xref:System.Windows.Documents.TextElement>element.</xref:System.Windows.Documents.TextElement>      -Een <xref:System.Windows.UIElement>element is opgenomen in een <xref:System.Windows.Documents.InlineUIContainer>of <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Opmerking, dat deze een <xref:System.Windows.UIElement>worden altijd geteld als één symbool; eventuele aanvullende inhoud of elementen die deel uitmaken van de <xref:System.Windows.UIElement>worden niet meegeteld als symbolen.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -Een 16-bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] teken binnen een tekst <xref:System.Windows.Documents.Run>element.</xref:System.Windows.Documents.Run>"
  syntax:
    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset, System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: offset
      type: System.Int32
      description: "Een verschuiving in symbolen waarnaar moet worden berekend en retourneert de positie.  Als de offset negatief is, de geretourneerde <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> voorafgaat aan de huidige <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>; anders volgt."
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Een van de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> waarden die de logische richting van de geretourneerde <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref>."
    return:
      type: System.Windows.Documents.TextPointer
      description: "Een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> de positie van de opgegeven offset of<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>als de verschuiving voorbij het einde van de inhoud gaat."
  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  id: GetTextInRun(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextInRun(LogicalDirection)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retourneert een tekenreeks met tekst naar het huidige aangrenzende <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> in de opgegeven logische richting."
  remarks: "Deze methode retourneert alleen ononderbroken wordt uitgevoerd van tekst.  Er niets wordt geretourneerd als een andere waarde dan type symbool <xref:System.Windows.Documents.TextPointerContext>aangrenzend object voor de huidige <xref:System.Windows.Documents.TextPointer>in de opgegeven richting.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  Op deze manier wordt tekst geretourneerd dan het volgende niet-tekstwaarden symbool."
  example:
  - "The following example demonstrates a use for this method. The example uses the GetTextInRun method to implement a simple text extractor.  The method returns a string concatenation of all text between two specified <xref:System.Windows.Documents.TextPointer> instances.  \n  \n While the example can be used to extract any text between two <xref:System.Windows.Documents.TextPointer> instances, it is intended for illustrative purposes only, and should not be used in production code.  Use the <xref:System.Windows.Documents.TextRange.Text%2A?displayProperty=fullName> property instead.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_GetTextInRun](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_gettextinrun)]\n [!code-vb[TextPointer_Snippets#_TextPointer_GetTextInRun](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_gettextinrun)]"
  syntax:
    content: public string GetTextInRun (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Een van de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> waarden die de logische richting waarin u wilt opzoeken en retourneren van alle aangrenzende tekst."
    return:
      type: System.String
      description: "Een tekenreeks met tekst in de opgegeven logische richting aangrenzende of &lt;xref:System.String?displayProperty=fullName&gt; als er geen aangrenzende tekst kan worden gevonden."
  overload: System.Windows.Documents.TextPointer.GetTextInRun*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  id: GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Het opgegeven maximum aantal tekens van aangrenzende tekst in de opgegeven richting in een door de aanroeper opgegeven tekenmatrix opgehaald."
  remarks: "Deze methode retourneert alleen ononderbroken wordt uitgevoerd van tekst.  Er niets wordt geretourneerd als een andere waarde dan type symbool <xref:System.Windows.Documents.TextPointerContext>aangrenzend object voor de huidige <xref:System.Windows.Documents.TextPointer>in de opgegeven richting.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointerContext>  Op deze manier wordt tekst geretourneerd dan het volgende niet-tekstwaarden symbool."
  syntax:
    content: public int GetTextInRun (System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int startIndex, int count);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Een van de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> waarden die de logische richting waarin u wilt zoeken en kopieer alle aangrenzende tekst."
    - id: textBuffer
      type: System.Char[]
      description: "Een buffer waarin tekst wordt gekopieerd."
    - id: startIndex
      type: System.Int32
      description: "Een index in `textBuffer` waarop u wilt beginnen met tekst schrijven die zijn gekopieerd."
    - id: count
      type: System.Int32
      description: "Het maximumaantal tekens dat u wilt kopiëren."
    return:
      type: System.Int32
      description: "Het aantal tekens daadwerkelijk gekopieerd naar <code> textBuffer </code>."
  overload: System.Windows.Documents.TextPointer.GetTextInRun*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>startIndex</code>is kleiner dan 0 of groter zijn dan de <xref:System.Array.Length*> eigenschap van <code>textBuffer</code>.       - of - <code>count</code> is kleiner dan 0 of groter zijn dan de resterende ruimte in <code>textBuffer</code> (<code>textBuffer</code>.<xref:System.Array.Length*> min <code>startIndex</code>)."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  id: GetTextRunLength(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: GetTextRunLength(LogicalDirection)
  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextRunLength(LogicalDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Retourneert het aantal Unicode-tekens tussen de huidige <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> en het volgende niet-tekstwaarden symbool in de opgegeven logische richting."
  remarks: "Het volgende wordt beschouwd als een symbool:: een openen of sluiten van de tag voor de <xref:System.Windows.Documents.TextElement>element.</xref:System.Windows.Documents.TextElement>      -Een <xref:System.Windows.UIElement>element is opgenomen in een <xref:System.Windows.Documents.InlineUIContainer>of <xref:System.Windows.Documents.BlockUIContainer>.</xref:System.Windows.Documents.BlockUIContainer> </xref:System.Windows.Documents.InlineUIContainer> </xref:System.Windows.UIElement>  Opmerking, dat deze een <xref:System.Windows.UIElement>worden altijd geteld als één symbool; eventuele aanvullende inhoud of elementen die deel uitmaken van de <xref:System.Windows.UIElement>worden niet meegeteld als symbolen.</xref:System.Windows.UIElement> </xref:System.Windows.UIElement>      -Een 16-bits [!INCLUDE[TLA#tla_unicode](~/add/includes/ajax-current-ext-md.md)] teken binnen een tekst <xref:System.Windows.Documents.Run>element.</xref:System.Windows.Documents.Run>"
  syntax:
    content: public int GetTextRunLength (System.Windows.Documents.LogicalDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Documents.LogicalDirection
      description: "Een van de <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> waarden die de logische richting waarin het aantal tekens."
    return:
      type: System.Int32
      description: "Het aantal Unicode-tekens tussen de huidige <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> en het volgende niet-tekstwaarden symbool.  Dit aantal kan niet 0 zijn als er geen aangrenzende tekst."
  overload: System.Windows.Documents.TextPointer.GetTextRunLength*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.HasValidLayout
  id: HasValidLayout
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
  fullName: System.Windows.Documents.TextPointer.HasValidLayout
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Haalt een waarde die aangeeft of de tekstcontainer die is gekoppeld aan de huidige positie een geldige indeling (up-to-date heeft)."
  remarks: "Indien nodig, bewerkingen die afhankelijk van een geldige indeling zijn (zoals de <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>methode <xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A>methode en <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A>eigenschap) probeert automatisch een geldige indeling, voordat u doorgaat met de bewerking opnieuw te genereren.</xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> </xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A> </xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A>  Opnieuw genereren van een lay-out kan een relatief veeleisende bewerking zijn.  Gebruik deze eigenschap om te controleren op een geldige indeling voor het uitvoeren van bewerkingen die de lay-out kunnen genereren.  Zie voor meer informatie [indeling](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool HasValidLayout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de indeling van de huidige en geldig; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.HasValidLayout*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertLineBreak
  id: InsertLineBreak
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertLineBreak()
  nameWithType: TextPointer.InsertLineBreak()
  fullName: System.Windows.Documents.TextPointer.InsertLineBreak()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Een regeleinde invoegen op de huidige positie."
  syntax:
    content: public System.Windows.Documents.TextPointer InsertLineBreak ();
    parameters: []
    return:
      type: System.Windows.Documents.TextPointer
      description: "Een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> geplaatste onmiddellijk na de <xref href=&quot;System.Windows.Documents.LineBreak&quot;> </xref> element ingevoegd door deze methode."
  overload: System.Windows.Documents.TextPointer.InsertLineBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak
  id: InsertParagraphBreak
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertParagraphBreak()
  nameWithType: TextPointer.InsertParagraphBreak()
  fullName: System.Windows.Documents.TextPointer.InsertParagraphBreak()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hiermee voegt u een alinea-einde van de huidige positie."
  remarks: "Als deze methode wordt aangeroepen wanneer de huidige positie binnen een bestaande <xref:System.Windows.Documents.Paragraph>element, de bestaande alinea en inhoud in deze worden gesplitst in twee alinea&quot;s op de huidige positie.</xref:System.Windows.Documents.Paragraph>  Als deze methode wordt aangeroepen wanneer de huidige positie niet binnen een bestaande alinea, wordt een nieuwe, lege alinea ingevoegd.  Als deze methode wordt aangeroepen op een positie niet geschikt voor het splitsen van of een lid in te voegen (bijvoorbeeld als de huidige positie bevindt zich in een <xref:System.Windows.Documents.Hyperlink>element), een uitzondering gegenereerd.</xref:System.Windows.Documents.Hyperlink>"
  syntax:
    content: public System.Windows.Documents.TextPointer InsertParagraphBreak ();
    parameters: []
    return:
      type: System.Windows.Documents.TextPointer
      description: "Een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> aan het begin (<xref:System.Windows.Documents.TextElement.ContentStart*>) van de nieuwe alinea.</xref:System.Windows.Documents.TextElement.ContentStart*>"
  overload: System.Windows.Documents.TextPointer.InsertParagraphBreak*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Deze methode wordt aangeroepen op een positie die niet worden gesplitst zodat een nieuwe alinea, zoals in het bereik van een <xref href=&quot;System.Windows.Documents.Hyperlink&quot;> </xref> of <xref href=&quot;System.Windows.Documents.InlineUIContainer&quot;> </xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  id: InsertTextInRun(System.String)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: InsertTextInRun(String)
  nameWithType: TextPointer.InsertTextInRun(String)
  fullName: System.Windows.Documents.TextPointer.InsertTextInRun(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "De opgegeven tekst wordt ingevoegd in de tekst <xref href=&quot;System.Windows.Documents.Run&quot;> </xref> op de huidige positie."
  remarks: "Als de <xref:System.Windows.Documents.TextPointer>ligt niet binnen het bereik van een <xref:System.Windows.Documents.Run>element een <xref:System.Windows.Documents.Run>wordt ingevoegd samen met de `textData`.</xref:System.Windows.Documents.Run> </xref:System.Windows.Documents.Run> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public void InsertTextInRun (string textData);
    parameters:
    - id: textData
      type: System.String
      description: "De tekst om in te voegen."
  overload: System.Windows.Documents.TextPointer.InsertTextInRun*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De huidige positie valt niet binnen een <xref href=&quot;System.Windows.Documents.Run&quot;> </xref> element."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>textData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  id: IsAtInsertionPosition
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
  fullName: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hiermee wordt een waarde die aangeeft of de huidige positie de positie van een invoeging is opgehaald."
  remarks: "De positie van een invoeging is de positie waar de nieuwe inhoud zonder dat u een semantische regels voor de bijbehorende inhoud kan worden toegevoegd.  In de praktijk is de positie van een invoeging overal in de inhoud, waarbij een dakje kan worden geplaatst.  Een voorbeeld van een geldige <xref:System.Windows.Documents.TextPointer>positie die niet de positie van een invoeging is de positie tussen twee aangrenzende <xref:System.Windows.Documents.Paragraph>labels (dat wil zeggen, tussen de afsluitcode van de vorige alinea en de begincode van de volgende alinea).</xref:System.Windows.Documents.Paragraph> </xref:System.Windows.Documents.TextPointer>"
  syntax:
    content: public bool IsAtInsertionPosition { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de huidige positie, de positie van een invoeging wordt; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsAtInsertionPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  id: IsAtLineStartPosition
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
  fullName: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hiermee wordt een waarde die aangeeft of de huidige positie aan het begin van een regel is."
  remarks: "Als de <xref:System.Windows.Documents.TextPointer>verwijst naar de positie van een niet-eenduidige bijvoorbeeld tussen twee regels, de regel in de richting opgegeven door de <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A>eigenschap is geselecteerd als de relatieve beginregel.</xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> </xref:System.Windows.Documents.TextPointer>       De bewerking uitgevoerd met deze eigenschap is afhankelijk van een geldige indeling.  Indien nodig, zodat probeert deze methode automatisch een geldige indeling, voordat u doorgaat met de bewerking opnieuw te genereren.  Opnieuw genereren van een lay-out kan een relatief veeleisende bewerking zijn.  Gebruik de <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>eigenschap om te controleren op een geldige indeling voor het uitvoeren van bewerkingen die de lay-out kunnen genereren.</xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>  Zie voor meer informatie [indeling](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public bool IsAtLineStartPosition { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de huidige positie aan het begin van een lijn is. anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsAtLineStartPosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  id: IsInSameDocument(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: IsInSameDocument(TextPointer)
  nameWithType: TextPointer.IsInSameDocument(TextPointer)
  fullName: System.Windows.Documents.TextPointer.IsInSameDocument(TextPointer)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hiermee wordt aangegeven of de opgegeven positie in dezelfde tekstcontainer als de huidige positie."
  remarks: "De meeste bewerkingen die betrekking hebben op meerdere <xref:System.Windows.Documents.TextPointer>exemplaren zijn alleen geldig als de desbetreffende exemplaren posities die zich in hetzelfde bereik van de container tekst aangeven.</xref:System.Windows.Documents.TextPointer>  Bijvoorbeeld de <xref:System.Windows.Documents.TextPointer.CompareTo%2A>en <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>methoden kunnen niet worden gebruikt met een <xref:System.Windows.Documents.TextPointer>naar een positie buiten de tekstcontainer die zijn gekoppeld aan de huidige positie.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> </xref:System.Windows.Documents.TextPointer.CompareTo%2A>  Gebruik deze methode om te controleren of een opgegeven <xref:System.Windows.Documents.TextPointer>is compatibel met de huidige positie voor dergelijke bewerkingen.</xref:System.Windows.Documents.TextPointer>"
  example:
  - "The following example demonstrates a use for this method.  The example uses the IsInSameDocument method to check whether a specified <xref:System.Windows.Documents.TextPointer> is positioned between two other specified <xref:System.Windows.Documents.TextPointer> instances in a situation when there is no guarantee that all three positions belong to the same text container.  \n  \n [!code-cs[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/add/codesnippet/csharp/TextPointer_Snippets/Window1.xaml.cs#_textpointer_isinsamedocument)]\n [!code-vb[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/add/codesnippet/visualbasic/textpointer_snippets/window1.xaml.vb#_textpointer_isinsamedocument)]"
  syntax:
    content: public bool IsInSameDocument (System.Windows.Documents.TextPointer textPosition);
    parameters:
    - id: textPosition
      type: System.Windows.Documents.TextPointer
      description: "Een <xref href=&quot;System.Windows.Documents.TextPointer&quot;> </xref> die aangeeft dat een positie moet worden vergeleken met de huidige positie."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als <code> textPosition </code> geeft een positie in de tekstcontainer als de huidige positie; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Documents.TextPointer.IsInSameDocument*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>textPosition</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.LogicalDirection
  id: LogicalDirection
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
  fullName: System.Windows.Documents.TextPointer.LogicalDirection
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hiermee haalt u de richting van de logische die zijn gekoppeld aan de huidige positie die wordt gebruikt om op te heffen inhoud gekoppeld aan de huidige positie."
  remarks: "Als een voorbeeld van hoe deze eigenschap wordt gebruikt, de <xref:System.Windows.Documents.LogicalDirection>van de <xref:System.Windows.Documents.TextPointer>geretourneerd door een detectietest methode biedt een treffer tussen twee tekens van de tekst.</xref:System.Windows.Documents.TextPointer> </xref:System.Windows.Documents.LogicalDirection> De richting van de logische geeft aan welke van de twee tekens daadwerkelijk is geraakt, links of rechts."
  syntax:
    content: public System.Windows.Documents.LogicalDirection LogicalDirection { get; }
    return:
      type: System.Windows.Documents.LogicalDirection
      description: "De <xref href=&quot;System.Windows.Documents.LogicalDirection&quot;> </xref> waarde die is gekoppeld aan de huidige positie."
  overload: System.Windows.Documents.TextPointer.LogicalDirection*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.Paragraph
  id: Paragraph
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: Paragraph
  nameWithType: TextPointer.Paragraph
  fullName: System.Windows.Documents.TextPointer.Paragraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hiermee haalt u de alinea die scopes van de huidige positie, indien van toepassing."
  syntax:
    content: public System.Windows.Documents.Paragraph Paragraph { get; }
    return:
      type: System.Windows.Documents.Paragraph
      description: "De <xref href=&quot;System.Windows.Documents.Paragraph&quot;> </xref> die de huidige positie,-bereiken of<xref uid=&quot;langword_csharp_ null &quot; name=&quot; null &quot; href=&quot;&quot;></xref>als er geen deze alinea bestaat."
  overload: System.Windows.Documents.TextPointer.Paragraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.Parent
  id: Parent
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: Parent
  nameWithType: TextPointer.Parent
  fullName: System.Windows.Documents.TextPointer.Parent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Hiermee haalt u de logische bovenliggende waarmee de huidige positie."
  syntax:
    content: public System.Windows.DependencyObject Parent { get; }
    return:
      type: System.Windows.DependencyObject
      description: "De logische bovenliggende waarmee de huidige positie."
  overload: System.Windows.Documents.TextPointer.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.TextPointer.ToString
  id: ToString
  parent: System.Windows.Documents.TextPointer
  langs:
  - csharp
  name: ToString()
  nameWithType: TextPointer.ToString()
  fullName: System.Windows.Documents.TextPointer.ToString()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "Dit type of lid ondersteunt de [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] infrastructuur en is niet bedoeld voor rechtstreeks gebruik vanuit uw code."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "De tekenreeks met het object."
  overload: System.Windows.Documents.TextPointer.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Documents.ContentPosition
  isExternal: false
  name: System.Windows.Documents.ContentPosition
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: CompareTo(TextPointer)
  nameWithType: TextPointer.CompareTo(TextPointer)
  fullName: System.Windows.Documents.TextPointer.CompareTo(TextPointer)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Documents.TextPointer
  parent: System.Windows.Documents
  isExternal: false
  name: TextPointer
  nameWithType: TextPointer
  fullName: System.Windows.Documents.TextPointer
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DeleteTextInRun(Int32)
  nameWithType: TextPointer.DeleteTextInRun(Int32)
  fullName: System.Windows.Documents.TextPointer.DeleteTextInRun(Int32)
- uid: System.Windows.Documents.TextPointer.DocumentEnd
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
  fullName: System.Windows.Documents.TextPointer.DocumentEnd
- uid: System.Windows.Documents.TextPointer.DocumentStart
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
  fullName: System.Windows.Documents.TextPointer.DocumentStart
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetAdjacentElement(LogicalDirection)
  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetAdjacentElement(LogicalDirection)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Documents.LogicalDirection
  parent: System.Windows.Documents
  isExternal: false
  name: LogicalDirection
  nameWithType: LogicalDirection
  fullName: System.Windows.Documents.LogicalDirection
- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetCharacterRect(LogicalDirection)
  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetCharacterRect(LogicalDirection)
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetInsertionPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition(Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32)
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition(Int32,Int32)
  nameWithType: TextPointer.GetLineStartPosition(Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetLineStartPosition(Int32,Int32)
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextContextPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextContextPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextInsertionPosition(LogicalDirection)
  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetNextInsertionPosition(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetOffsetToPosition(TextPointer)
  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)
  fullName: System.Windows.Documents.TextPointer.GetOffsetToPosition(TextPointer)
- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPointerContext(LogicalDirection)
  nameWithType: TextPointer.GetPointerContext(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPointerContext(LogicalDirection)
- uid: System.Windows.Documents.TextPointerContext
  parent: System.Windows.Documents
  isExternal: false
  name: TextPointerContext
  nameWithType: TextPointerContext
  fullName: System.Windows.Documents.TextPointerContext
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset(Int32)
  nameWithType: TextPointer.GetPositionAtOffset(Int32)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32)
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset(Int32,LogicalDirection)
  nameWithType: TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetPositionAtOffset(Int32,LogicalDirection)
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun(LogicalDirection)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  nameWithType: TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
  fullName: System.Windows.Documents.TextPointer.GetTextInRun(LogicalDirection,Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextRunLength(LogicalDirection)
  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)
  fullName: System.Windows.Documents.TextPointer.GetTextRunLength(LogicalDirection)
- uid: System.Windows.Documents.TextPointer.HasValidLayout
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
  fullName: System.Windows.Documents.TextPointer.HasValidLayout
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Documents.TextPointer.InsertLineBreak
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertLineBreak()
  nameWithType: TextPointer.InsertLineBreak()
  fullName: System.Windows.Documents.TextPointer.InsertLineBreak()
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertParagraphBreak()
  nameWithType: TextPointer.InsertParagraphBreak()
  fullName: System.Windows.Documents.TextPointer.InsertParagraphBreak()
- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertTextInRun(String)
  nameWithType: TextPointer.InsertTextInRun(String)
  fullName: System.Windows.Documents.TextPointer.InsertTextInRun(String)
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
  fullName: System.Windows.Documents.TextPointer.IsAtInsertionPosition
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
  fullName: System.Windows.Documents.TextPointer.IsAtLineStartPosition
- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsInSameDocument(TextPointer)
  nameWithType: TextPointer.IsInSameDocument(TextPointer)
  fullName: System.Windows.Documents.TextPointer.IsInSameDocument(TextPointer)
- uid: System.Windows.Documents.TextPointer.LogicalDirection
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
  fullName: System.Windows.Documents.TextPointer.LogicalDirection
- uid: System.Windows.Documents.TextPointer.Paragraph
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Paragraph
  nameWithType: TextPointer.Paragraph
  fullName: System.Windows.Documents.TextPointer.Paragraph
- uid: System.Windows.Documents.Paragraph
  parent: System.Windows.Documents
  isExternal: false
  name: Paragraph
  nameWithType: Paragraph
  fullName: System.Windows.Documents.Paragraph
- uid: System.Windows.Documents.TextPointer.Parent
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Parent
  nameWithType: TextPointer.Parent
  fullName: System.Windows.Documents.TextPointer.Parent
- uid: System.Windows.Documents.TextPointer.ToString
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: ToString()
  nameWithType: TextPointer.ToString()
  fullName: System.Windows.Documents.TextPointer.ToString()
- uid: System.Windows.Documents.TextPointer.CompareTo*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: CompareTo
  nameWithType: TextPointer.CompareTo
- uid: System.Windows.Documents.TextPointer.DeleteTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DeleteTextInRun
  nameWithType: TextPointer.DeleteTextInRun
- uid: System.Windows.Documents.TextPointer.DocumentEnd*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentEnd
  nameWithType: TextPointer.DocumentEnd
- uid: System.Windows.Documents.TextPointer.DocumentStart*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: DocumentStart
  nameWithType: TextPointer.DocumentStart
- uid: System.Windows.Documents.TextPointer.GetAdjacentElement*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetAdjacentElement
  nameWithType: TextPointer.GetAdjacentElement
- uid: System.Windows.Documents.TextPointer.GetCharacterRect*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetCharacterRect
  nameWithType: TextPointer.GetCharacterRect
- uid: System.Windows.Documents.TextPointer.GetInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetInsertionPosition
  nameWithType: TextPointer.GetInsertionPosition
- uid: System.Windows.Documents.TextPointer.GetLineStartPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetLineStartPosition
  nameWithType: TextPointer.GetLineStartPosition
- uid: System.Windows.Documents.TextPointer.GetNextContextPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextContextPosition
  nameWithType: TextPointer.GetNextContextPosition
- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetNextInsertionPosition
  nameWithType: TextPointer.GetNextInsertionPosition
- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetOffsetToPosition
  nameWithType: TextPointer.GetOffsetToPosition
- uid: System.Windows.Documents.TextPointer.GetPointerContext*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPointerContext
  nameWithType: TextPointer.GetPointerContext
- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetPositionAtOffset
  nameWithType: TextPointer.GetPositionAtOffset
- uid: System.Windows.Documents.TextPointer.GetTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextInRun
  nameWithType: TextPointer.GetTextInRun
- uid: System.Windows.Documents.TextPointer.GetTextRunLength*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: GetTextRunLength
  nameWithType: TextPointer.GetTextRunLength
- uid: System.Windows.Documents.TextPointer.HasValidLayout*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: HasValidLayout
  nameWithType: TextPointer.HasValidLayout
- uid: System.Windows.Documents.TextPointer.InsertLineBreak*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertLineBreak
  nameWithType: TextPointer.InsertLineBreak
- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertParagraphBreak
  nameWithType: TextPointer.InsertParagraphBreak
- uid: System.Windows.Documents.TextPointer.InsertTextInRun*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: InsertTextInRun
  nameWithType: TextPointer.InsertTextInRun
- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtInsertionPosition
  nameWithType: TextPointer.IsAtInsertionPosition
- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsAtLineStartPosition
  nameWithType: TextPointer.IsAtLineStartPosition
- uid: System.Windows.Documents.TextPointer.IsInSameDocument*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: IsInSameDocument
  nameWithType: TextPointer.IsInSameDocument
- uid: System.Windows.Documents.TextPointer.LogicalDirection*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: LogicalDirection
  nameWithType: TextPointer.LogicalDirection
- uid: System.Windows.Documents.TextPointer.Paragraph*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Paragraph
  nameWithType: TextPointer.Paragraph
- uid: System.Windows.Documents.TextPointer.Parent*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: Parent
  nameWithType: TextPointer.Parent
- uid: System.Windows.Documents.TextPointer.ToString*
  parent: System.Windows.Documents.TextPointer
  isExternal: false
  name: ToString
  nameWithType: TextPointer.ToString
