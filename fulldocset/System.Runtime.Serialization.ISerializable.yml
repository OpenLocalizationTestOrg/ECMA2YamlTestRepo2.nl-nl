### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.ISerializable
  id: ISerializable
  children:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
  type: Interface
  summary: "Hiermee kunt een object om te bepalen van de eigen serialisatie en deserialisatie."
  remarks: "Een klasse die kan worden geserialiseerd moet worden gemarkeerd met de <xref:System.SerializableAttribute>.</xref:System.SerializableAttribute> Als een klasse het proces voor de serialisatie regelen moet, kan deze de ISerializable-interface implementeert. De <xref:System.Runtime.Serialization.Formatter>aanroepen de <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>tijdens serialisatie en de opgegeven gevuld <xref:System.Runtime.Serialization.SerializationInfo>met alle gegevens die nodig zijn voor het object.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> </xref:System.Runtime.Serialization.Formatter> De <xref:System.Runtime.Serialization.Formatter>maakt een <xref:System.Runtime.Serialization.SerializationInfo>met het type van het object in de grafiek.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.Formatter> Objecten die nodig zijn voor het verzenden van proxy&quot;s zichzelf kunnen gebruiken de <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>en <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A>methoden op <xref:System.Runtime.Serialization.SerializationInfo>wijzigen van de verzonden gegevens.</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> </xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>       In het geval van klassenovername is het mogelijk voor het serialiseren van een klasse die is afgeleid van een basisklasse die ISerializable wordt geïmplementeerd. In dit geval wordt moet de afgeleide klasse de implementatie van de basisklasse van <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>binnen de implementatie van <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>.</xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> </xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> aanroepen Anders worden de gegevens van de basisklasse niet geserialiseerd.       De interface ISerializable impliceert een constructor met de handtekening-constructor (<xref:System.Runtime.Serialization.SerializationInfo> informatie <xref:System.Runtime.Serialization.StreamingContext>context).</xref:System.Runtime.Serialization.StreamingContext> </xref:System.Runtime.Serialization.SerializationInfo> Tijdens deserialisatie, de huidige constructor wordt aangeroepen nadat de gegevens in de <xref:System.Runtime.Serialization.SerializationInfo>gedeserialiseerd door de formatter.</xref:System.Runtime.Serialization.SerializationInfo> Deze constructor moet in het algemeen worden beveiligd als de klasse is niet verzegeld.       De volgorde waarin objecten worden gedeserialiseerd kan niet worden gegarandeerd. Bijvoorbeeld, als een type verwijst naar een type dat is nog niet gedeserialiseerd, wordt een uitzondering optreden. Als u typen waarvoor deze afhankelijkheden maakt, u kunt het probleem omzeilen door het implementeren van de `IDeserializationCallback` interface en de `OnDeserialization` methode.       De serialisatie-architectuur verwerkt objecttypen die <xref:System.MarshalByRefObject>hetzelfde zijn als typen die <xref:System.Object>.</xref:System.Object> uitbreiden</xref:System.MarshalByRefObject> uitbreiden Deze typen kunnen worden gemarkeerd met de <xref:System.SerializableAttribute>en implementeert de interface ISerializable als een ander objecttype.</xref:System.SerializableAttribute> De objectstatus wordt vastgelegd en persistent naar de stroom.       Wanneer deze typen worden gebruikt door <xref:System.Runtime.Remoting>de externe infrastructuur biedt een vervanging die overgenomen typische serialisatie en in plaats daarvan een proxy voor de <xref:System.MarshalByRefObject>.</xref:System.MarshalByRefObject> serialiseert</xref:System.Runtime.Remoting> Een vervanging is een hulpprogramma dat kent het serialiseren en deserialiseren van objecten van een bepaald type. De proxy, onzichtbaar voor de gebruiker in de meeste gevallen worden van het type <xref:System.Runtime.Remoting.ObjRef>.</xref:System.Runtime.Remoting.ObjRef>       Als een algemene ontwerppatroon worden deze ongebruikelijke voor een klasse zijn beide gemarkeerd met het kenmerk serialiseerbaar en <xref:System.MarshalByRefObject>.</xref:System.MarshalByRefObject> uitbreiden Ontwikkelaars moeten zorgvuldig nadenken over de mogelijke scenario&quot;s serialisatie en externe toegang bij het combineren van deze twee kenmerken. Een voorbeeld waarin dit wordt mogelijk van toepassing is met een <xref:System.IO.MemoryStream>.</xref:System.IO.MemoryStream> Terwijl de basisklasse van <xref:System.IO.MemoryStream>(<xref:System.IO.Stream>) loopt van <xref:System.MarshalByRefObject>, is het mogelijk om vast te leggen van de status van een <xref:System.IO.MemoryStream>en herstel hem op zal.</xref:System.IO.MemoryStream> </xref:System.MarshalByRefObject> </xref:System.IO.Stream> </xref:System.IO.MemoryStream> Dus mogelijk relevant zijn voor het serialiseren van de status van deze stream naar een database en deze op een later tijdstip herstellen. Als u via externe toegang gebruikt, zou een object van dit type evenwel via proxy.       Voor meer informatie over de serialisatie van klassen die <xref:System.MarshalByRefObject>Zie <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>.</xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector> </xref:System.MarshalByRefObject> uitbreiden Zie voor meer informatie over het implementeren van ISerializable [aangepaste serialisatie](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example demonstrates the use of the ISerializable interface to define custom serialization behavior for a class.  \n  \n [!code-cpp[ISerializable Interface Example#1](~/add/codesnippet/cpp/t-system.runtime.seriali_4_1.cpp)]\n [!code-cs[ISerializable Interface Example#1](~/add/codesnippet/csharp/t-system.runtime.seriali_4_1.cs)]\n [!code-vb[ISerializable Interface Example#1](~/add/codesnippet/visualbasic/t-system.runtime.seriali_4_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ISerializable
  implements: []
  platform:
  - net462
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Serialization
  summary: "Vult een <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> met de gegevens die nodig zijn voor het serialiseren van het doelobject."
  remarks: "Objecten die zijn opgenomen in de <xref:System.Runtime.Serialization.SerializationInfo>automatisch worden bijgehouden en door de formatter geserialiseerd.</xref:System.Runtime.Serialization.SerializationInfo>       Code die GetObjectData, komen aanroept vereist de <xref:System.Security.Permissions.SecurityPermission>voor het leveren van services voor serialisatie.</xref:System.Security.Permissions.SecurityPermission> Opsomming gekoppeld: <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>.</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>      > [!NOTE] > Is er geen garantie dat deze methode wordt slechts eenmaal worden aangeroepen per exemplaar van het object tijdens de serialisatie. De methode moet daarom worden geïmplementeerd zodanig dat het gedrag van het zal zijn hetzelfde, ongeacht het aantal keren dat deze wordt aangeroepen."
  example:
  - "The following example uses the GetObjectData method to set alternate values for a serialized object. The code uses the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> method of the <xref:System.Runtime.Serialization.SerializationInfo> class to store the alternate values when the object is serialized. Conversely, when the constructor of the `Person` class is called during deserialization, the alternatve values are retrieved using the <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> method and reassigned to the object's fields.  \n  \n [!code-cs[ISerializable_GetObjectData#0](~/add/codesnippet/csharp/8416df17-ca26-45ef-baab-_1.cs)]\n [!code-vb[ISerializable_GetObjectData#0](~/add/codesnippet/visualbasic/8416df17-ca26-45ef-baab-_1.vb)]"
  syntax:
    content: public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "De <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> te vullen met gegevens."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "Het doel (Zie <xref:System.Runtime.Serialization.StreamingContext>) voor deze serialisatie.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Runtime.Serialization.ISerializable.GetObjectData*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "De aanroeper heeft niet de vereiste machtiging."
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Runtime.Serialization.ISerializable.GetObjectData*
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData
  nameWithType: ISerializable.GetObjectData
