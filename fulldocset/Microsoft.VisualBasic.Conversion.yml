### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Conversion
  id: Conversion
  children:
  - Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)
  - Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)
  - Microsoft.VisualBasic.Conversion.ErrorToString
  - Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)
  - Microsoft.VisualBasic.Conversion.Fix(System.Decimal)
  - Microsoft.VisualBasic.Conversion.Fix(System.Double)
  - Microsoft.VisualBasic.Conversion.Fix(System.Int16)
  - Microsoft.VisualBasic.Conversion.Fix(System.Int32)
  - Microsoft.VisualBasic.Conversion.Fix(System.Int64)
  - Microsoft.VisualBasic.Conversion.Fix(System.Object)
  - Microsoft.VisualBasic.Conversion.Fix(System.Single)
  - Microsoft.VisualBasic.Conversion.Hex(System.Byte)
  - Microsoft.VisualBasic.Conversion.Hex(System.Int16)
  - Microsoft.VisualBasic.Conversion.Hex(System.Int32)
  - Microsoft.VisualBasic.Conversion.Hex(System.Int64)
  - Microsoft.VisualBasic.Conversion.Hex(System.Object)
  - Microsoft.VisualBasic.Conversion.Hex(System.SByte)
  - Microsoft.VisualBasic.Conversion.Hex(System.UInt16)
  - Microsoft.VisualBasic.Conversion.Hex(System.UInt32)
  - Microsoft.VisualBasic.Conversion.Hex(System.UInt64)
  - Microsoft.VisualBasic.Conversion.Int(System.Decimal)
  - Microsoft.VisualBasic.Conversion.Int(System.Double)
  - Microsoft.VisualBasic.Conversion.Int(System.Int16)
  - Microsoft.VisualBasic.Conversion.Int(System.Int32)
  - Microsoft.VisualBasic.Conversion.Int(System.Int64)
  - Microsoft.VisualBasic.Conversion.Int(System.Object)
  - Microsoft.VisualBasic.Conversion.Int(System.Single)
  - Microsoft.VisualBasic.Conversion.Oct(System.Byte)
  - Microsoft.VisualBasic.Conversion.Oct(System.Int16)
  - Microsoft.VisualBasic.Conversion.Oct(System.Int32)
  - Microsoft.VisualBasic.Conversion.Oct(System.Int64)
  - Microsoft.VisualBasic.Conversion.Oct(System.Object)
  - Microsoft.VisualBasic.Conversion.Oct(System.SByte)
  - Microsoft.VisualBasic.Conversion.Oct(System.UInt16)
  - Microsoft.VisualBasic.Conversion.Oct(System.UInt32)
  - Microsoft.VisualBasic.Conversion.Oct(System.UInt64)
  - Microsoft.VisualBasic.Conversion.Str(System.Object)
  - Microsoft.VisualBasic.Conversion.Val(System.Char)
  - Microsoft.VisualBasic.Conversion.Val(System.Object)
  - Microsoft.VisualBasic.Conversion.Val(System.String)
  langs:
  - csharp
  name: Conversion
  nameWithType: Conversion
  fullName: Microsoft.VisualBasic.Conversion
  type: Class
  summary: "De <xref uid=&quot;langword_csharp_Conversion&quot; name=&quot;Conversion&quot; href=&quot;&quot;> </xref> -module bevat de procedures voor het uitvoeren van verschillende conversiebewerkingen."
  remarks: "Deze module biedt ondersteuning voor de Visual Basic-taal sleutelwoorden en run-time-bibliotheek-leden die decimale getallen worden geconverteerd naar andere basissen cijfers tekenreeksen, tekenreeksen nummers en gegevens op één type naar een andere."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._0_1.vb)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Conversion
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)
  id: CTypeDynamic(System.Object,System.Type)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: CTypeDynamic(Object,Type)
  nameWithType: Conversion.CTypeDynamic(Object,Type)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object,Type)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Een object wordt omgezet in het opgegeven type."
  remarks: "De `CTypeDynamic` methode zet het object dat is doorgegeven als de `Expression` -parameter voor het type dat is opgegeven door de `TargetType` parameter. Als het object een dynamische object is, de `CTypeDynamic` methode beschikbaar dynamische conversies van toepassing.       De `CTypeDynamic` methode toepassing dynamische conversies in overeenstemming met de semantiek voor conversie gedefinieerd door het object zelf. Als een dynamisch object van overneemt <xref:System.Dynamic.DynamicObject>, wordt de `CTypeDynamic` methode eerst probeert de conversie uitvoeren met behulp van een conversie van de gebruiker gedefinieerde, statische.</xref:System.Dynamic.DynamicObject> Als de gebruiker gedefinieerde, statische conversie is mislukt, de `CTypeDynamic` methode probeert de conversie uitvoeren met behulp van dynamische conversies. Als een dynamisch object implementeert <xref:System.Dynamic.IDynamicMetaObjectProvider>, wordt de `CTypeDynamic` methode voorrang bij dynamische conversies geeft over de gebruiker gedefinieerde, statische conversies.</xref:System.Dynamic.IDynamicMetaObjectProvider>"
  example:
  - "The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.  \n  \n```vb#  \nImports System.Dynamic  \n  \nModule Module1  \n    Sub Main()  \n        Dim dyn As Object = New SampleDynamicObject  \n        Dim sampleString = CTypeDynamic(dyn, GetType(String))  \n        Console.WriteLine(sampleString)  \n    End Sub  \nEnd Module  \n  \nClass SampleDynamicObject  \n    Inherits DynamicObject  \n  \n    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  \n                                         ByRef result As Object) As Boolean  \n  \n        If binder.Type = GetType(String) Then  \n            result = \"Sample String\"  \n            Return True  \n        End If  \n  \n        Return False  \n    End Function  \nEnd Class  \n```"
  syntax:
    content: public static object CTypeDynamic (object Expression, Type TargetType);
    parameters:
    - id: Expression
      type: System.Object
      description: "Het object te converteren."
    - id: TargetType
      type: System.Type
      description: "Het type waarnaar u wilt converteren van het object."
    return:
      type: System.Object
      description: "Een object waarvan het type tijdens de uitvoering het aangevraagde doel-type is."
  overload: Microsoft.VisualBasic.Conversion.CTypeDynamic*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)
  id: CTypeDynamic``1(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: CTypeDynamic(Object)
  nameWithType: Conversion.CTypeDynamic(Object)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  syntax:
    content: public static TargetType CTypeDynamic<TargetType> (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "Moet worden toegevoegd."
    return:
      type: TargetType
      description: "Moet worden toegevoegd."
  overload: Microsoft.VisualBasic.Conversion.CTypeDynamic<TargetType>*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.ErrorToString
  id: ErrorToString
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: ErrorToString()
  nameWithType: Conversion.ErrorToString()
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het foutbericht dat overeenkomt met een opgegeven foutnummer."
  remarks: "De `ErrorToString` functie onderzoekt de instellingen van de eigenschappen van de `Err` object voor het identificeren van de meest recente runtime-fout. De geretourneerde waarde van de `ErrorToString` functie komt overeen met de `Description` eigenschap van de `Err` object. Als er geen runtime-fout is opgetreden, `ErrorToString` retourneert een tekenreeks met lengte nul (&quot;&quot;).       In Visual Basic versie 6.0 en lager, deze functionaliteit is verstrekt door de `Error` functie."
  example:
  - "The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.  \n  \n [!code-vb[VbVbalrCatRef#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._1_1.vb)]"
  syntax:
    content: public static string ErrorToString ();
    parameters: []
    return:
      type: System.String
      description: "Het foutbericht dat overeenkomt met de meest recente runtime-fout."
  overload: Microsoft.VisualBasic.Conversion.ErrorToString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ErrorNumber</code>valt buiten het bereik."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)
  id: ErrorToString(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: ErrorToString(Int32)
  nameWithType: Conversion.ErrorToString(Int32)
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het foutbericht dat overeenkomt met een opgegeven foutnummer."
  remarks: "De `ErrorToString` functie onderzoekt de instellingen van de eigenschappen van de `Err` object voor het identificeren van de meest recente runtime-fout. De geretourneerde waarde van de `ErrorToString` functie komt overeen met de `Description` eigenschap van de `Err` object. Als `ErrorNumber` is een geldig foutnummer, maar is niet gedefinieerd `ErrorToString` retourneert de tekenreeks `&quot;Application-defined or object-defined error.&quot;` als `ErrorNumber` is niet geldig, een fout optreedt. Als `ErrorNumber` wordt weggelaten, het bericht overeenkomt met de meest recente runtime-fout geretourneerd. Als geen runtime-fout is opgetreden of `ErrorNumber` is ingesteld op 0 `ErrorToString` retourneert een tekenreeks met lengte nul (&quot;&quot;).       In Visual Basic versie 6.0 en lager, deze functionaliteit is verstrekt door de `Error` functie."
  example:
  - "The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.  \n  \n [!code-vb[VbVbalrCatRef#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._191_1.vb)]"
  syntax:
    content: public static string ErrorToString (int ErrorNumber);
    parameters:
    - id: ErrorNumber
      type: System.Int32
      description: "Optioneel. Een geldig foutnummer."
    return:
      type: System.String
      description: "Het foutbericht dat overeenkomt met een opgegeven fout."
  overload: Microsoft.VisualBasic.Conversion.ErrorToString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ErrorNumber</code>valt buiten het bereik."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Decimal)
  id: Fix(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Decimal)
  nameWithType: Conversion.Fix(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het integergedeelte van een getal."
  remarks: "Zowel de `Int` en `Fix` functies verwijderen in het fractionele deel van `Number` en de resulterende integerwaarde retourneren.       Het verschil tussen `Int` en `Fix` functies is dat als `Number` is negatief, `Int` retourneert de eerste negatieve integer die kleiner dan of gelijk zijn aan `Number`, terwijl `Fix` retourneert de eerste negatieve integer die groter zijn dan of gelijk zijn aan `Number`. Bijvoorbeeld: `Int`&8;,4&9;, en `Fix`&8;,4 op-8.       `Fix(number)`is gelijk aan`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._62_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._62_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._62_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static decimal Fix (decimal Number);
    parameters:
    - id: Number
      type: System.Decimal
      description: "Vereist. Een getal van het type <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> of een geldige numerieke expressie. Als `Number` bevat <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> wordt geretourneerd."
    return:
      type: System.Decimal
      description: "Retourneert het integergedeelte van een getal."
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Aantal is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Double)
  id: Fix(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Double)
  nameWithType: Conversion.Fix(Double)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het integergedeelte van een getal."
  remarks: "Zowel de `Int` en `Fix` functies verwijderen in het fractionele deel van `Number` en de resulterende integerwaarde retourneren.       Het verschil tussen `Int` en `Fix` functies is dat als `Number` is negatief, `Int` retourneert de eerste negatieve integer die kleiner dan of gelijk zijn aan `Number`, terwijl `Fix` retourneert de eerste negatieve integer die groter zijn dan of gelijk zijn aan `Number`. Bijvoorbeeld: `Int`&8;,4&9;, en `Fix`&8;,4 op-8.       `Fix(number)`is gelijk aan`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._43_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._43_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._43_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static double Fix (double Number);
    parameters:
    - id: Number
      type: System.Double
      description: "Vereist. Een getal van het type <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> of een geldige numerieke expressie. Als `Number` bevat <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> wordt geretourneerd."
    return:
      type: System.Double
      description: "Retourneert het integergedeelte van een getal."
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Aantal is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int16)
  id: Fix(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Int16)
  nameWithType: Conversion.Fix(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het integergedeelte van een getal."
  remarks: "Zowel de `Int` en `Fix` functies verwijderen in het fractionele deel van `Number` en de resulterende integerwaarde retourneren.       Het verschil tussen `Int` en `Fix` functies is dat als `Number` is negatief, `Int` retourneert de eerste negatieve integer die kleiner dan of gelijk zijn aan `Number`, terwijl `Fix` retourneert de eerste negatieve integer die groter zijn dan of gelijk zijn aan `Number`. Bijvoorbeeld: `Int`&8;,4&9;, en `Fix`&8;,4 op-8.       `Fix(number)`is gelijk aan`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._231_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._231_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._231_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static short Fix (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "Vereist. Een getal van het type <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> of een geldige numerieke expressie. Als `Number` bevat <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> wordt geretourneerd."
    return:
      type: System.Int16
      description: "Retourneert het integergedeelte van een getal."
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Aantal is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int32)
  id: Fix(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Int32)
  nameWithType: Conversion.Fix(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het integergedeelte van een getal."
  remarks: "Zowel de `Int` en `Fix` functies verwijderen in het fractionele deel van `Number` en de resulterende integerwaarde retourneren.       Het verschil tussen `Int` en `Fix` functies is dat als `Number` is negatief, `Int` retourneert de eerste negatieve integer die kleiner dan of gelijk zijn aan `Number`, terwijl `Fix` retourneert de eerste negatieve integer die groter zijn dan of gelijk zijn aan `Number`. Bijvoorbeeld: `Int`&8;,4&9;, en `Fix`&8;,4 op-8.       `Fix(number)`is gelijk aan`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._70_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._70_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._70_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static int Fix (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "Vereist. Een getal van het type <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> of een geldige numerieke expressie. Als `Number` bevat <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> wordt geretourneerd."
    return:
      type: System.Int32
      description: "Retourneert het integergedeelte van een getal."
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Aantal is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int64)
  id: Fix(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Int64)
  nameWithType: Conversion.Fix(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het integergedeelte van een getal."
  remarks: "Zowel de `Int` en `Fix` functies verwijderen in het fractionele deel van `Number` en de resulterende integerwaarde retourneren.       Het verschil tussen `Int` en `Fix` functies is dat als `Number` is negatief, `Int` retourneert de eerste negatieve integer die kleiner dan of gelijk zijn aan `Number`, terwijl `Fix` retourneert de eerste negatieve integer die groter zijn dan of gelijk zijn aan `Number`. Bijvoorbeeld: `Int`&8;,4&9;, en `Fix`&8;,4 op-8.       `Fix(number)`is gelijk aan`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._85_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._85_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._85_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static long Fix (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "Vereist. Een getal van het type <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> of een geldige numerieke expressie. Als `Number` bevat <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> wordt geretourneerd."
    return:
      type: System.Int64
      description: "Retourneert het integergedeelte van een getal."
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Aantal is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Object)
  id: Fix(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Object)
  nameWithType: Conversion.Fix(Object)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het integergedeelte van een getal."
  remarks: "Zowel de `Int` en `Fix` functies verwijderen in het fractionele deel van `Number` en de resulterende integerwaarde retourneren.       Het verschil tussen `Int` en `Fix` functies is dat als `Number` is negatief, `Int` retourneert de eerste negatieve integer die kleiner dan of gelijk zijn aan `Number`, terwijl `Fix` retourneert de eerste negatieve integer die groter zijn dan of gelijk zijn aan `Number`. Bijvoorbeeld: `Int`&8;,4&9;, en `Fix`&8;,4 op-8.       `Fix(number)`is gelijk aan`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._106_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._106_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._106_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static object Fix (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "Vereist. Een getal van het type <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> of een geldige numerieke expressie. Als `Number` bevat <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> wordt geretourneerd."
    return:
      type: System.Object
      description: "Retourneert het integergedeelte van een getal."
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Aantal is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Single)
  id: Fix(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Fix(Single)
  nameWithType: Conversion.Fix(Single)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het integergedeelte van een getal."
  remarks: "Zowel de `Int` en `Fix` functies verwijderen in het fractionele deel van `Number` en de resulterende integerwaarde retourneren.       Het verschil tussen `Int` en `Fix` functies is dat als `Number` is negatief, `Int` retourneert de eerste negatieve integer die kleiner dan of gelijk zijn aan `Number`, terwijl `Fix` retourneert de eerste negatieve integer die groter zijn dan of gelijk zijn aan `Number`. Bijvoorbeeld: `Int`&8;,4&9;, en `Fix`&8;,4 op-8.       `Fix(number)`is gelijk aan`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._79_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._79_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._79_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static float Fix (float Number);
    parameters:
    - id: Number
      type: System.Single
      description: "Vereist. Een getal van het type <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> of een geldige numerieke expressie. Als `Number` bevat <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> wordt geretourneerd."
    return:
      type: System.Single
      description: "Retourneert het integergedeelte van een getal."
  overload: Microsoft.VisualBasic.Conversion.Fix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Aantal is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Byte)
  id: Hex(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Byte)
  nameWithType: Conversion.Hex(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | If `Number` is| Retourneert hexadecimale |   | Lege | Nul (0) |   | Elke numerieke waarde | Maximaal zestien hexadecimale tekens |       U kunt hexadecimale cijfers rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&H`. Bijvoorbeeld: `&H10` decimale getal 16 hexadecimale notatie."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._208_1.vb)]"
  syntax:
    content: public static string Hex (byte Number);
    parameters:
    - id: Number
      type: System.Byte
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int16)
  id: Hex(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Int16)
  nameWithType: Conversion.Hex(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | If `Number` is| Retourneert hexadecimale |   | Lege | Nul (0) |   | Elke numerieke waarde | Maximaal zestien hexadecimale tekens |       U kunt hexadecimale cijfers rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&H`. Bijvoorbeeld: `&H10` decimale getal 16 hexadecimale notatie."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._128_1.vb)]"
  syntax:
    content: public static string Hex (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int32)
  id: Hex(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Int32)
  nameWithType: Conversion.Hex(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | If `Number` is| Retourneert hexadecimale |   | Lege | Nul (0) |   | Elke numerieke waarde | Maximaal zestien hexadecimale tekens |       U kunt hexadecimale cijfers rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&H`. Bijvoorbeeld: `&H10` decimale getal 16 hexadecimale notatie."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._102_1.vb)]"
  syntax:
    content: public static string Hex (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int64)
  id: Hex(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Int64)
  nameWithType: Conversion.Hex(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | If `Number` is| Retourneert hexadecimale |   | Lege | Nul (0) |   | Elke numerieke waarde | Maximaal zestien hexadecimale tekens |       U kunt hexadecimale cijfers rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&H`. Bijvoorbeeld: `&H10` decimale getal 16 hexadecimale notatie."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._75_1.vb)]"
  syntax:
    content: public static string Hex (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Object)
  id: Hex(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(Object)
  nameWithType: Conversion.Hex(Object)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | If `Number` is| Retourneert hexadecimale |   | Lege | Nul (0) |   | Elke numerieke waarde | Maximaal zestien hexadecimale tekens |       U kunt hexadecimale cijfers rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&H`. Bijvoorbeeld: `&H10` decimale getal 16 hexadecimale notatie."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._53_1.vb)]"
  syntax:
    content: public static string Hex (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.SByte)
  id: Hex(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(SByte)
  nameWithType: Conversion.Hex(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | If `Number` is| Retourneert hexadecimale |   | Lege | Nul (0) |   | Elke numerieke waarde | Maximaal zestien hexadecimale tekens |       U kunt hexadecimale cijfers rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&H`. Bijvoorbeeld: `&H10` decimale getal 16 hexadecimale notatie."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._15_1.vb)]"
  syntax:
    content: public static string Hex (sbyte Number);
    parameters:
    - id: Number
      type: System.SByte
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt16)
  id: Hex(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(UInt16)
  nameWithType: Conversion.Hex(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | If `Number` is| Retourneert hexadecimale |   | Lege | Nul (0) |   | Elke numerieke waarde | Maximaal zestien hexadecimale tekens |       U kunt hexadecimale cijfers rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&H`. Bijvoorbeeld: `&H10` decimale getal 16 hexadecimale notatie."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._118_1.vb)]"
  syntax:
    content: public static string Hex (ushort Number);
    parameters:
    - id: Number
      type: System.UInt16
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt32)
  id: Hex(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(UInt32)
  nameWithType: Conversion.Hex(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | If `Number` is| Retourneert hexadecimale |   | Lege | Nul (0) |   | Elke numerieke waarde | Maximaal zestien hexadecimale tekens |       U kunt hexadecimale cijfers rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&H`. Bijvoorbeeld: `&H10` decimale getal 16 hexadecimale notatie."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._182_1.vb)]"
  syntax:
    content: public static string Hex (uint Number);
    parameters:
    - id: Number
      type: System.UInt32
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt64)
  id: Hex(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Hex(UInt64)
  nameWithType: Conversion.Hex(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | If `Number` is| Retourneert hexadecimale |   | Lege | Nul (0) |   | Elke numerieke waarde | Maximaal zestien hexadecimale tekens |       U kunt hexadecimale cijfers rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&H`. Bijvoorbeeld: `&H10` decimale getal 16 hexadecimale notatie."
  example:
  - "This example uses the `Hex` function to return the hexadecimal value of a number.  \n  \n [!code-vb[VbVbalrStrings#16](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._119_1.vb)]"
  syntax:
    content: public static string Hex (ulong Number);
    parameters:
    - id: Number
      type: System.UInt64
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de hexadecimale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Hex*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Decimal)
  id: Int(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Decimal)
  nameWithType: Conversion.Int(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Int(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het integergedeelte van een getal."
  remarks: "Zowel de `Int` en `Fix` functies verwijderen in het fractionele deel van `Number` en de resulterende integerwaarde retourneren.       Het verschil tussen `Int` en `Fix` functies is dat als `Number` is negatief, `Int` retourneert de eerste negatieve integer die kleiner dan of gelijk zijn aan `Number`, terwijl `Fix` retourneert de eerste negatieve integer die groter zijn dan of gelijk zijn aan `Number`. Bijvoorbeeld: `Int`&8;,4&9;, en `Fix`&8;,4 op-8.       `Fix(number)`is gelijk aan`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._14_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._14_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._14_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static decimal Int (decimal Number);
    parameters:
    - id: Number
      type: System.Decimal
      description: "Vereist. Een getal van het type <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> of een geldige numerieke expressie. Als `Number` bevat <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> wordt geretourneerd."
    return:
      type: System.Decimal
      description: "Retourneert het integergedeelte van een getal."
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Aantal is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Double)
  id: Int(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Double)
  nameWithType: Conversion.Int(Double)
  fullName: Microsoft.VisualBasic.Conversion.Int(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het integergedeelte van een getal."
  remarks: "Zowel de `Int` en `Fix` functies verwijderen in het fractionele deel van `Number` en de resulterende integerwaarde retourneren.       Het verschil tussen `Int` en `Fix` functies is dat als `Number` is negatief, `Int` retourneert de eerste negatieve integer die kleiner dan of gelijk zijn aan `Number`, terwijl `Fix` retourneert de eerste negatieve integer die groter zijn dan of gelijk zijn aan `Number`. Bijvoorbeeld: `Int`&8;,4&9;, en `Fix`&8;,4 op-8.       `Fix(number)`is gelijk aan`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._202_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._202_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._202_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static double Int (double Number);
    parameters:
    - id: Number
      type: System.Double
      description: "Vereist. Een getal van het type <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> of een geldige numerieke expressie. Als `Number` bevat <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> wordt geretourneerd."
    return:
      type: System.Double
      description: "Retourneert het integergedeelte van een getal."
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Aantal is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int16)
  id: Int(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Int16)
  nameWithType: Conversion.Int(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het integergedeelte van een getal."
  remarks: "Zowel de `Int` en `Fix` functies verwijderen in het fractionele deel van `Number` en de resulterende integerwaarde retourneren.       Het verschil tussen `Int` en `Fix` functies is dat als `Number` is negatief, `Int` retourneert de eerste negatieve integer die kleiner dan of gelijk zijn aan `Number`, terwijl `Fix` retourneert de eerste negatieve integer die groter zijn dan of gelijk zijn aan `Number`. Bijvoorbeeld: `Int`&8;,4&9;, en `Fix`&8;,4 op-8.       `Fix(number)`is gelijk aan`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._161_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._161_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._161_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static short Int (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "Vereist. Een getal van het type <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> of een geldige numerieke expressie. Als `Number` bevat <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> wordt geretourneerd."
    return:
      type: System.Int16
      description: "Retourneert het integergedeelte van een getal."
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Aantal is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int32)
  id: Int(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Int32)
  nameWithType: Conversion.Int(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het integergedeelte van een getal."
  remarks: "Zowel de `Int` en `Fix` functies verwijderen in het fractionele deel van `Number` en de resulterende integerwaarde retourneren.       Het verschil tussen `Int` en `Fix` functies is dat als `Number` is negatief, `Int` retourneert de eerste negatieve integer die kleiner dan of gelijk zijn aan `Number`, terwijl `Fix` retourneert de eerste negatieve integer die groter zijn dan of gelijk zijn aan `Number`. Bijvoorbeeld: `Int`&8;,4&9;, en `Fix`&8;,4 op-8.       `Fix(number)`is gelijk aan`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._234_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._234_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._234_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static int Int (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "Vereist. Een getal van het type <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> of een geldige numerieke expressie. Als `Number` bevat <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> wordt geretourneerd."
    return:
      type: System.Int32
      description: "Retourneert het integergedeelte van een getal."
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Aantal is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int64)
  id: Int(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Int64)
  nameWithType: Conversion.Int(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het integergedeelte van een getal."
  remarks: "Zowel de `Int` en `Fix` functies verwijderen in het fractionele deel van `Number` en de resulterende integerwaarde retourneren.       Het verschil tussen `Int` en `Fix` functies is dat als `Number` is negatief, `Int` retourneert de eerste negatieve integer die kleiner dan of gelijk zijn aan `Number`, terwijl `Fix` retourneert de eerste negatieve integer die groter zijn dan of gelijk zijn aan `Number`. Bijvoorbeeld: `Int`&8;,4&9;, en `Fix`&8;,4 op-8.       `Fix(number)`is gelijk aan`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._112_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._112_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._112_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static long Int (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "Vereist. Een getal van het type <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> of een geldige numerieke expressie. Als `Number` bevat <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> wordt geretourneerd."
    return:
      type: System.Int64
      description: "Retourneert het integergedeelte van een getal."
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Aantal is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Object)
  id: Int(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Object)
  nameWithType: Conversion.Int(Object)
  fullName: Microsoft.VisualBasic.Conversion.Int(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het integergedeelte van een getal."
  remarks: "Zowel de `Int` en `Fix` functies verwijderen in het fractionele deel van `Number` en de resulterende integerwaarde retourneren.       Het verschil tussen `Int` en `Fix` functies is dat als `Number` is negatief, `Int` retourneert de eerste negatieve integer die kleiner dan of gelijk zijn aan `Number`, terwijl `Fix` retourneert de eerste negatieve integer die groter zijn dan of gelijk zijn aan `Number`. Bijvoorbeeld: `Int`&8;,4&9;, en `Fix`&8;,4 op-8.       `Fix(number)`is gelijk aan`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._111_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._111_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._111_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static object Int (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "Vereist. Een getal van het type <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> of een geldige numerieke expressie. Als `Number` bevat <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> wordt geretourneerd."
    return:
      type: System.Object
      description: "Retourneert het integergedeelte van een getal."
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Aantal is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Int(System.Single)
  id: Int(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Int(Single)
  nameWithType: Conversion.Int(Single)
  fullName: Microsoft.VisualBasic.Conversion.Int(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het integergedeelte van een getal."
  remarks: "Zowel de `Int` en `Fix` functies verwijderen in het fractionele deel van `Number` en de resulterende integerwaarde retourneren.       Het verschil tussen `Int` en `Fix` functies is dat als `Number` is negatief, `Int` retourneert de eerste negatieve integer die kleiner dan of gelijk zijn aan `Number`, terwijl `Fix` retourneert de eerste negatieve integer die groter zijn dan of gelijk zijn aan `Number`. Bijvoorbeeld: `Int`&8;,4&9;, en `Fix`&8;,4 op-8.       `Fix(number)`is gelijk aan`Sign(number) * Int(Abs(number)).`"
  example:
  - "This example illustrates how the `Int` and `Fix` functions return integer portions of numbers. In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number. The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:  \n  \n [!code-vb[VbVbalrMath#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._49_1.vb)]  \n  \n You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`. However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers. For example:  \n  \n [!code-vb[VbVbalrMath#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._49_2.vb)]  \n  \n You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding. For example:  \n  \n [!code-vb[VbVbalrMath#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._49_3.vb)]  \n  \n For more information on `CInt`, see [Type Conversion Functions](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public static float Int (float Number);
    parameters:
    - id: Number
      type: System.Single
      description: "Vereist. Een getal van het type <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;> </xref> of een geldige numerieke expressie. Als `Number` bevat <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>, <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> wordt geretourneerd."
    return:
      type: System.Single
      description: "Retourneert het integergedeelte van een getal."
  overload: Microsoft.VisualBasic.Conversion.Int*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "Aantal is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Byte)
  id: Oct(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Byte)
  nameWithType: Conversion.Oct(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de octale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | Als getal is | OCT retourneert |   | Lege | Nul (0) |   | Elk ander getal | Maximaal 22 octale tekens |       U kunt octale getallen rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&O`. Bijvoorbeeld: `&O10` is de octale notatie voor decimale 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._109_1.vb)]"
  syntax:
    content: public static string Oct (byte Number);
    parameters:
    - id: Number
      type: System.Byte
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de octale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int16)
  id: Oct(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Int16)
  nameWithType: Conversion.Oct(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de octale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | Als getal is | OCT retourneert |   | Lege | Nul (0) |   | Elk ander getal | Maximaal 22 octale tekens |       U kunt octale getallen rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&O`. Bijvoorbeeld: `&O10` is de octale notatie voor decimale 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._151_1.vb)]"
  syntax:
    content: public static string Oct (short Number);
    parameters:
    - id: Number
      type: System.Int16
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de octale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int32)
  id: Oct(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Int32)
  nameWithType: Conversion.Oct(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de octale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | Als getal is | OCT retourneert |   | Lege | Nul (0) |   | Elk ander getal | Maximaal 22 octale tekens |       U kunt octale getallen rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&O`. Bijvoorbeeld: `&O10` is de octale notatie voor decimale 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._36_1.vb)]"
  syntax:
    content: public static string Oct (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de octale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int64)
  id: Oct(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Int64)
  nameWithType: Conversion.Oct(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de octale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | Als getal is | OCT retourneert |   | Lege | Nul (0) |   | Elk ander getal | Maximaal 22 octale tekens |       U kunt octale getallen rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&O`. Bijvoorbeeld: `&O10` is de octale notatie voor decimale 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._217_1.vb)]"
  syntax:
    content: public static string Oct (long Number);
    parameters:
    - id: Number
      type: System.Int64
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de octale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Object)
  id: Oct(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(Object)
  nameWithType: Conversion.Oct(Object)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de octale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | Als getal is | OCT retourneert |   | Lege | Nul (0) |   | Elk ander getal | Maximaal 22 octale tekens |       U kunt octale getallen rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&O`. Bijvoorbeeld: `&O10` is de octale notatie voor decimale 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._233_1.vb)]"
  syntax:
    content: public static string Oct (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de octale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.SByte)
  id: Oct(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(SByte)
  nameWithType: Conversion.Oct(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de octale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | Als getal is | OCT retourneert |   | Lege | Nul (0) |   | Elk ander getal | Maximaal 22 octale tekens |       U kunt octale getallen rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&O`. Bijvoorbeeld: `&O10` is de octale notatie voor decimale 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._16_1.vb)]"
  syntax:
    content: public static string Oct (sbyte Number);
    parameters:
    - id: Number
      type: System.SByte
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de octale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt16)
  id: Oct(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(UInt16)
  nameWithType: Conversion.Oct(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de octale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | Als getal is | OCT retourneert |   | Lege | Nul (0) |   | Elk ander getal | Maximaal 22 octale tekens |       U kunt octale getallen rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&O`. Bijvoorbeeld: `&O10` is de octale notatie voor decimale 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._28_1.vb)]"
  syntax:
    content: public static string Oct (ushort Number);
    parameters:
    - id: Number
      type: System.UInt16
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de octale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt32)
  id: Oct(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(UInt32)
  nameWithType: Conversion.Oct(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de octale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | Als getal is | OCT retourneert |   | Lege | Nul (0) |   | Elk ander getal | Maximaal 22 octale tekens |       U kunt octale getallen rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&O`. Bijvoorbeeld: `&O10` is de octale notatie voor decimale 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._240_1.vb)]"
  syntax:
    content: public static string Oct (uint Number);
    parameters:
    - id: Number
      type: System.UInt32
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de octale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt64)
  id: Oct(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Oct(UInt64)
  nameWithType: Conversion.Oct(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor de octale waarde van een getal."
  remarks: "Als `Number` nog niet is een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.      |||   |-|-|   | Als getal is | OCT retourneert |   | Lege | Nul (0) |   | Elk ander getal | Maximaal 22 octale tekens |       U kunt octale getallen rechtstreeks weergeven door voorafgaande getallen in het juiste bereik `&O`. Bijvoorbeeld: `&O10` is de octale notatie voor decimale 8."
  example:
  - "This example uses the `Oct` function to return the octal value of a number.  \n  \n [!code-vb[VbVbalrStrings#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._219_1.vb)]"
  syntax:
    content: public static string Oct (ulong Number);
    parameters:
    - id: Number
      type: System.UInt64
      description: "Vereist. Een geldige numerieke expressie of <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor de octale waarde van een getal."
  overload: Microsoft.VisualBasic.Conversion.Oct*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Str(System.Object)
  id: Str(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Str(Object)
  nameWithType: Conversion.Str(Object)
  fullName: Microsoft.VisualBasic.Conversion.Str(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> representatie van een getal."
  remarks: "Wanneer getallen worden geconverteerd naar tekenreeksen, een voorloopspaties altijd is gereserveerd voor het teken van `Number`. Als `Number` positief is, de geretourneerde tekenreeks bevat een voorloopspaties, en wordt het plusteken geïmpliceerd. Het minteken (-) en er zijn geen voorloopspaties bevat negatief getal.       Gebruik de `Format` functie numerieke waarden die u opmaken als datums, tijden of valuta of in andere door de gebruiker gedefinieerde indelingen wilt converteren. In tegenstelling tot de `Str` functie, de `Format` functie bevat geen een voorloopspaties voor het teken van `Number`.      > [!NOTE] > De `Str` functie herkent alleen de punt (`.`) als een geldig decimaal scheidingsteken. Als andere scheidingstekens voor decimalen (bijvoorbeeld in internationale toepassingen) worden gebruikt, gebruikt u de `CStr` of `Format` een getal wordt geconverteerd naar een tekenreeks-functies. Als u de tekenreeksweergave van een getal in een specifieke cultuur, gebruikt u het aantal `ToString(IFormatProvider)` methode. Bijvoorbeeld: <xref:System.Double.ToString%2A>bij het converteren van een waarde van het type `Double` naar een tekenreeks.</xref:System.Double.ToString%2A>"
  example:
  - "This example uses the `Str` function to return a `String` representation of a number. When a positive number is converted to a string, a leading space is always reserved for its sign.  \n  \n [!code-vb[VbVbalrStrings#1](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._24_1.vb)]"
  syntax:
    content: public static string Str (object Number);
    parameters:
    - id: Number
      type: System.Object
      description: "Vereist. Een <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> met een geldige numerieke expressie."
    return:
      type: System.String
      description: "Retourneert een <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> representatie van een getal."
  overload: Microsoft.VisualBasic.Conversion.Str*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Number</code>is niet opgegeven."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>Number</code>is niet een numeriek type."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Val(System.Char)
  id: Val(System.Char)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Val(Char)
  nameWithType: Conversion.Val(Char)
  fullName: Microsoft.VisualBasic.Conversion.Val(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert de getallen in een tekenreeks als een numerieke waarde van het juiste type."
  remarks: "De `Val` stopt met het lezen van de tekenreeks met het eerste teken dat niet wordt herkend als onderdeel van een getal. Symbolen en tekens die zijn vaak wordt beschouwd als onderdeel van numerieke waarden, zoals dollartekens en komma&quot;s, worden niet herkend. De functie herkent echter de grondtalvoorvoegsels `&O` (voor octaal) en `&H` (voor hexadecimaal). Spaties, tabs en regelinvoertekens worden verwijderd uit het argument.       De volgende oproep verzenden retourneert de waarde 1615198.      ```      Val(&quot; 1615 198th Street N.E.&quot;)    ```De volgende oproep verzenden retourneert de decimale waarde -1.      ```      Val(&quot;&HFFFF&quot;)    ```      > [!NOTE]> De `Val` functie herkent alleen de punt (`.`) als een geldig decimaal scheidingsteken. Als andere scheidingstekens voor decimalen worden gebruikt, zoals in internationale toepassingen gebruiken `CDbl` of `CInt` in plaats daarvan een tekenreeks converteren naar een getal. Als u wilt de tekenreeksweergave van een getal in een specifieke cultuur omzetten in een numerieke waarde, gebruiken het numerieke type `Parse(String, IFormatProvider)` methode. Bijvoorbeeld: <xref:System.Double.Parse%2A?displayProperty=fullName>bij het converteren van een tekenreeks op voor een `Double`.</xref:System.Double.Parse%2A?displayProperty=fullName>      > [!NOTE] > Een <xref:System.InvalidCastException>kan een uitzondering worden gegenereerd in reactie op bepaalde ongewoon getalnotatie.</xref:System.InvalidCastException> De volgende code genereert bijvoorbeeld deze uitzondering.   >> `&quot; These examples cause run-time errors.` >> `&quot;Console.WriteLine(Val(&quot;1.34%&quot;))` >> `&quot;Console.WriteLine(Val(&quot;1.34&&quot;))` >> Het conflict tussen het aantal opgemaakt als een `Double` en de `Integer` en `Long` Typetekens zou worden opgepikt door het compileerprogramma als deze niet zijn opgenomen in een tekenreeks.   >    >  `&quot; These examples cause compiler errors.`   >    >  `&quot;Dim m = 1.34%`   >    >  `&quot;Dim n = 1.34&`"
  example:
  - "The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \n  \n [!code-vb[VbVbalrFunctions#54](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._65_1.vb)]"
  syntax:
    content: public static int Val (char Expression);
    parameters:
    - id: Expression
      type: System.Char
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> variabele, of <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> waarde. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, de waarde moet worden omgezet naar <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> of een <xref:System.ArgumentException>fout optreedt.</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "Retourneert de getallen in een tekenreeks als een numerieke waarde van het juiste type."
  overload: Microsoft.VisualBasic.Conversion.Val*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>InputStr</code>is te groot."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>is een <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> Typ expressie die is niet convertibel naar <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Val(System.Object)
  id: Val(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Val(Object)
  nameWithType: Conversion.Val(Object)
  fullName: Microsoft.VisualBasic.Conversion.Val(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert de getallen in een tekenreeks als een numerieke waarde van het juiste type."
  remarks: "De `Val` stopt met het lezen van de tekenreeks met het eerste teken dat niet wordt herkend als onderdeel van een getal. Symbolen en tekens die zijn vaak wordt beschouwd als onderdeel van numerieke waarden, zoals dollartekens en komma&quot;s, worden niet herkend. De functie herkent echter de grondtalvoorvoegsels `&O` (voor octaal) en `&H` (voor hexadecimaal). Spaties, tabs en regelinvoertekens worden verwijderd van het argument.       De volgende oproep verzenden retourneert de waarde 1234123.      ```      Val(&quot; 1234 123th Street N.E.&quot;)    ```De volgende oproep verzenden retourneert de decimale waarde -1.      ```      Val(&quot;&HFFFF&quot;)    ```      > [!NOTE]> De `Val` functie herkent alleen de punt (`.`) als een geldig decimaal scheidingsteken. Als andere scheidingstekens voor decimalen worden gebruikt, zoals in internationale toepassingen gebruiken `CDbl` of `CInt` in plaats daarvan een tekenreeks converteren naar een getal. Als u wilt de tekenreeksweergave van een getal in een specifieke cultuur omzetten in een numerieke waarde, gebruiken het numerieke type `Parse(String, IFormatProvider)` methode. Bijvoorbeeld: <xref:System.Double.Parse%2A?displayProperty=fullName>bij het converteren van een tekenreeks op voor een `Double`.</xref:System.Double.Parse%2A?displayProperty=fullName>      > [!NOTE] > Een <xref:System.InvalidCastException>kan een uitzondering worden gegenereerd in reactie op bepaalde ongewoon getalnotatie.</xref:System.InvalidCastException> De volgende code genereert bijvoorbeeld deze uitzondering.   >> `&quot; These examples cause run-time errors.` >> `&quot;Console.WriteLine(Val(&quot;1.34%&quot;))` >> `&quot;Console.WriteLine(Val(&quot;1.34&&quot;))` >> Het conflict tussen het aantal opgemaakt als een `Double` en de `Integer` en `Long` Typetekens zou worden opgepikt door het compileerprogramma als het conflict niet aanwezig waren in tekenreeksen.   >    >  `&quot; These examples cause compiler errors.`   >    >  `&quot;Dim m = 1.34%`   >    >  `&quot;Dim n = 1.34&`"
  example:
  - "The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \n  \n [!code-vb[VbVbalrFunctions#54](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._98_1.vb)]"
  syntax:
    content: public static double Val (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> variabele, of <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> waarde. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, de waarde moet worden omgezet naar <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> of een <xref:System.ArgumentException>fout optreedt.</xref:System.ArgumentException>"
    return:
      type: System.Double
      description: "Retourneert de getallen in een tekenreeks als een numerieke waarde van het juiste type."
  overload: Microsoft.VisualBasic.Conversion.Val*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>InputStr</code>is te groot."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>is een <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> Typ expressie die is niet convertibel naar <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Conversion.Val(System.String)
  id: Val(System.String)
  parent: Microsoft.VisualBasic.Conversion
  langs:
  - csharp
  name: Val(String)
  nameWithType: Conversion.Val(String)
  fullName: Microsoft.VisualBasic.Conversion.Val(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert de getallen in een tekenreeks als een numerieke waarde van het juiste type."
  remarks: "De `Val` stopt met het lezen van de tekenreeks met het eerste teken dat niet wordt herkend als onderdeel van een getal. Symbolen en tekens die zijn vaak wordt beschouwd als onderdeel van numerieke waarden, zoals dollartekens en komma&quot;s, worden niet herkend. De functie herkent echter de grondtalvoorvoegsels `&O` (voor octaal) en `&H` (voor hexadecimaal). Spaties, tabs en regelinvoertekens worden verwijderd van het argument.       De volgende oproep verzenden retourneert de waarde 1234123.      ```      Val(&quot; 1234 123th Street N.E.&quot;)    ```De volgende oproep verzenden retourneert de decimale waarde -1.      ```      Val(&quot;&HFFFF&quot;)    ```      > [!NOTE]> De `Val` functie herkent alleen de punt (`.`) als een geldig decimaal scheidingsteken. Als andere scheidingstekens voor decimalen worden gebruikt, zoals in internationale toepassingen gebruiken `CDbl` of `CInt` in plaats daarvan een tekenreeks converteren naar een getal. Als u wilt de tekenreeksweergave van een getal in een specifieke cultuur omzetten in een numerieke waarde, gebruiken het numerieke type `Parse(String, IFormatProvider)` methode. Bijvoorbeeld: <xref:System.Double.Parse%2A?displayProperty=fullName>bij het converteren van een tekenreeks op voor een `Double`.</xref:System.Double.Parse%2A?displayProperty=fullName>      > [!NOTE] > Een <xref:System.InvalidCastException>kan een uitzondering worden gegenereerd in reactie op bepaalde ongewoon getalnotatie.</xref:System.InvalidCastException> De volgende code genereert bijvoorbeeld deze uitzondering.   >> `&quot; These examples cause run-time errors.` >> `&quot;Console.WriteLine(Val(&quot;1.34%&quot;))` >> `&quot;Console.WriteLine(Val(&quot;1.34&&quot;))` >> Het conflict tussen het aantal opgemaakt als een `Double` en de `Integer` en `Long` Typetekens zou worden opgepikt door het compileerprogramma als het conflict niet aanwezig waren in tekenreeksen.   >    >  `&quot; These examples cause compiler errors.`   >    >  `&quot;Dim m = 1.34%`   >    >  `&quot;Dim n = 1.34&`"
  example:
  - "The following example uses the `Val` function to return the numbers contained in each string. `Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.  \n  \n [!code-vb[VbVbalrFunctions#54](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._227_1.vb)]"
  syntax:
    content: public static double Val (string InputStr);
    parameters:
    - id: InputStr
      type: System.String
      description: "Vereist. Een geldige <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> variabele, of <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;> </xref> waarde. Als `Expression` is van het type <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>, de waarde moet worden omgezet naar <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> of een <xref:System.ArgumentException>fout optreedt.</xref:System.ArgumentException>"
    return:
      type: System.Double
      description: "Retourneert de getallen in een tekenreeks als een numerieke waarde van het juiste type."
  overload: Microsoft.VisualBasic.Conversion.Val*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "<code>InputStr</code>is te groot."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>is een <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> Typ expressie die is niet convertibel naar <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.OverflowException
  isExternal: true
  name: System.OverflowException
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic(Object,Type)
  nameWithType: Conversion.CTypeDynamic(Object,Type)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic(Object)
  nameWithType: Conversion.CTypeDynamic(Object)
  fullName: Microsoft.VisualBasic.Conversion.CTypeDynamic(Object)
- uid: TargetType
  isExternal: true
  name: TargetType
  nameWithType: TargetType
  fullName: TargetType
- uid: Microsoft.VisualBasic.Conversion.ErrorToString
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: ErrorToString()
  nameWithType: Conversion.ErrorToString()
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: ErrorToString(Int32)
  nameWithType: Conversion.ErrorToString(Int32)
  fullName: Microsoft.VisualBasic.Conversion.ErrorToString(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Decimal)
  nameWithType: Conversion.Fix(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Double)
  nameWithType: Conversion.Fix(Double)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Int16)
  nameWithType: Conversion.Fix(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Int32)
  nameWithType: Conversion.Fix(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int32)
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Int64)
  nameWithType: Conversion.Fix(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Object)
  nameWithType: Conversion.Fix(Object)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Object)
- uid: Microsoft.VisualBasic.Conversion.Fix(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix(Single)
  nameWithType: Conversion.Fix(Single)
  fullName: Microsoft.VisualBasic.Conversion.Fix(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Byte)
  nameWithType: Conversion.Hex(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Int16)
  nameWithType: Conversion.Hex(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int16)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Int32)
  nameWithType: Conversion.Hex(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int32)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Int64)
  nameWithType: Conversion.Hex(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Int64)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(Object)
  nameWithType: Conversion.Hex(Object)
  fullName: Microsoft.VisualBasic.Conversion.Hex(Object)
- uid: Microsoft.VisualBasic.Conversion.Hex(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(SByte)
  nameWithType: Conversion.Hex(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Hex(SByte)
- uid: System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(UInt16)
  nameWithType: Conversion.Hex(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt16)
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(UInt32)
  nameWithType: Conversion.Hex(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualBasic.Conversion.Hex(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex(UInt64)
  nameWithType: Conversion.Hex(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Hex(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.VisualBasic.Conversion.Int(System.Decimal)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Decimal)
  nameWithType: Conversion.Int(Decimal)
  fullName: Microsoft.VisualBasic.Conversion.Int(Decimal)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Double)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Double)
  nameWithType: Conversion.Int(Double)
  fullName: Microsoft.VisualBasic.Conversion.Int(Double)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Int16)
  nameWithType: Conversion.Int(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int16)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Int32)
  nameWithType: Conversion.Int(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int32)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Int64)
  nameWithType: Conversion.Int(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Int(Int64)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Object)
  nameWithType: Conversion.Int(Object)
  fullName: Microsoft.VisualBasic.Conversion.Int(Object)
- uid: Microsoft.VisualBasic.Conversion.Int(System.Single)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int(Single)
  nameWithType: Conversion.Int(Single)
  fullName: Microsoft.VisualBasic.Conversion.Int(Single)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Byte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Byte)
  nameWithType: Conversion.Oct(Byte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Byte)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Int16)
  nameWithType: Conversion.Oct(Int16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int16)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Int32)
  nameWithType: Conversion.Oct(Int32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int32)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Int64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Int64)
  nameWithType: Conversion.Oct(Int64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Int64)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(Object)
  nameWithType: Conversion.Oct(Object)
  fullName: Microsoft.VisualBasic.Conversion.Oct(Object)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.SByte)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(SByte)
  nameWithType: Conversion.Oct(SByte)
  fullName: Microsoft.VisualBasic.Conversion.Oct(SByte)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt16)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(UInt16)
  nameWithType: Conversion.Oct(UInt16)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt16)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt32)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(UInt32)
  nameWithType: Conversion.Oct(UInt32)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt32)
- uid: Microsoft.VisualBasic.Conversion.Oct(System.UInt64)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct(UInt64)
  nameWithType: Conversion.Oct(UInt64)
  fullName: Microsoft.VisualBasic.Conversion.Oct(UInt64)
- uid: Microsoft.VisualBasic.Conversion.Str(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Str(Object)
  nameWithType: Conversion.Str(Object)
  fullName: Microsoft.VisualBasic.Conversion.Str(Object)
- uid: Microsoft.VisualBasic.Conversion.Val(System.Char)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val(Char)
  nameWithType: Conversion.Val(Char)
  fullName: Microsoft.VisualBasic.Conversion.Val(Char)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.VisualBasic.Conversion.Val(System.Object)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val(Object)
  nameWithType: Conversion.Val(Object)
  fullName: Microsoft.VisualBasic.Conversion.Val(Object)
- uid: Microsoft.VisualBasic.Conversion.Val(System.String)
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val(String)
  nameWithType: Conversion.Val(String)
  fullName: Microsoft.VisualBasic.Conversion.Val(String)
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic
  nameWithType: Conversion.CTypeDynamic
- uid: Microsoft.VisualBasic.Conversion.CTypeDynamic<TargetType>*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: CTypeDynamic<TargetType>
  nameWithType: Conversion.CTypeDynamic<TargetType>
- uid: Microsoft.VisualBasic.Conversion.ErrorToString*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: ErrorToString
  nameWithType: Conversion.ErrorToString
- uid: Microsoft.VisualBasic.Conversion.Fix*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Fix
  nameWithType: Conversion.Fix
- uid: Microsoft.VisualBasic.Conversion.Hex*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Hex
  nameWithType: Conversion.Hex
- uid: Microsoft.VisualBasic.Conversion.Int*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Int
  nameWithType: Conversion.Int
- uid: Microsoft.VisualBasic.Conversion.Oct*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Oct
  nameWithType: Conversion.Oct
- uid: Microsoft.VisualBasic.Conversion.Str*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Str
  nameWithType: Conversion.Str
- uid: Microsoft.VisualBasic.Conversion.Val*
  parent: Microsoft.VisualBasic.Conversion
  isExternal: false
  name: Val
  nameWithType: Conversion.Val
