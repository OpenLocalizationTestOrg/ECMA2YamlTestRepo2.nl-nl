### YamlMime:ManagedReference
items:
- uid: System.Data.IDataAdapter
  id: IDataAdapter
  children:
  - System.Data.IDataAdapter.Fill(System.Data.DataSet)
  - System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.IDataAdapter.GetFillParameters
  - System.Data.IDataAdapter.MissingMappingAction
  - System.Data.IDataAdapter.MissingSchemaAction
  - System.Data.IDataAdapter.TableMappings
  - System.Data.IDataAdapter.Update(System.Data.DataSet)
  langs:
  - csharp
  name: IDataAdapter
  nameWithType: IDataAdapter
  fullName: System.Data.IDataAdapter
  type: Interface
  summary: "Hiermee kunt u een object voor het implementeren van een DataAdapter en vertegenwoordigt een aantal methoden en toewijzing van actie-gerelateerde eigenschappen die worden gebruikt voor het vullen en bij te werken een <xref href=&quot;System.Data.DataSet&quot;> </xref> en een gegevensbron bijwerken.       <xref href=&quot;System.Data.IDbDataAdapter&quot;></xref>de exemplaren voor gegevensbronnen die zijn (of vergelijkbaar) relationele databases met tekstuele opdrachten zijn (zoals [!INCLUDE[tsql](~/add/includes/tsql-md.md)]), terwijl IDataAdapter exemplaren kunnen elk type gegevensbron kunt gebruiken."
  remarks: "De interface IDataAdapter waarmee een Traceringstabellen klasse voor het implementeren van een klasse DataAdapter de brug tussen een gegevensbron en een <xref:System.Data.DataSet>.</xref:System.Data.DataSet> vertegenwoordigt Zie voor meer informatie over DataAdapter klassen [vullen met een gegevensset uit een DataAdapter](~/add/includes/ajax-current-ext-md.md).       Een toepassing maakt een exemplaar van de interface IDataAdapter niet rechtstreeks, maar een exemplaar van een klasse die IDataAdapter overneemt implementeert.       Klassen die IDataAdapter overnemen overgenomen leden moeten implementeren, en ze doorgaans extra leden om toe te voegen providerspecifieke definiëren. Bijvoorbeeld, de interface IDataAdapter definieert een <xref:System.Data.IDataAdapter.Fill%2A>methode die een <xref:System.Data.DataSet>als parameter.</xref:System.Data.DataSet> </xref:System.Data.IDataAdapter.Fill%2A> Op zijn beurt de <xref:System.Data.OleDb.OleDbDataAdapter>klasse neemt over de <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode en ook definieert twee extra overloads van de <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>methode die een ADO-Recordset-object als parameter nemen.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter>"
  example:
  - "The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, and <xref:System.Data.SqlClient.SqlConnection>, to select records from a database. The filled <xref:System.Data.DataSet> is then returned. To do this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.  \n  \n [!code-vb[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.idataadapter_1.vb)]\n [!code-cs[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.idataadapter_1.cs)]"
  syntax:
    content: public interface IDataAdapter
  implements: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: IDataAdapter.Fill(DataSet)
  fullName: System.Data.IDataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Wordt toegevoegd of bijwerken van rijen in de <xref href=&quot;System.Data.DataSet&quot;> </xref> overeenkomen met die in de gegevensbron via de <xref href=&quot;System.Data.DataSet&quot;> </xref> naam geven en maakt een <xref href=&quot;System.Data.DataTable&quot;> </xref> met de naam &quot;Tabel&quot;."
  remarks: "Opvulling rijen opgehaald uit de gegevensbron met behulp van de SELECT-instructie opgegeven door een gekoppeld <xref:System.Data.IDbDataAdapter.SelectCommand%2A>eigenschap.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Het verbindingsobject dat is gekoppeld aan de SELECT-instructie moet geldig zijn, maar deze hoeft niet te worden geopend. Als de verbinding is gesloten voordat opvulling wordt aangeroepen, wordt geopend om gegevens te halen, wordt gesloten. Als de verbinding geopend is voordat opvulling wordt aangeroepen, blijft het geopend.       De opvulling van de bewerking vervolgens worden de rijen toegevoegd aan de doelserver <xref:System.Data.DataTable>objecten in de <xref:System.Data.DataSet>, maken de <xref:System.Data.DataTable>objecten als deze niet al bestaan.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> Bij het maken van <xref:System.Data.DataTable>objecten, doorgaans maakt alleen kolommetagegevens voor de naam van de doorvoerbewerking.</xref:System.Data.DataTable> Echter, als de <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>eigenschap is ingesteld op `AddWithKey`, beperkingen en de juiste primaire sleutels zijn gemaakt.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Als de `SelectCommand` de resultaten van een OUTER JOIN retourneert de `DataAdapter` een <xref:System.Data.DataTable.PrimaryKey%2A>waarde voor de resulterende <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> niet is ingesteld De primaire sleutel in om ervoor te zorgen dat de dubbele rijen op de juiste manier worden omgezet, moet u expliciet definiëren. Zie voor meer informatie [primaire sleutels definiëren](~/add/includes/ajax-current-ext-md.md).       Als de <xref:System.Data.IDataAdapter>tegenkomt dubbele kolommen tijdens het vullen van een <xref:System.Data.DataTable>, genereert namen voor opeenvolgende kolommen met het patroon &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot;, enzovoort.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Als de inkomende gegevens naamloze kolommen bevat, worden geplaatst in de <xref:System.Data.DataSet>volgens het patroon &quot;Kolom1&quot;, &quot;Kolom2&quot;, enzovoort.</xref:System.Data.DataSet> Wanneer meerdere resultatensets worden toegevoegd aan de <xref:System.Data.DataSet>, elke resultatenset wordt geplaatst in een afzonderlijke tabel.</xref:System.Data.DataSet> Als u meer resultatensets worden benoemd met integraal waarden toe te voegen aan de opgegeven tabelnaam (bijvoorbeeld &quot;Tabel&quot;, &quot;Table1&quot;, &quot;Tabel2&quot;, enzovoort). Toepassingen moeten Wees voorzichtig wanneer u de kolom- en tabelnamen om ervoor te zorgen dat wordt veroorzaakt een conflict met deze patronen naming niet bijgewerkt.       Wanneer de SELECT-instructie die wordt gebruikt voor het vullen van de <xref:System.Data.DataSet>retourneert verschillende resultaten, zoals een SQL-instructie batch als een van de resultaten een fout bevat alle opeenvolgende resultaten worden overgeslagen en niet toegevoegd aan de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       U kunt de methode opvulling meerdere keren gebruiken op de dezelfde <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Als een primaire sleutel bestaat, worden binnenkomende rijen worden samengevoegd met overeenkomende rijen die al bestaan. Als er geen primaire sleutel bevat, zijn binnenkomende rijen toegevoegd aan de <xref:System.Data.DataTable>.</xref:System.Data.DataTable>      > [!NOTE] > Bij het verwerken van batch SQL-instructies die meerdere resultaten van de implementatie van de opvulling van retourneren en <xref:System.Data.IDataAdapter.FillSchema%2A>voor .NET Framework data provider schema-informatie voor alleen het eerste resultaat opgehaald.</xref:System.Data.IDataAdapter.FillSchema%2A>"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Een <xref href=&quot;System.Data.DataSet&quot;> </xref> te vullen met records en, indien nodig, schema."
    return:
      type: System.Int32
      description: "Het aantal rijen is toegevoegd aan of vernieuwd in de <xref href=&quot;System.Data.DataSet&quot;> </xref>. Dit omvat geen rijen zijn beïnvloed door de instructies die geen rijen geretourneerd."
  overload: System.Data.IDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: IDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.IDataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Voegt een <xref href=&quot;System.Data.DataTable&quot;> </xref> met de naam &quot;Tabel&quot; naar de opgegeven <xref href=&quot;System.Data.DataSet&quot;> </xref> en configureert u het schema moet worden gezocht die in de gegevensbron op basis van de opgegeven <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "De methode FillSchema het schema opgehaald uit de gegevensbron met behulp van de <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Het object connection die zijn gekoppeld aan de <xref:System.Data.IDbDataAdapter.SelectCommand%2A>moet geldig zijn, maar deze hoeft niet te worden geopend.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Als de verbinding is gesloten voordat FillSchema wordt aangeroepen, wordt geopend om gegevens te halen, wordt gesloten. Als de verbinding geopend is voordat FillSchema wordt aangeroepen, blijft het geopend.       Een bewerking FillSchema een wordt toegevoegd <xref:System.Data.DataTable>aan de doel- <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Vervolgens voegt het toe in kolommen die u wilt de <xref:System.Data.DataColumnCollection>van de <xref:System.Data.DataTable>en configureert u de volgende <xref:System.Data.DataColumn>Eigenschappen als deze bestaan in de gegevensbron:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> U moet instellen <xref:System.Data.DataColumn.AutoIncrementStep%2A>en <xref:System.Data.DataColumn.AutoIncrementSeed%2A>afzonderlijk.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A>FillSchema configureert ook de <xref:System.Data.DataTable.PrimaryKey%2A>en <xref:System.Data.DataTable.Constraints%2A>Eigenschappen volgens de volgende regels: - als een of meer primaire-sleutelkolommen worden geretourneerd door het <xref:System.Data.IDbDataAdapter.SelectCommand%2A>die worden gebruikt als de primaire-sleutelkolommen voor de <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Als er geen primaire-sleutelkolommen worden geretourneerd, maar uniek kolommen zijn, worden de unieke kolommen als de primaire sleutel gebruikt als de unieke kolommen niet null zijn. Als een van de kolommen waarvoor null is toegestaan, een <xref:System.Data.UniqueConstraint>wordt toegevoegd aan de <xref:System.Data.ConstraintCollection>, maar de <xref:System.Data.DataTable.PrimaryKey%2A>eigenschap is niet ingesteld.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Als zowel de primaire-sleutelkolommen als de unieke kolommen worden geretourneerd, worden de primaire-sleutelkolommen gebruikt als de primaire-sleutelkolommen voor de <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Houd er rekening mee dat primaire sleutels en unieke beperkingen worden toegevoegd aan de <xref:System.Data.ConstraintCollection>volgens de eerdere regels, maar andere beperking typen niet worden toegevoegd.</xref:System.Data.ConstraintCollection>       Als een unieke geclusterde index is gedefinieerd in een kolom of kolommen in een tabel met SQL Server en de primary key-beperking is gedefinieerd in een afzonderlijke set kolommen, en vervolgens de namen van de kolommen in de geclusterde index worden geretourneerd. Als u de naam of namen van de primaire-sleutelkolommen weer, een hint query met de instructie SELECT die de naam van de primaire-sleutelindex specificeert te gebruiken. Zie voor meer informatie over het opgeven van queryhints [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Als de <xref:System.Data.IDataAdapter>tegenkomt dubbele kolommen tijdens het vullen van een <xref:System.Data.DataTable>, genereert namen voor opeenvolgende kolommen met het patroon &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot;, enzovoort.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Als de inkomende gegevens naamloze kolommen bevat, worden geplaatst in de <xref:System.Data.DataSet>volgens het patroon &quot;Kolom1&quot;, &quot;Kolom2&quot;, enzovoort.</xref:System.Data.DataSet> Wanneer meerdere resultatensets worden toegevoegd aan de <xref:System.Data.DataSet>, elke resultatenset wordt geplaatst in een afzonderlijke tabel.</xref:System.Data.DataSet> Als u meer resultatensets worden benoemd met integraal waarden toe te voegen aan de opgegeven tabelnaam (bijvoorbeeld &quot;Tabel&quot;, &quot;Table1&quot;, &quot;Tabel2&quot;, enzovoort). Toepassingen moeten Wees voorzichtig wanneer u de kolom- en tabelnamen om ervoor te zorgen dat wordt veroorzaakt een conflict met deze patronen naming niet bijgewerkt.       FillSchema retourneert geen rijen. Gebruik de <xref:System.Data.IDataAdapter.Fill%2A>methode om toe te voegen rijen in een <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter.Fill%2A>"
  syntax:
    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "De <xref href=&quot;System.Data.DataSet&quot;> </xref> te vullen met het schema van de gegevensbron."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Een van de <xref href=&quot;System.Data.SchemaType&quot;> </xref> waarden."
    return:
      type: System.Data.DataTable[]
      description: "Een matrix van <xref href=&quot;System.Data.DataTable&quot;> </xref> objecten met schema-informatie opgehaald uit de gegevensbron."
  overload: System.Data.IDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: IDataAdapter.GetFillParameters()
  fullName: System.Data.IDataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hiermee haalt u de parameters die zijn ingesteld door de gebruiker bij het uitvoeren van een SQL SELECT-instructie."
  remarks: "```  \nprivate static void GetParameters(String connectiongString) {  \n           using (SqlConnection conn = new SqlConnection(connectiongString)) {  \n              String queryString = \"Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credits]>=@Credits\";   \n              SqlParameter year = new SqlParameter(\"@Year\", 2012);   \n              SqlParameter credits = new SqlParameter(\"@Credits\", SqlDbType.Int, 4, \"Credits\");   \n              credits.Value = 4; SqlCommand command = new SqlCommand(queryString, conn);   \n              command.Parameters.Add(year);   \n              command.Parameters.Add(credits);   \n              IDbDataAdapter mySchool = new SqlDataAdapter(command);   \n              IDataParameter[] parameters = mySchool.GetFillParameters();  \n              Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", \"ParameterName\", \"SourceColumn\", \"Direction\", \"DbType\", \"Value\");   \n              foreach (IDataParameter parameter in parameters) {   \n                 Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);   \n              }  \n           }  \n        }  \n```"
  syntax:
    content: public System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "Een matrix van <xref href=&quot;System.Data.IDataParameter&quot;> </xref> objecten met de parameters die zijn ingesteld door de gebruiker."
  overload: System.Data.IDataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.MissingMappingAction
  id: MissingMappingAction
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
  fullName: System.Data.IDataAdapter.MissingMappingAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hiermee wordt aangegeven of geeft aan of niet-toegewezen brontabellen of kolommen worden doorgegeven met de namen van de bron om te kunnen worden gefilterd of een fout veroorzaakt."
  remarks: "De <xref:System.Data.IDataAdapter.TableMappings%2A>eigenschap bevat de master toewijzing tussen de geretourneerde records en de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.IDataAdapter.TableMappings%2A>"
  syntax:
    content: public System.Data.MissingMappingAction MissingMappingAction { get; set; }
    return:
      type: System.Data.MissingMappingAction
      description: "Een van de <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref> waarden. De standaardwaarde is <xref uid=&quot;langword_csharp_Passthrough&quot; name=&quot;Passthrough&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.IDataAdapter.MissingMappingAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De waarde ingesteld is niet een van de <xref href=&quot;System.Data.MissingMappingAction&quot;> </xref> waarden."
  platform:
  - net462
- uid: System.Data.IDataAdapter.MissingSchemaAction
  id: MissingSchemaAction
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
  fullName: System.Data.IDataAdapter.MissingSchemaAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hiermee wordt aangegeven of geeft aan of ontbrekende brontabellen, kolommen en hun relaties worden toegevoegd aan de gegevensset-schema, genegeerd, of treedt er een fout wordt gegenereerd."
  syntax:
    content: public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }
    return:
      type: System.Data.MissingSchemaAction
      description: "Een van de <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> waarden. De standaardwaarde is <xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.IDataAdapter.MissingSchemaAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De waarde ingesteld is niet een van de <xref href=&quot;System.Data.MissingSchemaAction&quot;> </xref> waarden."
  platform:
  - net462
- uid: System.Data.IDataAdapter.TableMappings
  id: TableMappings
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
  fullName: System.Data.IDataAdapter.TableMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Hiermee wordt aangegeven hoe een brontabel wordt toegewezen aan een dataset-tabel."
  remarks: "De <xref:System.Data.IDataAdapter>maakt gebruik van alleen de toewijzingen voor de brontabel met de naam &quot;Tabel&quot;.</xref:System.Data.IDataAdapter> Alle selecteren, invoegen, verwijderen en UPDATE instructies retourneren van gegevens moeten doen met behulp van consistente kolomnaam. De kolomnamen in de records geretourneerd moeten uniek zijn, anders kolommen met dubbele namen eerdere gegevens overschreven. Op <xref:System.Data.IDataAdapter.Update%2A>, alleen de tabel die is toegewezen aan de brontabel met de naam &quot;Tabel&quot; de wijzigingen die zijn afgestemd moet.</xref:System.Data.IDataAdapter.Update%2A>"
  syntax:
    content: public System.Data.ITableMappingCollection TableMappings { get; }
    return:
      type: System.Data.ITableMappingCollection
      description: "Een verzameling die de master toewijzing tussen de geretourneerde records bevat en de <xref href=&quot;System.Data.DataSet&quot;> </xref>. De standaardwaarde is een lege verzameling."
  overload: System.Data.IDataAdapter.TableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: IDataAdapter.Update(DataSet)
  fullName: System.Data.IDataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "Aanroepen van de respectieve INSERT, UPDATE of DELETE-instructies voor elk ingevoegd, bijgewerkt of verwijderd van de rij in de opgegeven <xref href=&quot;System.Data.DataSet&quot;> </xref> van een <xref href=&quot;System.Data.DataTable&quot;> </xref> met de naam &quot;Tabel&quot;."
  remarks: "Wanneer een toepassing de methode Update roept de <xref:System.Data.IDataAdapter>onderzoekt de <xref:System.Data.DataRow.RowState%2A>eigenschap, en worden de vereiste INSERT, UPDATE of DELETE-instructies iteratief voor elke rij, gebaseerd op de volgorde van de indexen die zijn geconfigureerd in de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.IDataAdapter> Bijvoorbeeld: Update mogelijk uitvoeren van een instructie DELETE, gevolgd door een instructie INSERT, en vervolgens een andere instructie DELETE, vanwege de volgorde van de rijen in de <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Houd er rekening mee dat deze instructies worden niet uitgevoerd als een batchproces; elke rij wordt afzonderlijk bijgewerkt. Een toepassing kunt aanroepen de <xref:System.Data.DataSet.GetChanges%2A>methode als u de volgorde van de instructie typen (bijvoorbeeld invoegen vóór UPDATEs) moet beheren.</xref:System.Data.DataSet.GetChanges%2A> Zie voor meer informatie [gegevensbronnen bijwerken met DataAdapters](~/add/includes/ajax-current-ext-md.md).       INSERT, UPDATE of DELETE-instructies zijn niet opgegeven als, de <xref:System.Data.Common.DataAdapter.Update%2A>methode wordt een uitzondering gegenereerd.</xref:System.Data.Common.DataAdapter.Update%2A> U kunt echter maken een <xref:System.Data.SqlClient.SqlCommandBuilder>of <xref:System.Data.OleDb.OleDbCommandBuilder>object voor het automatisch genereren van SQL-instructies voor één tabel updates als u de `SelectCommand` eigenschap van een .NET Framework-gegevensprovider.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Vervolgens worden aanvullende SQL-instructies die u instelt gegenereerd door de CommandBuilder. Deze logica generatie vereist sleutelkolomgegevens moeten zich in de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Zie voor meer informatie [opdrachten genereren met CommandBuilders](~/add/includes/ajax-current-ext-md.md).       De <xref:System.Data.Common.DataAdapter.Update%2A>methode rijen opgehaald uit de tabel in de eerste toewijzing voordat u een update uitvoert.</xref:System.Data.Common.DataAdapter.Update%2A> De <xref:System.Data.Common.DataAdapter.Update%2A>werkt vervolgens de rij met de waarde van de <xref:System.Data.IDbCommand.UpdatedRowSource%2A>eigenschap.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DataAdapter.Update%2A> Eventuele extra rijen geretourneerd, worden genegeerd.       Nadat de gegevens worden geladen naar de <xref:System.Data.DataSet>, wordt de <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>gebeurtenis wordt geactiveerd, zodat de gebruiker controleert de afgestemd <xref:System.Data.DataSet>uitvoerparameters rij en eventuele geretourneerd door de opdracht.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Nadat een rij is bijgewerkt, worden de wijzigingen op die rij worden geaccepteerd.       Wanneer u de Update, de volgorde van de uitvoering is als volgt: 1.  De waarden in de <xref:System.Data.DataRow>worden verplaatst naar de parameterwaarden.</xref:System.Data.DataRow>      2.  De <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>gebeurtenis is opgetreden.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  De opdracht wordt uitgevoerd.      4.  Als de opdracht is ingesteld op `FirstReturnedRecord`, wordt de eerste geretourneerd resultaat wordt geplaatst in de <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Als er output-parameters, worden ze in de <xref:System.Data.DataRow>.</xref:System.Data.DataRow> geplaatst      6.  De <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>gebeurtenis is opgetreden.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>wordt aangeroepen.</xref:System.Data.DataRow.AcceptChanges%2A>       Elke opdracht die is gekoppeld aan de <xref:System.Data.IDataAdapter>heeft meestal een parameterverzameling gekoppeld.</xref:System.Data.IDataAdapter> Parameters zijn toegewezen aan de huidige rij via de `SourceColumn` en `SourceVersion` eigenschappen van een .NET Framework-gegevensprovider `Parameter` klasse. `SourceColumn`verwijst naar een <xref:System.Data.DataTable>kolom die de <xref:System.Data.IDataAdapter>verwijzingen naar het verkrijgen van parameterwaarden voor de huidige rij.</xref:System.Data.IDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`verwijst naar de niet-toegewezen kolomnaam voordat alle Tabeltoewijzingen zijn toegepast. Als `SourceColumn` verwijst naar een niet-bestaande kolom de actie op die afhankelijk is van een van de volgende <xref:System.Data.MissingMappingAction>waarden.</xref:System.Data.MissingMappingAction>      | Opsommingswaarde | Actie op die |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Gebruik van de bron-kolomnamen en tabelnamen in de <xref:System.Data.DataSet>Als er is geen toewijzing aanwezig is. |   | `MissingMappingAction.Ignore`| Een <xref:System.SystemException>wordt gegenereerd.</xref:System.SystemException> </xref:System.Data.DataSet> Wanneer de toewijzingen expliciet zijn ingesteld, een ontbrekende toewijzing voor een invoerparameter wordt meestal veroorzaakt door een fout opgetreden. |   | `MissingMappingAction.Error`| Een <xref:System.SystemException>wordt gegenereerd. |       De `SourceColumn` eigenschap wordt ook gebruikt voor het toewijzen van de waarde voor uitvoer of input/output-parameters terug naar de `DataSet`.</xref:System.SystemException> Een uitzondering wordt gegenereerd als het verwijst naar een niet-bestaande kolom.       De `SourceVersion` eigenschap van een .NET Framework-gegevensprovider `Parameter` klasse bepaalt of gebruik de `Original`, `Current`, of `Proposed` versie van de waarde in de kolom. Deze mogelijkheid wordt vaak gebruikt voor het opnemen van de oorspronkelijke waarden in de WHERE-component van de instructie UPDATE om te controleren op schendingen van optimistische gelijktijdigheid.      > [!NOTE] > Als er een fout optreedt tijdens het bijwerken van een rij is een uitzondering opgetreden en de uitvoering van de update is stopgezet. Ingesteld om door te gaan de updatebewerking zonder uitzonderingen worden gegenereerd wanneer een fout is opgetreden, de <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>eigenschap `true` aanroepen voordat <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> U kunt ook reageren op fouten op basis van per rij in de `RowUpdated` gebeurtenis van een DataAdapter. De updatebewerking doorgaan zonder dat er een uitzondering binnen de `RowUpdated` gebeurtenis, stel de <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>eigenschap van de <xref:System.Data.Common.RowUpdatedEventArgs>tot <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to <xref:System.Data.Common.DataAdapter.Update%2A> the data source. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.idataadapt_1.cs)]\n [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.idataadapt_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "De <xref href=&quot;System.Data.DataSet&quot;> </xref> gebruikt voor het bijwerken van de gegevensbron."
    return:
      type: System.Int32
      description: "Het aantal rijen bijgewerkt vanuit de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.IDataAdapter.Update*
  exceptions:
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Een poging tot het uitvoeren van een instructie INSERT, UPDATE of DELETE geleid tot nul records die van invloed op."
  platform:
  - net462
references:
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.IDataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: IDataAdapter.Fill(DataSet)
  fullName: System.Data.IDataAdapter.Fill(DataSet)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: IDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.IDataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.IDataAdapter.GetFillParameters
  parent: System.Data.IDataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: IDataAdapter.GetFillParameters()
  fullName: System.Data.IDataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.IDataAdapter.MissingMappingAction
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
  fullName: System.Data.IDataAdapter.MissingMappingAction
- uid: System.Data.MissingMappingAction
  parent: System.Data
  isExternal: false
  name: MissingMappingAction
  nameWithType: MissingMappingAction
  fullName: System.Data.MissingMappingAction
- uid: System.Data.IDataAdapter.MissingSchemaAction
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
  fullName: System.Data.IDataAdapter.MissingSchemaAction
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.IDataAdapter.TableMappings
  parent: System.Data.IDataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
  fullName: System.Data.IDataAdapter.TableMappings
- uid: System.Data.ITableMappingCollection
  parent: System.Data
  isExternal: false
  name: ITableMappingCollection
  nameWithType: ITableMappingCollection
  fullName: System.Data.ITableMappingCollection
- uid: System.Data.IDataAdapter.Update(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: IDataAdapter.Update(DataSet)
  fullName: System.Data.IDataAdapter.Update(DataSet)
- uid: System.Data.IDataAdapter.Fill*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Fill
  nameWithType: IDataAdapter.Fill
- uid: System.Data.IDataAdapter.FillSchema*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: IDataAdapter.FillSchema
- uid: System.Data.IDataAdapter.GetFillParameters*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: IDataAdapter.GetFillParameters
- uid: System.Data.IDataAdapter.MissingMappingAction*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
- uid: System.Data.IDataAdapter.MissingSchemaAction*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
- uid: System.Data.IDataAdapter.TableMappings*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
- uid: System.Data.IDataAdapter.Update*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Update
  nameWithType: IDataAdapter.Update
