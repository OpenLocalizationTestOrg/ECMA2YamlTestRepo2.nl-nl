### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.IDataObject
  id: IDataObject
  children:
  - System.Windows.Forms.IDataObject.GetData(System.String)
  - System.Windows.Forms.IDataObject.GetData(System.Type)
  - System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)
  - System.Windows.Forms.IDataObject.GetDataPresent(System.String)
  - System.Windows.Forms.IDataObject.GetDataPresent(System.Type)
  - System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)
  - System.Windows.Forms.IDataObject.GetFormats
  - System.Windows.Forms.IDataObject.GetFormats(System.Boolean)
  - System.Windows.Forms.IDataObject.SetData(System.Object)
  - System.Windows.Forms.IDataObject.SetData(System.String,System.Object)
  - System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)
  - System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)
  langs:
  - csharp
  name: IDataObject
  nameWithType: IDataObject
  fullName: System.Windows.Forms.IDataObject
  type: Interface
  summary: "Biedt een mechanisme onafhankelijk van de indeling voor het overbrengen van gegevens."
  remarks: "De `IDataObject` interface wordt gebruikt door de <xref:System.Windows.Forms.Clipboard>klasse en in slepen en neerzetten.</xref:System.Windows.Forms.Clipboard>       Wanneer een geïmplementeerd in een klasse, kunnen de methoden IDataObject de gebruiker voor het opslaan van gegevens in verschillende indelingen in een exemplaar van de klasse. Opslaan van gegevens in meer dan één indeling verhoogt de kans dat een doeltoepassing, waarvan u niet weet misschien, vereisten de opgeslagen gegevens kunt ophalen. Aanroepen voor het opslaan van gegevens in een exemplaar van IDataObject, de <xref:System.Windows.Forms.IDataObject.SetData%2A>methode en geeft u de gegevensindeling in de `format` parameter.</xref:System.Windows.Forms.IDataObject.SetData%2A> Stel de `autoConvert` -parameter voor `false` als u niet dat opgeslagen gegevens wilt te worden geconverteerd naar een andere indeling wanneer deze wordt opgehaald. Aanroepen <xref:System.Windows.Forms.IDataObject.SetData%2A>meerdere keren op één exemplaar van IDataObject voor het opslaan van gegevens in meer dan één indeling.</xref:System.Windows.Forms.IDataObject.SetData%2A>       U opgeslagen gegevens ophalen uit een IDataObject door het aanroepen van de <xref:System.Windows.Forms.IDataObject.GetData%2A>methode en de gegevens op te geven-indeling in de `format` parameter.</xref:System.Windows.Forms.IDataObject.GetData%2A> Stel de `autoConvert` -parameter voor `false` alleen gegevens die zijn opgeslagen in de opgegeven indeling op te halen. Als u wilt de opgeslagen gegevens converteren naar de opgegeven indeling, stel `autoConvert` naar `true`, of gebruik geen `autoConvert`.       Om te bepalen van de indelingen van de gegevens die zijn opgeslagen in een IDataObject, door de volgende IDataObject methoden te gebruiken.      -Aanroepen de <xref:System.Windows.Forms.IDataObject.GetFormats%2A>methode voor het ophalen van een matrix van de indelingen waarin de gegevens beschikbaar zijn.</xref:System.Windows.Forms.IDataObject.GetFormats%2A> Stel de `autoConvert` -parameter voor `false` om op te halen, alleen de opmaak waarin de gegevens worden opgeslagen. Als u alle indelingen waarin de gegevens beschikbaar is, stelt `autoConvert` naar `true`, of gebruik deze parameter niet.      -Aanroepen de <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>methode om te bepalen of de opgeslagen gegevens beschikbaar zijn in een bepaalde notatie.</xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> Als u niet dat opgeslagen gegevens worden geconverteerd naar de opgegeven indeling wilt, stelt u de `autoConvert` -parameter voor `false`.       Zie de <xref:System.Windows.Forms.DataObject>klasse voor een implementatie van deze interface.</xref:System.Windows.Forms.DataObject> Zie de <xref:System.Windows.Forms.DataFormats>klasse voor de vooraf gedefinieerde <xref:System.Windows.Forms.Clipboard>Gegevensopmaak.</xref:System.Windows.Forms.Clipboard> </xref:System.Windows.Forms.DataFormats>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IDataObject
  implements: []
  platform:
  - net462
- uid: System.Windows.Forms.IDataObject.GetData(System.String)
  id: GetData(System.String)
  parent: System.Windows.Forms.IDataObject
  langs:
  - csharp
  name: GetData(String)
  nameWithType: IDataObject.GetData(String)
  fullName: System.Windows.Forms.IDataObject.GetData(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Haalt de gegevens die zijn gekoppeld aan de opgegeven gegevensindeling."
  remarks: "Als deze methode gegevens niet in de opgegeven indeling vinden kan, probeert de gegevens converteren naar de indeling. Deze methode retourneert als niet de gegevens worden geconverteerd naar de opgegeven indeling, `null`.       Om te bepalen of gegevens die zijn gekoppeld aan of kan worden geconverteerd naar een indeling, aanroepen <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>voordat het aanroepen van <xref:System.Windows.Forms.IDataObject.GetData%2A>.</xref:System.Windows.Forms.IDataObject.GetData%2A> </xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> Roep <xref:System.Windows.Forms.IDataObject.GetFormats%2A>voor een lijst met geldige indelingen voor gegevens die zijn opgeslagen in dit exemplaar.</xref:System.Windows.Forms.IDataObject.GetFormats%2A>      > [!NOTE] > Gegevens kunnen worden geconverteerd naar een andere indeling als deze is opgeslagen die aangeeft dat de conversie is toegestaan, en als de aangevraagde indeling is compatibel met de indeling opgeslagen. Bijvoorbeeld: gegevens die zijn opgeslagen als Unicode kan worden geconverteerd naar tekst.       Zie voor een implementatie van deze methode <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=fullName>.</xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=fullName>"
  example:
  - "This example uses the <xref:System.Windows.Forms.DataObject> class, which implements `IDataObject,` to demonstrate the use of the `GetData` method. The method is used to retrieve the data stored in `myDataObject`, which is associated with the `Text` format. The example assumes that you have already created a <xref:System.Windows.Forms.Form> named `Form1` and a <xref:System.Windows.Forms.TextBox> named `textBox1`.  \n  \n [!code-cpp[GetData1#1](~/add/codesnippet/cpp/m-system.windows.forms.i_9_1.cpp)]\n [!code-cs[GetData1#1](~/add/codesnippet/csharp/m-system.windows.forms.i_9_1.cs)]\n [!code-vb[GetData1#1](~/add/codesnippet/visualbasic/m-system.windows.forms.i_9_1.vb)]"
  syntax:
    content: public object GetData (string format);
    parameters:
    - id: format
      type: System.String
      description: "De indeling van de gegevens moeten worden opgehaald. Zie <xref href=&quot;System.Windows.Forms.DataFormats&quot;> </xref> voor vooraf gedefinieerde indelingen."
    return:
      type: System.Object
      description: "De gegevens die zijn gekoppeld aan de opgegeven indeling of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.IDataObject.GetData*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.IDataObject.GetData(System.Type)
  id: GetData(System.Type)
  parent: System.Windows.Forms.IDataObject
  langs:
  - csharp
  name: GetData(Type)
  nameWithType: IDataObject.GetData(Type)
  fullName: System.Windows.Forms.IDataObject.GetData(Type)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Haalt de gegevens die zijn gekoppeld aan de opgegeven klasse type-indeling."
  remarks: "Als deze methode gegevens niet in de opgegeven indeling vinden kan, probeert de gegevens converteren naar de indeling. Deze methode retourneert als niet de gegevens worden geconverteerd naar de opgegeven indeling, `null`.       Om te bepalen of gegevens die zijn gekoppeld aan of kan worden geconverteerd naar een indeling, aanroepen <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>voordat het aanroepen van <xref:System.Windows.Forms.IDataObject.GetData%2A>.</xref:System.Windows.Forms.IDataObject.GetData%2A> </xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> Roep <xref:System.Windows.Forms.IDataObject.GetFormats%2A>voor een lijst met geldige indelingen voor gegevens die zijn opgeslagen in dit exemplaar.</xref:System.Windows.Forms.IDataObject.GetFormats%2A>      > [!NOTE] > Gegevens kunnen worden geconverteerd naar een andere indeling als deze is opgeslagen die aangeeft dat de conversie is toegestaan, en als de aangevraagde indeling is compatibel met de indeling opgeslagen. Bijvoorbeeld: gegevens die zijn opgeslagen als Unicode kan worden geconverteerd naar tekst.       Zie voor een implementatie van deze methode <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=fullName>.</xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=fullName>"
  example:
  - "This example uses the <xref:System.Windows.Forms.DataObject> class, which implements `IDataObject`, to demonstrate the use of the `GetData` method. The method is used to retrieve the data stored in `myObject`, which is associated with a specific type, `myType`. The type of the retrieved data is displayed in a message box. The example assumes that you have already created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cpp[GetData2#1](~/add/codesnippet/cpp/m-system.windows.forms.i_4_1.cpp)]\n [!code-cs[GetData2#1](~/add/codesnippet/csharp/m-system.windows.forms.i_4_1.cs)]\n [!code-vb[GetData2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.i_4_1.vb)]"
  syntax:
    content: public object GetData (Type format);
    parameters:
    - id: format
      type: System.Type
      description: "Een <xref:System.Type>die de indeling van de gegevens moeten worden opgehaald.</xref:System.Type> Zie <xref href=&quot;System.Windows.Forms.DataFormats&quot;> </xref> voor vooraf gedefinieerde indelingen."
    return:
      type: System.Object
      description: "De gegevens die zijn gekoppeld aan de opgegeven indeling of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.IDataObject.GetData*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)
  id: GetData(System.String,System.Boolean)
  parent: System.Windows.Forms.IDataObject
  langs:
  - csharp
  name: GetData(String,Boolean)
  nameWithType: IDataObject.GetData(String,Boolean)
  fullName: System.Windows.Forms.IDataObject.GetData(String,Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Haalt de gegevens die zijn gekoppeld aan de opgegeven gegevensindeling met behulp van een Booleaanse waarde om te bepalen of de gegevens converteren naar de indeling."
  remarks: "Als de `autoConvert` parameter `true` en deze methode kan gegevens niet vinden in de opgegeven indeling, probeert de gegevens converteren naar de indeling. Als de gegevens kan niet worden geconverteerd naar de opgegeven indeling, of als de gegevens is opgeslagen met de `autoConvert` parameter ingesteld op `false`, deze methode retourneert `null`.       Als de `autoConvert` parameter `false`, deze methode retourneert gegevens in de opgegeven indeling of `null` als er geen gegevens in deze indeling kan worden gevonden.       Om te bepalen of gegevens die zijn gekoppeld aan of kan worden geconverteerd naar een indeling, roepen <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>aanroepen voordat GetData.</xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> Roep <xref:System.Windows.Forms.IDataObject.GetFormats%2A>voor een lijst met geldige indelingen voor gegevens die zijn opgeslagen in dit exemplaar.</xref:System.Windows.Forms.IDataObject.GetFormats%2A>      > [!NOTE] > Gegevens kunnen worden geconverteerd naar een andere indeling als deze is opgeslagen die aangeeft dat de conversie is toegestaan, en als de aangevraagde indeling is compatibel met de indeling opgeslagen. Bijvoorbeeld: gegevens die zijn opgeslagen als Unicode kan worden geconverteerd naar tekst.       Zie voor een implementatie van deze methode <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=fullName>.</xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=fullName>"
  example:
  - "This example uses the <xref:System.Windows.Forms.DataObject> class, which implements `IDataObject`, to demonstrate the use of the `GetData` method. The example retrieves the data stored in a `DataObject`, using the `autoConvert` parameter to specify whether or not to convert the data format. First, `myDataObject` is created with text data. Then the example tries twice to retrieve the data. In the first trial, it specifies its format as a string and sets the `autoConvert` parameter to `false`. This trial fails, and the result is displayed in a message box labeled \"Message #1.\" In the second trial, the example retrieves the same data with the `autoConvert` parameter set to `true`. This trial succeeds, and the result is displayed in a message box labeled \"Message #2.\" The example assumes that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cs[GetData3#1](~/add/codesnippet/csharp/m-system.windows.forms.i_14_1.cs)]\n [!code-cpp[GetData3#1](~/add/codesnippet/cpp/m-system.windows.forms.i_14_1.cpp)]\n [!code-vb[GetData3#1](~/add/codesnippet/visualbasic/m-system.windows.forms.i_14_1.vb)]"
  syntax:
    content: public object GetData (string format, bool autoConvert);
    parameters:
    - id: format
      type: System.String
      description: "De indeling van de gegevens moeten worden opgehaald. Zie <xref href=&quot;System.Windows.Forms.DataFormats&quot;> </xref> voor vooraf gedefinieerde indelingen."
    - id: autoConvert
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>de gegevens converteren naar de opgegeven indeling; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Object
      description: "De gegevens die zijn gekoppeld aan de opgegeven indeling of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.IDataObject.GetData*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.IDataObject.GetDataPresent(System.String)
  id: GetDataPresent(System.String)
  parent: System.Windows.Forms.IDataObject
  langs:
  - csharp
  name: GetDataPresent(String)
  nameWithType: IDataObject.GetDataPresent(String)
  fullName: System.Windows.Forms.IDataObject.GetDataPresent(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Bepaalt of gegevens die zijn opgeslagen in dit exemplaar is gekoppeld of kan worden geconverteerd naar de opgegeven indeling."
  remarks: "Deze methode om te bepalen of een indeling in deze <xref:System.Windows.Forms.DataObject>voordat u <xref:System.Windows.Forms.IDataObject.GetData%2A>.</xref:System.Windows.Forms.IDataObject.GetData%2A> bestaat</xref:System.Windows.Forms.DataObject> niet aanroepen Roep <xref:System.Windows.Forms.IDataObject.GetFormats%2A>voor de indelingen die beschikbaar in dit exemplaar zijn.</xref:System.Windows.Forms.IDataObject.GetFormats%2A>      > [!NOTE] > Gegevens kunnen worden geconverteerd naar een andere indeling als deze is opgeslagen die aangeeft dat de conversie is toegestaan, en als de aangevraagde indeling is compatibel met de indeling opgeslagen. Bijvoorbeeld: gegevens die zijn opgeslagen als Unicode kan worden geconverteerd naar tekst.       Zie voor een implementatie van deze methode <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=fullName>.</xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=fullName>"
  example:
  - "This example uses the <xref:System.Windows.Forms.DataObject> class, which implements `IDataObject`, to demonstrate the use of the `GetDataPresent` method. First, it creates a data object using a string and the `Text` format. Then it verifies that the data is present in the `Text` format and displays the results in a message box. The example assumes that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-vb[GetDataPresent1#1](~/add/codesnippet/visualbasic/m-system.windows.forms.i_12_1.vb)]\n [!code-cs[GetDataPresent1#1](~/add/codesnippet/csharp/m-system.windows.forms.i_12_1.cs)]\n [!code-cpp[GetDataPresent1#1](~/add/codesnippet/cpp/m-system.windows.forms.i_12_1.cpp)]"
  syntax:
    content: public bool GetDataPresent (string format);
    parameters:
    - id: format
      type: System.String
      description: "De indeling waarvoor u wilt controleren. Zie <xref href=&quot;System.Windows.Forms.DataFormats&quot;> </xref> voor vooraf gedefinieerde indelingen."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als gegevens opgeslagen in dit exemplaar is gekoppeld of kan worden geconverteerd naar de opgegeven indeling; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.IDataObject.GetDataPresent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.IDataObject.GetDataPresent(System.Type)
  id: GetDataPresent(System.Type)
  parent: System.Windows.Forms.IDataObject
  langs:
  - csharp
  name: GetDataPresent(Type)
  nameWithType: IDataObject.GetDataPresent(Type)
  fullName: System.Windows.Forms.IDataObject.GetDataPresent(Type)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Bepaalt of gegevens die zijn opgeslagen in dit exemplaar is gekoppeld of kan worden geconverteerd naar de opgegeven indeling."
  remarks: "Deze methode om te bepalen of een indeling in deze <xref:System.Windows.Forms.DataObject>voordat u <xref:System.Windows.Forms.IDataObject.GetData%2A>.</xref:System.Windows.Forms.IDataObject.GetData%2A> bestaat</xref:System.Windows.Forms.DataObject> niet aanroepen Roep <xref:System.Windows.Forms.IDataObject.GetFormats%2A>voor de indelingen die beschikbaar in dit exemplaar zijn.</xref:System.Windows.Forms.IDataObject.GetFormats%2A>      > [!NOTE] > Gegevens kunnen worden geconverteerd naar een andere indeling als deze is opgeslagen die aangeeft dat de conversie is toegestaan, en als de aangevraagde indeling is compatibel met de indeling opgeslagen. Bijvoorbeeld: gegevens die zijn opgeslagen als Unicode kan worden geconverteerd naar tekst.       Zie voor een implementatie van deze methode <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=fullName>.</xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=fullName>"
  example:
  - "This example uses the <xref:System.Windows.Forms.DataObject> class, which implements `IDataObject`, to demonstrate the use of the `GetDataPresent` method. First, it creates a component (`myComponent`) and stores it in a data object (`myDataObject`). Then it checks whether the specified data is stored in `myDataObject`. If the test evaluates `true`, it displays the result in a message box and displays the data type in a text box. This example assumes that you have already created a <xref:System.Windows.Forms.Form> named `Form1` and a <xref:System.Windows.Forms.TextBox> named `textBox1`.  \n  \n [!code-cs[GetDataPresent2#1](~/add/codesnippet/csharp/m-system.windows.forms.i_15_1.cs)]\n [!code-cpp[GetDataPresent2#1](~/add/codesnippet/cpp/m-system.windows.forms.i_15_1.cpp)]\n [!code-vb[GetDataPresent2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.i_15_1.vb)]"
  syntax:
    content: public bool GetDataPresent (Type format);
    parameters:
    - id: format
      type: System.Type
      description: "Een <xref:System.Type>die de indeling waarvoor u wilt controleren.</xref:System.Type> Zie <xref href=&quot;System.Windows.Forms.DataFormats&quot;> </xref> voor vooraf gedefinieerde indelingen."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als gegevens opgeslagen in dit exemplaar is gekoppeld of kan worden geconverteerd naar de opgegeven indeling; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.IDataObject.GetDataPresent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)
  id: GetDataPresent(System.String,System.Boolean)
  parent: System.Windows.Forms.IDataObject
  langs:
  - csharp
  name: GetDataPresent(String,Boolean)
  nameWithType: IDataObject.GetDataPresent(String,Boolean)
  fullName: System.Windows.Forms.IDataObject.GetDataPresent(String,Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Hiermee wordt bepaald of gegevens die zijn opgeslagen in dit exemplaar gekoppeld aan de opgegeven indeling is, met behulp van een Booleaanse waarde om te bepalen of de gegevens converteren naar de indeling."
  remarks: "Deze methode om te bepalen of een indeling in deze <xref:System.Windows.Forms.DataObject>voordat u <xref:System.Windows.Forms.IDataObject.GetData%2A>.</xref:System.Windows.Forms.IDataObject.GetData%2A> bestaat</xref:System.Windows.Forms.DataObject> niet aanroepen Roep <xref:System.Windows.Forms.IDataObject.GetFormats%2A>voor de indelingen die beschikbaar in dit exemplaar zijn.</xref:System.Windows.Forms.IDataObject.GetFormats%2A>       Deze methode retourneert `true` wanneer: - de `autoConvert` parameter `true` en de gegevens zich in een indeling die kan worden geconverteerd naar de juiste indeling.      -De `autoConvert` parameter `false` en de gegevens in de juiste indeling.       Deze methode retourneert `false` wanneer: - de `autoConvert` parameter `true` en deze methode kan gegevens niet vinden in de opgegeven indeling en deze gegevens kan niet converteren naar de opgegeven indeling of de gegevens is opgeslagen met `autoConvert` ingesteld op `false`.      -De `autoConvert` parameter `false`, en gegevens, bestaat niet in dit exemplaar in de opgegeven indeling.      > [!NOTE] > Gegevens kunnen worden geconverteerd naar een andere indeling als deze is opgeslagen die aangeeft dat de conversie is toegestaan, en als de aangevraagde indeling is compatibel met de indeling opgeslagen. Bijvoorbeeld: gegevens die zijn opgeslagen als Unicode kan worden geconverteerd naar tekst.       Zie voor een implementatie van deze methode <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=fullName>.</xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=fullName>"
  example:
  - "This example uses the <xref:System.Windows.Forms.DataObject> class, which implements `IDataObject`, to demonstrate the use of the `GetDataPresent` method. First, it creates a data object (`myDataObject`) using a string and the `Text` format. Then it queries the object for data associated with the `Text` format, with the `autoConvert` parameter set to `false`. This trial fails, and the result is displayed in a message box labeled \"Message #1.\" In the second trial, it sets the `autoConvert` parameter to `true`. This trial succeeds, and the result is displayed in a message box labeled \"Message #2.\" The example assumes that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cs[GetDataPresent3#1](~/add/codesnippet/csharp/m-system.windows.forms.i_17_1.cs)]\n [!code-cpp[GetDataPresent3#1](~/add/codesnippet/cpp/m-system.windows.forms.i_17_1.cpp)]\n [!code-vb[GetDataPresent3#1](~/add/codesnippet/visualbasic/m-system.windows.forms.i_17_1.vb)]"
  syntax:
    content: public bool GetDataPresent (string format, bool autoConvert);
    parameters:
    - id: format
      type: System.String
      description: "De indeling waarvoor u wilt controleren. Zie <xref href=&quot;System.Windows.Forms.DataFormats&quot;> </xref> voor vooraf gedefinieerde indelingen."
    - id: autoConvert
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>om te bepalen of gegevens in dit exemplaar opgeslagen kunnen worden geconverteerd naar de opgegeven indeling; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> om te controleren of de gegevens in de opgegeven indeling."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de gegevens, of kan worden geconverteerd naar de opgegeven indeling; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Forms.IDataObject.GetDataPresent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.IDataObject.GetFormats
  id: GetFormats
  parent: System.Windows.Forms.IDataObject
  langs:
  - csharp
  name: GetFormats()
  nameWithType: IDataObject.GetFormats()
  fullName: System.Windows.Forms.IDataObject.GetFormats()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Retourneert een lijst van alle gegevens die zijn opgeslagen in dit exemplaar is gekoppeld of kan worden geconverteerd naar indelingen."
  remarks: "Roep deze methode als u de van ondersteunde gegevensindelingen voordat u de <xref:System.Windows.Forms.IDataObject.GetData%2A>methode.</xref:System.Windows.Forms.IDataObject.GetData%2A> Zie de <xref:System.Windows.Forms.DataFormats>klasse voor de vooraf gedefinieerde indelingen.</xref:System.Windows.Forms.DataFormats>      > [!NOTE] > Gegevens kunnen worden geconverteerd naar een andere indeling als deze is opgeslagen die aangeeft dat de conversie is toegestaan, en als de aangevraagde indeling is compatibel met de indeling opgeslagen. Bijvoorbeeld: gegevens die zijn opgeslagen als Unicode kan worden geconverteerd naar tekst.       Zie voor een implementatie van deze methode <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=fullName>.</xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=fullName>"
  example:
  - "This example uses the <xref:System.Windows.Forms.DataObject> class, which implements `IDataObject`, to demonstrate the use of the `GetFormats` method. First, it creates a data object (`myDataObject`) using a string and the `Text` format. Then it retrieves all the data formats and data conversion formats in the data object, and displays the resulting list in a message box. This example assumes that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cs[GetFormats1#1](~/add/codesnippet/csharp/m-system.windows.forms.i_3_1.cs)]\n [!code-cpp[GetFormats1#1](~/add/codesnippet/cpp/m-system.windows.forms.i_3_1.cpp)]\n [!code-vb[GetFormats1#1](~/add/codesnippet/visualbasic/m-system.windows.forms.i_3_1.vb)]"
  syntax:
    content: public string[] GetFormats ();
    parameters: []
    return:
      type: System.String[]
      description: "Een matrix met de namen die een lijst van alle indelingen die worden ondersteund door de gegevens in dit object vertegenwoordigt."
  overload: System.Windows.Forms.IDataObject.GetFormats*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.IDataObject.GetFormats(System.Boolean)
  id: GetFormats(System.Boolean)
  parent: System.Windows.Forms.IDataObject
  langs:
  - csharp
  name: GetFormats(Boolean)
  nameWithType: IDataObject.GetFormats(Boolean)
  fullName: System.Windows.Forms.IDataObject.GetFormats(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Hiermee wordt een lijst met alle gegevens die zijn opgeslagen in dit exemplaar is gekoppeld of kan worden geconverteerd, met behulp van een Booleaanse waarde om te bepalen of voor het ophalen van alle indelingen die de gegevens kunnen worden geconverteerd naar of alleen gegevens met systeemeigen indelingen opgehaald."
  remarks: "Roep deze methode als u de van ondersteunde gegevensindelingen voordat u de <xref:System.Windows.Forms.IDataObject.GetData%2A>methode.</xref:System.Windows.Forms.IDataObject.GetData%2A> Zie de <xref:System.Windows.Forms.DataFormats>klasse voor de vooraf gedefinieerde indelingen.</xref:System.Windows.Forms.DataFormats>      > [!NOTE] > Gegevens kunnen worden geconverteerd naar een andere indeling als deze is opgeslagen die aangeeft dat de conversie is toegestaan, en als de aangevraagde indeling is compatibel met de indeling opgeslagen. Bijvoorbeeld: gegevens die zijn opgeslagen als Unicode kan worden geconverteerd naar tekst.       Zie voor een implementatie van deze methode <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=fullName>.</xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=fullName>"
  example:
  - "This example uses the <xref:System.Windows.Forms.DataObject> class, which implements `IDataObject`, to demonstrate the use of the `GetFormats` method. First, it creates a data object (`myDataObject`) using a string and the `UnicodeText` format. Then it makes two queries to get the formats associated with the data. In the first query, it sets the `autoConvert` parameter to `false` : in this case, only the native format of the data is returned. In the second query, it sets the `autoConvert` parameter to `true`, so that it gets the list of formats, including the formats that the data can be converted to. In each case, the resulting list is displayed in a message box. This example assumes that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-vb[GetFormats2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.i_13_1.vb)]\n [!code-cpp[GetFormats2#1](~/add/codesnippet/cpp/m-system.windows.forms.i_13_1.cpp)]\n [!code-cs[GetFormats2#1](~/add/codesnippet/csharp/m-system.windows.forms.i_13_1.cs)]"
  syntax:
    content: public string[] GetFormats (bool autoConvert);
    parameters:
    - id: autoConvert
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>voor het ophalen van alle indelingen van die gegevens opgeslagen in dit exemplaar is gekoppeld of kan worden geconverteerd naar; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> alleen systeemeigen gegevensopmaak ophalen."
    return:
      type: System.String[]
      description: "Een matrix met de namen die een lijst van alle indelingen die worden ondersteund door de gegevens in dit object vertegenwoordigt."
  overload: System.Windows.Forms.IDataObject.GetFormats*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.IDataObject.SetData(System.Object)
  id: SetData(System.Object)
  parent: System.Windows.Forms.IDataObject
  langs:
  - csharp
  name: SetData(Object)
  nameWithType: IDataObject.SetData(Object)
  fullName: System.Windows.Forms.IDataObject.SetData(Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "De opgegeven gegevens opslaat in dit geval wordt het gebruik van de klasse van de gegevens voor de indeling."
  remarks: "De indeling is afgeleid van de gegevensklasse.       Gegevens die zijn opgeslagen met deze methode kan worden geconverteerd naar een indeling die compatibel is wanneer deze wordt opgehaald.       Zie voor een implementatie van deze methode <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=fullName>.</xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=fullName>"
  example:
  - "This example uses the <xref:System.Windows.Forms.DataObject> class, which implements `IDataObject`, to demonstrate the use of the `SetData` method. First, it creates a component (`myComponent`) and stores it in a data object (`myDataObject`). Then it checks whether the specified data is stored in the data object, and displays the result in a message box. The example assumes that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cs[SetData1#1](~/add/codesnippet/csharp/m-system.windows.forms.i_1_1.cs)]\n [!code-vb[SetData1#1](~/add/codesnippet/visualbasic/m-system.windows.forms.i_1_1.vb)]\n [!code-cpp[SetData1#1](~/add/codesnippet/cpp/m-system.windows.forms.i_1_1.cpp)]"
  syntax:
    content: public void SetData (object data);
    parameters:
    - id: data
      type: System.Object
      description: "De gegevens worden opgeslagen."
  overload: System.Windows.Forms.IDataObject.SetData*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.IDataObject.SetData(System.String,System.Object)
  id: SetData(System.String,System.Object)
  parent: System.Windows.Forms.IDataObject
  langs:
  - csharp
  name: SetData(String,Object)
  nameWithType: IDataObject.SetData(String,Object)
  fullName: System.Windows.Forms.IDataObject.SetData(String,Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "De opgegeven gegevens en de bijbehorende indeling opgeslagen in dit exemplaar."
  remarks: "Als u de indeling van de doeltoepassing niet weet, kunt u gegevens opslaan in verschillende indelingen met deze methode.       Gegevens die zijn opgeslagen met deze methode kan worden geconverteerd naar een indeling die compatibel is wanneer deze wordt opgehaald.       Zie voor een implementatie van deze methode <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=fullName>.</xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=fullName>"
  example:
  - "This example uses the <xref:System.Windows.Forms.DataObject> class, which implements `IDataObject`, to demonstrate the use of the `SetData` method. First, it creates a data object (`myDataObject`) and stores a string in the object specifying the `UnicodeText` format. Then it retrieves that data stored in the object specifying the `Text` format, so that the data is converted to the `Text` format. The result is displayed in a message box. This example assumes that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cs[SetData2#1](~/add/codesnippet/csharp/m-system.windows.forms.i_0_1.cs)]\n [!code-cpp[SetData2#1](~/add/codesnippet/cpp/m-system.windows.forms.i_0_1.cpp)]\n [!code-vb[SetData2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.i_0_1.vb)]"
  syntax:
    content: public void SetData (string format, object data);
    parameters:
    - id: format
      type: System.String
      description: "De indeling die is gekoppeld aan de gegevens. Zie <xref href=&quot;System.Windows.Forms.DataFormats&quot;> </xref> voor vooraf gedefinieerde indelingen."
    - id: data
      type: System.Object
      description: "De gegevens worden opgeslagen."
  overload: System.Windows.Forms.IDataObject.SetData*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)
  id: SetData(System.Type,System.Object)
  parent: System.Windows.Forms.IDataObject
  langs:
  - csharp
  name: SetData(Type,Object)
  nameWithType: IDataObject.SetData(Type,Object)
  fullName: System.Windows.Forms.IDataObject.SetData(Type,Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Slaat de opgegeven gegevens en het bijbehorende klassetype in dit exemplaar."
  remarks: "Als u de indeling van de doeltoepassing niet weet, kunt u gegevens opslaan in verschillende indelingen met deze methode.       Gegevens die zijn opgeslagen met deze methode kan worden geconverteerd naar een indeling die compatibel is wanneer deze wordt opgehaald.       Zie voor een implementatie van deze methode <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=fullName>.</xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=fullName>"
  example:
  - "This example uses the <xref:System.Windows.Forms.DataObject> class, which implements `IDataObject`, to demonstrate the use of the `SetData` method. First, it creates a component (`myComponent`) and stores it in a data object (`myDataObject`), using `myType` to specify the data format. Then it checks whether the data of the specified type is stored in the object, and displays the result in a message box. The example assumes that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-vb[SetData3#1](~/add/codesnippet/visualbasic/m-system.windows.forms.i_11_1.vb)]\n [!code-cpp[SetData3#1](~/add/codesnippet/cpp/m-system.windows.forms.i_11_1.cpp)]\n [!code-cs[SetData3#1](~/add/codesnippet/csharp/m-system.windows.forms.i_11_1.cs)]"
  syntax:
    content: public void SetData (Type format, object data);
    parameters:
    - id: format
      type: System.Type
      description: "Een <xref:System.Type>die de indeling die is gekoppeld aan de gegevens vertegenwoordigt.</xref:System.Type> Zie <xref href=&quot;System.Windows.Forms.DataFormats&quot;> </xref> voor vooraf gedefinieerde indelingen."
    - id: data
      type: System.Object
      description: "De gegevens worden opgeslagen."
  overload: System.Windows.Forms.IDataObject.SetData*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)
  id: SetData(System.String,System.Boolean,System.Object)
  parent: System.Windows.Forms.IDataObject
  langs:
  - csharp
  name: SetData(String,Boolean,Object)
  nameWithType: IDataObject.SetData(String,Boolean,Object)
  fullName: System.Windows.Forms.IDataObject.SetData(String,Boolean,Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "De opgegeven gegevens en de bijbehorende indeling opslaat in dit geval wordt een Booleaanse waarde gebruiken om op te geven of de gegevens kunnen worden geconverteerd naar een andere indeling."
  remarks: "Als u de indeling van de doeltoepassing niet weet, kunt u gegevens opslaan in verschillende indelingen met deze methode.       Zie voor een implementatie van deze methode <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=fullName>.</xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=fullName>"
  example:
  - "This example uses the <xref:System.Windows.Forms.DataObject> class, which implements `IDataObject`, to demonstrate the use of the `SetData` method. First, it creates a data object (`myDataObject`) and stores a `UnicodeText` string in it, with the `autoConvert` parameter set to `false`. Then it retrieves the format(s) associated with the data stored in the object and displays the result in a message box. The only format associated with the data is the `UnicodeText` format. This example assumes that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cpp[SetData4#1](~/add/codesnippet/cpp/14ad2ca0-1678-4ad5-a287-_1.cpp)]\n [!code-vb[SetData4#1](~/add/codesnippet/visualbasic/14ad2ca0-1678-4ad5-a287-_1.vb)]\n [!code-cs[SetData4#1](~/add/codesnippet/csharp/14ad2ca0-1678-4ad5-a287-_1.cs)]"
  syntax:
    content: public void SetData (string format, bool autoConvert, object data);
    parameters:
    - id: format
      type: System.String
      description: "De indeling die is gekoppeld aan de gegevens. Zie <xref href=&quot;System.Windows.Forms.DataFormats&quot;> </xref> voor vooraf gedefinieerde indelingen."
    - id: autoConvert
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>zodat de gegevens kunnen worden geconverteerd naar een andere indeling; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
    - id: data
      type: System.Object
      description: "De gegevens worden opgeslagen."
  overload: System.Windows.Forms.IDataObject.SetData*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Forms.IDataObject.GetData(System.String)
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: GetData(String)
  nameWithType: IDataObject.GetData(String)
  fullName: System.Windows.Forms.IDataObject.GetData(String)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.IDataObject.GetData(System.Type)
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: GetData(Type)
  nameWithType: IDataObject.GetData(Type)
  fullName: System.Windows.Forms.IDataObject.GetData(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: GetData(String,Boolean)
  nameWithType: IDataObject.GetData(String,Boolean)
  fullName: System.Windows.Forms.IDataObject.GetData(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.IDataObject.GetDataPresent(System.String)
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: GetDataPresent(String)
  nameWithType: IDataObject.GetDataPresent(String)
  fullName: System.Windows.Forms.IDataObject.GetDataPresent(String)
- uid: System.Windows.Forms.IDataObject.GetDataPresent(System.Type)
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: GetDataPresent(Type)
  nameWithType: IDataObject.GetDataPresent(Type)
  fullName: System.Windows.Forms.IDataObject.GetDataPresent(Type)
- uid: System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: GetDataPresent(String,Boolean)
  nameWithType: IDataObject.GetDataPresent(String,Boolean)
  fullName: System.Windows.Forms.IDataObject.GetDataPresent(String,Boolean)
- uid: System.Windows.Forms.IDataObject.GetFormats
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: GetFormats()
  nameWithType: IDataObject.GetFormats()
  fullName: System.Windows.Forms.IDataObject.GetFormats()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.IDataObject.GetFormats(System.Boolean)
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: GetFormats(Boolean)
  nameWithType: IDataObject.GetFormats(Boolean)
  fullName: System.Windows.Forms.IDataObject.GetFormats(Boolean)
- uid: System.Windows.Forms.IDataObject.SetData(System.Object)
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: SetData(Object)
  nameWithType: IDataObject.SetData(Object)
  fullName: System.Windows.Forms.IDataObject.SetData(Object)
- uid: System.Windows.Forms.IDataObject.SetData(System.String,System.Object)
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: SetData(String,Object)
  nameWithType: IDataObject.SetData(String,Object)
  fullName: System.Windows.Forms.IDataObject.SetData(String,Object)
- uid: System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: SetData(Type,Object)
  nameWithType: IDataObject.SetData(Type,Object)
  fullName: System.Windows.Forms.IDataObject.SetData(Type,Object)
- uid: System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: SetData(String,Boolean,Object)
  nameWithType: IDataObject.SetData(String,Boolean,Object)
  fullName: System.Windows.Forms.IDataObject.SetData(String,Boolean,Object)
- uid: System.Windows.Forms.IDataObject.GetData*
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: GetData
  nameWithType: IDataObject.GetData
- uid: System.Windows.Forms.IDataObject.GetDataPresent*
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: GetDataPresent
  nameWithType: IDataObject.GetDataPresent
- uid: System.Windows.Forms.IDataObject.GetFormats*
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: GetFormats
  nameWithType: IDataObject.GetFormats
- uid: System.Windows.Forms.IDataObject.SetData*
  parent: System.Windows.Forms.IDataObject
  isExternal: false
  name: SetData
  nameWithType: IDataObject.SetData
