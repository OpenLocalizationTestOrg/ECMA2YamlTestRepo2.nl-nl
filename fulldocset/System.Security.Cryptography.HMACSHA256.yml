### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACSHA256
  id: HMACSHA256
  children:
  - System.Security.Cryptography.HMACSHA256.#ctor
  - System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])
  langs:
  - csharp
  name: HMACSHA256
  nameWithType: HMACSHA256
  fullName: System.Security.Cryptography.HMACSHA256
  type: Class
  summary: "Berekent een HMAC Hash-based Message Authentication Code () met behulp van de <xref href=&quot;System.Security.Cryptography.SHA256&quot;> </xref> hash-functie."
  remarks: "HMACSHA256 is een soort sleutelhash-algoritme dat is gemaakt op basis van de hash-functie van SHA-256 en gebruikt als een Hash-based Message Authentication Code (HMAC). Het HMAC-proces combineert een geheime sleutel met de berichtgegevens, bewerkt het resultaat met de hashfunctie, combineert van de hashwaarde opnieuw met de geheime sleutel en past de hashfunctie vervolgens een tweede keer. De uitvoerhash is 256 bits lang.       Een HMAC kan worden gebruikt om te bepalen of een bericht wordt verzonden via een onbeveiligde kanaal is geknoeid, mits de verzender en ontvanger een geheime sleutel delen. De afzender wordt de hash-waarde voor de oorspronkelijke gegevens berekend en worden de oorspronkelijke gegevens en de hash-waarde als een enkel bericht verzonden. De ontvanger de hash-waarde voor het ontvangen bericht berekend en controleert of de berekende HMAC overeenkomt met de HMAC verzonden.       Elke wijziging van de gegevens of de hash-waarde resulteert in een niet-overeenkomende, omdat de geheime sleutel is vereist voor het wijzigen van het bericht en de juiste hash-waarde reproduceren. Als de oorspronkelijke en berekende hash-waarden overeenkomen, wordt daarom het bericht geverifieerd.       HMACSHA256 accepteert sleutels van elke grootte, en genereert een hash-reeks 256 bits lang."
  example:
  - "The following example shows how to sign a file by using the HMACSHA256 object and then how to verify the file.  \n  \n [!code-cs[HMACSHA256#1](~/add/codesnippet/csharp/t-system.security.crypto_55_1.cs)]\n [!code-cpp[HMACSHA256#1](~/add/codesnippet/cpp/t-system.security.crypto_55_1.cpp)]\n [!code-vb[HMACSHA256#1](~/add/codesnippet/visualbasic/t-system.security.crypto_55_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACSHA256 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA256.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACSHA256
  langs:
  - csharp
  name: HMACSHA256()
  nameWithType: HMACSHA256.HMACSHA256()
  fullName: System.Security.Cryptography.HMACSHA256.HMACSHA256()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;> </xref> klasse met een willekeurig gegenereerde sleutel."
  remarks: "<xref:System.Security.Cryptography.HMACSHA256>is een soort sleutelhash-algoritme dat is gemaakt op basis van de hash-functie van SHA-256 en gebruikt als een HMAC Hash-based Message Authentication Code ().</xref:System.Security.Cryptography.HMACSHA256> Het HMAC-proces combineert een geheime sleutel met de berichtgegevens, bewerkt het resultaat met de hashfunctie, combineert van de hashwaarde opnieuw met de geheime sleutel en past de hashfunctie vervolgens een tweede keer. De uitvoerhash is 256 bits lang.       Deze constructor maakt gebruik van een 64-byte, willekeurig gegenereerde sleutel."
  syntax:
    content: public HMACSHA256 ();
    parameters: []
  overload: System.Security.Cryptography.HMACSHA256.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACSHA256
  langs:
  - csharp
  name: HMACSHA256(Byte[])
  nameWithType: HMACSHA256.HMACSHA256(Byte[])
  fullName: System.Security.Cryptography.HMACSHA256.HMACSHA256(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;> </xref> klasse met de opgegeven sleutel gegevens."
  remarks: "<xref:System.Security.Cryptography.HMACSHA256>is een soort sleutelhash-algoritme dat is gemaakt op basis van de hash-functie van SHA-256 en gebruikt als een Hash-based Message Authentication Code.</xref:System.Security.Cryptography.HMACSHA256> Het HMAC-proces combineert een geheime sleutel met de berichtgegevens, bewerkt het resultaat met de hashfunctie, combineert van de hashwaarde opnieuw met de geheime sleutel en past de hashfunctie vervolgens een tweede keer. De uitvoerhash is 256 bits lang."
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA256> class.
  syntax:
    content: public HMACSHA256 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "De geheime sleutel voor <xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;> </xref> versleuteling. De sleutel mag een willekeurige lengte. De aanbevolen grootte is echter 64 bytes. Als de sleutel meer dan 64 bytes lang is, deze wordt opgedeeld (met behulp van SHA-256) worden afgeleid van een 64-byte-sleutel. Als het minder dan 64 bytes, wordt het aangevuld 64 bytes."
  overload: System.Security.Cryptography.HMACSHA256.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACSHA256.#ctor
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HMACSHA256()
  nameWithType: HMACSHA256.HMACSHA256()
  fullName: System.Security.Cryptography.HMACSHA256.HMACSHA256()
- uid: System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HMACSHA256(Byte[])
  nameWithType: HMACSHA256.HMACSHA256(Byte[])
  fullName: System.Security.Cryptography.HMACSHA256.HMACSHA256(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACSHA256.#ctor*
  parent: System.Security.Cryptography.HMACSHA256
  isExternal: false
  name: HMACSHA256
  nameWithType: HMACSHA256.HMACSHA256
