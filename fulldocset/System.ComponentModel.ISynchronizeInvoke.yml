### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.ISynchronizeInvoke
  id: ISynchronizeInvoke
  children:
  - System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])
  - System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)
  - System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])
  - System.ComponentModel.ISynchronizeInvoke.InvokeRequired
  langs:
  - csharp
  name: ISynchronizeInvoke
  nameWithType: ISynchronizeInvoke
  fullName: System.ComponentModel.ISynchronizeInvoke
  type: Interface
  summary: "Biedt een manier synchroon of asynchroon uitvoeren van een gemachtigde."
  remarks: "The ISynchronizeInvoke interface provides synchronous and asynchronous communication between objects about the occurrence of an event. Objects that implement this interface can receive notification that an event has occurred, and they can respond to queries about the event. In this way, clients can ensure that one request has been processed before they submit a subsequent request that depends on completion of the first.  \n  \n The ISynchronizeInvoke class provides two ways to invoke a process:  \n  \n1.  Asynchronously, by using the [BeginInvoke(Delegate,â€‚Object\\[\\])](assetId:///M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])?qualifyHint=False&autoUpgrade=True) method. <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> starts a process and then returns immediately. Use <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A> to wait until the process started by <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> completes.  \n  \n2.  Synchronously, by using the <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> method. <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> starts a process, waits until it completes, and then returns. Use <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> when the control's main thread is different from the calling thread to marshal the call to the proper thread.  \n  \n> [!NOTE]\n>  The <xref:System.Security.Permissions.HostProtectionAttribute> attribute applied to this class has the following <xref:System.Security.Permissions.HostProtectionAttribute.Resources%2A> property value: <xref:System.Security.Permissions.HostProtectionResource> &#124; <xref:System.Security.Permissions.HostProtectionResource>. The <xref:System.Security.Permissions.HostProtectionAttribute> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the <xref:System.Security.Permissions.HostProtectionAttribute> class or [SQL Server Programming and Host Protection Attributes](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public interface ISynchronizeInvoke
  implements: []
  platform:
  - net462
- uid: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])
  id: BeginInvoke(System.Delegate,System.Object[])
  parent: System.ComponentModel.ISynchronizeInvoke
  langs:
  - csharp
  name: BeginInvoke(Delegate,Object[])
  nameWithType: ISynchronizeInvoke.BeginInvoke(Delegate,Object[])
  fullName: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(Delegate,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "De gemachtigde asynchroon worden uitgevoerd op de thread waarmee dit object is gemaakt."
  remarks: "De `method` gemachtigde is uitgevoerd voor de thread die gemaakt van het object, in plaats van de thread waarop BeginInvoke is aangeroepen.       De gemachtigde asynchroon wordt genoemd, en deze methode retourneert onmiddellijk. U kunt deze methode aanroept vanuit een willekeurige thread. U moet de geretourneerde waarde van een proces gestart met deze methode, belt <xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A>de waarde op te halen.</xref:System.ComponentModel.ISynchronizeInvoke.EndInvoke%2A>       Als u de gemachtigde synchroon aanroepen wilt, gebruikt u de <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>methode in plaats daarvan.</xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>"
  syntax:
    content: public IAsyncResult BeginInvoke (Delegate method, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "Een <xref:System.Delegate>op een methode die parameters van hetzelfde aantal en type die zijn opgenomen in `args`.</xref:System.Delegate>"
    - id: args
      type: System.Object[]
      description: "Een matrix van het type <xref:System.Object>om door te geven als argumenten voor de opgegeven methode.</xref:System.Object> Dit kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als er geen argumenten nodig zijn."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>interface die de asynchrone bewerking vertegenwoordigt die zijn gestart door deze methode aanroept.</xref:System.IAsyncResult>"
  overload: System.ComponentModel.ISynchronizeInvoke.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: System.ComponentModel.ISynchronizeInvoke
  langs:
  - csharp
  name: EndInvoke(IAsyncResult)
  nameWithType: ISynchronizeInvoke.EndInvoke(IAsyncResult)
  fullName: System.ComponentModel.ISynchronizeInvoke.EndInvoke(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Wacht tot het proces wordt gestart door het aanroepen van <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*>is voltooid en vervolgens retourneert de waarde die is gegenereerd door het proces.</xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*>"
  remarks: "Deze methode haalt de geretourneerde waarde van de asynchrone bewerking dat wordt vertegenwoordigd door de <xref:System.IAsyncResult>die door deze interface is doorgegeven.</xref:System.IAsyncResult> Als de asynchrone bewerking is niet voltooid, wordt deze methode wacht totdat het resultaat beschikbaar is."
  syntax:
    content: public object EndInvoke (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>interface die staat voor de asynchrone bewerking gestart door het aanroepen van <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*>.</xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke*> </xref:System.IAsyncResult>"
    return:
      type: System.Object
      description: "Een <xref:System.Object>die staat voor de geretourneerde waarde die is gegenereerd door de asynchrone bewerking.</xref:System.Object>"
  overload: System.ComponentModel.ISynchronizeInvoke.EndInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])
  id: Invoke(System.Delegate,System.Object[])
  parent: System.ComponentModel.ISynchronizeInvoke
  langs:
  - csharp
  name: Invoke(Delegate,Object[])
  nameWithType: ISynchronizeInvoke.Invoke(Delegate,Object[])
  fullName: System.ComponentModel.ISynchronizeInvoke.Invoke(Delegate,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "De gemachtigde synchroon worden uitgevoerd op de thread die dit object is gemaakt en de aanroep van de thread maken gemarshald."
  remarks: "In tegenstelling tot <xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A>, deze methode werkt synchroon, dat wil zeggen, wacht totdat het proces is voltooid voordat u terugkeert.</xref:System.ComponentModel.ISynchronizeInvoke.BeginInvoke%2A> Uitzonderingen die tijdens de oproep worden doorgegeven aan de aanroepfunctie.       Gebruik deze methode bij het aanroepen van een methode uit een andere thread voor het marshallen van de aanroep naar de juiste thread."
  syntax:
    content: public object Invoke (Delegate method, object[] args);
    parameters:
    - id: method
      type: System.Delegate
      description: "Een <xref:System.Delegate>die een methode aan te roepen in de context van de thread voor het besturingselement bevat.</xref:System.Delegate>"
    - id: args
      type: System.Object[]
      description: "Een matrix van het type <xref:System.Object>die staat voor de argumenten worden doorgegeven aan de opgegeven methode.</xref:System.Object> Dit kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als er geen argumenten nodig zijn."
    return:
      type: System.Object
      description: "Een <xref:System.Object>die staat voor de retourwaarde van de gemachtigde die wordt aangeroepen of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als de gemachtigde geen retourwaarde heeft.</xref:System.Object>"
  overload: System.ComponentModel.ISynchronizeInvoke.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.ISynchronizeInvoke.InvokeRequired
  id: InvokeRequired
  parent: System.ComponentModel.ISynchronizeInvoke
  langs:
  - csharp
  name: InvokeRequired
  nameWithType: ISynchronizeInvoke.InvokeRequired
  fullName: System.ComponentModel.ISynchronizeInvoke.InvokeRequired
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "Hiermee wordt een waarde die aangeeft of de aanroeper moet aanroepen <xref:System.ComponentModel.ISynchronizeInvoke.Invoke*>wanneer het aanroepen van een object dat deze interface implementeert.</xref:System.ComponentModel.ISynchronizeInvoke.Invoke*>"
  remarks: "Deze eigenschap bepaalt u of de aanroeper moet aanroepen <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>methodeaanroepen voor een object waardoor die wanneer deze interface implementeert.</xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A> Dergelijke objecten zijn gebonden aan een specifieke thread en zijn niet thread-safe. Als u een methode vanuit een andere thread aanroept, moet u de <xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>methode voor het marshallen van de aanroep naar de juiste thread.</xref:System.ComponentModel.ISynchronizeInvoke.Invoke%2A>"
  syntax:
    content: public bool InvokeRequired { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de aanroeper moet aanroepen <xref:System.ComponentModel.ISynchronizeInvoke.Invoke*>; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.ComponentModel.ISynchronizeInvoke.Invoke*>"
  overload: System.ComponentModel.ISynchronizeInvoke.InvokeRequired*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: BeginInvoke(Delegate,Object[])
  nameWithType: ISynchronizeInvoke.BeginInvoke(Delegate,Object[])
  fullName: System.ComponentModel.ISynchronizeInvoke.BeginInvoke(Delegate,Object[])
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: EndInvoke(IAsyncResult)
  nameWithType: ISynchronizeInvoke.EndInvoke(IAsyncResult)
  fullName: System.ComponentModel.ISynchronizeInvoke.EndInvoke(IAsyncResult)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: Invoke(Delegate,Object[])
  nameWithType: ISynchronizeInvoke.Invoke(Delegate,Object[])
  fullName: System.ComponentModel.ISynchronizeInvoke.Invoke(Delegate,Object[])
- uid: System.ComponentModel.ISynchronizeInvoke.InvokeRequired
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: InvokeRequired
  nameWithType: ISynchronizeInvoke.InvokeRequired
  fullName: System.ComponentModel.ISynchronizeInvoke.InvokeRequired
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.ISynchronizeInvoke.BeginInvoke*
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: BeginInvoke
  nameWithType: ISynchronizeInvoke.BeginInvoke
- uid: System.ComponentModel.ISynchronizeInvoke.EndInvoke*
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: EndInvoke
  nameWithType: ISynchronizeInvoke.EndInvoke
- uid: System.ComponentModel.ISynchronizeInvoke.Invoke*
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: Invoke
  nameWithType: ISynchronizeInvoke.Invoke
- uid: System.ComponentModel.ISynchronizeInvoke.InvokeRequired*
  parent: System.ComponentModel.ISynchronizeInvoke
  isExternal: false
  name: InvokeRequired
  nameWithType: ISynchronizeInvoke.InvokeRequired
