### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DbDataAdapter
  id: DbDataAdapter
  children:
  - System.Data.Common.DbDataAdapter.#ctor
  - System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  - System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  - System.Data.Common.DbDataAdapter.ClearBatch
  - System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.DefaultSourceTableName
  - System.Data.Common.DbDataAdapter.DeleteCommand
  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DbDataAdapter.ExecuteBatch
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillCommandBehavior
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  - System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  - System.Data.Common.DbDataAdapter.GetFillParameters
  - System.Data.Common.DbDataAdapter.InitializeBatching
  - System.Data.Common.DbDataAdapter.InsertCommand
  - System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  - System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.Common.DbDataAdapter.SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  - System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  - System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  - System.Data.Common.DbDataAdapter.TerminateBatching
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.UpdateBatchSize
  - System.Data.Common.DbDataAdapter.UpdateCommand
  langs:
  - csharp
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
  type: Class
  summary: "Implementatie van helpt de <xref href=&quot;System.Data.IDbDataAdapter&quot;> </xref> interface. Overnemers van dbdataadapter die is een verzameling functies waarmee sterk typen implementeren, maar overnemen van de meeste functionaliteit die nodig zijn voor de volledige implementatie van een **DataAdapter**."
  remarks: "De dbdataadapter die is klasse neemt over van de <xref:System.Data.Common.DataAdapter>klasse en helpt u een klasse implementeert een **DataAdapter** ontworpen voor gebruik met een relationele database.</xref:System.Data.Common.DataAdapter>       Een toepassing maakt een exemplaar van de interface dbdataadapter die is niet rechtstreeks, maar maakt een exemplaar van een klasse die overneemt <xref:System.Data.IDbDataAdapter>en dbdataadapter die is.</xref:System.Data.IDbDataAdapter>       Klassen die overnemen van dbdataadapter die is moeten de overgenomen leden te implementeren en doorgaans extra leden om toe te voegen providerspecifieke definiëren. Bijvoorbeeld de klasse dbdataadapter die is definieert de <xref:System.Data.IDbDataAdapter.SelectCommand%2A>eigenschap en de interface dbdataadapter die is gedefinieerd acht overloads van de <xref:System.Data.IDataAdapter.Fill%2A>methode.</xref:System.Data.IDataAdapter.Fill%2A> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> Op zijn beurt de <xref:System.Data.OleDb.OleDbDataAdapter>klasse neemt over de <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode, en ook definieert twee extra overloads van <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>die een ADO-Recordset-object als parameter nemen.</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: 'public abstract class DbDataAdapter : System.Data.Common.DataAdapter, ICloneable, System.Data.IDbDataAdapter'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DataAdapter
  implements:
  - System.Data.IDbDataAdapter
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initialiseert een nieuw exemplaar van een **DataAdapter** klasse."
  remarks: "Wanneer u een exemplaar van maakt <xref:System.Data.Common.DbDataAdapter>, de volgende eigenschappen voor lezen/schrijven zijn ingesteld op de volgende beginwaarden.</xref:System.Data.Common.DbDataAdapter>      | Eigenschappen | Initiële waarde |   |----------------|-------------------|   | <xref:System.Data.IDbDataAdapter.SelectCommand%2A>| Een nieuwe <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.InsertCommand%2A>| Een nieuwe <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>| Een nieuwe <xref:System.Data.IDbCommand>. |   | <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>| Een nieuwe <xref:System.Data.IDbCommand>. |   | <xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>| `MissingMappingAction.Passthrough`|   | <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>| `MissingSchemaAction.Add`|       U kunt de waarde van een van deze eigenschappen via een afzonderlijke aanroep van de eigenschap wijzigen.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.UpdateCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.DeleteCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.InsertCommand%2A> </xref:System.Data.IDbCommand> </xref:System.Data.IDbDataAdapter.SelectCommand%2A>"
  syntax:
    content: protected DbDataAdapter ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  id: '#ctor(System.Data.Common.DbDataAdapter)'
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initialiseert een nieuw exemplaar van een <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref> klasse vanuit een bestaand object van hetzelfde type."
  remarks: "Deze overbelasting van de <xref:System.Data.Common.DbDataAdapter>constructor is ontworpen voor gebruik door een .NET Framework-gegevensprovider bij het implementeren van een vergelijkbare constructor voor gebruik in een implementatie van de kloon.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected DbDataAdapter (System.Data.Common.DbDataAdapter adapter);
    parameters:
    - id: adapter
      type: System.Data.Common.DbDataAdapter
      description: "Een <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref> object dat wordt gebruikt voor het maken van de nieuwe <xref uid=&quot;langword_csharp_DataAdapter&quot; name=&quot;DataAdapter&quot; href=&quot;&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  id: AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Voegt een <xref href=&quot;System.Data.IDbCommand&quot;> </xref> naar de huidige batch."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>deze methode genereert <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Klassen die van overnemen <xref:System.Data.Common.DbDataAdapter>deze methode om ondersteuning te bieden voor batches overschrijven.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual int AddToBatch (System.Data.IDbCommand command);
    parameters:
    - id: command
      type: System.Data.IDbCommand
      description: "De <xref href=&quot;System.Data.IDbCommand&quot;> </xref> toevoegen aan de batch."
    return:
      type: System.Int32
      description: "Het aantal opdrachten in de batch voordat u de <xref href=&quot;System.Data.IDbCommand&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.AddToBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De adapter biedt geen ondersteuning voor batches."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  id: ClearBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hiermee verwijdert u alle <xref href=&quot;System.Data.IDbCommand&quot;> </xref> objecten uit de batch."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>deze methode genereert <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Klassen die van overnemen <xref:System.Data.Common.DbDataAdapter>deze methode om ondersteuning te bieden voor batches overschrijven.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void ClearBatch ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.ClearBatch*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De adapter biedt geen ondersteuning voor batches."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> klasse."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "De <xref href=&quot;System.Data.DataRow&quot;> </xref> gebruikt voor het bijwerken van de gegevensbron."
    - id: command
      type: System.Data.IDbCommand
      description: "De <xref href=&quot;System.Data.IDbCommand&quot;> </xref> uitgevoerd tijdens de <xref:System.Data.IDataAdapter.Update*>.</xref:System.Data.IDataAdapter.Update*>"
    - id: statementType
      type: System.Data.StatementType
      description: "Of de opdracht een UPDATE is, invoegen, verwijderen of SELECT-instructie."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatedEventArgs
      description: "Een nieuw exemplaar van de <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> klasse."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> klasse."
  syntax:
    content: protected virtual System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "De <xref href=&quot;System.Data.DataRow&quot;> </xref> die de gegevensbron bijwerken."
    - id: command
      type: System.Data.IDbCommand
      description: "De <xref href=&quot;System.Data.IDbCommand&quot;> </xref> uitvoeren tijdens de <xref:System.Data.IDataAdapter.Update*>.</xref:System.Data.IDataAdapter.Update*>"
    - id: statementType
      type: System.Data.StatementType
      description: "Of de opdracht een UPDATE is, invoegen, verwijderen of SELECT-instructie."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "A <xref href=&quot;System.Data.Common.DataTableMapping&quot;></xref> object."
    return:
      type: System.Data.Common.RowUpdatingEventArgs
      description: "Een nieuw exemplaar van de <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> klasse."
  overload: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  id: DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  type: Field
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "De standaardnaam die wordt gebruikt door de <xref href=&quot;System.Data.Common.DataAdapter&quot;> </xref> -object voor Tabeltoewijzingen."
  remarks: "&quot;Tabel&quot; is de standaardnaam die wordt gebruikt door de <xref:System.Data.Common.DataAdapter>-object voor Tabeltoewijzingen.</xref:System.Data.Common.DataAdapter>       DefaultSourceTableName is wanneer een toepassing wordt toegevoegd een tabeltoewijzing moet worden gebruikt met <xref:System.Data.Common.DbDataAdapter.Fill%2A>, maar geeft geen een <xref:System.Data.DataTable>naam.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public const string DefaultSourceTableName;
    return:
      type: System.String
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  id: DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Opgehaald of ingesteld van een opdracht voor het verwijderen van records uit de gegevensset."
  remarks: "Tijdens de <xref:System.Data.Common.DbDataAdapter.Update%2A>, als deze eigenschap niet is ingesteld en gegevens van primaire sleutel is aanwezig in de <xref:System.Data.DataSet>, wordt de <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>wordt automatisch gegenereerd.</xref:System.Data.IDbDataAdapter.DeleteCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_3_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_3_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand DeleteCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Een <xref href=&quot;System.Data.IDbCommand&quot;> </xref> gebruikt tijdens <xref:System.Data.IDataAdapter.Update*>om records in de gegevensbron voor verwijderde rijen in de gegevensset te verwijderen.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Heft de niet-beheerde bronnen worden gebruikt door de <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref> en eventueel de beheerde bronnen vrij."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>voor het vrijgeven van zowel beheerde als onbeheerde hulpbronnen; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> om alleen niet-beheerde bronnen vrij te geven."
  overload: System.Data.Common.DbDataAdapter.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  id: ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "De huidige batch worden uitgevoerd."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>deze methode genereert <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Klassen die van overnemen <xref:System.Data.Common.DbDataAdapter>deze methode om ondersteuning te bieden voor batches overschrijven.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual int ExecuteBatch ();
    parameters: []
    return:
      type: System.Int32
      description: "De geretourneerde waarde van de laatste opdracht in de batch."
  overload: System.Data.Common.DbDataAdapter.ExecuteBatch*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Wordt toegevoegd of vernieuwt rijen in de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "De opvulling-methode haalt de gegevens van de gegevensbron met behulp van een SELECT-instructie. De <xref:System.Data.IDbConnection>object dat is gekoppeld met de opdracht select moet geldig zijn, maar deze hoeft niet te worden geopend.</xref:System.Data.IDbConnection> Als de <xref:System.Data.IDbConnection>is gesloten voordat Fill is aangeroepen, is geopend om gegevens te halen en vervolgens gesloten.</xref:System.Data.IDbConnection> Als de verbinding geopend is voordat opvulling wordt aangeroepen, blijft het geopend.       Als een fout of een uitzondering is opgetreden tijdens het vullen van de gegevenstabellen, blijven de rijen die worden toegevoegd voordat het exemplaar van de fout in de gegevenstabellen. De rest van de bewerking is afgebroken.       Als u een opdracht retourneert geen rijen, er zijn geen tabellen worden toegevoegd aan de <xref:System.Data.DataSet>, en geen uitzondering gegenereerd.</xref:System.Data.DataSet>       Als de <xref:System.Data.Common.DbDataAdapter>object dubbele kolommen tegenkomt tijdens het vullen van een <xref:System.Data.DataTable>, genereert namen voor de volgende kolommen met het patroon &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3 &quot;, enzovoort.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Als de inkomende gegevens naamloze kolommen bevat, worden geplaatst de <xref:System.Data.DataSet>volgens het patroon &quot;Kolom1&quot;, &quot;Kolom2&quot;, enzovoort.</xref:System.Data.DataSet>       Wanneer de query opgegeven meerdere resultaten oplevert, wordt de resultatenset voor elke rij retourneren van de query in een afzonderlijke tabel geplaatst. Als u meer resultatensets worden benoemd met integraal waarden toe te voegen aan de opgegeven tabelnaam (bijvoorbeeld &quot;Tabel&quot;, &quot;Table1&quot;, &quot;Tabel2&quot;, enzovoort). Omdat er is geen tabel is gemaakt voor een query die geen rijen retourneert, als u een insert-query gevolgd door een query verwerken, de tabel die is gemaakt voor de query select met de naam &quot;Tabel&quot; omdat dit de eerste tabel die is gemaakt. Toepassingen met behulp van de kolom- en tabelnamen moeten ervoor zorgen dat veroorzaakt een conflict met deze patronen naming niet uitgevoerd.       Wanneer de SELECT-instructie wordt gebruikt voor het vullen van de <xref:System.Data.DataSet>meerdere resulteert, zoals batch SQL-instructies, als een van de resultaten een fout bevat retourneert alle toekomstige resultaten worden overgeslagen en zijn niet toegevoegd aan de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Wanneer met behulp van verdere vullen aanroepen voor het vernieuwen van de inhoud van de <xref:System.Data.DataSet>, twee voorwaarden is voldaan: 1.</xref:System.Data.DataSet>  De SQL-instructie moet overeenkomen met het abonnement in eerste instantie worden gebruikt voor het vullen van de <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  De **sleutel** kolomgegevens moet aanwezig zijn.       Als primaire-sleutelgegevens aanwezig is, alle dubbele rijen zijn afgestemd en slechts eenmaal voorkomen in de <xref:System.Data.DataTable>die overeenkomt met de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Primaire-sleutelgegevens kan worden ingesteld via <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, door te geven de <xref:System.Data.DataTable.PrimaryKey%2A>eigenschap van de <xref:System.Data.DataTable>, of door de <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>eigenschap `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Als de `SelectCommand` de resultaten van een OUTER JOIN retourneert de `DataAdapter` een <xref:System.Data.DataTable.PrimaryKey%2A>waarde voor de resulterende <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> niet is ingesteld De primaire sleutel in om ervoor te zorgen dat de dubbele rijen op de juiste manier worden omgezet, moet u expliciet definiëren. Zie voor meer informatie [primaire sleutels definiëren](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Bij het verwerken van batch SQL-instructies die de implementatie van meerdere resultaten retourneren <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>voor .NET Framework Data Provider voor OLE DB schema-informatie voor alleen het eerste resultaat opgehaald.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Gebruik voor het ophalen van schema-informatie voor meerdere resultaten opvulling met de <xref:System.Data.MissingSchemaAction>ingesteld op `AddWithKey`.</xref:System.Data.MissingSchemaAction>"
  syntax:
    content: public override int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Een <xref href=&quot;System.Data.DataSet&quot;> </xref> te vullen met records en, indien nodig, schema."
    return:
      type: System.Int32
      description: "Het aantal rijen is toegevoegd aan of vernieuwd in de <xref href=&quot;System.Data.DataSet&quot;> </xref>. Dit omvat geen rijen zijn beïnvloed door de instructies die geen rijen geretourneerd."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  id: Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Wordt toegevoegd of vernieuwt rijen in een opgegeven bereik in de <xref href=&quot;System.Data.DataSet&quot;> </xref> overeenkomen met die in de gegevensbron via de <xref href=&quot;System.Data.DataTable&quot;> </xref> naam."
  remarks: "De <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode rijen opgehaald uit de gegevensbron met behulp van de SELECT-instructie opgegeven door een gekoppeld <xref:System.Data.IDbDataAdapter.SelectCommand%2A>eigenschap.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Het verbindingsobject dat is gekoppeld aan de SELECT-instructie moet geldig zijn, maar deze hoeft niet te worden geopend. Als de verbinding is gesloten voordat <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen, is het geopend om gegevens te halen, wordt gesloten.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Als de verbinding geopend voordat is <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen, blijft het open.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       De <xref:System.Data.Common.DbDataAdapter.Fill%2A>vervolgens de bewerking worden de rijen toegevoegd aan de doelserver <xref:System.Data.DataTable>objecten in de <xref:System.Data.DataSet>, maken de <xref:System.Data.DataTable>objecten als deze niet al bestaan.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Bij het maken van <xref:System.Data.DataTable>objecten, de <xref:System.Data.Common.DbDataAdapter.Fill%2A>bewerking maakt normaal gesproken alleen naam kolommetagegevens.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> Echter, als de <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>eigenschap is ingesteld op `AddWithKey`, beperkingen en de juiste primaire sleutels zijn gemaakt.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Als de <xref:System.Data.Common.DbDataAdapter>tegenkomt dubbele kolommen tijdens het vullen van een <xref:System.Data.DataTable>, genereert namen voor de volgende kolommen in het gebruik van het patroon &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3 &quot;, enzovoort.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Als de inkomende gegevens naamloze kolommen bevat, worden geplaatst de <xref:System.Data.DataSet>volgens het patroon &quot;Kolom1&quot;, &quot;Kolom2&quot;, enzovoort.</xref:System.Data.DataSet> Wanneer meerdere resultatensets worden toegevoegd aan de <xref:System.Data.DataSet>elke resultatenset wordt geplaatst in een afzonderlijke tabel.</xref:System.Data.DataSet>       De overbelasting van <xref:System.Data.Common.DbDataAdapter.Fill%2A>die van het type `DataTable` als een parameter is alleen het eerste resultaat verkrijgt.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Gebruik een overbelasting van <xref:System.Data.Common.DbDataAdapter.Fill%2A>die van het type `DataSet` als een parameter voor meerdere resultaten krijgen.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       De <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode ondersteunt scenario&quot;s waar de <xref:System.Data.DataSet>bevat meerdere <xref:System.Data.DataTable>objecten waarvan de namen alleen per aanvraag verschillen.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In dergelijke gevallen <xref:System.Data.Common.DbDataAdapter.Fill%2A>voor een vergelijking hoofdlettergevoelig om te zoeken in de bijbehorende tabel en maakt u een nieuwe tabel als er geen exacte overeenkomst bestaat.</xref:System.Data.Common.DbDataAdapter.Fill%2A> De volgende C#-code ziet u dit probleem.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);    dataset.Tables.Add(&quot;AAA&quot;);    adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.       adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Als <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen en de <xref:System.Data.DataSet>bevat slechts één <xref:System.Data.DataTable>geval verschilt alleen waarvan de naam die <xref:System.Data.DataTable>is bijgewerkt.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In dit scenario is de vergelijking niet hoofdlettergevoelig. De volgende C#-code ziet u dit probleem.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```U kunt de <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode meerdere keren op de dezelfde <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> gebruiken Als een primaire sleutel bestaat, worden binnenkomende rijen worden samengevoegd met overeenkomende rijen die al bestaan. Als er geen primaire sleutel bevat, zijn binnenkomende rijen toegevoegd aan de <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Als de `SelectCommand` de resultaten van een OUTER JOIN retourneert de `DataAdapter` een <xref:System.Data.DataTable.PrimaryKey%2A>waarde voor de resulterende <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> niet is ingesteld De primaire sleutel in om ervoor te zorgen dat de dubbele rijen op de juiste manier worden omgezet, moet u expliciet definiëren. Zie voor meer informatie [primaire sleutels definiëren](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Bij het verwerken van batch SQL-instructies die de implementatie van meerdere resultaten retourneren <xref:System.Data.Common.DbDataAdapter.Fill%2A>en <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>voor .NET Framework data provider schema-informatie voor alleen het eerste resultaat opgehaald.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public int Fill (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "De naam van de <xref href=&quot;System.Data.DataTable&quot;> </xref> te gebruiken voor het toewijzen van de tabel."
    return:
      type: System.Int32
      description: "Het aantal rijen is toegevoegd aan of vernieuwd in de <xref href=&quot;System.Data.DataSet&quot;> </xref>. Dit omvat geen rijen zijn beïnvloed door de instructies die geen rijen geretourneerd."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De brontabel is ongeldig."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  id: Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Wordt toegevoegd of vernieuwt rijen in de <xref href=&quot;System.Data.DataSet&quot;> </xref> overeenkomen met die in de gegevensbron via de <xref href=&quot;System.Data.DataSet&quot;> </xref> en <xref href=&quot;System.Data.DataTable&quot;> </xref> namen."
  remarks: "De <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode haalt de gegevens uit de gegevensbron met behulp van een SELECT-instructie.</xref:System.Data.Common.DbDataAdapter.Fill%2A> De <xref:System.Data.IDbConnection>object dat is gekoppeld met de opdracht select moet geldig zijn, maar deze hoeft niet te worden geopend.</xref:System.Data.IDbConnection> Als de <xref:System.Data.IDbConnection>is gesloten voordat <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen, het ophalen van gegevens wordt geopend, wordt gesloten.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Als de verbinding geopend voordat is <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen, blijft het open.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Als u een opdracht retourneert geen rijen, er zijn geen tabellen worden toegevoegd aan de <xref:System.Data.DataSet>, en geen uitzondering gegenereerd.</xref:System.Data.DataSet>       Als de <xref:System.Data.Common.DbDataAdapter>object dubbele kolommen tegenkomt tijdens het vullen van een <xref:System.Data.DataTable>, genereert namen voor de volgende kolommen, met behulp van het patroon &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot;, enzovoort.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Als de inkomende gegevens naamloze kolommen bevat, worden geplaatst de <xref:System.Data.DataSet>volgens het patroon &quot;Kolom1&quot;, &quot;Kolom2&quot;, enzovoort.</xref:System.Data.DataSet>       Wanneer de query opgegeven meerdere resultaten oplevert, wordt elke resultatenset geplaatst in een afzonderlijke tabel. Als u meer resultatensets worden benoemd met integraal waarden toe te voegen aan de opgegeven tabelnaam (bijvoorbeeld &quot;Tabel&quot;, &quot;Table1&quot;, &quot;Tabel2&quot;, enzovoort). Omdat er is geen tabel is gemaakt voor een query die geen rijen retourneert, als u een insert-query gevolgd door een query verwerken, de tabel die is gemaakt voor de query select naam &quot;Tabel&quot;, omdat dit de eerste tabel die is gemaakt. Toepassingen met behulp van de kolom- en tabelnamen moeten ervoor zorgen dat veroorzaakt een conflict met deze patronen naming niet uitgevoerd.       De <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode ondersteunt scenario&quot;s waar de <xref:System.Data.DataSet>bevat meerdere <xref:System.Data.DataTable>objecten waarvan de namen alleen per aanvraag verschillen.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In dergelijke gevallen <xref:System.Data.Common.DbDataAdapter.Fill%2A>voor een vergelijking hoofdlettergevoelig om te zoeken in de bijbehorende tabel en maakt u een nieuwe tabel als er geen exacte overeenkomst bestaat.</xref:System.Data.Common.DbDataAdapter.Fill%2A> De volgende C#-code ziet u dit probleem.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Als <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen en de <xref:System.Data.DataSet>bevat slechts één <xref:System.Data.DataTable>geval verschilt alleen waarvan de naam die <xref:System.Data.DataTable>is bijgewerkt.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In dit scenario is de vergelijking niet hoofdlettergevoelig. De volgende C#-code ziet u dit probleem.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Als een fout of een uitzondering is opgetreden tijdens het vullen van de gegevenstabellen, blijven de rijen die worden toegevoegd voordat het exemplaar van de fout in de gegevenstabellen. De rest van de bewerking is afgebroken.       Wanneer de SELECT-instructie wordt gebruikt voor het vullen van de <xref:System.Data.DataSet>retourneert verschillende resultaten, zoals een batch SQL-instructie op de hoogte van de volgende zijn:-als een van de resultaten een fout bevat, alle toekomstige resultaten worden overgeslagen en is niet toegevoegd aan de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       Wanneer u daaropvolgende <xref:System.Data.Common.DbDataAdapter.Fill%2A>aanroepen voor het vernieuwen van de inhoud van de <xref:System.Data.DataSet>, twee voorwaarden is voldaan: 1.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>  De SQL-instructie moet overeenkomen met het abonnement in eerste instantie worden gebruikt voor het vullen van de <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  De **sleutel** kolomgegevens moet aanwezig zijn. Als primaire-sleutelgegevens aanwezig is, alle dubbele rijen zijn afgestemd en slechts eenmaal voorkomen in de <xref:System.Data.DataTable>die overeenkomt met de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Primaire-sleutelgegevens kan worden ingesteld via <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, door te geven de <xref:System.Data.DataTable.PrimaryKey%2A>eigenschap van de <xref:System.Data.DataTable>, of door de <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>eigenschap `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Als de `SelectCommand` de resultaten van een OUTER JOIN retourneert de `DataAdapter` een <xref:System.Data.DataTable.PrimaryKey%2A>waarde voor de resulterende <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> niet is ingesteld De primaire sleutel in om ervoor te zorgen dat de dubbele rijen op de juiste manier worden omgezet, moet u expliciet definiëren. Zie voor meer informatie[primaire sleutels definiëren](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Bij het verwerken van batch SQL-instructies die de implementatie van meerdere resultaten retourneren <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>voor .NET Framework Data Provider voor OLE DB schema-informatie voor alleen het eerste resultaat opgehaald.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Gebruik voor het ophalen van schema-informatie voor de resultaten van meerdere <xref:System.Data.Common.DbDataAdapter.Fill%2A>met de <xref:System.Data.MissingSchemaAction>ingesteld op `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with rows from the categories table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_3_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_3_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Een <xref href=&quot;System.Data.DataSet&quot;> </xref> te vullen met records en, indien nodig, schema."
    - id: srcTable
      type: System.String
      description: "De naam van de brontabel moet worden gebruikt voor het toewijzen van de tabel."
    return:
      type: System.Int32
      description: "Het aantal rijen is toegevoegd aan of vernieuwd in de <xref href=&quot;System.Data.DataSet&quot;> </xref>. Dit omvat geen rijen zijn beïnvloed door de instructies die geen rijen geretourneerd."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "De brontabel is ongeldig."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Wordt toegevoegd of vernieuwt rijen in een <xref href=&quot;System.Data.DataTable&quot;> </xref> overeenkomen met die in de gegevensbron met behulp van de opgegeven <xref href=&quot;System.Data.DataTable&quot;> </xref>, <xref href=&quot;System.Data.IDbCommand&quot;> </xref> en <xref href=&quot;System.Data.CommandBehavior&quot;> </xref>."
  remarks: "De <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode rijen opgehaald uit de gegevensbron met behulp van de SELECT-instructie opgegeven door een gekoppeld <xref:System.Data.IDbDataAdapter.SelectCommand%2A>eigenschap.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Het verbindingsobject dat is gekoppeld aan de SELECT-instructie moet geldig zijn, maar deze hoeft niet te worden geopend. Als de verbinding is gesloten voordat <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen, wordt het geopend om gegevens te halen en vervolgens gesloten.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Als de verbinding geopend voordat is <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen, blijft het open.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       De <xref:System.Data.Common.DbDataAdapter.Fill%2A>vervolgens de bewerking worden de rijen toegevoegd aan de opgegeven bestemming <xref:System.Data.DataTable>object in de <xref:System.Data.DataSet>, maken de <xref:System.Data.DataTable>object als deze niet al bestaat.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Bij het maken van een <xref:System.Data.DataTable>object, de <xref:System.Data.Common.DbDataAdapter.Fill%2A>bewerking maakt normaal gesproken alleen naam kolommetagegevens.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> Echter, als de <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>eigenschap is ingesteld op `AddWithKey`, beperkingen en de juiste primaire sleutels zijn gemaakt.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Als de <xref:System.Data.Common.DbDataAdapter>object dubbele kolommen tegenkomt tijdens het vullen van een <xref:System.Data.DataTable>, genereert namen voor de volgende kolommen in het gebruik van het patroon &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3 &quot;, enzovoort.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Als de inkomende gegevens naamloze kolommen bevat, worden geplaatst de <xref:System.Data.DataSet>volgens het patroon &quot;Kolom1&quot;, &quot;Kolom2&quot;, enzovoort.</xref:System.Data.DataSet>       De overbelasting van <xref:System.Data.Common.DbDataAdapter.Fill%2A>die van het type `DataTable` als een parameter is alleen het eerste resultaat verkrijgt.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Gebruik een overbelasting van <xref:System.Data.Common.DbDataAdapter.Fill%2A>die van het type `DataSet` als een parameter voor meerdere resultaten krijgen.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       U kunt de <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode meerdere keren op de dezelfde <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> gebruiken Als een primaire sleutel bestaat, worden binnenkomende rijen worden samengevoegd met overeenkomende rijen die al bestaan. Als er geen primaire sleutel bevat, zijn binnenkomende rijen toegevoegd aan de <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Als de `SelectCommand` de resultaten van een OUTER JOIN retourneert de `DataAdapter` een <xref:System.Data.DataTable.PrimaryKey%2A>waarde voor de resulterende <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> niet is ingesteld De primaire sleutel in om ervoor te zorgen dat de dubbele rijen op de juiste manier worden omgezet, moet u expliciet definiëren. Zie voor meer informatie [primaire sleutels definiëren](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Bij het verwerken van batch SQL-instructies die de implementatie van meerdere resultaten retourneren <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>voor .NET Framework Data Provider voor OLE DB schema-informatie voor alleen het eerste resultaat opgehaald.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Gebruik voor het ophalen van schema-informatie voor de resultaten van meerdere <xref:System.Data.Common.DbDataAdapter.Fill%2A>met de <xref:System.Data.MissingSchemaAction>ingesteld op `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: protected virtual int Fill (System.Data.DataTable dataTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "Een <xref href=&quot;System.Data.DataTable&quot;> </xref> te vullen met records en, indien nodig, schema."
    - id: command
      type: System.Data.IDbCommand
      description: "De SELECT-instructie gebruikt voor het ophalen van rijen uit de gegevensbron."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Een van de <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> waarden."
    return:
      type: System.Int32
      description: "Het aantal rijen is toegevoegd aan of vernieuwd in de <xref href=&quot;System.Data.DataTable&quot;> </xref>. Dit omvat geen rijen zijn beïnvloed door de instructies die geen rijen geretourneerd."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  id: Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Wordt toegevoegd of vernieuwt rijen in een <xref href=&quot;System.Data.DataTable&quot;> </xref> naar overeen met die in de gegevensbron vanaf de opgegeven record en op te halen tot maximaal de opgegeven maximale aantal records."
  remarks: "De <xref:System.Data.Common.DataAdapter.Fill%2A>methode rijen opgehaald uit de gegevensbron met behulp van de SELECT-instructie opgegeven door een gekoppeld <xref:System.Data.IDbDataAdapter.SelectCommand%2A>eigenschap.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DataAdapter.Fill%2A> Het verbindingsobject dat is gekoppeld aan de SELECT-instructie moet geldig zijn, maar deze hoeft niet te worden geopend. Als de verbinding is gesloten voordat <xref:System.Data.Common.DataAdapter.Fill%2A>is aangeroepen, deze wordt geopend om gegevens te halen en vervolgens wordt gesloten.</xref:System.Data.Common.DataAdapter.Fill%2A> Als de verbinding geopend voordat is <xref:System.Data.Common.DataAdapter.Fill%2A>is aangeroepen, blijft het open.</xref:System.Data.Common.DataAdapter.Fill%2A>       De <xref:System.Data.Common.DataAdapter.Fill%2A>vervolgens de bewerking worden de rijen toegevoegd aan de doelserver <xref:System.Data.DataTable>objecten in de <xref:System.Data.DataSet>, maken de <xref:System.Data.DataTable>objecten als deze niet al bestaan.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DataAdapter.Fill%2A> Bij het maken van <xref:System.Data.DataTable>objecten, de <xref:System.Data.Common.DataAdapter.Fill%2A>bewerking maakt normaal gesproken alleen naam kolommetagegevens.</xref:System.Data.Common.DataAdapter.Fill%2A> </xref:System.Data.DataTable> Echter, als de <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>eigenschap is ingesteld op `AddWithKey`, beperkingen en de juiste primaire sleutels zijn gemaakt.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Als de `SelectCommand` de resultaten van een OUTER JOIN retourneert de `DataAdapter` een <xref:System.Data.DataTable.PrimaryKey%2A>waarde voor de resulterende <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> niet is ingesteld De primaire sleutel in om ervoor te zorgen dat de dubbele rijen op de juiste manier worden omgezet, moet u expliciet definiëren. Zie voor meer informatie [primaire sleutels definiëren](~/add/includes/ajax-current-ext-md.md).       Als er dubbele kolommen in de gegevensadapter tijdens het vullen van optreedt een <xref:System.Data.DataTable>, genereert namen voor de volgende kolommen, met behulp van het patroon &quot;columnname1&quot;, &quot;columnname2&quot;, &quot;columnname3&quot;, enzovoort.</xref:System.Data.DataTable> Als de inkomende gegevens naamloze kolommen bevat, worden geplaatst de <xref:System.Data.DataSet>volgens het patroon &quot;Kolom1&quot;, &quot;Kolom2&quot;, enzovoort.</xref:System.Data.DataSet> Wanneer meerdere resultatensets worden toegevoegd aan de <xref:System.Data.DataSet>, elke resultatenset wordt geplaatst in een afzonderlijke tabel.</xref:System.Data.DataSet> Als u meer resultatensets worden benoemd met integraal waarden toe te voegen aan de opgegeven tabelnaam (bijvoorbeeld &quot;Tabel&quot;, &quot;Table1&quot;, &quot;Tabel2&quot;, enzovoort). Toepassingen met behulp van de kolom- en tabelnamen moeten ervoor zorgen dat veroorzaakt een conflict met deze patronen naming niet uitgevoerd.       Wanneer de SELECT-instructie gebruikt voor het vullen van de <xref:System.Data.DataSet>retourneert verschillende resultaten, zoals een batch-SQL-instructies, als een van de resultaten een fout bevat alle toekomstige resultaten worden overgeslagen en niet toegevoegd aan de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataSet>       U kunt de <xref:System.Data.Common.DataAdapter.Fill%2A>methode meerdere keren op de dezelfde <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DataAdapter.Fill%2A> gebruiken Als een primaire sleutel bestaat, worden binnenkomende rijen worden samengevoegd met overeenkomende rijen die al bestaan. Als er geen primaire sleutel bevat, zijn binnenkomende rijen toegevoegd aan de <xref:System.Data.DataTable>.</xref:System.Data.DataTable>      > [!NOTE] > Bij het verwerken van batch SQL-instructies die de implementatie van meerdere resultaten retourneren <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>voor .NET Framework Data Provider voor OLE DB schema-informatie voor alleen het eerste resultaat opgehaald.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Gebruik voor het ophalen van schema-informatie voor de resultaten van meerdere <xref:System.Data.Common.DbDataAdapter.Fill%2A>met de <xref:System.Data.MissingSchemaAction>ingesteld op `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: public int Fill (int startRecord, int maxRecords, System.Data.DataTable[] dataTables);
    parameters:
    - id: startRecord
      type: System.Int32
      description: "De op nul gebaseerde record getal en beginnen met."
    - id: maxRecords
      type: System.Int32
      description: "Het maximum aantal records moeten worden opgehaald."
    - id: dataTables
      type: System.Data.DataTable[]
      description: "De <xref href=&quot;System.Data.DataTable&quot;> </xref> objecten voor het vervullen van de gegevensbron."
    return:
      type: System.Int32
      description: "Het aantal rijen is toegevoegd aan of vernieuwd in de <xref href=&quot;System.Data.DataTable&quot;> </xref>. Deze waarde bevat geen rijen zijn beïnvloed door de instructies die geen rijen geretourneerd."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Wordt toegevoegd of vernieuwt rijen in een opgegeven bereik in de <xref href=&quot;System.Data.DataSet&quot;> </xref> naar overeen met die in de gegevensbron via de <xref href=&quot;System.Data.DataSet&quot;> </xref> en <xref href=&quot;System.Data.DataTable&quot;> </xref> namen."
  remarks: "Een `maxRecords` waarde van 0 alle records gevonden na de startrecord opgehaald. Als `maxRecords` is groter dan het aantal resterende rijen alleen de overige rijen worden geretourneerd en er geen fout wordt uitgegeven.       Als de bijbehorende select-opdracht is een instructie meerdere resultaten retourneren <xref:System.Data.Common.DbDataAdapter.Fill%2A>is alleen van toepassing `maxRecords` naar het eerste resultaat.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       De <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode haalt de gegevens uit de gegevensbron met behulp van een SELECT-instructie.</xref:System.Data.Common.DbDataAdapter.Fill%2A> De <xref:System.Data.IDbConnection>object gekoppeld aan de SELECT-instructie moet geldig zijn, maar deze hoeft niet te worden geopend.</xref:System.Data.IDbConnection> Als de <xref:System.Data.IDbConnection>is gesloten voordat <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen, wordt het geopend om gegevens te halen en vervolgens gesloten.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Als de verbinding geopend voordat is <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen, blijft het open.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Als u een opdracht retourneert geen rijen, er zijn geen tabellen worden toegevoegd aan de <xref:System.Data.DataSet>, maar geen uitzondering gegenereerd.</xref:System.Data.DataSet>       Als de <xref:System.Data.Common.DbDataAdapter>object dubbele kolommen tegenkomt tijdens het vullen van een <xref:System.Data.DataTable>, genereert namen voor de volgende kolommen in het gebruik van het patroon &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3 &quot;, enzovoort.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Als de inkomende gegevens naamloze kolommen bevat, worden geplaatst de <xref:System.Data.DataSet>volgens het patroon &quot;Kolom1&quot;, &quot;Kolom2&quot;, enzovoort.</xref:System.Data.DataSet>       Wanneer de query opgegeven meerdere resultaten oplevert, wordt elke resultatenset geplaatst in een afzonderlijke tabel. Als u meer resultatensets worden benoemd met integraal waarden toe te voegen aan de opgegeven tabelnaam (bijvoorbeeld &quot;Tabel&quot;, &quot;Table1&quot;, &quot;Tabel2&quot;, enzovoort). Omdat er is geen tabel is gemaakt voor een query die geen rijen retourneert, als u een insert-query gevolgd door een query verwerken, de tabel die is gemaakt voor de query select met de naam &quot;Tabel&quot;, omdat dit de eerste tabel die is gemaakt. Toepassingen met behulp van de kolom- en tabelnamen moeten ervoor zorgen dat veroorzaakt een conflict met deze patronen naming niet uitgevoerd.       De <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode ondersteunt scenario&quot;s waar de <xref:System.Data.DataSet>bevat meerdere <xref:System.Data.DataTable>objecten waarvan de namen alleen per aanvraag verschillen.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In dergelijke gevallen <xref:System.Data.Common.DbDataAdapter.Fill%2A>voor een vergelijking hoofdlettergevoelig om te zoeken in de bijbehorende tabel en maakt u een nieuwe tabel als er geen exacte overeenkomst bestaat.</xref:System.Data.Common.DbDataAdapter.Fill%2A> De volgende C#-code ziet u dit probleem.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Als <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen en de <xref:System.Data.DataSet>bevat slechts één <xref:System.Data.DataTable>geval verschilt alleen waarvan de naam die <xref:System.Data.DataTable>is bijgewerkt.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In dit scenario is de vergelijking niet hoofdlettergevoelig. De volgende C#-code ziet u dit probleem.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Als een fout of een uitzondering is opgetreden tijdens het vullen van de gegevenstabellen, blijven de rijen die worden toegevoegd voordat het exemplaar van de fout in de gegevenstabellen. De rest van de bewerking is afgebroken.       Wanneer de SELECT-instructie wordt gebruikt voor het vullen van de <xref:System.Data.DataSet>retourneert meerdere, zoals batch SQL-instructies resulteert, worden op de hoogte van de volgende opties: - bij de verwerking van meerdere resultaten van de SQL-instructie van een batch `maxRecords` alleen van toepassing op het eerste resultaat.</xref:System.Data.DataSet> Hetzelfde geldt voor rijen met hoofdstuk resultaten (.NET Framework Data Provider voor OLE DB alleen). Het resultaat van het hoogste niveau wordt beperkt door `maxRecords`, maar alle onderliggende rijen worden toegevoegd.      -Als een van de resultaten een fout bevat, worden alle toekomstige resultaten overgeslagen en is niet toegevoegd aan de <xref:System.Data.DataSet>.</xref:System.Data.DataSet>       Wanneer u daaropvolgende <xref:System.Data.Common.DbDataAdapter.Fill%2A>aanroepen voor het vernieuwen van de inhoud van de <xref:System.Data.DataSet>, twee voorwaarden is voldaan: 1.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>  De SQL-instructie moet overeenkomen met het abonnement in eerste instantie worden gebruikt voor het vullen van de <xref:System.Data.DataSet>.</xref:System.Data.DataSet>      2.  De **sleutel** kolomgegevens moet aanwezig zijn.       Als de primaire-sleutelgegevens aanwezig is, wordt alle dubbele rijen afgestemd en slechts eenmaal voorkomen in de <xref:System.Data.DataTable>die overeenkomt met de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> Primaire-sleutelgegevens kan worden ingesteld via <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, door te geven de <xref:System.Data.DataTable.PrimaryKey%2A>eigenschap van de <xref:System.Data.DataTable>, of door de <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>eigenschap `AddWithKey`.</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Als de `SelectCommand` de resultaten van een OUTER JOIN retourneert de `DataAdapter` een <xref:System.Data.DataTable.PrimaryKey%2A>waarde voor de resulterende <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> niet is ingesteld De primaire sleutel in om ervoor te zorgen dat de dubbele rijen op de juiste manier worden omgezet, moet u expliciet definiëren. Zie voor meer informatie [primaire sleutels definiëren](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Bij het verwerken van batch SQL-instructies die de implementatie van meerdere resultaten retourneren <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>voor .NET Framework Data Provider voor OLE DB schema-informatie voor alleen het eerste resultaat opgehaald.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Gebruik voor het ophalen van schema-informatie voor de resultaten van meerdere <xref:System.Data.Common.DbDataAdapter.Fill%2A>met de <xref:System.Data.MissingSchemaAction>ingesteld op `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > De `DataSet` wordt niet meer dan het aantal records dat wordt aangeduid door bevatten `maxRecords`. De volledige resultatenset gegenereerd door de query wordt echter nog steeds geretourneerd vanaf de server."
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to fill a <xref:System.Data.DataSet> with 15 rows, beginning at row 10, from the **Categories** table. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/visualbasic/db016a7d-8591-46f9-abcc-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Fill3 Example#1](~/add/codesnippet/csharp/db016a7d-8591-46f9-abcc-_1.cs)]"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Een <xref href=&quot;System.Data.DataSet&quot;> </xref> te vullen met records en, indien nodig, schema."
    - id: startRecord
      type: System.Int32
      description: "De op nul gebaseerde record getal en beginnen met."
    - id: maxRecords
      type: System.Int32
      description: "Het maximum aantal records moeten worden opgehaald."
    - id: srcTable
      type: System.String
      description: "De naam van de brontabel moet worden gebruikt voor het toewijzen van de tabel."
    return:
      type: System.Int32
      description: "Het aantal rijen is toegevoegd aan of vernieuwd in de <xref href=&quot;System.Data.DataSet&quot;> </xref>. Dit omvat geen rijen zijn beïnvloed door de instructies die geen rijen geretourneerd."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "De <xref href=&quot;System.Data.DataSet&quot;> </xref> is ongeldig."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De brontabel is ongeldig.       - of - de verbinding is ongeldig."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "De verbinding kan niet worden gevonden."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <code> startRecord </code> parameter kleiner is dan 0.       - of - de <code> maxRecords </code> parameter kleiner is dan 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Wordt toegevoegd of vernieuwt rijen in een opgegeven bereik in de <xref href=&quot;System.Data.DataSet&quot;> </xref> naar overeen met die in de gegevensbron via de <xref href=&quot;System.Data.DataSet&quot;> </xref> en <xref href=&quot;System.Data.DataTable&quot;> </xref> namen."
  remarks: "Een `maxRecords` waarde van 0 alle records gevonden na de startrecord opgehaald. Als `maxRecords` is groter dan het aantal resterende rijen alleen de overige rijen worden geretourneerd en wordt er geen fout.       De opvulling-methode haalt de gegevens van de gegevensbron met behulp van een SELECT-instructie. De <xref:System.Data.IDbConnection>object gekoppeld aan de SELECT-instructie moet geldig zijn, maar deze hoeft niet te worden geopend.</xref:System.Data.IDbConnection> Als de <xref:System.Data.IDbConnection>is gesloten voordat <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen, het ophalen van gegevens wordt geopend, wordt gesloten.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.IDbConnection> Als de verbinding geopend voordat is <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen, blijft het open.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Als u een opdracht retourneert geen rijen, er zijn geen tabellen worden toegevoegd aan de <xref:System.Data.DataSet>, maar geen uitzondering gegenereerd.</xref:System.Data.DataSet>       Als de <xref:System.Data.Common.DbDataAdapter>object dubbele kolommen tegenkomt tijdens het vullen van een <xref:System.Data.DataTable>, genereert namen voor de volgende kolommen in het gebruik van het patroon &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3 &quot;, enzovoort.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Als de inkomende gegevens naamloze kolommen bevat, worden geplaatst de <xref:System.Data.DataSet>volgens het patroon &quot;Kolom1&quot;, &quot;Kolom2&quot;, enzovoort.</xref:System.Data.DataSet>       Wanneer de query opgegeven meerdere resultaten oplevert, wordt elke resultatenset geplaatst in een afzonderlijke tabel. Als u meer resultatensets worden benoemd met integraal waarden toe te voegen aan de opgegeven tabelnaam (bijvoorbeeld &quot;Tabel&quot;, &quot;Table1&quot;, &quot;Tabel2&quot;, enzovoort). Omdat er is geen tabel is gemaakt voor een query die geen rijen retourneert, als u een insert-query gevolgd door een query verwerken, de tabel die is gemaakt voor de query select naam &quot;Tabel&quot;, omdat dit de eerste tabel die is gemaakt. Toepassingen met behulp van de kolom- en tabelnamen moeten ervoor zorgen dat veroorzaakt een conflict met deze patronen naming niet uitgevoerd.       De methode vulling ondersteunt scenario&quot;s waar de <xref:System.Data.DataSet>bevat meerdere <xref:System.Data.DataTable>objecten waarvan de namen alleen per aanvraag verschillen.</xref:System.Data.DataTable> </xref:System.Data.DataSet> In dergelijke gevallen <xref:System.Data.Common.DbDataAdapter.Fill%2A>voor een vergelijking hoofdlettergevoelig om te zoeken in de bijbehorende tabel en maakt u een nieuwe tabel als er geen exacte overeenkomst bestaat.</xref:System.Data.Common.DbDataAdapter.Fill%2A> De volgende C#-code ziet u dit probleem.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Als <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen en de <xref:System.Data.DataSet>bevat slechts één <xref:System.Data.DataTable>geval verschilt alleen waarvan de naam die <xref:System.Data.DataTable>is bijgewerkt.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In dit scenario is de vergelijking niet hoofdlettergevoelig. De volgende C#-code ziet u dit probleem.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```Als een fout of een uitzondering is opgetreden tijdens het vullen van de gegevenstabellen, blijven de rijen die worden toegevoegd voordat het exemplaar van de fout in de gegevenstabellen. De rest van de bewerking is afgebroken.       Wanneer de SELECT-instructie wordt gebruikt voor het vullen van de <xref:System.Data.DataTable>objecten retourneert verschillende resultaten, zoals een batch SQL-instructie op de hoogte van de volgende zijn: - bij de verwerking van meerdere resultaten van de SQL-instructie van een batch `maxRecords` alleen van toepassing op het eerste resultaat.</xref:System.Data.DataTable> Hetzelfde geldt voor rijen met hoofdstuk resultaten (.NET Framework Data Provider voor OLE DB alleen). Het resultaat van het hoogste niveau wordt beperkt door `maxRecords`, maar alle onderliggende rijen worden toegevoegd.      -Als een van de resultaten een fout bevat, worden alle toekomstige resultaten overgeslagen.      > [!NOTE] > De `DataSet` wordt niet meer dan het aantal records dat wordt aangeduid door bevatten `maxRecords`. De gehele resultatenset gegenereerd door de query is echter nog steeds geretourneerd vanaf de server."
  syntax:
    content: protected virtual int Fill (System.Data.DataTable[] dataTables, int startRecord, int maxRecords, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTables
      type: System.Data.DataTable[]
      description: "De <xref href=&quot;System.Data.DataTable&quot;> </xref> objecten voor het vervullen van de gegevensbron."
    - id: startRecord
      type: System.Int32
      description: "De op nul gebaseerde record getal en beginnen met."
    - id: maxRecords
      type: System.Int32
      description: "Het maximum aantal records moeten worden opgehaald."
    - id: command
      type: System.Data.IDbCommand
      description: "De <xref href=&quot;System.Data.IDbCommand&quot;> </xref> uitgevoerd zodat deze de <xref href=&quot;System.Data.DataTable&quot;> </xref> objecten."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Een van de <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> waarden."
    return:
      type: System.Int32
      description: "Het aantal rijen toegevoegd aan of vernieuwd in de gegevenstabellen."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "De <xref href=&quot;System.Data.DataSet&quot;> </xref> is ongeldig."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De brontabel is ongeldig.       - of - de verbinding is ongeldig."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "De verbinding kan niet worden gevonden."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <code> startRecord </code> parameter kleiner is dan 0.       - of - de <code> maxRecords </code> parameter kleiner is dan 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Wordt toegevoegd of vernieuwt rijen in een opgegeven bereik in de <xref href=&quot;System.Data.DataSet&quot;> </xref> overeenkomen met die in de gegevensbron via de <xref href=&quot;System.Data.DataSet&quot;> </xref> en de brontabel tabelnamen opdrachtreeks en opdrachtgedrag."
  remarks: "De <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode rijen opgehaald uit de gegevensbron met behulp van de SELECT-instructie opgegeven door een gekoppeld <xref:System.Data.IDbDataAdapter.SelectCommand%2A>eigenschap.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Het verbindingsobject dat is gekoppeld aan de SELECT-instructie moet geldig zijn, maar deze hoeft niet te worden geopend. Als de verbinding is gesloten voordat <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen, is het geopend om gegevens te halen, wordt gesloten.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Als de verbinding geopend voordat is <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen, blijft het open.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       De <xref:System.Data.Common.DbDataAdapter.Fill%2A>vervolgens de bewerking worden de rijen toegevoegd aan de doelserver <xref:System.Data.DataTable>objecten in de <xref:System.Data.DataSet>, maken de <xref:System.Data.DataTable>objecten als deze niet al bestaan.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> Bij het maken van <xref:System.Data.DataTable>objecten, de <xref:System.Data.Common.DbDataAdapter.Fill%2A>bewerking maakt normaal gesproken alleen naam kolommetagegevens.</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.DataTable> Echter, als de <xref:System.Data.IDataAdapter.MissingSchemaAction%2A>eigenschap is ingesteld op `AddWithKey`, beperkingen en de juiste primaire sleutels zijn gemaakt.</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       Als de <xref:System.Data.Common.DbDataAdapter>tegenkomt dubbele kolommen tijdens het vullen van een <xref:System.Data.DataTable>, genereert namen voor de volgende kolommen in het gebruik van het patroon &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3 &quot;, enzovoort.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Als de inkomende gegevens naamloze kolommen bevat, worden geplaatst de <xref:System.Data.DataSet>volgens het patroon &quot;Kolom1&quot;, &quot;Kolom2&quot;, enzovoort.</xref:System.Data.DataSet> Wanneer meerdere resultatensets worden toegevoegd aan de <xref:System.Data.DataSet>elke resultatenset wordt geplaatst in een afzonderlijke tabel.</xref:System.Data.DataSet> Als u meer resultatensets worden benoemd met integraal waarden toe te voegen aan de opgegeven tabelnaam (bijvoorbeeld &quot;Tabel&quot;, &quot;Table1&quot;, &quot;Tabel2&quot;, enzovoort). Toepassingen met behulp van de kolom- en tabelnamen moeten ervoor zorgen dat veroorzaakt een conflict met deze patronen naming niet uitgevoerd.       De <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode ondersteunt scenario&quot;s waar de <xref:System.Data.DataSet>bevat meerdere <xref:System.Data.DataTable>objecten waarvan de namen alleen per aanvraag verschillen.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In dergelijke gevallen <xref:System.Data.Common.DbDataAdapter.Fill%2A>voor een vergelijking hoofdlettergevoelig om te zoeken in de bijbehorende tabel en maakt u een nieuwe tabel als er geen exacte overeenkomst bestaat.</xref:System.Data.Common.DbDataAdapter.Fill%2A> De volgende C#-code ziet u dit probleem.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.Fill(dataset, &quot;aaa&quot;); // Fills &quot;aaa&quot;, which already exists in the DataSet.   adapter.Fill(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Als <xref:System.Data.Common.DbDataAdapter.Fill%2A>is aangeroepen en de <xref:System.Data.DataSet>bevat slechts één <xref:System.Data.DataTable>geval verschilt alleen waarvan de naam die <xref:System.Data.DataTable>is bijgewerkt.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> In dit scenario is de vergelijking niet hoofdlettergevoelig. De volgende C#-code ziet u dit probleem.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.Fill(dataset, &quot;AAA&quot;); // Fills table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```U kunt de <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode meerdere keren op de dezelfde <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A> gebruiken Als een primaire sleutel bestaat, worden binnenkomende rijen worden samengevoegd met overeenkomende rijen die al bestaan. Als er geen primaire sleutel bevat, zijn binnenkomende rijen toegevoegd aan de <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Als de `SelectCommand` de resultaten van een OUTER JOIN retourneert de `DataAdapter` een <xref:System.Data.DataTable.PrimaryKey%2A>waarde voor de resulterende <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> niet is ingesteld De primaire sleutel in om ervoor te zorgen dat de dubbele rijen op de juiste manier worden omgezet, moet u expliciet definiëren. Zie voor meer informatie[primaire sleutels definiëren](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Bij het verwerken van batch SQL-instructies die de implementatie van meerdere resultaten retourneren <xref:System.Data.Common.DbDataAdapter.Fill%2A>en <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>voor .NET Framework data provider schema-informatie voor alleen het eerste resultaat opgehaald.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A>"
  syntax:
    content: protected virtual int Fill (System.Data.DataSet dataSet, int startRecord, int maxRecords, string srcTable, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Een <xref href=&quot;System.Data.DataSet&quot;> </xref> te vullen met records en, indien nodig, schema."
    - id: startRecord
      type: System.Int32
      description: "De op nul gebaseerde record getal en beginnen met."
    - id: maxRecords
      type: System.Int32
      description: "Het maximum aantal records moeten worden opgehaald."
    - id: srcTable
      type: System.String
      description: "De naam van de brontabel moet worden gebruikt voor het toewijzen van de tabel."
    - id: command
      type: System.Data.IDbCommand
      description: "De SELECT-instructie gebruikt voor het ophalen van rijen uit de gegevensbron."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Een van de <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> waarden."
    return:
      type: System.Int32
      description: "Het aantal rijen is toegevoegd aan of vernieuwd in de <xref href=&quot;System.Data.DataSet&quot;> </xref>. Dit omvat geen rijen zijn beïnvloed door de instructies die geen rijen geretourneerd."
  overload: System.Data.Common.DbDataAdapter.Fill*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De brontabel is ongeldig."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <code> startRecord </code> parameter kleiner is dan 0.       - of - de <code> maxRecords </code> parameter kleiner is dan 0."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  id: FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Opgehaald of ingesteld van het gedrag van de opdracht die wordt gebruikt voor de adapter van gegevens."
  syntax:
    content: protected System.Data.CommandBehavior FillCommandBehavior { get; set; }
    return:
      type: System.Data.CommandBehavior
      description: "De <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> van de opdracht die wordt gebruikt voor de adapter van gegevens."
  overload: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Voegt een <xref href=&quot;System.Data.DataTable&quot;> </xref> &quot;Tabel&quot; aan de opgegeven naam <xref href=&quot;System.Data.DataSet&quot;> </xref> en configureert u het schema moet worden gezocht die in de gegevensbron op basis van de opgegeven <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "Deze methode haalt de schema-informatie van de gegevensbron met behulp van de <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>       Een <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>bewerking wordt toegevoegd een <xref:System.Data.DataTable>naar de bestemming <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Vervolgens voegt het toe in kolommen die u wilt de <xref:System.Data.DataColumnCollection>van de <xref:System.Data.DataTable>, en configureert u de volgende <xref:System.Data.DataColumn>Eigenschappen als deze bestaan in de gegevensbron:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> U moet instellen <xref:System.Data.DataColumn.AutoIncrementStep%2A>en <xref:System.Data.DataColumn.AutoIncrementSeed%2A>afzonderlijk.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>configureert ook de <xref:System.Data.DataTable.PrimaryKey%2A>en <xref:System.Data.DataTable.Constraints%2A>Eigenschappen volgens de volgende regels: - als een of meer primaire-sleutelkolommen worden geretourneerd door het <xref:System.Data.IDbDataAdapter.SelectCommand%2A>die worden gebruikt als de primaire-sleutelkolommen voor de <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Als er geen primaire-sleutelkolommen worden geretourneerd, maar uniek kolommen zijn, worden de unieke kolommen als de primaire sleutel gebruikt als en alleen als de unieke kolommen die geen nul mag zijn. Als een van de kolommen waarvoor null is toegestaan, een <xref:System.Data.UniqueConstraint>is toegevoegd aan de <xref:System.Data.ConstraintCollection>, maar de <xref:System.Data.DataTable.PrimaryKey%2A>eigenschap is niet ingesteld.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Als zowel de primaire-sleutelkolommen als de unieke kolommen worden geretourneerd, worden de primaire-sleutelkolommen gebruikt als de primaire-sleutelkolommen voor de <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Houd er rekening mee dat primaire sleutels en unieke beperkingen worden toegevoegd aan de <xref:System.Data.ConstraintCollection>volgens de voorgaande regels, maar andere beperking typen niet worden toegevoegd.</xref:System.Data.ConstraintCollection>       Als een unieke geclusterde index is gedefinieerd in een kolom of kolommen in een tabel met SQL Server en de primary key-beperking is gedefinieerd in een afzonderlijke set kolommen, en vervolgens de namen van de kolommen in de geclusterde index worden geretourneerd. Als u de naam of namen van de primaire-sleutelkolommen weer, een hint query met de instructie SELECT die de naam van de primaire-sleutelindex specificeert te gebruiken. Zie voor meer informatie over het opgeven van queryhints [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Gegevens van primaire sleutel wordt gebruikt tijdens <xref:System.Data.Common.DbDataAdapter.Fill%2A>te zoeken en vervangen eventuele waarvan sleutelkolommen overeenkomen met rijen.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Als dit niet het gewenste gedrag gebruiken <xref:System.Data.Common.DbDataAdapter.Fill%2A>zonder schema-informatie aangevraagd.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Als de <xref:System.Data.IDataAdapter>tegenkomt dubbele kolommen tijdens het vullen van een <xref:System.Data.DataTable>, genereert namen voor de volgende kolommen in het gebruik van het patroon &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3 &quot;, enzovoort.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Als de inkomende gegevens naamloze kolommen bevat, worden geplaatst de <xref:System.Data.DataSet>volgens het patroon &quot;Kolom1&quot;, &quot;Kolom2&quot;, enzovoort.</xref:System.Data.DataSet> Wanneer meerdere resultatensets worden toegevoegd aan de <xref:System.Data.DataSet>elke resultatenset wordt geplaatst in een afzonderlijke tabel.</xref:System.Data.DataSet> Als u meer resultatensets worden benoemd met integraal waarden toe te voegen aan de opgegeven tabelnaam (bijvoorbeeld &quot;Tabel&quot;, &quot;Table1&quot;, &quot;Tabel2&quot;, enzovoort.). Toepassingen met behulp van de kolom- en tabelnamen moeten ervoor zorgen dat veroorzaakt een conflict met deze patronen naming niet uitgevoerd.       De <xref:System.Data.IDbConnection>object dat is gekoppeld met de opdracht select moet geldig zijn, maar deze hoeft niet te openen.</xref:System.Data.IDbConnection> Als de <xref:System.Data.IDbConnection>is gesloten voordat <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>is aangeroepen, het ophalen van gegevens wordt geopend, wordt gesloten.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.IDbConnection> Als de verbinding geopend voordat is <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>is aangeroepen, deze wordt opengelaten.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>      > [!NOTE] > Bij het verwerken van batch SQL-instructies die de implementatie van meerdere resultaten retourneren <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>voor .NET Framework Data Provider voor OLE DB schema-informatie voor alleen het eerste resultaat opgehaald.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Gebruik voor het ophalen van schema-informatie voor de resultaten van meerdere <xref:System.Data.Common.DbDataAdapter.Fill%2A>met de <xref:System.Data.MissingSchemaAction>ingesteld op `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Wanneer u <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, .NET Framework Data Provider voor SQL Server voegt een component FOR BROWSE met de instructie wordt uitgevoerd.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> De gebruiker moet op de hoogte van mogelijke neveneffecten hebben, zoals storingen met het gebruik van de instructies ON FMTONLY ingesteld. Zie SQL Server Books Online voor meer informatie."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/visualbasic/5283d285-2680-48b0-856a-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema1 Example#1](~/add/codesnippet/csharp/5283d285-2680-48b0-856a-_1.cs)]"
  syntax:
    content: public override System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Een <xref href=&quot;System.Data.DataSet&quot;> </xref> om in te voegen van het schema in."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Een van de <xref href=&quot;System.Data.SchemaType&quot;> </xref> waarden die het invoegen van het schema opgeven."
    return:
      type: System.Data.DataTable[]
      description: "Een verwijzing naar een verzameling van <xref href=&quot;System.Data.DataTable&quot;> </xref> objecten die zijn toegevoegd aan de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hiermee configureert u het schema van de opgegeven <xref href=&quot;System.Data.DataTable&quot;> </xref> op basis van de opgegeven <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "De methode FillSchema het schema opgehaald uit de gegevensbron met behulp van de <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Het object connection die zijn gekoppeld aan de <xref:System.Data.IDbDataAdapter.SelectCommand%2A>moet geldig zijn, maar deze hoeft niet te worden geopend.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Als de verbinding is gesloten voordat FillSchema is aangeroepen, is het geopend om gegevens te halen, worden gesloten. Als de verbinding geopend is voordat FillSchema wordt aangeroepen, blijft het geopend.       Een bewerking FillSchema retourneert een <xref:System.Data.DataTable>.</xref:System.Data.DataTable> Vervolgens voegt het toe in kolommen die u wilt de <xref:System.Data.DataColumnCollection>van de <xref:System.Data.DataTable>, en configureert u de volgende <xref:System.Data.DataColumn>Eigenschappen als deze bestaan in de gegevensbron:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> U moet instellen <xref:System.Data.DataColumn.AutoIncrementStep%2A>en <xref:System.Data.DataColumn.AutoIncrementSeed%2A>afzonderlijk.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A>FillSchema ook configureert u de <xref:System.Data.DataTable.PrimaryKey%2A>en <xref:System.Data.DataTable.Constraints%2A>Eigenschappen volgens de volgende regels: - als een <xref:System.Data.DataTable.PrimaryKey%2A>is al gedefinieerd voor de `DataTable`, of de `DataTable` gegevens, bevat de `PrimaryKey` eigenschap wordt niet ingesteld.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Als een of meer primaire-sleutelkolommen zijn geretourneerd door de <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, die worden gebruikt als de primaire-sleutelkolommen voor de `DataTable`.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>      -Als er geen primaire-sleutelkolommen worden geretourneerd, maar uniek kolommen zijn, worden de unieke kolommen als de primaire sleutel gebruikt als en alleen als de unieke kolommen die geen nul mag zijn. Als een van de kolommen waarvoor null is toegestaan, een <xref:System.Data.UniqueConstraint>is toegevoegd aan de <xref:System.Data.ConstraintCollection>, maar de `PrimaryKey` eigenschap is niet ingesteld.</xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Als zowel de primaire-sleutelkolommen als de unieke kolommen worden geretourneerd, de primaire-sleutelkolommen worden gebruikt als de primaire-sleutelkolommen voor de `DataTable`.       Houd er rekening mee dat primaire sleutels en unieke beperkingen worden toegevoegd aan de <xref:System.Data.ConstraintCollection>volgens de voorgaande regels, maar andere beperking typen niet worden toegevoegd.</xref:System.Data.ConstraintCollection> Dit proces moet mogelijk verschillende gegevens van en naar de server.       Als een unieke geclusterde index is gedefinieerd in een kolom of kolommen in een tabel met SQL Server en de primary key-beperking is gedefinieerd in een afzonderlijke set kolommen, en vervolgens de namen van de kolommen in de geclusterde index worden geretourneerd. Als u de naam of namen van de primaire-sleutelkolommen weer, een hint query met de instructie SELECT die de naam van de primaire-sleutelindex specificeert te gebruiken. Zie voor meer informatie over het opgeven van queryhints [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Als de <xref:System.Data.Common.DbDataAdapter>tegenkomt dubbele kolommen tijdens het vullen van een <xref:System.Data.DataTable>, genereert namen voor de volgende kolommen in het gebruik van het patroon &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3 &quot;, enzovoort.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Als de inkomende gegevens naamloze kolommen bevat, worden geplaatst de <xref:System.Data.DataSet>volgens het patroon &quot;Kolom1&quot;, &quot;Kolom2&quot;, enzovoort.</xref:System.Data.DataSet> Wanneer meerdere resultatensets worden toegevoegd aan de <xref:System.Data.DataSet>elke resultatenset wordt geplaatst in een afzonderlijke tabel.</xref:System.Data.DataSet> Als u meer resultatensets worden benoemd met integraal waarden toe te voegen aan de opgegeven tabelnaam (bijvoorbeeld &quot;Tabel&quot;, &quot;Table1&quot;, &quot;Tabel2&quot;, enzovoort.). Toepassingen met behulp van de kolom- en tabelnamen moeten ervoor zorgen dat veroorzaakt een conflict met deze patronen naming niet uitgevoerd.       FillSchema retourneert geen rijen. Gebruik de <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode om toe te voegen rijen in een <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Bij het verwerken van batch SQL-instructies die meerdere resultaten retourneren de uitvoering van FillSchema voor .NET Framework Data Provider voor OLE DB schema-informatie voor alleen het eerste resultaat opgehaald. Gebruik voor het ophalen van schema-informatie voor de resultaten van meerdere <xref:System.Data.Common.DbDataAdapter.Fill%2A>met de <xref:System.Data.MissingSchemaAction>ingesteld op `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Wanneer u FillSchema gebruikt, wordt de .NET Framework Data Provider voor SQL Server een component FOR BROWSE toegevoegd aan de instructie wordt uitgevoerd. De gebruiker moet op de hoogte van mogelijke neveneffecten hebben, zoals storingen met het gebruik van de instructies ON FMTONLY ingesteld. Zie SQL Server Books Online voor meer informatie."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataTable>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/visualbasic/658ac10a-3a87-4693-8b37-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema3#1](~/add/codesnippet/csharp/658ac10a-3a87-4693-8b37-_1.cs)]"
  syntax:
    content: public System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "De <xref href=&quot;System.Data.DataTable&quot;> </xref> te vullen met het schema van de gegevensbron."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Een van de <xref href=&quot;System.Data.SchemaType&quot;> </xref> waarden."
    return:
      type: System.Data.DataTable
      description: "Een <xref href=&quot;System.Data.DataTable&quot;> </xref> die schema-informatie geretourneerd uit de gegevensbron bevat."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Voegt een <xref href=&quot;System.Data.DataTable&quot;> </xref> met het opgegeven <xref href=&quot;System.Data.DataSet&quot;> </xref> en configureert u het schema moet worden gezocht die in de gegevensbron op basis van de opgegeven <xref href=&quot;System.Data.SchemaType&quot;> </xref> en <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Deze methode haalt de schema-informatie van de gegevensbron met behulp van de <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>       Een <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>bewerking wordt toegevoegd een <xref:System.Data.DataTable>naar de bestemming <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Vervolgens voegt het toe in kolommen die u wilt de <xref:System.Data.DataColumnCollection>van de <xref:System.Data.DataTable>, en configureert u de volgende <xref:System.Data.DataColumn>Eigenschappen als deze bestaan in de gegevensbron:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> U moet instellen <xref:System.Data.DataColumn.AutoIncrementStep%2A>en <xref:System.Data.DataColumn.AutoIncrementSeed%2A>afzonderlijk.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>configureert ook de <xref:System.Data.DataTable.PrimaryKey%2A>en <xref:System.Data.DataTable.Constraints%2A>Eigenschappen volgens de volgende regels: - als een of meer primaire-sleutelkolommen worden geretourneerd door het <xref:System.Data.IDbDataAdapter.SelectCommand%2A>die worden gebruikt als de primaire-sleutelkolommen voor de <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Als er geen primaire-sleutelkolommen worden geretourneerd, maar uniek kolommen zijn, worden de unieke kolommen als de primaire sleutel gebruikt als en alleen als de unieke kolommen die geen nul mag zijn. Als een van de kolommen waarvoor null is toegestaan, een <xref:System.Data.UniqueConstraint>is toegevoegd aan de <xref:System.Data.ConstraintCollection>, maar de <xref:System.Data.DataTable.PrimaryKey%2A>eigenschap is niet ingesteld.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Als zowel de primaire-sleutelkolommen als de unieke kolommen worden geretourneerd, worden de primaire-sleutelkolommen gebruikt als de primaire-sleutelkolommen voor de <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Houd er rekening mee dat primaire sleutels en unieke beperkingen worden toegevoegd aan de <xref:System.Data.ConstraintCollection>volgens de voorgaande regels, maar andere beperking typen niet worden toegevoegd.</xref:System.Data.ConstraintCollection>       Als een unieke geclusterde index is gedefinieerd in een kolom of kolommen in een tabel met SQL Server en de primary key-beperking is gedefinieerd in een afzonderlijke set kolommen, en vervolgens de namen van de kolommen in de geclusterde index worden geretourneerd. Als u de naam of namen van de primaire-sleutelkolommen weer, een hint query met de instructie SELECT die de naam van de primaire-sleutelindex specificeert te gebruiken. Zie voor meer informatie over het opgeven van queryhints [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Gegevens van primaire sleutel wordt gebruikt tijdens <xref:System.Data.Common.DbDataAdapter.Fill%2A>te zoeken en vervangen eventuele waarvan sleutelkolommen overeenkomen met rijen.</xref:System.Data.Common.DbDataAdapter.Fill%2A> Als dit niet het gewenste gedrag gebruiken <xref:System.Data.Common.DbDataAdapter.Fill%2A>zonder schema-informatie aangevraagd.</xref:System.Data.Common.DbDataAdapter.Fill%2A>       Als de <xref:System.Data.Common.DbDataAdapter>tegenkomt dubbele kolommen tijdens het vullen van een <xref:System.Data.DataTable>, genereert namen voor de volgende kolommen in het gebruik van het patroon &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3 &quot;, enzovoort.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> Als de inkomende gegevens naamloze kolommen bevat, worden geplaatst de <xref:System.Data.DataSet>volgens het patroon &quot;Kolom1&quot;, &quot;Kolom2&quot;, enzovoort.</xref:System.Data.DataSet> Wanneer meerdere resultatensets worden toegevoegd aan de <xref:System.Data.DataSet>elke resultatenset wordt geplaatst in een afzonderlijke tabel.</xref:System.Data.DataSet> Als u meer resultatensets worden benoemd met integraal waarden toe te voegen aan de opgegeven tabelnaam (bijvoorbeeld &quot;Tabel&quot;, &quot;Table1&quot;, &quot;Tabel2&quot;, enzovoort.). Toepassingen met behulp van de kolom- en tabelnamen moeten ervoor zorgen dat veroorzaakt een conflict met deze patronen naming niet uitgevoerd.       De <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>methode ondersteunt scenario&quot;s waar de <xref:System.Data.DataSet>bevat meerdere <xref:System.Data.DataTable>objecten waarvan de namen alleen per aanvraag verschillen.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> In dergelijke gevallen <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>voor een vergelijking hoofdlettergevoelig om te zoeken in de bijbehorende tabel en maakt u een nieuwe tabel als er geen exacte overeenkomst bestaat.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> De volgende C#-code ziet u dit probleem.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Als <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>wordt aangeroepen en de <xref:System.Data.DataSet>bevat slechts één <xref:System.Data.DataTable>geval verschilt alleen waarvan de naam die <xref:System.Data.DataTable>wordt bijgewerkt.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> In dit scenario is de vergelijking niet hoofdlettergevoelig. De volgende C#-code ziet u dit probleem.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```De <xref:System.Data.IDbConnection>object dat is gekoppeld met de opdracht select moet geldig zijn, maar deze hoeft niet te openen.</xref:System.Data.IDbConnection> Als de <xref:System.Data.IDbConnection>is gesloten voordat <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>is aangeroepen, het ophalen van gegevens wordt geopend, wordt gesloten.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> </xref:System.Data.IDbConnection> Als de verbinding geopend voordat is <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>is aangeroepen, deze wordt opengelaten.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>      > [!NOTE] > Bij het verwerken van batch SQL-instructies die de implementatie van meerdere resultaten retourneren <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>voor .NET Framework Data Provider voor OLE DB schema-informatie voor alleen het eerste resultaat opgehaald.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Gebruik voor het ophalen van schema-informatie voor de resultaten van meerdere <xref:System.Data.Common.DbDataAdapter.Fill%2A>met de <xref:System.Data.MissingSchemaAction>ingesteld op `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Wanneer u <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, .NET Framework Data Provider voor SQL Server voegt een component FOR BROWSE met de instructie wordt uitgevoerd.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> De gebruiker moet op de hoogte van mogelijke neveneffecten hebben, zoals storingen met het gebruik van de instructies ON FMTONLY ingesteld. Zie SQL Server Books Online voor meer informatie."
  example:
  - "The following example uses the derived class, <xref:System.Data.SqlClient.SqlDataAdapter>, to fill a <xref:System.Data.DataSet> with the schema, and returns a <xref:System.Data.DataSet>.  \n  \n [!code-vb[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/visualbasic/c7e2b899-0a44-4d9d-9e8d-_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.FillSchema2 Example#1](~/add/codesnippet/csharp/c7e2b899-0a44-4d9d-9e8d-_1.cs)]"
  syntax:
    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "Een <xref href=&quot;System.Data.DataSet&quot;> </xref> om in te voegen van het schema in."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Een van de <xref href=&quot;System.Data.SchemaType&quot;> </xref> waarden die het invoegen van het schema opgeven."
    - id: srcTable
      type: System.String
      description: "De naam van de brontabel moet worden gebruikt voor het toewijzen van de tabel."
    return:
      type: System.Data.DataTable[]
      description: "Een verwijzing naar een verzameling van <xref href=&quot;System.Data.DataTable&quot;> </xref> objecten die zijn toegevoegd aan de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Een brontabel waaruit u wilt ophalen van het schema kan niet worden gevonden."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hiermee configureert u het schema van de opgegeven <xref href=&quot;System.Data.DataTable&quot;> </xref> op basis van de opgegeven <xref href=&quot;System.Data.SchemaType&quot;> </xref>, string, de opdracht en <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> waarden."
  remarks: "De <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>methode wordt het schema van de gegevensbron met behulp van de <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> opgehaald</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Het object connection die zijn gekoppeld aan de <xref:System.Data.IDbDataAdapter.SelectCommand%2A>moet geldig zijn, maar deze hoeft niet te worden geopend.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Als de verbinding is gesloten voordat <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>is aangeroepen, het ophalen van gegevens wordt geopend, wordt gesloten.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Als de verbinding geopend voordat is <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>is aangeroepen, blijft het open.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Een <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>bewerking wordt toegevoegd een <xref:System.Data.DataTable>naar de bestemming <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Vervolgens voegt het toe in kolommen die u wilt de <xref:System.Data.DataColumnCollection>van de <xref:System.Data.DataTable>, en configureert u de volgende <xref:System.Data.DataColumn>Eigenschappen als deze bestaan in de gegevensbron:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> U moet instellen <xref:System.Data.DataColumn.AutoIncrementStep%2A>en <xref:System.Data.DataColumn.AutoIncrementSeed%2A>afzonderlijk.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>configureert ook de <xref:System.Data.DataTable.PrimaryKey%2A>en <xref:System.Data.DataTable.Constraints%2A>Eigenschappen volgens de volgende regels: - als een of meer primaire-sleutelkolommen worden geretourneerd door het <xref:System.Data.IDbDataAdapter.SelectCommand%2A>die worden gebruikt als de primaire-sleutelkolommen voor de <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Als er geen primaire-sleutelkolommen worden geretourneerd, maar uniek kolommen zijn, worden de unieke kolommen als de primaire sleutel gebruikt als en alleen als de unieke kolommen die geen nul mag zijn. Als een van de kolommen waarvoor null is toegestaan, een <xref:System.Data.UniqueConstraint>is toegevoegd aan de <xref:System.Data.ConstraintCollection>, maar de <xref:System.Data.DataTable.PrimaryKey%2A>eigenschap is niet ingesteld.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Als zowel de primaire-sleutelkolommen als de unieke kolommen worden geretourneerd, worden de primaire-sleutelkolommen gebruikt als de primaire-sleutelkolommen voor de <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Houd er rekening mee dat primaire sleutels en unieke beperkingen worden toegevoegd aan de <xref:System.Data.ConstraintCollection>volgens de voorgaande regels, maar andere beperking typen niet worden toegevoegd.</xref:System.Data.ConstraintCollection>       Als een unieke geclusterde index is gedefinieerd in een kolom of kolommen in een tabel met SQL Server en de primary key-beperking is gedefinieerd in een afzonderlijke set kolommen, en vervolgens de namen van de kolommen in de geclusterde index worden geretourneerd. Als u de naam of namen van de primaire-sleutelkolommen weer, een hint query met de instructie SELECT die de naam van de primaire-sleutelindex specificeert te gebruiken. Zie voor meer informatie over het opgeven van queryhints [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Als de <xref:System.Data.IDataAdapter>tegenkomt dubbele kolommen tijdens het vullen van een <xref:System.Data.DataTable>, genereert namen voor de volgende kolommen in het gebruik van het patroon &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3 &quot;, enzovoort.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Als de inkomende gegevens naamloze kolommen bevat, worden geplaatst de <xref:System.Data.DataSet>volgens het patroon &quot;Kolom1&quot;, &quot;Kolom2&quot;, enzovoort.</xref:System.Data.DataSet> Wanneer meerdere resultatensets worden toegevoegd aan de <xref:System.Data.DataSet>elke resultatenset wordt geplaatst in een afzonderlijke tabel.</xref:System.Data.DataSet> Als u meer resultatensets worden benoemd met integraal waarden toe te voegen aan de opgegeven tabelnaam (bijvoorbeeld &quot;Tabel&quot;, &quot;Table1&quot;, &quot;Tabel2&quot;, enzovoort.). Toepassingen met behulp van de kolom- en tabelnamen moeten ervoor zorgen dat veroorzaakt een conflict met deze patronen naming niet uitgevoerd.       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>retourneert alle rijen.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Gebruik de <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode om toe te voegen rijen in een <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Bij het verwerken van batch SQL-instructies die de implementatie van meerdere resultaten retourneren <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>voor .NET Framework Data Provider voor OLE DB schema-informatie voor alleen het eerste resultaat opgehaald.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Gebruik voor het ophalen van schema-informatie voor de resultaten van meerdere <xref:System.Data.Common.DbDataAdapter.Fill%2A>met de <xref:System.Data.MissingSchemaAction>ingesteld op `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Wanneer u <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, .NET Framework Data Provider voor SQL Server voegt een component FOR BROWSE met de instructie wordt uitgevoerd.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> De gebruiker moet op de hoogte van mogelijke neveneffecten hebben, zoals storingen met het gebruik van de instructies ON FMTONLY ingesteld. Zie SQL Server Books Online voor meer informatie."
  syntax:
    content: protected virtual System.Data.DataTable FillSchema (System.Data.DataTable dataTable, System.Data.SchemaType schemaType, System.Data.IDbCommand command, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "De <xref href=&quot;System.Data.DataTable&quot;> </xref> te vullen met het schema van de gegevensbron."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Een van de <xref href=&quot;System.Data.SchemaType&quot;> </xref> waarden."
    - id: command
      type: System.Data.IDbCommand
      description: "De SELECT-instructie gebruikt voor het ophalen van rijen uit de gegevensbron."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Een van de <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> waarden."
    return:
      type: System.Data.DataTable
      description: "A van <xref href=&quot;System.Data.DataTable&quot;> </xref> object met schema-informatie geretourneerd uit de gegevensbron."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Voegt een <xref href=&quot;System.Data.DataTable&quot;> </xref> met het opgegeven <xref href=&quot;System.Data.DataSet&quot;> </xref> en configureert u het schema moet worden gezocht die in de gegevensbron op basis van de opgegeven <xref href=&quot;System.Data.SchemaType&quot;> </xref>."
  remarks: "De <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>methode wordt het schema van de gegevensbron met behulp van de <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> opgehaald</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Het object connection die zijn gekoppeld aan de <xref:System.Data.IDbDataAdapter.SelectCommand%2A>moet geldig zijn, maar deze hoeft niet te worden geopend.</xref:System.Data.IDbDataAdapter.SelectCommand%2A> Als de verbinding is gesloten voordat <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>is aangeroepen, het ophalen van gegevens wordt geopend, wordt gesloten.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Als de verbinding geopend voordat is <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>is aangeroepen, blijft het open.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       Een <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>bewerking wordt toegevoegd een <xref:System.Data.DataTable>naar de bestemming <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Vervolgens voegt het toe in kolommen die u wilt de <xref:System.Data.DataColumnCollection>van de <xref:System.Data.DataTable>, en configureert u de volgende <xref:System.Data.DataColumn>Eigenschappen als deze bestaan in de gegevensbron:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> U moet instellen <xref:System.Data.DataColumn.AutoIncrementStep%2A>en <xref:System.Data.DataColumn.AutoIncrementSeed%2A>afzonderlijk.</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A><xref:System.Data.Common.DbDataAdapter.FillSchema%2A>configureert ook de <xref:System.Data.DataTable.PrimaryKey%2A>en <xref:System.Data.DataTable.Constraints%2A>Eigenschappen volgens de volgende regels: - als een of meer primaire-sleutelkolommen worden geretourneerd door het <xref:System.Data.IDbDataAdapter.SelectCommand%2A>die worden gebruikt als de primaire-sleutelkolommen voor de <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.IDbDataAdapter.SelectCommand%2A> </xref:System.Data.DataTable.Constraints%2A> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       </xref:System.Data.DataColumn.Unique%2A> </xref:System.Data.DataColumn.ReadOnly%2A> </xref:System.Data.DataColumn.MaxLength%2A>      -Als er geen primaire-sleutelkolommen worden geretourneerd, maar uniek kolommen zijn, worden de unieke kolommen als de primaire sleutel gebruikt als en alleen als de unieke kolommen die geen nul mag zijn. Als een van de kolommen waarvoor null is toegestaan, een <xref:System.Data.UniqueConstraint>is toegevoegd aan de <xref:System.Data.ConstraintCollection>, maar de <xref:System.Data.DataTable.PrimaryKey%2A>eigenschap is niet ingesteld.</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -Als zowel de primaire-sleutelkolommen als de unieke kolommen worden geretourneerd, worden de primaire-sleutelkolommen gebruikt als de primaire-sleutelkolommen voor de <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Houd er rekening mee dat primaire sleutels en unieke beperkingen worden toegevoegd aan de <xref:System.Data.ConstraintCollection>volgens de voorgaande regels, maar andere beperking typen niet worden toegevoegd.</xref:System.Data.ConstraintCollection>       Als een unieke geclusterde index is gedefinieerd in een kolom of kolommen in een tabel met SQL Server en de primary key-beperking is gedefinieerd in een afzonderlijke set kolommen, en vervolgens de namen van de kolommen in de geclusterde index worden geretourneerd. Als u de naam of namen van de primaire-sleutelkolommen weer, een hint query met de instructie SELECT die de naam van de primaire-sleutelindex specificeert te gebruiken. Zie voor meer informatie over het opgeven van queryhints [Query Hint (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).       Als de <xref:System.Data.IDataAdapter>tegenkomt dubbele kolommen tijdens het vullen van een <xref:System.Data.DataTable>, genereert namen voor de volgende kolommen in het gebruik van het patroon &quot;*columnname*1&quot;, &quot;*columnname*2&quot;,&quot;*columnname*3 &quot;, enzovoort.</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> Als de inkomende gegevens naamloze kolommen bevat, worden geplaatst de <xref:System.Data.DataSet>volgens het patroon &quot;Kolom1&quot;, &quot;Kolom2&quot;, enzovoort.</xref:System.Data.DataSet> Wanneer meerdere resultatensets worden toegevoegd aan de <xref:System.Data.DataSet>elke resultatenset wordt geplaatst in een afzonderlijke tabel.</xref:System.Data.DataSet> Als u meer resultatensets worden benoemd met integraal waarden toe te voegen aan de opgegeven tabelnaam (bijvoorbeeld &quot;Tabel&quot;, &quot;Table1&quot;, &quot;Tabel2&quot;, enzovoort.). Toepassingen met behulp van de kolom- en tabelnamen moeten ervoor zorgen dat veroorzaakt een conflict met deze patronen naming niet uitgevoerd.       De <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>methode ondersteunt scenario&quot;s waar de <xref:System.Data.DataSet>bevat meerdere <xref:System.Data.DataTable>objecten waarvan de namen alleen per aanvraag verschillen.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> In dergelijke gevallen <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>voor een vergelijking hoofdlettergevoelig om te zoeken in de bijbehorende tabel en maakt u een nieuwe tabel als er geen exacte overeenkomst bestaat.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> De volgende C#-code ziet u dit probleem.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   dataset.Tables.Add(&quot;AAA&quot;);   adapter.FillSchema(dataset, &quot;aaa&quot;); // Fills the schema of &quot;aaa&quot;, which already exists in the DataSet.   adapter.FillSchema(dataset, &quot;Aaa&quot;); // Adds a new table called &quot;Aaa&quot;.   ```Als <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>wordt aangeroepen en de <xref:System.Data.DataSet>bevat slechts één <xref:System.Data.DataTable>geval verschilt alleen waarvan de naam die <xref:System.Data.DataTable>wordt bijgewerkt.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A> In dit scenario is de vergelijking niet hoofdlettergevoelig. De volgende C#-code ziet u dit probleem.      ```   DataSet dataset = new DataSet();   dataset.Tables.Add(&quot;aaa&quot;);   adapter.FillSchema(dataset, &quot;AAA&quot;); // Fills the schema of table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```       <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>retourneert alle rijen.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Gebruik de <xref:System.Data.Common.DbDataAdapter.Fill%2A>methode om toe te voegen rijen in een <xref:System.Data.DataTable>.</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter.Fill%2A>      > [!NOTE] > Bij het verwerken van batch SQL-instructies die de implementatie van meerdere resultaten retourneren <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>voor .NET Framework Data Provider voor OLE DB schema-informatie voor alleen het eerste resultaat opgehaald.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> Gebruik voor het ophalen van schema-informatie voor de resultaten van meerdere <xref:System.Data.Common.DbDataAdapter.Fill%2A>met de <xref:System.Data.MissingSchemaAction>ingesteld op `AddWithKey`.</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       Wanneer u <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, .NET Framework Data Provider voor SQL Server voegt een component FOR BROWSE met de instructie wordt uitgevoerd.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A> De gebruiker moet op de hoogte van mogelijke neveneffecten hebben, zoals storingen met het gebruik van de instructies ON FMTONLY ingesteld. Zie SQL Server Books Online voor meer informatie."
  syntax:
    content: protected virtual System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType, System.Data.IDbCommand command, string srcTable, System.Data.CommandBehavior behavior);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "De <xref href=&quot;System.Data.DataSet&quot;> </xref> te vullen met het schema van de gegevensbron."
    - id: schemaType
      type: System.Data.SchemaType
      description: "Een van de <xref href=&quot;System.Data.SchemaType&quot;> </xref> waarden."
    - id: command
      type: System.Data.IDbCommand
      description: "De SELECT-instructie gebruikt voor het ophalen van rijen uit de gegevensbron."
    - id: srcTable
      type: System.String
      description: "De naam van de brontabel moet worden gebruikt voor het toewijzen van de tabel."
    - id: behavior
      type: System.Data.CommandBehavior
      description: "Een van de <xref href=&quot;System.Data.CommandBehavior&quot;> </xref> waarden."
    return:
      type: System.Data.DataTable[]
      description: "Een matrix van <xref href=&quot;System.Data.DataTable&quot;> </xref> objecten met schema-informatie opgehaald uit de gegevensbron."
  overload: System.Data.Common.DbDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  id: GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Retourneert een <xref href=&quot;System.Data.IDataParameter&quot;> </xref> van een van de opdrachten in de huidige batch."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>deze methode genereert <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Klassen die van overnemen <xref:System.Data.Common.DbDataAdapter>deze methode om ondersteuning te bieden voor batches overschrijven.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "De index van de opdracht voor het ophalen van de parameter uit."
    - id: parameterIndex
      type: System.Int32
      description: "De index van de parameter in de opdracht."
    return:
      type: System.Data.IDataParameter
      description: "De <xref href=&quot;System.Data.IDataParameter&quot;> </xref> opgegeven."
  overload: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De adapter biedt geen ondersteuning voor batches."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  id: GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Retourneert informatie over een poging individuele update in een grotere batch-update."
  remarks: "Gegevensproviders die ondersteuning bieden voor batch bijwerken logica moeten een reeks virtuele methoden op de <xref:System.Data.Common.DbDataAdapter>klasse</xref:System.Data.Common.DbDataAdapter> overschrijven `GetBatchedRecordsAffected`Hiermee geeft u een van deze virtuele methoden. De `DbDataAdapter` klasse is afhankelijk van `GetBatchedRecordsAffected` om te bepalen van het slagen of mislukken van individuele update pogingen binnen een batch, zodat deze elk overeenkomstig markeren kan <xref:System.Data.DataRow>dienovereenkomstig.</xref:System.Data.DataRow>"
  syntax:
    content: protected virtual bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "Het rangtelwoord voor de op nul gebaseerde kolom van de afzonderlijke opdracht in de batch."
    - id: recordsAffected
      type: System.Int32
      description: "Het aantal rijen in de gegevensopslag beïnvloed door de opgegeven opdracht in de batch."
    - id: error
      type: System.Exception
      description: "Een <xref:System.Exception>opgetreden tijdens het uitvoeren van de opgegeven opdracht.</xref:System.Exception> Retourneert <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> in Visual Basic) als er geen uitzondering."
    return:
      type: System.Boolean
      description: "Informatie over een poging individuele update in een grotere batch-update."
  overload: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Hiermee haalt u de parameters die zijn ingesteld door de gebruiker bij het uitvoeren van een SQL SELECT-instructie."
  syntax:
    content: public override System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "Een matrix van <xref href=&quot;System.Data.IDataParameter&quot;> </xref> objecten met de parameters die zijn ingesteld door de gebruiker."
  overload: System.Data.Common.DbDataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  id: InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Initialiseert batchverwerking voor de <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>deze methode genereert <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Klassen die van overnemen <xref:System.Data.Common.DbDataAdapter>deze methode om ondersteuning te bieden voor batches overschrijven.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void InitializeBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.InitializeBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De adapter biedt geen ondersteuning voor batches."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  id: InsertCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Opgehaald of ingesteld van een opdracht voor het invoegen van nieuwe records in de gegevensbron."
  remarks: "Tijdens de <xref:System.Data.Common.DbDataAdapter.Update%2A>, als deze eigenschap niet is ingesteld en gegevens van primaire sleutel is aanwezig in de <xref:System.Data.DataSet>, wordt de <xref:System.Data.IDbDataAdapter.InsertCommand%2A>automatisch wordt gegenereerd.</xref:System.Data.IDbDataAdapter.InsertCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand InsertCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Een <xref href=&quot;System.Data.IDbCommand&quot;> </xref> gebruikt tijdens <xref:System.Data.IDataAdapter.Update*>records invoegen in de gegevensbron voor nieuwe rijen in de gegevensset.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Geeft de <xref uid=&quot;langword_csharp_RowUpdated&quot; name=&quot;RowUpdated&quot; href=&quot;&quot;> </xref> gebeurtenis van een .NET Framework-gegevensprovider."
  remarks: 'Een gebeurtenis te verhogen, roept de gebeurtenis-handler via een gemachtigde. Zie voor een overzicht [KROONTJESPEN: verhogen van een gebeurtenis](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatedEventArgs
      description: "Een <xref href=&quot;System.Data.Common.RowUpdatedEventArgs&quot;> </xref> waarin de gebeurtenisgegevens worden opgeslagen."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Geeft de <xref uid=&quot;langword_csharp_RowUpdating&quot; name=&quot;RowUpdating&quot; href=&quot;&quot;> </xref> gebeurtenis van een .NET Framework-gegevensprovider."
  remarks: 'Een gebeurtenis te verhogen, roept de gebeurtenis-handler via een gemachtigde. Zie voor een overzicht [KROONTJESPEN: verhogen van een gebeurtenis](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).'
  syntax:
    content: protected virtual void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatingEventArgs
      description: "Een <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref> waarin de gebeurtenisgegevens worden opgeslagen."
  overload: System.Data.Common.DbDataAdapter.OnRowUpdating*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  id: SelectCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Opgehaald of ingesteld van een opdracht die wordt gebruikt om records te selecteren in de gegevensbron."
  remarks: ''
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_1_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_1_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand SelectCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Een <xref href=&quot;System.Data.IDbCommand&quot;> </xref> die wordt gebruikt tijdens <xref:System.Data.IDataAdapter.Update*>om records te selecteren van gegevensbron voor de plaatsing in de gegevensset.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  id: System#Data#IDbDataAdapter#DeleteCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Opgehaald of ingesteld van een SQL-instructie voor het verwijderen van records uit de gegevensset."
  remarks: "Dit lid is een expliciete interface lid-implementatie. Het kan worden gebruikt alleen wanneer de <xref:System.Data.Common.DbDataAdapter>exemplaar is geconverteerd naar een <xref:System.Data.IDbDataAdapter>interface.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Zie voor meer informatie <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>.</xref:System.Data.IDbDataAdapter.DeleteCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Een <xref href=&quot;System.Data.IDbCommand&quot;> </xref> gebruikt tijdens <xref:System.Data.Common.DbDataAdapter.Update*>om records in de gegevensbron voor verwijderde rijen in de gegevensset te verwijderen.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  id: System#Data#IDbDataAdapter#InsertCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Opgehaald of ingesteld van een SQL-instructie dat is gebruikt voor het invoegen van nieuwe records in de gegevensbron."
  remarks: "Dit lid is een expliciete interface lid-implementatie. Het kan worden gebruikt alleen wanneer de <xref:System.Data.Common.DbDataAdapter>exemplaar is geconverteerd naar een <xref:System.Data.IDbDataAdapter>interface.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Zie voor meer informatie <xref:System.Data.IDbDataAdapter.InsertCommand%2A>.</xref:System.Data.IDbDataAdapter.InsertCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Een <xref href=&quot;System.Data.IDbCommand&quot;> </xref> gebruikt tijdens <xref:System.Data.Common.DbDataAdapter.Update*>records invoegen in de gegevensbron voor nieuwe rijen in de gegevensset.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  id: System#Data#IDbDataAdapter#SelectCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Opgehaald of ingesteld van een SQL-instructie dat is gebruikt om records te selecteren in de gegevensbron."
  remarks: "Dit lid is een expliciete interface lid-implementatie. Het kan worden gebruikt alleen wanneer de <xref:System.Data.Common.DbDataAdapter>exemplaar is geconverteerd naar een <xref:System.Data.IDbDataAdapter>interface.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Zie voor meer informatie <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Een <xref href=&quot;System.Data.IDbCommand&quot;> </xref> die wordt gebruikt tijdens <xref:System.Data.Common.DbDataAdapter.Update*>om records te selecteren van gegevensbron voor de plaatsing in de gegevensset.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  id: System#Data#IDbDataAdapter#UpdateCommand
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Opgehaald of ingesteld van een SQL-instructie dat is gebruikt voor het bijwerken van de records in de gegevensbron."
  remarks: "Dit lid is een expliciete interface lid-implementatie. Het kan worden gebruikt alleen wanneer de <xref:System.Data.Common.DbDataAdapter>exemplaar is geconverteerd naar een <xref:System.Data.IDbDataAdapter>interface.</xref:System.Data.IDbDataAdapter> </xref:System.Data.Common.DbDataAdapter>       Zie voor meer informatie <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>.</xref:System.Data.IDbDataAdapter.UpdateCommand%2A>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "Een <xref href=&quot;System.Data.IDbCommand&quot;> </xref> gebruikt tijdens <xref:System.Data.Common.DbDataAdapter.Update*>records in de gegevensbron voor gewijzigde rijen in de gegevensset wilt bijwerken.</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Maakt een nieuw object dat een kopie van het huidige exemplaar."
  remarks: "Dit lid is een expliciete interface lid-implementatie. Het kan worden gebruikt alleen wanneer de <xref:System.Data.Common.DbDataAdapter>exemplaar is geconverteerd naar een <xref:System.ICloneable>interface.</xref:System.ICloneable> </xref:System.Data.Common.DbDataAdapter>       Zie voor meer informatie <xref:System.ICloneable.Clone%2A?displayProperty=fullName>.</xref:System.ICloneable.Clone%2A?displayProperty=fullName>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Een nieuw object dat een kopie van dit exemplaar."
  overload: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  id: TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Eindigt batchverwerking voor de <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>."
  remarks: "In <xref:System.Data.Common.DbDataAdapter>deze methode genereert <xref:System.NotSupportedException>.</xref:System.NotSupportedException> </xref:System.Data.Common.DbDataAdapter> Klassen die van overnemen <xref:System.Data.Common.DbDataAdapter>deze methode om ondersteuning te bieden voor batches overschrijven.</xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected virtual void TerminateBatching ();
    parameters: []
  overload: System.Data.Common.DbDataAdapter.TerminateBatching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De adapter biedt geen ondersteuning voor batches."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  id: Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "De waarden in de database wordt bijgewerkt door het uitvoeren van de respectieve INSERT, UPDATE of DELETE-instructies voor elk ingevoegd, bijgewerkt of verwijderd van de rij in de opgegeven matrix in de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Wanneer een toepassing wordt aangeroepen de <xref:System.Data.Common.DbDataAdapter.Update%2A>methode, de <xref:System.Data.Common.DbDataAdapter>onderzoekt de <xref:System.Data.DataRow.RowState%2A>eigenschap, en worden de vereiste INSERT, UPDATE of DELETE-instructies iteratief voor elke rij, gebaseerd op de volgorde van de indexen die zijn geconfigureerd in de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Bijvoorbeeld, <xref:System.Data.Common.DbDataAdapter.Update%2A>een DELETE-instructie, gevolgd door een instructie INSERT en vervolgens een andere instructie DELETE, vanwege de volgorde van de rijen in de <xref:System.Data.DataTable>.</xref:System.Data.DataTable> mogelijk uitvoeren</xref:System.Data.Common.DbDataAdapter.Update%2A>       Houd er rekening mee dat deze instructies worden niet uitgevoerd als een batchproces; elke rij wordt afzonderlijk bijgewerkt. Een toepassing kunt aanroepen de <xref:System.Data.DataSet.GetChanges%2A>methode in situaties waar u de volgorde van de instructie typen (bijvoorbeeld invoegen vóór UPDATEs) moet beheren.</xref:System.Data.DataSet.GetChanges%2A> Zie voor meer informatie [gegevensbronnen bijwerken met DataAdapters](~/add/includes/ajax-current-ext-md.md).       INSERT, UPDATE of DELETE-instructies zijn niet opgegeven als, de <xref:System.Data.Common.DbDataAdapter.Update%2A>methode wordt een uitzondering gegenereerd.</xref:System.Data.Common.DbDataAdapter.Update%2A> U kunt echter maken een <xref:System.Data.SqlClient.SqlCommandBuilder>of <xref:System.Data.OleDb.OleDbCommandBuilder>object voor het automatisch genereren van SQL-instructies voor één tabel updates als u de `SelectCommand` eigenschap van een .NET Framework-gegevensprovider.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Vervolgens aanvullende SQL-instructies die u instelt worden gegenereerd door de **CommandBuilder**. Deze logica generatie vereist sleutelkolomgegevens moeten zich in de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Zie voor meer informatie [opdrachten genereren met CommandBuilders](~/add/includes/ajax-current-ext-md.md).       De <xref:System.Data.Common.DbDataAdapter.Update%2A>methode rijen opgehaald uit de tabel in de eerste toewijzing voordat u een update uitvoert.</xref:System.Data.Common.DbDataAdapter.Update%2A> De <xref:System.Data.Common.DbDataAdapter.Update%2A>vervolgens vernieuwt u de rij met de waarde van de <xref:System.Data.IDbCommand.UpdatedRowSource%2A>eigenschap.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Eventuele extra rijen geretourneerd, worden genegeerd.       Nadat de gegevens worden geladen naar de <xref:System.Data.DataSet>, wordt de <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>gebeurtenis wordt geactiveerd, zodat de gebruiker controleert de afgestemd <xref:System.Data.DataSet>uitvoerparameters rij en eventuele geretourneerd door de opdracht.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Nadat een rij is bijgewerkt, worden de wijzigingen op die rij worden geaccepteerd.       Wanneer u <xref:System.Data.Common.DbDataAdapter.Update%2A>, de volgorde van de uitvoering is als volgt: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  De waarden in de <xref:System.Data.DataRow>worden verplaatst naar de parameterwaarden.</xref:System.Data.DataRow>      2.  De <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>gebeurtenis is opgetreden.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  De opdracht wordt uitgevoerd.      4.  Als de opdracht is ingesteld op `FirstReturnedRecord`, de eerste geretourneerd resultaat wordt geplaatst in de <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Als er output-parameters, zijn ze in de <xref:System.Data.DataRow>.</xref:System.Data.DataRow> geplaatst      6.  De <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>gebeurtenis is opgetreden.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>wordt aangeroepen.</xref:System.Data.DataRow.AcceptChanges%2A>       Elke opdracht die is gekoppeld aan de <xref:System.Data.Common.DbDataAdapter>meestal is een parameterverzameling is gekoppeld.</xref:System.Data.Common.DbDataAdapter> Parameters zijn toegewezen aan de huidige rij via de `SourceColumn` en `SourceVersion` eigenschappen van een .NET Framework-gegevensprovider `Parameter` klasse. `SourceColumn`verwijst naar een <xref:System.Data.DataTable>kolom die de <xref:System.Data.Common.DbDataAdapter>verwijzingen naar het verkrijgen van parameterwaarden voor de huidige rij.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`verwijst naar de niet-toegewezen kolomnaam voordat alle Tabeltoewijzingen zijn toegepast. Als `SourceColumn` verwijst naar een niet-bestaande kolom de actie op die afhankelijk is van een van de volgende <xref:System.Data.MissingMappingAction>waarden.</xref:System.Data.MissingMappingAction>      | Opsommingswaarde | Actie op die |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Gebruik van de bron-kolomnamen en tabelnamen in de <xref:System.Data.DataSet>Als er is geen toewijzing aanwezig is. |   | `MissingMappingAction.Ignore`| Een <xref:System.SystemException>wordt gegenereerd.</xref:System.SystemException> </xref:System.Data.DataSet> Wanneer de toewijzingen expliciet zijn ingesteld, een ontbrekende toewijzing voor de invoerparameter is meestal het gevolg van een fout. |   | `MissingMappingAction.Error`| Een <xref:System.SystemException>wordt gegenereerd. |       De `SourceColumn` eigenschap wordt ook gebruikt voor het toewijzen van de waarde voor uitvoer of input/output-parameters terug naar de `DataSet`.</xref:System.SystemException> Een uitzondering wordt gegenereerd als het verwijst naar een niet-bestaande kolom.       De `SourceVersion` eigenschap van een .NET Framework-gegevensprovider `Parameter` klasse bepaalt of de oorspronkelijke, Huidig of voorgesteld versie van de kolomwaarde te gebruiken. Deze mogelijkheid wordt vaak gebruikt voor het opnemen van de oorspronkelijke waarden in de WHERE-component van de instructie UPDATE om te controleren op schendingen van optimistische gelijktijdigheid.      > [!NOTE] > Als er een fout optreedt tijdens het bijwerken van een rij is een uitzondering opgetreden en de uitvoering van de update is stopgezet. Ingesteld om door te gaan de updatebewerking zonder uitzonderingen worden gegenereerd wanneer een fout is opgetreden, de <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>eigenschap `true` aanroepen voordat <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> U kunt ook reageren op fouten op basis van per rij in de `RowUpdated` gebeurtenis van een DataAdapter. De updatebewerking doorgaan zonder dat er een uitzondering binnen de `RowUpdated` gebeurtenis, stel de <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>eigenschap van de <xref:System.Data.Common.RowUpdatedEventArgs>tot <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_0_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update1 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_0_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataRow[] dataRows);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "Een matrix van <xref href=&quot;System.Data.DataRow&quot;> </xref> objecten die worden gebruikt voor het bijwerken van de gegevensbron."
    return:
      type: System.Int32
      description: "Het aantal rijen bijgewerkt vanuit de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "De <xref href=&quot;System.Data.DataSet&quot;> </xref> is ongeldig."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De brontabel is ongeldig."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Geen <xref href=&quot;System.Data.DataRow&quot;> </xref> bestaat om bij te werken.       - of - Nee <xref href=&quot;System.Data.DataTable&quot;> </xref> bestaat om bij te werken.       - of - Nee <xref href=&quot;System.Data.DataSet&quot;> </xref> bestaat om te gebruiken als bron."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Een poging tot het uitvoeren van een instructie INSERT, UPDATE of DELETE geleid tot nul records die van invloed op."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "De waarden in de database-updates door het uitvoeren van de respectieve INSERT, UPDATE of DELETE-instructies voor elk ingevoegd, bijgewerkt of verwijderd van de rij in de opgegeven <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  remarks: "Wanneer een toepassing de methode Update roept de <xref:System.Data.Common.DbDataAdapter>onderzoekt de <xref:System.Data.DataRow.RowState%2A>eigenschap, en worden de vereiste INSERT, UPDATE of DELETE-instructies iteratief voor elke rij, gebaseerd op de volgorde van de indexen die zijn geconfigureerd in de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> Bijvoorbeeld: Update mogelijk uitvoeren van een instructie DELETE, gevolgd door een instructie INSERT, en vervolgens een andere instructie DELETE, vanwege de volgorde van de rijen in de <xref:System.Data.DataTable>.</xref:System.Data.DataTable>       Houd er rekening mee dat deze instructies worden niet uitgevoerd als een batchproces; elke rij wordt afzonderlijk bijgewerkt. Een toepassing kunt aanroepen de <xref:System.Data.DataSet.GetChanges%2A>methode in situaties waar u de volgorde van de instructie typen (bijvoorbeeld invoegen vóór UPDATEs) moet beheren.</xref:System.Data.DataSet.GetChanges%2A> Zie voor meer informatie [gegevensbronnen bijwerken met DataAdapters](~/add/includes/ajax-current-ext-md.md).       Als INSERT, UPDATE of DELETE-instructies zijn niet opgegeven, de methode Update wordt een uitzondering gegenereerd. U kunt echter maken een <xref:System.Data.SqlClient.SqlCommandBuilder>of <xref:System.Data.OleDb.OleDbCommandBuilder>object voor het automatisch genereren van SQL-instructies voor één tabel updates als u de `SelectCommand` eigenschap van een .NET Framework-gegevensprovider.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Vervolgens aanvullende SQL-instructies die u instelt worden gegenereerd door de **CommandBuilder**. Deze logica generatie vereist sleutelkolomgegevens moeten zich in de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Zie voor meer informatie [opdrachten genereren met CommandBuilders](~/add/includes/ajax-current-ext-md.md).       De methode Update opgehaald rijen uit de tabel in de eerste toewijzing voordat u een update uitvoert. De Update vervolgens vernieuwt de rij met de waarde van de <xref:System.Data.IDbCommand.UpdatedRowSource%2A>eigenschap.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> Eventuele extra rijen geretourneerd, worden genegeerd.       Nadat de gegevens worden geladen naar de <xref:System.Data.DataSet>, wordt de <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>gebeurtenis wordt geactiveerd, zodat de gebruiker controleert de afgestemd <xref:System.Data.DataSet>uitvoerparameters rij en eventuele geretourneerd door de opdracht.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Nadat een rij is bijgewerkt, worden de wijzigingen op die rij worden geaccepteerd.       Wanneer u de Update, de volgorde van de uitvoering is als volgt: 1.  De waarden in de <xref:System.Data.DataRow>worden verplaatst naar de parameterwaarden.</xref:System.Data.DataRow>      2.  De <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>gebeurtenis is opgetreden.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  De opdracht wordt uitgevoerd.      4.  Als de opdracht is ingesteld op `FirstReturnedRecord`, wordt de eerste geretourneerd resultaat wordt geplaatst in de <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Als er output-parameters, zijn ze in de <xref:System.Data.DataRow>.</xref:System.Data.DataRow> geplaatst      6.  De <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>gebeurtenis is opgetreden.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>wordt aangeroepen.</xref:System.Data.DataRow.AcceptChanges%2A>       Elke opdracht die is gekoppeld aan de <xref:System.Data.Common.DbDataAdapter>meestal is een parameterverzameling is gekoppeld.</xref:System.Data.Common.DbDataAdapter> Parameters zijn toegewezen aan de huidige rij via de `SourceColumn` en `SourceVersion` eigenschappen van een .NET Framework-gegevensprovider `Parameter` klasse. `SourceColumn`verwijst naar een <xref:System.Data.DataTable>kolom die de <xref:System.Data.Common.DbDataAdapter>verwijzingen naar het verkrijgen van parameterwaarden voor de huidige rij.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`verwijst naar de niet-toegewezen kolomnaam voordat alle Tabeltoewijzingen zijn toegepast. Als `SourceColumn` verwijst naar een niet-bestaande kolom de actie op die afhankelijk is van een van de volgende <xref:System.Data.MissingMappingAction>waarden.</xref:System.Data.MissingMappingAction>      | Opsommingswaarde | Actie op die |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Gebruik van de bron-kolomnamen en tabelnamen in de <xref:System.Data.DataSet>Als er is geen toewijzing aanwezig is. |   | `MissingMappingAction.Ignore`| Een <xref:System.SystemException>wordt gegenereerd.</xref:System.SystemException> </xref:System.Data.DataSet> Wanneer de toewijzingen expliciet zijn ingesteld, een ontbrekende toewijzing voor de invoerparameter is meestal het gevolg van een fout. |   | `MissingMappingAction.Error`| Een <xref:System.SystemException>wordt gegenereerd. |       De `SourceColumn` eigenschap wordt ook gebruikt voor het toewijzen van de waarde voor uitvoer of input/output-parameters terug naar de `DataSet`.</xref:System.SystemException> Een uitzondering wordt gegenereerd als het verwijst naar een niet-bestaande kolom.       De `SourceVersion` eigenschap van een .NET Framework-gegevensprovider `Parameter` klasse bepaalt of de oorspronkelijke, Huidig of voorgesteld versie van de kolomwaarde te gebruiken. Deze mogelijkheid wordt vaak gebruikt voor het opnemen van de oorspronkelijke waarden in de WHERE-component van de instructie UPDATE om te controleren op schendingen van optimistische gelijktijdigheid.      > [!NOTE] > Als er een fout optreedt tijdens het bijwerken van een rij is een uitzondering opgetreden en de uitvoering van de update is stopgezet. Ingesteld om door te gaan de updatebewerking zonder uitzonderingen worden gegenereerd wanneer een fout is opgetreden, de <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>eigenschap `true` voordat Update aanroepen.</xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> U kunt ook reageren op fouten op basis van per rij in de `RowUpdated` gebeurtenis van een DataAdapter. De updatebewerking doorgaan zonder dat er een uitzondering binnen de `RowUpdated` gebeurtenis, stel de <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>eigenschap van de <xref:System.Data.Common.RowUpdatedEventArgs>tot <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_4_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_4_1.cs)]"
  syntax:
    content: public override int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "De <xref href=&quot;System.Data.DataSet&quot;> </xref> gebruikt voor het bijwerken van de gegevensbron."
    return:
      type: System.Int32
      description: "Het aantal rijen bijgewerkt vanuit de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De brontabel is ongeldig."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Een poging tot het uitvoeren van een instructie INSERT, UPDATE of DELETE geleid tot nul records die van invloed op."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  id: Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "De waarden in de database-updates door het uitvoeren van de respectieve INSERT, UPDATE of DELETE-instructies voor elk ingevoegd, bijgewerkt of verwijderd van de rij in de opgegeven <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  remarks: "Wanneer een toepassing wordt aangeroepen de <xref:System.Data.Common.DbDataAdapter.Update%2A>methode, de <xref:System.Data.Common.DbDataAdapter>onderzoekt de <xref:System.Data.DataRow.RowState%2A>eigenschap, en worden de vereiste INSERT, UPDATE of DELETE-instructies iteratief voor elke rij, gebaseerd op de volgorde van de indexen die zijn geconfigureerd in de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Bijvoorbeeld, <xref:System.Data.Common.DbDataAdapter.Update%2A>een DELETE-instructie, gevolgd door een instructie INSERT en vervolgens een andere instructie DELETE, vanwege de volgorde van de rijen in de <xref:System.Data.DataTable>.</xref:System.Data.DataTable> mogelijk uitvoeren</xref:System.Data.Common.DbDataAdapter.Update%2A>       Houd er rekening mee dat deze instructies worden niet uitgevoerd als een batchproces; elke rij wordt afzonderlijk bijgewerkt. Een toepassing kunt aanroepen de <xref:System.Data.DataSet.GetChanges%2A>methode in situaties waar u de volgorde van de instructie typen (bijvoorbeeld invoegen vóór UPDATEs) moet beheren.</xref:System.Data.DataSet.GetChanges%2A> Zie voor meer informatie [gegevensbronnen bijwerken met DataAdapters](~/add/includes/ajax-current-ext-md.md).       INSERT, UPDATE of DELETE-instructies zijn niet opgegeven als, de <xref:System.Data.Common.DbDataAdapter.Update%2A>methode wordt een uitzondering gegenereerd.</xref:System.Data.Common.DbDataAdapter.Update%2A> U kunt echter maken een <xref:System.Data.SqlClient.SqlCommandBuilder>of <xref:System.Data.OleDb.OleDbCommandBuilder>object voor het automatisch genereren van SQL-instructies voor één tabel updates als u de `SelectCommand` eigenschap van een .NET Framework-gegevensprovider.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Vervolgens aanvullende SQL-instructies die u instelt worden gegenereerd door de **CommandBuilder**. Deze logica generatie vereist sleutelkolomgegevens moeten zich in de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Zie voor meer informatie [opdrachten genereren met CommandBuilders](~/add/includes/ajax-current-ext-md.md).       De <xref:System.Data.Common.DbDataAdapter.Update%2A>methode rijen opgehaald uit de tabel in de eerste toewijzing voordat u een update uitvoert.</xref:System.Data.Common.DbDataAdapter.Update%2A> De <xref:System.Data.Common.DbDataAdapter.Update%2A>vervolgens vernieuwt u de rij met de waarde van de <xref:System.Data.IDbCommand.UpdatedRowSource%2A>eigenschap.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Eventuele extra rijen geretourneerd, worden genegeerd.       Nadat de gegevens worden geladen naar de <xref:System.Data.DataSet>, wordt de <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>gebeurtenis wordt geactiveerd, zodat de gebruiker controleert de afgestemd <xref:System.Data.DataSet>uitvoerparameters rij en eventuele geretourneerd door de opdracht.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Nadat een rij is bijgewerkt, worden de wijzigingen op die rij worden geaccepteerd.       Wanneer u <xref:System.Data.Common.DbDataAdapter.Update%2A>, de volgorde van de uitvoering is als volgt: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  De waarden in de <xref:System.Data.DataRow>worden verplaatst naar de parameterwaarden.</xref:System.Data.DataRow>      2.  De <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>gebeurtenis is opgetreden.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  De opdracht wordt uitgevoerd.      4.  Als de opdracht is ingesteld op `FirstReturnedRecord`, wordt de eerste geretourneerd resultaat wordt geplaatst in de <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Als er output-parameters, zijn ze in de <xref:System.Data.DataRow>.</xref:System.Data.DataRow> geplaatst      6.  De <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>gebeurtenis is opgetreden.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>wordt aangeroepen.</xref:System.Data.DataRow.AcceptChanges%2A>       Elke opdracht die is gekoppeld aan de <xref:System.Data.Common.DbDataAdapter>meestal is een parameterverzameling is gekoppeld.</xref:System.Data.Common.DbDataAdapter> Parameters zijn toegewezen aan de huidige rij via de `SourceColumn` en `SourceVersion` eigenschappen van een .NET Framework-gegevensprovider `Parameter` klasse. `SourceColumn`verwijst naar een <xref:System.Data.DataTable>kolom die de <xref:System.Data.Common.DbDataAdapter>verwijzingen naar het verkrijgen van parameterwaarden voor de huidige rij.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`verwijst naar de niet-toegewezen kolomnaam voordat alle Tabeltoewijzingen zijn toegepast. Als `SourceColumn` verwijst naar een niet-bestaande kolom de actie op die afhankelijk is van een van de volgende <xref:System.Data.MissingMappingAction>waarden.</xref:System.Data.MissingMappingAction>      | Opsommingswaarde | Actie op die |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Gebruik van de bron-kolomnamen en tabelnamen in de <xref:System.Data.DataSet>Als er is geen toewijzing aanwezig is. |   | `MissingMappingAction.Ignore`| Een <xref:System.SystemException>wordt gegenereerd.</xref:System.SystemException> </xref:System.Data.DataSet> Wanneer de toewijzingen expliciet zijn ingesteld, een ontbrekende toewijzing voor de invoerparameter is meestal het gevolg van een fout. |   | `MissingMappingAction.Error`| Een <xref:System.SystemException>wordt gegenereerd. |       De `SourceColumn` eigenschap wordt ook gebruikt voor het toewijzen van de waarde voor uitvoer of input/output-parameters terug naar de `DataSet`.</xref:System.SystemException> Een uitzondering wordt gegenereerd als het verwijst naar een niet-bestaande kolom.       De `SourceVersion` eigenschap van een .NET Framework-gegevensprovider `Parameter` klasse bepaalt of de oorspronkelijke, Huidig of voorgesteld versie van de kolomwaarde te gebruiken. Deze mogelijkheid wordt vaak gebruikt voor het opnemen van de oorspronkelijke waarden in de WHERE-component van de instructie UPDATE om te controleren op schendingen van optimistische gelijktijdigheid.      > [!NOTE] > Als er een fout optreedt tijdens het bijwerken van een rij is een uitzondering opgetreden en de uitvoering van de update is stopgezet. Ingesteld om door te gaan de updatebewerking zonder uitzonderingen worden gegenereerd wanneer een fout is opgetreden, de <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>eigenschap `true` aanroepen voordat <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> U kunt ook reageren op fouten op basis van per rij in de `RowUpdated` gebeurtenis van een DataAdapter. De updatebewerking doorgaan zonder dat er een uitzondering binnen de `RowUpdated` gebeurtenis, stel de <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>eigenschap van de <xref:System.Data.Common.RowUpdatedEventArgs>tot <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-vb[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_1_1.vb)]\n [!code-cs[Classic WebData DbDataAdapter.Update2 Example#1](~/add/codesnippet/csharp/m-system.data.common.dbd_1_1.cs)]"
  syntax:
    content: public int Update (System.Data.DataTable dataTable);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "De <xref href=&quot;System.Data.DataTable&quot;> </xref> gebruikt voor het bijwerken van de gegevensbron."
    return:
      type: System.Int32
      description: "Het aantal rijen bijgewerkt vanuit de <xref href=&quot;System.Data.DataTable&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "De <xref href=&quot;System.Data.DataSet&quot;> </xref> is ongeldig."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De brontabel is ongeldig."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Geen <xref href=&quot;System.Data.DataRow&quot;> </xref> bestaat om bij te werken.       - of - Nee <xref href=&quot;System.Data.DataTable&quot;> </xref> bestaat om bij te werken.       - of - Nee <xref href=&quot;System.Data.DataSet&quot;> </xref> bestaat om te gebruiken als bron."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Een poging tot het uitvoeren van een instructie INSERT, UPDATE of DELETE geleid tot nul records die van invloed op."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  id: Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "De waarden in de database-updates door het uitvoeren van de respectieve INSERT, UPDATE of DELETE-instructies voor elk ingevoegd, bijgewerkt of verwijderd van de rij in de opgegeven matrix met <xref href=&quot;System.Data.DataSet&quot;> </xref> objecten."
  remarks: "Wanneer een toepassing wordt aangeroepen de <xref:System.Data.Common.DbDataAdapter.Update%2A>methode, de <xref:System.Data.Common.DbDataAdapter>onderzoekt de <xref:System.Data.DataRow.RowState%2A>eigenschap, en worden de vereiste INSERT, UPDATE of DELETE-instructies iteratief voor elke rij, gebaseerd op de volgorde van de indexen die zijn geconfigureerd in de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Bijvoorbeeld, <xref:System.Data.Common.DbDataAdapter.Update%2A>een DELETE-instructie, gevolgd door een instructie INSERT en vervolgens een andere instructie DELETE, vanwege de volgorde van de rijen in de <xref:System.Data.DataTable>.</xref:System.Data.DataTable> mogelijk uitvoeren</xref:System.Data.Common.DbDataAdapter.Update%2A>       Houd er rekening mee dat deze instructies worden niet uitgevoerd als een batchproces; elke rij wordt afzonderlijk bijgewerkt. Een toepassing kunt aanroepen de <xref:System.Data.DataSet.GetChanges%2A>methode in situaties waar u de volgorde van de instructie typen (bijvoorbeeld invoegen vóór UPDATEs) moet beheren.</xref:System.Data.DataSet.GetChanges%2A> Zie voor meer informatie [gegevensbronnen bijwerken met DataAdapters](~/add/includes/ajax-current-ext-md.md).       INSERT, UPDATE of DELETE-instructies zijn niet opgegeven als, de <xref:System.Data.Common.DbDataAdapter.Update%2A>methode wordt een uitzondering gegenereerd.</xref:System.Data.Common.DbDataAdapter.Update%2A> U kunt echter maken een <xref:System.Data.SqlClient.SqlCommandBuilder>of <xref:System.Data.OleDb.OleDbCommandBuilder>object voor het automatisch genereren van SQL-instructies voor één tabel updates als u de `SelectCommand` eigenschap van een .NET Framework-gegevensprovider.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Vervolgens aanvullende SQL-instructies die u instelt worden gegenereerd door de **CommandBuilder**. Deze logica generatie vereist sleutelkolomgegevens moeten zich in de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Zie voor meer informatie [opdrachten genereren met CommandBuilders](~/add/includes/ajax-current-ext-md.md).       De <xref:System.Data.Common.DbDataAdapter.Update%2A>methode rijen opgehaald uit de tabel in de eerste toewijzing voordat u een update uitvoert.</xref:System.Data.Common.DbDataAdapter.Update%2A> De <xref:System.Data.Common.DbDataAdapter.Update%2A>vervolgens vernieuwt u de rij met de waarde van de <xref:System.Data.IDbCommand.UpdatedRowSource%2A>eigenschap.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Eventuele extra rijen geretourneerd, worden genegeerd.       Nadat de gegevens worden geladen naar de <xref:System.Data.DataSet>, wordt de <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>gebeurtenis wordt geactiveerd, zodat de gebruiker controleert de afgestemd <xref:System.Data.DataSet>uitvoerparameters rij en eventuele geretourneerd door de opdracht.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Nadat een rij is bijgewerkt, worden de wijzigingen op die rij worden geaccepteerd.       Wanneer u <xref:System.Data.Common.DbDataAdapter.Update%2A>, de volgorde van de uitvoering is als volgt: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  De waarden in de <xref:System.Data.DataRow>worden verplaatst naar de parameterwaarden.</xref:System.Data.DataRow>      2.  De <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>gebeurtenis is opgetreden.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  De opdracht wordt uitgevoerd.      4.  Als de opdracht is ingesteld op `FirstReturnedRecord`, wordt de eerste geretourneerd resultaat wordt geplaatst in de <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Als er output-parameters, zijn ze in de <xref:System.Data.DataRow>.</xref:System.Data.DataRow> geplaatst      6.  De <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>gebeurtenis is opgetreden.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>wordt aangeroepen.</xref:System.Data.DataRow.AcceptChanges%2A>       Elke opdracht die is gekoppeld aan de <xref:System.Data.Common.DbDataAdapter>meestal is een parameterverzameling is gekoppeld.</xref:System.Data.Common.DbDataAdapter> Parameters zijn toegewezen aan de huidige rij via de `SourceColumn` en `SourceVersion` eigenschappen van een .NET Framework-gegevensprovider `Parameter` klasse. `SourceColumn`verwijst naar een <xref:System.Data.DataTable>kolom die de <xref:System.Data.Common.DbDataAdapter>verwijzingen naar het verkrijgen van parameterwaarden voor de huidige rij.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`verwijst naar de niet-toegewezen kolomnaam voordat alle Tabeltoewijzingen zijn toegepast. Als `SourceColumn` verwijst naar een niet-bestaande kolom de actie op die afhankelijk is van een van de volgende <xref:System.Data.MissingMappingAction>waarden.</xref:System.Data.MissingMappingAction>      | Opsommingswaarde | Actie op die |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Gebruik van de bron-kolomnamen en tabelnamen in de <xref:System.Data.DataSet>Als er is geen toewijzing aanwezig is. |   | `MissingMappingAction.Ignore`| Een <xref:System.SystemException>wordt gegenereerd.</xref:System.SystemException> </xref:System.Data.DataSet> Wanneer de toewijzingen expliciet zijn ingesteld, een ontbrekende toewijzing voor de invoerparameter is meestal het gevolg van een fout. |   | `MissingMappingAction.Error`| Een <xref:System.SystemException>wordt gegenereerd. |       De `SourceColumn` eigenschap wordt ook gebruikt voor het toewijzen van de waarde voor uitvoer of input/output-parameters terug naar de `DataSet`.</xref:System.SystemException> Een uitzondering wordt gegenereerd als het verwijst naar een niet-bestaande kolom.       De `SourceVersion` eigenschap van een .NET Framework-gegevensprovider `Parameter` klasse bepaalt of de oorspronkelijke, Huidig of voorgesteld versie van de kolomwaarde te gebruiken. Deze mogelijkheid wordt vaak gebruikt voor het opnemen van de oorspronkelijke waarden in de WHERE-component van de instructie UPDATE om te controleren op schendingen van optimistische gelijktijdigheid.      > [!NOTE] > Als er een fout optreedt tijdens het bijwerken van een rij is een uitzondering opgetreden en de uitvoering van de update is stopgezet. Ingesteld om door te gaan de updatebewerking zonder uitzonderingen worden gegenereerd wanneer een fout is opgetreden, de <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>eigenschap `true` aanroepen voordat <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> U kunt ook reageren op fouten op basis van per rij in de `RowUpdated` gebeurtenis van een DataAdapter. De updatebewerking doorgaan zonder dat er een uitzondering binnen de `RowUpdated` gebeurtenis, stel de <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>eigenschap van de <xref:System.Data.Common.RowUpdatedEventArgs>tot <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  syntax:
    content: protected virtual int Update (System.Data.DataRow[] dataRows, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRows
      type: System.Data.DataRow[]
      description: "Een matrix van <xref href=&quot;System.Data.DataRow&quot;> </xref> objecten die worden gebruikt voor het bijwerken van de gegevensbron."
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "De <xref:System.Data.IDataAdapter.TableMappings*>verzameling om te gebruiken.</xref:System.Data.IDataAdapter.TableMappings*>"
    return:
      type: System.Int32
      description: "Het aantal rijen bijgewerkt vanuit de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "De <xref href=&quot;System.Data.DataSet&quot;> </xref> is ongeldig."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De brontabel is ongeldig."
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "Geen <xref href=&quot;System.Data.DataRow&quot;> </xref> bestaat om bij te werken.       - of - Nee <xref href=&quot;System.Data.DataTable&quot;> </xref> bestaat om bij te werken.       - of - Nee <xref href=&quot;System.Data.DataSet&quot;> </xref> bestaat om te gebruiken als bron."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Een poging tot het uitvoeren van een instructie INSERT, UPDATE of DELETE geleid tot nul records die van invloed op."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  id: Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "De waarden in de database wordt bijgewerkt door het uitvoeren van de respectieve INSERT, UPDATE of DELETE-instructies voor elk ingevoegd, bijgewerkt of verwijderd van de rij in de <xref href=&quot;System.Data.DataSet&quot;> </xref> met de opgegeven <xref href=&quot;System.Data.DataTable&quot;> </xref> naam."
  remarks: "Wanneer een toepassing wordt aangeroepen de <xref:System.Data.Common.DbDataAdapter.Update%2A>methode, de <xref:System.Data.Common.DbDataAdapter>onderzoekt de <xref:System.Data.DataRow.RowState%2A>eigenschap, en worden de vereiste INSERT, UPDATE of DELETE-instructies iteratief voor elke rij, gebaseerd op de volgorde van de indexen die zijn geconfigureerd in de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataRow.RowState%2A> </xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Update%2A> Bijvoorbeeld, <xref:System.Data.Common.DbDataAdapter.Update%2A>een DELETE-instructie, gevolgd door een instructie INSERT en vervolgens een andere instructie DELETE, vanwege de volgorde van de rijen in de <xref:System.Data.DataTable>.</xref:System.Data.DataTable> mogelijk uitvoeren</xref:System.Data.Common.DbDataAdapter.Update%2A>       Houd er rekening mee dat deze instructies worden niet uitgevoerd als een batchproces; elke rij wordt afzonderlijk bijgewerkt. Een toepassing kunt aanroepen de <xref:System.Data.DataSet.GetChanges%2A>methode in situaties waar u de volgorde van de instructie typen moet beheren (bijvoorbeeld invoegen vóór bijwerken).</xref:System.Data.DataSet.GetChanges%2A> Zie voor meer informatie [gegevensbronnen bijwerken met DataAdapters](~/add/includes/ajax-current-ext-md.md).       INSERT, UPDATE of DELETE-instructies zijn niet opgegeven als, de <xref:System.Data.Common.DbDataAdapter.Update%2A>methode wordt een uitzondering gegenereerd.</xref:System.Data.Common.DbDataAdapter.Update%2A> U kunt echter maken een <xref:System.Data.SqlClient.SqlCommandBuilder>of <xref:System.Data.OleDb.OleDbCommandBuilder>object voor het automatisch genereren van SQL-instructies voor één tabel updates als u de `SelectCommand` eigenschap van een .NET Framework-gegevensprovider.</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> Vervolgens aanvullende SQL-instructies die u instelt worden gegenereerd door de **CommandBuilder**. Deze logica generatie vereist sleutelkolomgegevens moeten zich in de <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Zie voor meer informatie [opdrachten genereren met CommandBuilders](~/add/includes/ajax-current-ext-md.md).       De <xref:System.Data.Common.DbDataAdapter.Update%2A>methode ondersteunt scenario&quot;s waar de <xref:System.Data.DataSet>bevat meerdere <xref:System.Data.DataTable>objecten waarvan de namen alleen per aanvraag verschillen.</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> Wanneer er meerdere tabellen met dezelfde naam maar een ander hoofdlettergebruik bestaan in een `DataSet`, <xref:System.Data.Common.DbDataAdapter.Update%2A>voor een vergelijking hoofdlettergevoelig om te zoeken in de bijbehorende tabel en genereert een uitzondering als geen exacte overeenkomst bestaat.</xref:System.Data.Common.DbDataAdapter.Update%2A> De volgende C#-code ziet u dit probleem.      ```   DataSet ds = new DataSet();    ds.Tables.Add(&quot;aaa&quot;);    ds.Tables.Add(&quot;AAA&quot;);    adapter.Update(ds, &quot;aaa&quot;); // Updates &quot;aaa&quot;, which already exists in the DataSet.    adapter.Update(ds, &quot;AAA&quot;); // Updates &quot;AAA&quot;, which already exists in the DataSet.       adapter.Update(ds, &quot;Aaa&quot;); // Results in an exception.   ```Als <xref:System.Data.Common.DbDataAdapter.Update%2A>wordt aangeroepen en de <xref:System.Data.DataSet>bevat slechts één <xref:System.Data.DataTable>geval verschilt alleen waarvan de naam die <xref:System.Data.DataTable>wordt bijgewerkt.</xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> In dit scenario is de vergelijking niet hoofdlettergevoelig. De volgende C#-code ziet u dit probleem.      ```   DataSet dataset = new DataSet();    dataset.Tables.Add(&quot;aaa&quot;);       adapter.Update(dataset, &quot;AAA&quot;); // Updates table &quot;aaa&quot; because only one similarly named table is in the DataSet.   ```De <xref:System.Data.Common.DbDataAdapter.Update%2A>methode rijen opgehaald uit de tabel in de eerste toewijzing voordat u een update uitvoert.</xref:System.Data.Common.DbDataAdapter.Update%2A> De <xref:System.Data.Common.DbDataAdapter.Update%2A>vervolgens vernieuwt u de rij met de waarde van de <xref:System.Data.IDbCommand.UpdatedRowSource%2A>eigenschap.</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DbDataAdapter.Update%2A> Eventuele extra rijen geretourneerd, worden genegeerd.       Nadat de gegevens worden geladen naar de <xref:System.Data.DataSet>, wordt de <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>gebeurtenis wordt geactiveerd, zodat de gebruiker controleert de afgestemd <xref:System.Data.DataSet>uitvoerparameters rij en eventuele geretourneerd door de opdracht.</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> Nadat een rij is bijgewerkt, worden de wijzigingen op die rij worden geaccepteerd.       Wanneer u <xref:System.Data.Common.DbDataAdapter.Update%2A>, de volgorde van de uitvoering is als volgt: 1.</xref:System.Data.Common.DbDataAdapter.Update%2A>  De waarden in de <xref:System.Data.DataRow>worden verplaatst naar de parameterwaarden.</xref:System.Data.DataRow>      2.  De <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>gebeurtenis is opgetreden.</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  De opdracht wordt uitgevoerd.      4.  Als de opdracht is ingesteld op `FirstReturnedRecord`, wordt de eerste geretourneerd resultaat wordt geplaatst in de <xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  Als er output-parameters, zijn ze in de <xref:System.Data.DataRow>.</xref:System.Data.DataRow> geplaatst      6.  De <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>gebeurtenis is opgetreden.</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>wordt aangeroepen.</xref:System.Data.DataRow.AcceptChanges%2A>       Elke opdracht die is gekoppeld aan de <xref:System.Data.Common.DbDataAdapter>meestal is een parameterverzameling is gekoppeld.</xref:System.Data.Common.DbDataAdapter> Parameters zijn toegewezen aan de huidige rij via de `SourceColumn` en `SourceVersion` eigenschappen van een .NET Framework-gegevensprovider `Parameter` klasse. `SourceColumn`verwijst naar een <xref:System.Data.DataTable>kolom die de <xref:System.Data.Common.DbDataAdapter>verwijzingen naar het verkrijgen van parameterwaarden voor de huidige rij.</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`verwijst naar de niet-toegewezen kolomnaam voordat alle Tabeltoewijzingen zijn toegepast. Als `SourceColumn` verwijst naar een niet-bestaande kolom de actie op die afhankelijk is van een van de volgende <xref:System.Data.MissingMappingAction>waarden.</xref:System.Data.MissingMappingAction>      | Opsommingswaarde | Actie op die |   |-----------------------|------------------|   | `MissingMappingAction.Passthrough`| Gebruik van de bron-kolomnamen en tabelnamen in de <xref:System.Data.DataSet>Als er is geen toewijzing aanwezig is. |   | `MissingMappingAction.Ignore`| Een <xref:System.SystemException>wordt gegenereerd.</xref:System.SystemException> </xref:System.Data.DataSet> Wanneer de toewijzingen expliciet zijn ingesteld, een ontbrekende toewijzing voor de invoerparameter is meestal het gevolg van een fout. |   | `MissingMappingAction.Error`| Een <xref:System.SystemException>wordt gegenereerd. |       De `SourceColumn` eigenschap wordt ook gebruikt voor het toewijzen van de waarde voor uitvoer of input/output-parameters terug naar de `DataSet`.</xref:System.SystemException> Een uitzondering wordt gegenereerd als het verwijst naar een niet-bestaande kolom.       De `SourceVersion` eigenschap van een .NET Framework-gegevensprovider `Parameter` klasse bepaalt of de oorspronkelijke, Huidig of voorgesteld versie van de kolomwaarde te gebruiken. Deze mogelijkheid wordt vaak gebruikt voor het opnemen van de oorspronkelijke waarden in de WHERE-component van de instructie UPDATE om te controleren op schendingen van optimistische gelijktijdigheid.      > [!NOTE] > Als er een fout optreedt tijdens het bijwerken van een rij is een uitzondering opgetreden en de uitvoering van de update is stopgezet. Ingesteld om door te gaan de updatebewerking zonder uitzonderingen worden gegenereerd wanneer een fout is opgetreden, de <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>eigenschap `true` aanroepen voordat <xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> U kunt ook reageren op fouten op basis van per rij in de `RowUpdated` gebeurtenis van een DataAdapter. De updatebewerking doorgaan zonder dat er een uitzondering binnen de `RowUpdated` gebeurtenis, stel de <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>eigenschap van de <xref:System.Data.Common.RowUpdatedEventArgs>tot <xref:System.Data.UpdateStatus>.</xref:System.Data.UpdateStatus> </xref:System.Data.Common.RowUpdatedEventArgs> </xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to update the data source.  \n  \n [!code-cs[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/csharp/m-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.Update3#1](~/add/codesnippet/visualbasic/m-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataSet dataSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "De <xref href=&quot;System.Data.DataSet&quot;> </xref> te gebruiken voor het bijwerken van de gegevensbron."
    - id: srcTable
      type: System.String
      description: "De naam van de brontabel moet worden gebruikt voor het toewijzen van de tabel."
    return:
      type: System.Int32
      description: "Het aantal rijen bijgewerkt vanuit de <xref href=&quot;System.Data.DataSet&quot;> </xref>."
  overload: System.Data.Common.DbDataAdapter.Update*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "De <xref href=&quot;System.Data.DataSet&quot;> </xref> is ongeldig."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De brontabel is ongeldig."
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "Een poging tot het uitvoeren van een instructie INSERT, UPDATE of DELETE geleid tot nul records die van invloed op."
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  id: UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Opgehaald of ingesteld van een waarde die Hiermee schakelt ondersteuning voor batchverwerking of en geeft het aantal opdrachten die kunnen worden uitgevoerd in een batch."
  remarks: "Gebruik de eigenschap UpdateBatchSize een gegevensbron bijwerken met wijzigingen van een <xref:System.Data.DataSet>.</xref:System.Data.DataSet> Als de gegevensprovider batchverwerking ondersteunt, kan dit de prestaties van toepassingen verhogen doordat het aantal retouren naar de server. Deze eigenschap wordt ADO.NET 2.0 ondersteund voor de .NET-gegevensproviders voor SQL Server (SqlClient) en Oracle (OracleClient).       Uitvoeren van een extreem grote batch, kan de prestaties verminderen. Daarom moet u testen voor de instelling voor de optimale batch voordat u uw toepassing implementeert.       Een <xref:System.ArgumentOutOfRangeException>gegenereerd als de waarde is ingesteld op een getal kleiner dan nul.</xref:System.ArgumentOutOfRangeException>"
  syntax:
    content: public virtual int UpdateBatchSize { get; set; }
    return:
      type: System.Int32
      description: "Het aantal rijen per batch verwerkt.       <table><thead><tr><th> De waarde is       </th><th> Effect       </th></tr></thead><tbody><tr><td> 0       </td><td> Er is geen limiet voor de batchgrootte.       </td></tr><tr><td> 1       </td><td> Hiermee schakelt u batchupdates.       </td></tr><tr><td> &gt; 1       </td><td> Wijzigingen worden verzonden batches UpdateBatchSize bewerkingen tegelijkertijd gebruiken.       </td></tr></tbody></table>       Als u dit op een andere waarde dan 1, alle opdrachten die zijn gekoppeld aan de <xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref> moet hebben hun <> </> *> eigenschap ingesteld op * *geen* * of * *OutputParameters**. Anders wordt een uitzondering worden gegenereerd."
  overload: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  id: UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Opgehaald of ingesteld van een opdracht die wordt gebruikt voor het bijwerken van de records in de gegevensbron."
  remarks: "Tijdens de <xref:System.Data.Common.DbDataAdapter.Update%2A>, als deze eigenschap niet is ingesteld en gegevens van primaire sleutel is aanwezig in de <xref:System.Data.DataSet>, wordt de <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>automatisch wordt gegenereerd.</xref:System.Data.IDbDataAdapter.UpdateCommand%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A>"
  example:
  - "The following example creates the derived class <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.common.dbd_2_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.common.dbd_2_1.vb)]"
  syntax:
    content: public System.Data.Common.DbCommand UpdateCommand { get; set; }
    return:
      type: System.Data.Common.DbCommand
      description: "Een <xref href=&quot;System.Data.IDbCommand&quot;> </xref> gebruikt tijdens <xref:System.Data.IDataAdapter.Update*>records in de gegevensbron voor gewijzigde rijen in de gegevensset wilt bijwerken.</xref:System.Data.IDataAdapter.Update*>"
  overload: System.Data.Common.DbDataAdapter.UpdateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DataAdapter
  isExternal: false
  name: System.Data.Common.DataAdapter
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.Common.DbDataAdapter.#ctor
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter()
  nameWithType: DbDataAdapter.DbDataAdapter()
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter()
- uid: System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter(DbDataAdapter)
  nameWithType: DbDataAdapter.DbDataAdapter(DbDataAdapter)
  fullName: System.Data.Common.DbDataAdapter.DbDataAdapter(DbDataAdapter)
- uid: System.Data.Common.DbDataAdapter
  parent: System.Data.Common
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch(IDbCommand)
  nameWithType: DbDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.Common.DbDataAdapter.AddToBatch(IDbCommand)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.Common.DbDataAdapter.ClearBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch()
  nameWithType: DbDataAdapter.ClearBatch()
  fullName: System.Data.Common.DbDataAdapter.ClearBatch()
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatedEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatedEventArgs
  nameWithType: RowUpdatedEventArgs
  fullName: System.Data.Common.RowUpdatedEventArgs
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Data.Common.DataTableMapping
  parent: System.Data.Common
  isExternal: false
  name: DataTableMapping
  nameWithType: DataTableMapping
  fullName: System.Data.Common.DataTableMapping
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatingEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatingEventArgs
  nameWithType: RowUpdatingEventArgs
  fullName: System.Data.Common.RowUpdatingEventArgs
- uid: System.Data.Common.DbDataAdapter.DefaultSourceTableName
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DefaultSourceTableName
  nameWithType: DbDataAdapter.DefaultSourceTableName
  fullName: System.Data.Common.DbDataAdapter.DefaultSourceTableName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DbDataAdapter.DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DbDataAdapter.Dispose(Boolean)
  fullName: System.Data.Common.DbDataAdapter.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch()
  nameWithType: DbDataAdapter.ExecuteBatch()
  fullName: System.Data.Common.DbDataAdapter.ExecuteBatch()
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: DbDataAdapter.Fill(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable)
  nameWithType: DbDataAdapter.Fill(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,String)
  nameWithType: DbDataAdapter.Fill(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable,IDbCommand,CommandBehavior)
- uid: System.Data.CommandBehavior
  parent: System.Data
  isExternal: false
  name: CommandBehavior
  nameWithType: CommandBehavior
  fullName: System.Data.CommandBehavior
- uid: System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(Int32,Int32,DataTable[])
  nameWithType: DbDataAdapter.Fill(Int32,Int32,DataTable[])
  fullName: System.Data.Common.DbDataAdapter.Fill(Int32,Int32,DataTable[])
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataTable[],Int32,Int32,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.Fill(DataSet,Int32,Int32,String,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
  fullName: System.Data.Common.DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,String)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,String)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,String)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataTable,SchemaType,IDbCommand,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  nameWithType: DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
  fullName: System.Data.Common.DbDataAdapter.FillSchema(DataSet,SchemaType,IDbCommand,String,CommandBehavior)
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: DbDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedParameter(Int32,Int32)
- uid: System.Data.IDataParameter
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Data.Common.DbDataAdapter.GetFillParameters
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: DbDataAdapter.GetFillParameters()
  fullName: System.Data.Common.DbDataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.InitializeBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching()
  nameWithType: DbDataAdapter.InitializeBatching()
  fullName: System.Data.Common.DbDataAdapter.InitializeBatching()
- uid: System.Data.Common.DbDataAdapter.InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
- uid: System.Data.Common.DbDataAdapter.SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: DbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.Common.DbDataAdapter.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Common.DbDataAdapter.TerminateBatching
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching()
  nameWithType: DbDataAdapter.TerminateBatching()
  fullName: System.Data.Common.DbDataAdapter.TerminateBatching()
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[])
  nameWithType: DbDataAdapter.Update(DataRow[])
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: DbDataAdapter.Update(DataSet)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataTable)
  nameWithType: DbDataAdapter.Update(DataTable)
  fullName: System.Data.Common.DbDataAdapter.Update(DataTable)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataRow[],DataTableMapping)
  nameWithType: DbDataAdapter.Update(DataRow[],DataTableMapping)
  fullName: System.Data.Common.DbDataAdapter.Update(DataRow[],DataTableMapping)
- uid: System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update(DataSet,String)
  nameWithType: DbDataAdapter.Update(DataSet,String)
  fullName: System.Data.Common.DbDataAdapter.Update(DataSet,String)
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
  fullName: System.Data.Common.DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
  fullName: System.Data.Common.DbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.#ctor*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter.DbDataAdapter
- uid: System.Data.Common.DbDataAdapter.AddToBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: AddToBatch
  nameWithType: DbDataAdapter.AddToBatch
- uid: System.Data.Common.DbDataAdapter.ClearBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ClearBatch
  nameWithType: DbDataAdapter.ClearBatch
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent
  nameWithType: DbDataAdapter.CreateRowUpdatedEvent
- uid: System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent
  nameWithType: DbDataAdapter.CreateRowUpdatingEvent
- uid: System.Data.Common.DbDataAdapter.DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: DbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.Dispose*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Dispose
  nameWithType: DbDataAdapter.Dispose
- uid: System.Data.Common.DbDataAdapter.ExecuteBatch*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: ExecuteBatch
  nameWithType: DbDataAdapter.ExecuteBatch
- uid: System.Data.Common.DbDataAdapter.Fill*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Fill
  nameWithType: DbDataAdapter.Fill
- uid: System.Data.Common.DbDataAdapter.FillCommandBehavior*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillCommandBehavior
  nameWithType: DbDataAdapter.FillCommandBehavior
- uid: System.Data.Common.DbDataAdapter.FillSchema*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: DbDataAdapter.FillSchema
- uid: System.Data.Common.DbDataAdapter.GetBatchedParameter*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedParameter
  nameWithType: DbDataAdapter.GetBatchedParameter
- uid: System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected
  nameWithType: DbDataAdapter.GetBatchedRecordsAffected
- uid: System.Data.Common.DbDataAdapter.GetFillParameters*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: DbDataAdapter.GetFillParameters
- uid: System.Data.Common.DbDataAdapter.InitializeBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InitializeBatching
  nameWithType: DbDataAdapter.InitializeBatching
- uid: System.Data.Common.DbDataAdapter.InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: DbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.OnRowUpdated*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdated
  nameWithType: DbDataAdapter.OnRowUpdated
- uid: System.Data.Common.DbDataAdapter.OnRowUpdating*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: OnRowUpdating
  nameWithType: DbDataAdapter.OnRowUpdating
- uid: System.Data.Common.DbDataAdapter.SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: DbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.Common.DbDataAdapter.System#ICloneable#Clone*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: DbDataAdapter.System.ICloneable.Clone
- uid: System.Data.Common.DbDataAdapter.TerminateBatching*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: TerminateBatching
  nameWithType: DbDataAdapter.TerminateBatching
- uid: System.Data.Common.DbDataAdapter.Update*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: Update
  nameWithType: DbDataAdapter.Update
- uid: System.Data.Common.DbDataAdapter.UpdateBatchSize*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: DbDataAdapter.UpdateBatchSize
- uid: System.Data.Common.DbDataAdapter.UpdateCommand*
  parent: System.Data.Common.DbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: DbDataAdapter.UpdateCommand
