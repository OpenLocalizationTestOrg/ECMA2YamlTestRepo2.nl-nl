### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  id: ConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  langs:
  - csharp
  name: ConnectionPoint
  nameWithType: ConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint
  type: Class
  summary: "Fungeert als de basisklasse voor het definiëren van connection point, objecten waarmee het besturingselement voor consumenten en het provider-besturingselement in een webonderdelen verbinding met het delen van gegevens."
  remarks: "Elke verbinding webonderdelen bestaat uit twee serverbesturingselementen delen van gegevens: één besturingselement is de consument en de andere is de provider. Zie voor een beschrijving van de essentiële onderdelen van een verbinding met webonderdelen en het verbindingsobject zelf de <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>overzicht van de klasse.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Elke verbinding webonderdelen vereist verbindingspunten. De provider en de controle van de consument moet elk ten minste één gedefinieerde ConnectionPoint-object (elk van deze kan desgewenst hebben meerdere verbindingspunten) waarin de details voor hoe een besturingselement verbinding kan maken met een ander besturingselement en het type gegevens die kunnen worden gedeeld. In een werkelijke verbinding, de provider heeft een eigen soort object connection point (afgeleid van de basisklasse ConnectionPoint), een <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>exemplaar en de consument heeft een eigen object, een <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>exemplaar.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Voor het maken van een providerverbindingspunt moeten ontwikkelaars een callback-methode toevoegen aan de provider die een exemplaar van de geïmplementeerde interface wordt geretourneerd met een consumer. De terugbelmethode in de broncode met moeten worden gemarkeerd als ze een `ConnectionProvider` kenmerk code (Zie de <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>klasse).</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> Op dezelfde manier voor het maken van een consumerverbindingspunt ontwikkelaars een methode moeten toevoegen aan de verbruiker die een exemplaar van de interface ontvangt, en ze moeten worden gemarkeerd als deze methode met een `ConnectionConsumer` kenmerk (Zie de <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>klasse).</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>       Wanneer ontwikkelaars verbindingen op een webpagina maken, kunnen ze worden gemaakt als statisch of dynamisch verbindingen. Statische verbindingen zijn gedefinieerd in de opmaak van een webpagina. Wanneer een statische verbinding wordt gedefinieerd, ontwikkelaars kunnen opgeven welke verbindingspunten voor de consument en de provider worden gebruikt door het toewijzen van waarden voor de `ProviderConnectionPointID` en `ConsumerConnectionPointID` kenmerken binnen de `<asp:webpartconnection>` elementcode. Deze aanpak is vooral nuttig als er meerdere verbindingspunten gedefinieerd in de besturingselementen consumer en provider omdat hij Hiermee de statische verbinding om te bepalen welke verbindingspunten moet worden gebruikt voor de verbinding.       Dynamische verbindingen via een programma, worden gemaakt door een ontwikkelaar code of door gebruikers via de gebruikersinterface (UI) opgegeven door de <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>besturingselement.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> U maakt een verbinding in code door ontwikkelaars moeten geen instantie ophalen van een <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>object door het aanroepen van de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>methode op de <xref:System.Web.UI.WebControls.WebParts.WebPartManager>besturingselement.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Voordat ze deze methode aanroepen kunnen, moeten de ontwikkelaars verwijzingen naar de verbruiker en provider serverbesturingselementen en hun respectieve connection point-objecten hebben. Als u verwijzingen naar de verbindingspunten voor een provider en een besturingselement voor consumenten, ontwikkelaars roept u eerst de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>en <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>methoden op de <xref:System.Web.UI.WebControls.WebParts.WebPartManager>besturingselement.</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> Deze methoden retourneren de juiste verbinding point-objecten, op zijn beurt kunnen worden doorgegeven aan de methode voor het maken van een verbinding.       Wanneer de provider en de consument punt verbindingsobjecten die beide met hetzelfde type interface werken, ze compatibel zijn en vormen een rechtstreekse verbinding om gegevens te delen. Als ze niet met hetzelfde interfacetype werken, een <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>object moet worden gebruikt voor het exemplaar van de interface van de provider in een type dat de gebruiker met werkt vertalen.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       De abstracte klasse voor ConnectionPoint biedt de details op basis van verbindingspunten die worden gedeeld door de consumer- en providertypen besturingselementen. Verschillende eigenschappen bevatten deze gegevens. De <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>eigenschap geeft aan of een verbindingspunt aan meer dan één verbinding tegelijk deelnemen kan.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> Standaard verbindingspunten provider kunnen deelnemen in meerdere verbindingen en consumenten verbindingspunten kunnen niet. De <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>eigenschap geeft het type van het serverbesturingselement die zijn gekoppeld aan een verbindingspunt.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> Houd er rekening mee dat niet alleen <xref:System.Web.UI.WebControls.WebParts.WebPart>besturingselementen te vormen verbindingen; elk serverbesturingselement of een ASP.NET-besturingselement, een aangepast besturingselement of een besturingselement kan worden ingeschakeld voor deel uitmaken van verbindingen als geplaatst een <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zone.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> De <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>eigenschap bevat een beschrijvende naam voor het serviceverbindingspunt wordt gehost die kan worden weergegeven in de gebruikersinterface ter ondersteuning van gebruikers die verbindingen maken.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> De <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>eigenschap fungeert als een tekenreeks-id voor het verbindingsobject punt zelf.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> De <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>eigenschap geeft aan welk type interface exemplaar van het verbindingspunt begrijpt.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Hiermee wordt aangegeven of een gegeven verbindingspunt biedt of een exemplaar van die interface verbruikt wordt bepaald door het of het is een <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>of een <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>object.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       De klasse ConnectionPoint heeft een methode. De <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>methode retourneert een Booleaanse waarde die aangeeft of een verbindingspunt kunnen momenteel deel uitmaken van verbindingen.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>       De klasse ConnectionPoint heeft ook een openbaar veld <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> Dit veld bevat een waarde die wordt gebruikt voor het identificeren van het verbindingspunt standaard in een verbinding.      > [!NOTE] > De kenmerken voor het opgeven van verbindingspunt methoden hebben slechts één vereiste parameter `displayName`, dus is het mogelijk te maken van het kenmerk default verbinding punt zonder op te geven van een ID. In dergelijke gevallen de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>veld levert een basiswaarde te gebruiken.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example demonstrates the creation of a Web Parts connection that includes the required ConnectionPoint objects. Because the ConnectionPoint class is an abstract base class, instances of its child classes--<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>--are the actual objects used to form a connection.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. You can also create the connection programmatically; the code for doing that is contained in the `Button1_Click` method. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the ConnectionPoint objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. Click the **Disconnect** button to terminate the existing connection. Use the **Display Mode** control to return the page to browse mode. Next, click the **Dynamic Connection** button to create a connection programmatically. Click the **Connection Point Details** button again, to indicate details about the two connection point objects."
  syntax:
    content: public abstract class ConnectionPoint
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  id: AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hiermee wordt een waarde die aangeeft of een verbindingspunt meerdere gelijktijdige verbindingen ondersteunt opgehaald."
  remarks: "<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>objecten hebben hun AllowsMultipleConnections eigenschap waarde is ingesteld op `true` (door de <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>klasse), omdat de verbindingspunten provider op formulier-verbindingen naar meerdere gebruikers in staat het besturingselement webonderdelen is standaard ingesteld stelt.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute></xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Daarentegen <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>objecten hebben hun AllowsMultipleConnections eigenschapwaarde is ingesteld op `false` (door de <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>klasse) omdat het besturingselement webonderdelen is standaard ingesteld consumer verbinding toestaat verwijst naar een verbinding met slechts één provider op een tijdstip.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Kunt u het standaardgedrag betreffende meerdere verbindingen van het toewijzen van verschillende waarden voor de <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>eigenschap (voor providers) of de <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>eigenschap (voor consumenten) in de twee <xref:System.Attribute>klassen die wordt gebruikt voor verbindingskenmerken.</xref:System.Attribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> Als u de verbindingspunten consumer verbinding maken met meerdere providers op hetzelfde moment inschakelt, moet uw code te maken met alle resulterende synchronisatieproblemen."
  example:
  - "The following code example demonstrates the use of the AllowsMultipleConnections property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the AllowsMultipleConnections property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1358_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1358_1.aspx)]"
  syntax:
    content: public bool AllowsMultipleConnections { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het verbindingspunt meerdere verbindingen ondersteunt; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  id: ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Haalt de <xref:System.Type>van het serverbesturingselement waarmee een verbindingspunt gekoppeld is.</xref:System.Type>"
  remarks: "De waarde van de eigenschap besturingselementtype is vaak de <xref:System.Web.UI.WebControls.WebParts.WebPart>type.</xref:System.Web.UI.WebControls.WebParts.WebPart> Echter, omdat elk type besturingselement of serverbesturingselement kan deel uitmaken van verbindingen als deze juist is ingeschakeld en geplaatst een <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zone, de eigenschap besturingselementtype als resultaat geven deze andere besturingselement servertypen evenals.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>       Als server bepaalt die niet <xref:System.Web.UI.WebControls.WebParts.WebPart>besturingselementen worden geplaatst een <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zone worden samengevoegd met een <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>object tijdens runtime, zodat ze kunnen worden gebruikt als <xref:System.Web.UI.WebControls.WebParts.WebPart>regelt en deel uitmaken van verbindingen.</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> Maar wanneer deze besturingselementen zijn betrokken bij verbindingen, retourneert de waarde van de eigenschap besturingselementtype geen de <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>Typ; deze retourneert het type van de <xref:System.Web.UI.WebControls.WebParts.GenericWebPart>van het object onderliggend besturingselement, het type van de server of een gebruiker is.</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart>"
  example:
  - "The following code example demonstrates the use of the ControlType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ControlType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_622_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_622_1.aspx)]"
  syntax:
    content: public Type ControlType { get; }
    return:
      type: System.Type
      description: "Een <xref:System.Type>die het besturingselementtype vertegenwoordigt.</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  id: DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hiermee geeft u een tekenreeks die wordt gebruikt voor het identificeren van het verbindingspunt standaard binnen een verzameling van verbindingspunten die zijn gekoppeld aan een serverbesturingselement."
  remarks: "Wanneer een verbinding is gemaakt, is het mogelijk om op te geven van een ID voor het serviceverbindingspunt wordt gehost in de broncode van een gebruiker of de provider <xref:System.Web.UI.WebControls.WebParts.WebPart>beheren, met behulp van een <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>of een <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>kenmerk.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.WebPart> Echter, wanneer een kenmerk wordt toegevoegd aan een verbindingspunt in de broncode de `ID` parameter is optioneel. Als de ID in het kenmerk niet is opgegeven, bevat het veld DefaultID een tekenreeks die wordt gebruikt voor het identificeren van het verbindingspunt standaard.       Als meerdere verbindingspunten zijn gedefinieerd in een besturingselement consumer of provider, is het nodig is om op te geven van een ID voor elk verbindingspunt zodat de verbindingspunten bij het maken van verbindingen kunnen worden onderscheiden."
  syntax:
    content: public static readonly string DefaultID;
    return:
      type: System.String
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  id: DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hiermee haalt u een tekenreeks die als een beschrijvende weergavenaam fungeert voor een verbindingspunt in de gebruikersinterface (UI)."
  remarks: "Een webonderdelen om verbinding te maken, moeten de provider- en consumertypen besturingselementen voor de verbinding elk opgeven ten minste één verbindingspunt, een methode waarmee ze communiceren en delen van gegevens. Voor deze verbinding punt methoden bevat een ontwikkelaar een kenmerk op de geselecteerde methoden. In de provider een `ConnectionProvider` kenmerk is ingesteld op de geselecteerde retouraanroepmethode en in de consument een `ConnectionConsumer` kenmerk is ingesteld voor de methode die een exemplaar van een interface waarin gegevens van de provider ontvangt. Voor beide van deze kenmerken de één parameter die is altijd vereist, ongeacht welke overload is gedeclareerd voor het maken van het kenmerk is de `displayName` parameter. De ontwikkelaar moet een tekenreeks die moet worden gebruikt als een beschrijvende weergavenaam voor het verbindingspunt toewijzen en deze reeks wordt de waarde van de eigenschap DisplayName.       De waarde van de eigenschap weergavenaam wordt weergegeven in de gebruikersinterface van een webpagina wanneer gebruikers verbindingen maken. Bijvoorbeeld, wanneer de <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>besturingselement wordt toegevoegd aan de pagina een gebruikersinterface voor gebruikers verbindingen maken tussen besturingselementen wordt gemaakt.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Nadat een gebruiker een pagina in de weergavemodus connect verandert en een connect werkwoord klikt op een <xref:System.Web.UI.WebControls.WebParts.WebPart>beheren, de verbinding gebruikersinterface wordt weergegeven.</xref:System.Web.UI.WebControls.WebParts.WebPart> Elk besturingselement dat in een verbinding deelnemen kan wordt weergegeven in de gebruikersinterface en is een besturingselement voor vervolgkeuzelijst waarin de beschrijvende namen van de beschikbare verbindingspunten naast elk besturingselement. Gebruikers moeten ten minste één verbindingspunt van een verbinding tot stand te selecteren. De waarden die worden weergegeven in de lijst met verbindingspunten zijn afkomstig van de eigenschap DisplayName. Als ontwikkelaars een aangepaste gebruikersinterface voor het maken van verbindingen, kan de eigenschap DisplayName worden gebruikt in een vergelijkbare manier als bij een beschrijvende naam opgeeft die een verbindingspunt vertegenwoordigt."
  syntax:
    content: public string DisplayName { get; }
    return:
      type: System.String
      description: "Een tekenreeks met een beschrijvende weergavenaam voor een <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;> </xref> object."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  id: GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Retourneert een waarde die aangeeft of een verbindingspunt verbindingen kan deelnemen."
  remarks: "De methode GetEnabled in de base <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>klasse altijd retourneert `true`, maar afgeleide klassen kunnen worden overschreven door de methode om terug te keren `true` of `false` op verschillende tijdstippen, op basis van de status van `control`.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>"
  example:
  - "The following code example demonstrates the use of the GetEnabled method on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the GetEnabled method on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/a42b3e8f-70fc-455c-a13a-_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/a42b3e8f-70fc-455c-a13a-_1.aspx)]"
  syntax:
    content: public virtual bool GetEnabled (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Een <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref> of een ander serverbesturingselement die is gekoppeld aan een verbindingspunt."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het besturingselement een verbindingspunt maken kunt deel uitmaken van een verbinding. anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hiermee wordt een tekenreeks met de id voor een verbindingspunt opgehaald."
  remarks: "Wanneer een ontwikkelaar declareert een <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>of een <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>kenmerk voor een methode in de broncode van een besturingselement dat de methode kan worden gebruikt als een verbindingspunt is niet verplicht om te declareren de `ID` parameter voor het kenmerk dat connection point.</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> De enige vereiste kenmerk is de `displayName` parameter. Een standaard-ID is toegewezen aan het verbindingspunt met behulp van de waarde van de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>veld.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Als er slechts één methode in een besturingselement wordt gebruikt als een verbindingspunt, is het niet nodig om op te geven van een ID voor het verbindingspunt. Als er meerdere methoden die zijn opgegeven als verbindingspunten zijn, moet u een ID voor elk criterium; anders wordt een uitzondering gegenereerd. Een ID aan elk verbindingspunt toewijst, maken u ook het mogelijk om op te geven welke verbindingspunt moet worden gebruikt wanneer u verbindingen in webpagina&quot;s declareren of ze in code maken."
  example:
  - "The following code example demonstrates the use of the ID property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ID property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1125_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1125_1.aspx)]"
  syntax:
    content: public string ID { get; }
    return:
      type: System.String
      description: "Een tekenreeks met de id voor een verbindingspunt."
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  id: InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hiermee wordt het type van de interface die wordt gebruikt door een verbindingspunt."
  remarks: "De eigenschap InterfaceType geeft aan welk type interface maakt gebruik van een verbindingspunt. Dit kan helpen om te bepalen of er twee besturingselementen zijn compatibel en kunnen vormen een verbinding. Als het providerverbindingspunt InterfaceType van het consumerverbindingspunt InterfaceType verschilt, wordt de twee besturingselementen niet compatibel zijn (wat betekent dat ze rechtstreeks kunnen niet worden verbonden zonder een transformator), en een <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>object moet worden gebruikt om een verbinding te maken.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  example:
  - "The following code example demonstrates the use of the InterfaceType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the InterfaceType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_359_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_359_1.aspx)]"
  syntax:
    content: public Type InterfaceType { get; }
    return:
      type: System.Type
      description: "Een <xref:System.Type>die overeenkomt met het interfacetype verstrekt of gebruikt door een besturingselement.</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled
  nameWithType: ConnectionPoint.GetEnabled
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
