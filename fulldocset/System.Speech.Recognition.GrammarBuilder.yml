### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.GrammarBuilder
  id: GrammarBuilder
  children:
  - System.Speech.Recognition.GrammarBuilder.#ctor
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.String)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)
  - System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)
  - System.Speech.Recognition.GrammarBuilder.Append(System.String)
  - System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.AppendDictation
  - System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)
  - System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)
  - System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)
  - System.Speech.Recognition.GrammarBuilder.AppendWildcard
  - System.Speech.Recognition.GrammarBuilder.Culture
  - System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)
  langs:
  - csharp
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
  type: Class
  summary: "Biedt een mechanisme voor het bouwen van de beperkingen voor een speech recognition grammatica programmatisch."
  remarks: "Spraak erkenning grammatica&quot;s zijn meestal ontworpen in de XML-indeling dat is gedefinieerd door de [Speech Recognition grammatica specificatie (SRGS) versie 1.0](http://go.microsoft.com/fwlink/?LinkId=201761). Als u bekend met SRGS maar wilt de grammatica&quot;s via programmacode te genereren bent, kunt u de <xref:System.Speech.Recognition.SrgsGrammar>waarvan de leden met de elementen en kenmerken die zijn gedefinieerd door SRGS overeen-naamruimte.</xref:System.Speech.Recognition.SrgsGrammar> Als u niet bekend met SRGS bent, of u wilt een lichtgewicht, programmatische benadering van grammatica&quot;s waarmee u algemene scenario&quot;s; efficiënt kunt doen ontwerpen u kunt de GrammarBuilder en <xref:System.Speech.Recognition.Choices>klassen.</xref:System.Speech.Recognition.Choices>       GrammarBuilder objecten gebruiken voor het bouwen van een hiërarchische structuur bestaat uit <xref:System.Speech.Recognition.Choices>back-objecten die alternatieve zinnen, afgewisseld met preamble en na amble zinnen op elk knooppunt en seeding semantische waarden die belangrijke informatie bevatten aan de toepassing.</xref:System.Speech.Recognition.Choices>       U maakt met een GrammarBuilder een <xref:System.Speech.Recognition.Grammar>object, gebruik de volgende stappen.</xref:System.Speech.Recognition.Grammar>      1.  Een object GrammarBuilder maken.      2.  Beperkingen, zoals toevoegen aan de GrammarBuilder <xref:System.String>objecten, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.DictationGrammar>, en andere GrammarBuilder-objecten die de beperkingen van de grammatica definiëren.</xref:System.Speech.Recognition.DictationGrammar> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> </xref:System.String>      3.  Gebruik een van de <xref:System.Speech.Recognition.Grammar.%23ctor%2A>constructors maken een <xref:System.Speech.Recognition.Grammar>object op basis van de voltooide GrammarBuilder grammatica.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.Grammar.%23ctor%2A>       Authoring met GrammarBuilder is het meest geschikt voor grammatica&quot;s met lijsten of misschien een lijst met lijsten met één regel. Programmatisch bouwen grammatica&quot;s die meerdere regels hebben of moeten interne regel verwijzingen maken, gebruikt u de klassen van de <xref:System.Speech.Recognition.SrgsGrammar>naamruimte.</xref:System.Speech.Recognition.SrgsGrammar>       Exemplaren van GrammarBuilder kunnen ook worden verkregen door impliciete conversies van bepaalde andere klassen of door een GrammarBuilder combineren met een tweede object met beperkingen voor een grammatica... Zie voor meer informatie de <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>en <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>operators en de <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>methoden.</xref:System.Speech.Recognition.GrammarBuilder.Add%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>       U regels toevoegen aan een bestaande GrammarBuilder, met de <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, en <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A>methoden.</xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> </xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> </xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A> </xref:System.Speech.Recognition.GrammarBuilder.Append%2A> </xref:System.Speech.Recognition.GrammarBuilder.Add%2A>      > [!IMPORTANT] > De spraakherkenner kunt Veroorzaak een uitzondering bij gebruik van een speech recognition grammatica waarin dubbele semantische elementen met dezelfde sleutel naam of meerdere semantische elementen die de waarde van het element met dezelfde semantische herhaaldelijk kunnen wijzigen. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [met behulp van SemanticResultKey en SemanticResultValue objecten](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c).       Om te helpen bij foutopsporing, de <xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A>eigenschap retourneert de huidige status van de GrammarBuilder als een tekenreeks.</xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A>       Zie voor meer informatie over het bouwen en spraak erkenning grammatica&quot;s gebruiken [spraakherkenning](http://msdn.microsoft.com/en-us/6a7dc524-07fc-4862-8d48-8c10dc64b919) en [GrammarBuilder grammatica&quot;s maken](http://msdn.microsoft.com/en-us/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)."
  example:
  - "The following example uses  GrammarBuilder and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects. A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken. The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two GrammarBuilder objects into a pair of alternative phrases that the resultant grammar can recognize. Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with GrammarBuilder.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a GrammarBuilder constructed from a <xref:System.Speech.Recognition.Choices> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{DebugSummary}")]

      public class GrammarBuilder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor
  id: '#ctor'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder()
  nameWithType: GrammarBuilder.GrammarBuilder()
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initialiseert een nieuw, leeg exemplaar van de <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> klasse."
  remarks: "Regels toevoegen aan een bestaande <xref:System.Speech.Recognition.GrammarBuilder>object, gebruikt u de <xref:System.Speech.Recognition.GrammarBuilder.Add%2A>, <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>, <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>, en <xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A>methoden, en de <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>operator.</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> </xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> </xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A> </xref:System.Speech.Recognition.GrammarBuilder.Append%2A> </xref:System.Speech.Recognition.GrammarBuilder.Add%2A> </xref:System.Speech.Recognition.GrammarBuilder>      > [!IMPORTANT] > De spraakherkenner kunt Veroorzaak een uitzondering bij gebruik van een speech recognition grammatica waarin dubbele semantische elementen met dezelfde sleutel naam of meerdere semantische elementen die de waarde van het element met dezelfde semantische herhaaldelijk kunnen wijzigen. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [met behulp van SemanticResultKey en SemanticResultValue objecten](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects. A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any one of which can be recognized when spoken. The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize. Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the Grammar object from the result.  \n  GrammarBuilder bothPhrases = new GrammarBuilder();  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  bothPhrases.Append(bothChoices);  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public GrammarBuilder ();
    parameters: []
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)
  id: '#ctor(System.Speech.Recognition.Choices)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(Choices)
  nameWithType: GrammarBuilder.GrammarBuilder(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(Choices)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> klasse vanuit een set van alternatieven."
  remarks: "Zie voor meer informatie over het bouwen van een speech recognition grammatica met alternatieven [met behulp van de keuzes die u voor het maken van een grammatica GrammarBuilder](http://msdn.microsoft.com/en-us/5b18db18-a5f6-46a3-aa77-6d3141544efd)."
  example:
  - "The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects. A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken. The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize. Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.Choices alternateChoices);
    parameters:
    - id: alternateChoices
      type: System.Speech.Recognition.Choices
      description: "De set van alternatieven."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)
  id: '#ctor(System.Speech.Recognition.SemanticResultKey)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(SemanticResultKey)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultKey)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> klasse vanuit een semantische sleutel."
  remarks: "Bij het maken van een <xref:System.Speech.Recognition.GrammarBuilder>exemplaar van een <xref:System.Speech.Recognition.SemanticResultValue>object u semantische gegevens toevoegen aan de grammatica die kan worden geretourneerd in het resultaat herkenning.</xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> U kunt toegang tot de semantische informatie in het erkenning resultaat met de <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>eigenschap van <xref:System.Speech.Recognition.RecognizedPhrase>, die beschikbaar is in de handler voor de `SpeechRecognized` gebeurtenis.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> Als de <xref:System.Speech.Recognition.GrammarBuilder>definieert een <xref:System.Speech.Recognition.SemanticResultKey>, dit kan worden gebruikt voor het ophalen van de semantische gegevens in een resultaat van de erkenning die is gekoppeld aan de sleutel.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> Zie het voorbeeld voor <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, en ook zien <xref:System.Speech.Recognition.SemanticResultValue>en <xref:System.Speech.Recognition.SemanticResultKey>.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>      > [!IMPORTANT] > Wanneer u samenstellen <xref:System.Speech.Recognition.GrammarBuilder>objecten die bevatten <xref:System.Speech.Recognition.SemanticResultValue>of <xref:System.Speech.Recognition.SemanticResultKey>exemplaren, zorg ervoor dat u niet te maken van dubbele semantische elementen met dezelfde sleutelnaam of meerdere semantische elementen die herhaaldelijk kunnen wijzigen de <xref:System.Speech.Recognition.SemanticValue.Value%2A>eigenschap van een <xref:System.Speech.Recognition.SemanticValue>object.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> De spraakherkenner kunt Veroorzaak een uitzondering als deze omstandigheden worden ontdekt. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [met behulp van SemanticResultKey en SemanticResultValue objecten](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *colorChoice*\" and \"Set background to *colorChoice*\", where *colorChoice* is selected from a set of colors. The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.  \n  \n The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user. For example, if the input contains the phrase, \"Set background to red\", the recognition result contains the semantic value of \"#FF0000\", which you can retrieve using a handler for the `SpeechRecognized` event.  \n  \n The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`. Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  // Include semantic information about each of the colors.  \n  Choices colorChoice = new Choices();  \n  \n  GrammarBuilder colorBuilder = new GrammarBuilder(\"red\");  \n  SemanticResultValue colorValue =  \n    new SemanticResultValue(colorBuilder, \"#FF0000\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"green\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#00FF00\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"blue\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#0000FF\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices object for the two alternative phrases.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  // Create the semantic key for referencing the color information.  \n  SemanticResultKey colorKey =  \n    new SemanticResultKey(\"ColorCode\", bothPhrases);  \n  bothPhrases = new GrammarBuilder(colorKey);  \n  \n  // Construct the Grammar object from the GrammarBuilder.  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.SemanticResultKey key);
    parameters:
    - id: key
      type: System.Speech.Recognition.SemanticResultKey
      description: "De semantische sleutel."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)
  id: '#ctor(System.Speech.Recognition.SemanticResultValue)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(SemanticResultValue)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultValue)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> klasse vanuit een semantische waarde."
  remarks: "Bij het maken van een <xref:System.Speech.Recognition.GrammarBuilder>exemplaar van een <xref:System.Speech.Recognition.SemanticResultValue>object u semantische gegevens toevoegen aan de grammatica die kan worden geretourneerd in het resultaat herkenning.</xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> U kunt toegang tot de semantische informatie in het erkenning resultaat met de <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>eigenschap van <xref:System.Speech.Recognition.RecognizedPhrase>, die beschikbaar is in de handler voor de `SpeechRecognized` gebeurtenis.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> Als de <xref:System.Speech.Recognition.GrammarBuilder>definieert een <xref:System.Speech.Recognition.SemanticResultKey>, dit kan worden gebruikt voor het ophalen van de semantische gegevens in een resultaat van de erkenning die is gekoppeld aan de sleutel.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> Zie het voorbeeld voor <xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>, en ook zien <xref:System.Speech.Recognition.SemanticResultValue>en <xref:System.Speech.Recognition.SemanticResultKey>.</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>      > [!IMPORTANT] > Wanneer u samenstellen <xref:System.Speech.Recognition.GrammarBuilder>objecten die bevatten <xref:System.Speech.Recognition.SemanticResultValue>of <xref:System.Speech.Recognition.SemanticResultKey>exemplaren, zorg ervoor dat u niet te maken van dubbele semantische elementen met dezelfde sleutelnaam of meerdere semantische elementen die herhaaldelijk kunnen wijzigen de <xref:System.Speech.Recognition.SemanticValue.Value%2A>eigenschap van een <xref:System.Speech.Recognition.SemanticValue>object.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> De spraakherkenner kunt Veroorzaak een uitzondering als deze omstandigheden worden ontdekt. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [met behulp van SemanticResultKey en SemanticResultValue objecten](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *colorChoice*\" and \"Set background to *colorChoice*\", where *colorChoice* is selected from a set of colors. The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.  \n  \n The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user. For example, if the input contains the phrase, \"Set background to red\", the recognition result contains the semantic value of \"#FF0000\", which you can retrieve using a handler for the `SpeechRecognized` event.  \n  \n The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`. Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  // Include semantic information about each of the colors.  \n  Choices colorChoice = new Choices();  \n  \n  GrammarBuilder colorBuilder = new GrammarBuilder(\"red\");  \n  SemanticResultValue colorValue =  \n    new SemanticResultValue(colorBuilder, \"#FF0000\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"green\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#00FF00\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"blue\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#0000FF\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  // Create the semantic key for referencing the color information.  \n  SemanticResultKey colorKey =  \n    new SemanticResultKey(\"ColorCode\", bothPhrases);  \n  bothPhrases = new GrammarBuilder(colorKey);  \n  \n  // Construct the grammar from the grammar builder.  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.SemanticResultValue value);
    parameters:
    - id: value
      type: System.Speech.Recognition.SemanticResultValue
      description: "Het semantische of de naam/waarde-paar."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(String)
  nameWithType: GrammarBuilder.GrammarBuilder(String)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> klasse vanuit een reeks van woorden."
  remarks: "De woordgroep vertegenwoordigt een exacte gesproken woordgroep die de erkenning spraak grammatica kunt herkennen. Zie voor meer informatie over het bouwen van een speech recognition grammatica tekenreeksen met [met behulp van tekenreeksen voor het maken van een grammatica GrammarBuilder](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114)."
  example:
  - "The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n After creating a list of acceptable values for *colorChoice* using a <xref:System.Speech.Recognition.Choices> object, the example initializes two <xref:System.Speech.Recognition.GrammarBuilder> objects, `makePhrase` and `setPhrase`, using a string as an argument.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.Choices> object cast to a <xref:System.Speech.Recognition.GrammarBuilder> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the Grammar object from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public GrammarBuilder (string phrase);
    parameters:
    - id: phrase
      type: System.String
      description: "De volgorde van woorden."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)
  id: '#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> klasse voor een subset van een reeks woorden."
  remarks: "De `phrase` parameter vertegenwoordigt de wachtwoordzin op te geven die de erkenning spraak grammatica kunt herkennen. De `subsetMatchingMode` parameter geeft u een subset van de wachtwoordzin op te geven die kan worden gesproken om te zorgen voor geslaagde herkenning van de hele woordgroep. U kunt deze gebruiken voor het maken van een grammatica met een lijst van vermeldingen met lange bestandsnamen zonder dat gebruikers een volledige naam overeenkomt met een item te laten spreken.       Zie voor meer informatie over de modi overeenkomende <xref:System.Speech.Recognition.SubsetMatchingMode>.</xref:System.Speech.Recognition.SubsetMatchingMode> Zie voor meer informatie over het bouwen van een speech recognition grammatica tekenreeksen met [met behulp van tekenreeksen voor het maken van een grammatica GrammarBuilder](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114)."
  example:
  - "The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value and a grammar for choosing between the matching mode grammars. If the value of `phrase` is \"one two three four five six seven\", then the Subsequence grammar recognizes the input \"two three four\", but not the input \"one three five\". However, the Ordered Subset grammar recognizes both of these inputs.  \n  \n```c#  \n  \nprivate static IEnumerable<Grammar>  \n  CreateMatchingModeGrammars(string phrase)  \n{  \n  List<Grammar> grammars = new List<Grammar>(5);  \n  \n  Choices modeChoice = new Choices();  \n  Type enumType = typeof(SubsetMatchingMode);  \n  foreach (SubsetMatchingMode mode in Enum.GetValues(enumType))  \n  {  \n    string modeName = Enum.GetName(enumType, mode);  \n    modeName = BreakAtCaps(modeName);  \n  \n    GrammarBuilder builder = new GrammarBuilder(phrase, mode);  \n    Grammar modeGrammar = new Grammar(builder);  \n    modeGrammar.Name = modeName;  \n    modeGrammar.Enabled = false;  \n    grammars.Add(modeGrammar);  \n  \n    modeChoice.Add(modeName);  \n  }  \n  \n  Grammar choiceGrammar = new Grammar(modeChoice);  \n  choiceGrammar.Name = \"choice\";  \n  grammars.Add(choiceGrammar);  \n  \n  return grammars;  \n}  \n  \n// Insert spaces preceding each uppercase letter in a string.   \nprivate static string BreakAtCaps(string item)  \n{  \n  if (item == null || item.Length == 0)  \n  {  \n    return item;  \n  }  \n  \n  StringBuilder sb = new StringBuilder(item[0].ToString());  \n  for (int i = 1; i < item.Length; i++)  \n  {  \n    char c = item[i];  \n    if (char.IsUpper(c))  \n    {  \n      sb.Append(\" \");  \n    }  \n    sb.Append(c);  \n  }  \n  \n  return sb.ToString();  \n}  \n```"
  syntax:
    content: public GrammarBuilder (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);
    parameters:
    - id: phrase
      type: System.String
      description: "De volgorde van woorden."
    - id: subsetMatchingCriteria
      type: System.Speech.Recognition.SubsetMatchingMode
      description: "De overeenkomende modus die speech recognition grammatica wordt gebruikt voor het herkennen van de wachtwoordzin op te geven."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  id: '#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> klasse vanuit een herhaalde-element."
  remarks: "Als de waarde van `minRepeat` is 0, wordt de nieuwe <xref:System.Speech.Recognition.GrammarBuilder>vertegenwoordigt een optioneel element.</xref:System.Speech.Recognition.GrammarBuilder>       De waarde van `minRepeat` moet groter zijn dan of gelijk zijn aan 0 en kleiner dan of gelijk zijn aan de waarde van `maxRepeat`.      > [!IMPORTANT] > Wanneer u opgeeft dat wordt herhaald voor <xref:System.Speech.Recognition.GrammarBuilder>objecten die bevatten <xref:System.Speech.Recognition.SemanticResultValue>of <xref:System.Speech.Recognition.SemanticResultKey>exemplaren, zorg ervoor dat u niet te maken van dubbele semantische elementen met dezelfde sleutelnaam of meerdere semantische elementen die herhaaldelijk kunnen wijzigen de <xref:System.Speech.Recognition.SemanticValue.Value%2A>eigenschap van een <xref:System.Speech.Recognition.SemanticValue>object.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> De spraakherkenner kunt Veroorzaak een uitzondering als deze omstandigheden worden ontdekt. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [met behulp van SemanticResultKey en SemanticResultValue objecten](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza. It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word \"pizza\".  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object from a string array of alternative toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "Het herhaalde element."
    - id: minRepeat
      type: System.Int32
      description: "Het minimum aantal keren dat invoer die overeenkomt met het element gedefinieerd door `builder` om een overeenkomst moet plaatsvinden."
    - id: maxRepeat
      type: System.Int32
      description: "Het maximum aantal keren dat invoer die overeenkomt met het element gedefinieerd door `builder` kan optreden als u wilt vormen een overeenkomst."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(String,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,Int32,Int32)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> klasse van de volgorde van de woorden in een <xref:System.String>en geeft aan hoe vaak de <xref:System.String>kan worden herhaald.</xref:System.String> </xref:System.String>"
  remarks: "Als de waarde van `minRepeat` is 0, wordt de nieuwe <xref:System.Speech.Recognition.GrammarBuilder>vertegenwoordigt een optioneel element.</xref:System.Speech.Recognition.GrammarBuilder>       De waarde van `minRepeat` moet groter zijn dan of gelijk zijn aan 0 en kleiner dan of gelijk zijn aan de waarde van `maxRepeat`. Zie voor meer informatie over het bouwen van een speech recognition grammatica tekenreeksen met [met behulp van tekenreeksen voor het maken van een grammatica GrammarBuilder](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114)."
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza. It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word \"pizza\".  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object with alternatives for toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (string phrase, int minRepeat, int maxRepeat);
    parameters:
    - id: phrase
      type: System.String
      description: "De volgorde herhaalde woorden."
    - id: minRepeat
      type: System.Int32
      description: "Het minimum aantal keren dat invoer die overeenkomt met de wachtwoordzin op te geven moet om een overeenkomst plaatsvinden."
    - id: maxRepeat
      type: System.Int32
      description: "Het maximum aantal keren dat invoer die overeenkomt met de wachtwoordzin op te geven kan om een overeenkomst optreden."
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  id: Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(Choices,GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Maakt een nieuw <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> die bevat een <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> object, gevolgd door een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> object."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>biedt ondersteuning voor impliciete conversies van de volgende klassen:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>deze methode accepteert de bovenstaande voor objecten de `builder` parameter.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>       Zie voor meer informatie de <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>en <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>operators.</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      > [!IMPORTANT] > Wanneer u combineren <xref:System.Speech.Recognition.Choices>en <xref:System.Speech.Recognition.GrammarBuilder>objecten die bevatten <xref:System.Speech.Recognition.SemanticResultValue>of <xref:System.Speech.Recognition.SemanticResultKey>exemplaren, zorg ervoor dat u niet te maken van dubbele semantische elementen met dezelfde sleutelnaam of meerdere semantische elementen die herhaaldelijk kunnen wijzigen de <xref:System.Speech.Recognition.SemanticValue.Value%2A>eigenschap van een <xref:System.Speech.Recognition.SemanticValue>object.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Choices> De spraakherkenner kunt Veroorzaak een uitzondering als deze omstandigheden worden ontdekt. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [semantiek toevoegen aan een grammatica GrammarBuilder](https://msdn.microsoft.com/library/hh361581.aspx)."
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "Het eerste grammatica element dat een set alternatieven vertegenwoordigt."
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "Het tweede grammar-element."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> voor de volgorde van de <code> choices </code> element gevolgd door de <code> builder </code> element."
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  id: Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,Choices)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Maakt een nieuw <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> die bevat een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> object, gevolgd door een <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> object."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>biedt ondersteuning voor impliciete conversies van de volgende klassen:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>deze methode accepteert de bovenstaande voor objecten de `builder` parameter.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>       Zie voor meer informatie de <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>en <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>operators.</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      > [!IMPORTANT] > Wanneer u combineren <xref:System.Speech.Recognition.Choices>en <xref:System.Speech.Recognition.GrammarBuilder>objecten die bevatten <xref:System.Speech.Recognition.SemanticResultValue>of <xref:System.Speech.Recognition.SemanticResultKey>exemplaren met andere grammar-elementen, zorg ervoor dat u niet te maken van dubbele semantische elementen met dezelfde sleutelnaam of meerdere semantische elementen die herhaaldelijk kunnen wijzigen de <xref:System.Speech.Recognition.SemanticValue.Value%2A>eigenschap van een <xref:System.Speech.Recognition.SemanticValue>object.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Choices> De spraakherkenner kunt Veroorzaak een uitzondering als deze omstandigheden worden ontdekt. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [met behulp van SemanticResultKey en SemanticResultValue objecten](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "Het eerste element van de grammatica."
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "Het tweede grammatica element dat een set alternatieven vertegenwoordigt."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> voor de volgorde van de <code> builder </code> element gevolgd door de <code> choices </code> element."
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  id: Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Maakt een nieuw <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> die bevat een reeks van twee <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> objecten."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>biedt ondersteuning voor impliciete conversies van de volgende klassen:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>deze methode accepteert de bovenstaande voor objecten de `builder1` of `builder2` parameter.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>       Zie voor meer informatie de <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>en <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>operators.</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      > [!IMPORTANT] > Wanneer u combineren <xref:System.Speech.Recognition.Choices>en <xref:System.Speech.Recognition.GrammarBuilder>objecten die bevatten <xref:System.Speech.Recognition.SemanticResultValue>of <xref:System.Speech.Recognition.SemanticResultKey>exemplaren met andere grammar-elementen, zorg ervoor dat u niet te maken van dubbele semantische elementen met dezelfde sleutelnaam of meerdere semantische elementen die herhaaldelijk kunnen wijzigen de <xref:System.Speech.Recognition.SemanticValue.Value%2A>eigenschap van een <xref:System.Speech.Recognition.SemanticValue>object.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Choices> De spraakherkenner kunt Veroorzaak een uitzondering als deze omstandigheden worden ontdekt. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [met behulp van SemanticResultKey en SemanticResultValue objecten](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);
    parameters:
    - id: builder1
      type: System.Speech.Recognition.GrammarBuilder
      description: "Het eerste element van de grammatica."
    - id: builder2
      type: System.Speech.Recognition.GrammarBuilder
      description: "Het tweede grammar-element."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> voor de volgorde van de <code> builder1 </code> element gevolgd door de <code> builder2 </code> element."
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)
  id: Add(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(GrammarBuilder,String)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Maakt een nieuw <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> die bevat een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> object, gevolgd door een wachtwoordzin."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>biedt ondersteuning voor impliciete conversies van de volgende klassen:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>deze methode accepteert de bovenstaande voor objecten de `builder` parameter.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>       Zie voor meer informatie de <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>en <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>operators.</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>"
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, string phrase);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "Het eerste element van de grammatica."
    - id: phrase
      type: System.String
      description: "Het tweede grammatica element dat van een reeks woorden vertegenwoordigt."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> voor de volgorde van de <code> builder </code> element gevolgd door de <code> phrase </code> element."
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)
  id: Add(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(String,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(String,GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Maakt een nieuw <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> die bevat een zin gevolgd door een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> object."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>biedt ondersteuning voor impliciete conversies van de volgende klassen:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>deze methode accepteert de bovenstaande voor objecten de `builder` parameter.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>       Zie voor meer informatie de <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>en <xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>operators.</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>"
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (string phrase, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: phrase
      type: System.String
      description: "Het eerste grammar-element, waarmee een reeks woorden."
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "Het tweede grammar-element."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> voor de volgorde van de <code> phrase </code> element gevolgd door de <code> builder </code> element."
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)
  id: Append(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(Choices)
  nameWithType: GrammarBuilder.Append(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(Choices)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Voegt een set alternatieven voor de huidige reeks grammar-elementen."
  remarks: "`alternateChoices`is toegevoegd aan het einde van de huidige reeks van elementen.      > [!IMPORTANT] > Wanneer u toevoegen <xref:System.Speech.Recognition.Choices>objecten die bevatten <xref:System.Speech.Recognition.SemanticResultValue>of <xref:System.Speech.Recognition.SemanticResultKey>exemplaren voor een <xref:System.Speech.Recognition.GrammarBuilder>object, zorg ervoor dat u niet te maken van dubbele semantische elementen met dezelfde sleutelnaam of meerdere semantische elementen die herhaaldelijk kunnen wijzigen de <xref:System.Speech.Recognition.SemanticValue.Value%2A>eigenschap van een <xref:System.Speech.Recognition.SemanticValue>object.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.Choices> De spraakherkenner kunt Veroorzaak een uitzondering als deze omstandigheden worden ontdekt. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [Understanding SemanticResultValue en SemanticResultKey objecten](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. The example highlights the use of the Append method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.Choices alternateChoices);
    parameters:
    - id: alternateChoices
      type: System.Speech.Recognition.Choices
      description: "De reeks alternatieven toe te voegen."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)
  id: Append(System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(GrammarBuilder)
  nameWithType: GrammarBuilder.Append(GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Voegt een grammatica-element toe aan de huidige reeks grammar-elementen."
  remarks: "`builder`is toegevoegd aan het einde van de huidige reeks grammar-elementen.      > [!NOTE] > Wanneer u toevoegen <xref:System.Speech.Recognition.GrammarBuilder>objecten die bevatten <xref:System.Speech.Recognition.SemanticResultValue>of <xref:System.Speech.Recognition.SemanticResultKey>exemplaren voor een <xref:System.Speech.Recognition.GrammarBuilder>object, zorg ervoor dat u niet te maken van dubbele semantische elementen met dezelfde sleutelnaam of meerdere semantische elementen die herhaaldelijk kunnen wijzigen de <xref:System.Speech.Recognition.SemanticValue.Value%2A>eigenschap van een <xref:System.Speech.Recognition.SemanticValue>object.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> De spraakherkenner kunt Veroorzaak een uitzondering als deze omstandigheden worden ontdekt. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [met behulp van SemanticResultKey en SemanticResultValue objecten](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar. The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "De grammatica-element toe te voegen."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)
  id: Append(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(SemanticResultKey)
  nameWithType: GrammarBuilder.Append(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultKey)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Voegt een semantische sleutel met de huidige reeks grammar-elementen."
  remarks: "`key`is toegevoegd aan het einde van de huidige reeks van elementen.      > [!IMPORTANT] > Wanneer u toevoegen <xref:System.Speech.Recognition.SemanticResultValue>of <xref:System.Speech.Recognition.SemanticResultKey>exemplaren voor een <xref:System.Speech.Recognition.GrammarBuilder>object, zorg ervoor dat u niet te maken van dubbele semantische elementen met dezelfde sleutelnaam of meerdere semantische elementen die herhaaldelijk kunnen wijzigen de <xref:System.Speech.Recognition.SemanticValue.Value%2A>eigenschap van een <xref:System.Speech.Recognition.SemanticValue>object.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> De spraakherkenner kunt Veroorzaak een uitzondering als deze omstandigheden worden ontdekt. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [Understanding SemanticResultValue en SemanticResultKey objecten](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example is part of a console application for choosing origin and destination cities for a flight. The application recognizes phrases such as \"I want to fly from Miami to Chicago.\" The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n  \n    // Initialize an in-process speech recognition engine.  \n    {  \n      using (SpeechRecognitionEngine recognizer =  \n         new SpeechRecognitionEngine())  \n      {  \n  \n        // Create a Choices object and add  cities and airport codes  \n        // using SemanticResultValue objects.  \n        Choices cities = new Choices();  \n        cities.Add(new SemanticResultValue(\"Chicago\", \"ORD\"));  \n        cities.Add(new SemanticResultValue(\"Boston\", \"BOS\"));  \n        cities.Add(new SemanticResultValue(\"Miami\", \"MIA\"));  \n        cities.Add(new SemanticResultValue(\"Dallas\", \"DFW\"));  \n  \n        // Build the phrase and add SemanticResultKeys.  \n        GrammarBuilder chooseCities = new GrammarBuilder();  \n        chooseCities.Append(\"I want to fly from\");  \n        chooseCities.Append(new SemanticResultKey(\"origin\", cities));  \n        chooseCities.Append(\"to\");  \n        chooseCities.Append(new SemanticResultKey(\"destination\", cities));  \n  \n        // Build a Grammar object from the GrammarBuilder.  \n        Grammar bookFlight = new Grammar(chooseCities);  \n        bookFlight.Name = \"Book Flight\";  \n  \n        // Add a handler for the LoadGrammarCompleted event.  \n        recognizer.LoadGrammarCompleted +=   \n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n        // Add a handler for the SpeechRecognized event.  \n        recognizer.SpeechRecognized +=   \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n        // Configure the input to the recognizer.  \n        recognizer.SetInputToDefaultAudioDevice();  \n  \n        // Load the grammar object and start recognition.  \n        recognizer.LoadGrammarAsync(bookFlight);  \n        recognizer.RecognizeAsync();  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.  \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar loaded: \" + e.Grammar.Name);  \n      Console.WriteLine();  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech recognized:  \" + e.Result.Text);  \n      Console.WriteLine();  \n      Console.WriteLine(\"Semantic results:\");  \n      Console.WriteLine(\"  The flight origin is \" + e.Result.Semantics[\"origin\"].Value);  \n      Console.WriteLine(\"  The flight destination is \" + e.Result.Semantics[\"destination\"].Value);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.SemanticResultKey key);
    parameters:
    - id: key
      type: System.Speech.Recognition.SemanticResultKey
      description: "De semantische sleutel toe te voegen."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)
  id: Append(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(SemanticResultValue)
  nameWithType: GrammarBuilder.Append(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultValue)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Voegt een semantische waarde toe aan de huidige reeks grammar-elementen."
  remarks: "`value`is toegevoegd aan het einde van de huidige reeks van elementen.      > [!IMPORTANT] > Wanneer u toevoegen <xref:System.Speech.Recognition.SemanticResultValue>of <xref:System.Speech.Recognition.SemanticResultKey>exemplaren voor een <xref:System.Speech.Recognition.GrammarBuilder>object, zorg ervoor dat u niet te maken van dubbele semantische elementen met dezelfde sleutelnaam of meerdere semantische elementen die herhaaldelijk kunnen wijzigen de <xref:System.Speech.Recognition.SemanticValue.Value%2A>eigenschap van een <xref:System.Speech.Recognition.SemanticValue>object.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> De spraakherkenner kunt Veroorzaak een uitzondering als deze omstandigheden worden ontdekt. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [Understanding SemanticResultValue en SemanticResultKey objecten](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example is part of a console application for choosing origin and destination cities for a flight. The application recognizes phrases such as \"I want to fly from Miami to Chicago.\" The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.  \n  \n```c#  \n  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n  \n    // Initialize an in-process speech recognition engine.  \n    {  \n      using (SpeechRecognitionEngine recognizer =  \n         new SpeechRecognitionEngine())  \n      {  \n  \n        // Create GrammarBuilder objects and append SemanticResultValue objects   \n        // that contain cities and airport codes.  \n  \n        GrammarBuilder chicago = new GrammarBuilder();  \n        chicago.Append(new SemanticResultValue(\"Chicago\", \"ORD\"));  \n  \n        GrammarBuilder boston = new GrammarBuilder();  \n        boston.Append(new SemanticResultValue(\"Boston\", \"BOS\"));  \n  \n        GrammarBuilder miami = new GrammarBuilder();  \n        miami.Append(new SemanticResultValue(\"Miami\", \"MIA\"));  \n  \n        GrammarBuilder dallas = new GrammarBuilder();  \n        dallas.Append(new SemanticResultValue(\"Dallas\", \"DFW\"));  \n  \n        // Create a Choices object and add the cities using implicit conversion from   \n        // SemanticResultValue to GrammarBuilder.  \n        Choices cities = new Choices();  \n        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  \n  \n        // Build the phrase and add SemanticResultKeys.  \n        GrammarBuilder chooseCities = new GrammarBuilder();  \n        chooseCities.Append(\"I want to fly from\");  \n        chooseCities.Append(new SemanticResultKey(\"origin\", cities));  \n        chooseCities.Append(\"to\");  \n        chooseCities.Append(new SemanticResultKey(\"destination\", cities));  \n  \n        // Build a Grammar object from the GrammarBuilder.  \n        Grammar bookFlight = new Grammar(chooseCities);  \n        bookFlight.Name = \"Book Flight\";  \n  \n        // Add a handler for the LoadGrammarCompleted event.  \n        recognizer.LoadGrammarCompleted +=   \n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n        // Add a handler for the SpeechRecognized event.  \n        recognizer.SpeechRecognized +=   \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n        // Configure the input to the recognizer.  \n        recognizer.SetInputToDefaultAudioDevice();  \n  \n        // Load the grammar object and start recognition.  \n        recognizer.LoadGrammarAsync(bookFlight);  \n        recognizer.RecognizeAsync();  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n    }  \n    // Handle the LoadGrammarCompleted event.  \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar loaded: \" + e.Grammar.Name);  \n      Console.WriteLine();  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech recognized:  \" + e.Result.Text);  \n      Console.WriteLine();  \n      Console.WriteLine(\"Semantic results:\");  \n      Console.WriteLine(\"  The flight origin is \" + e.Result.Semantics[\"origin\"].Value);  \n      Console.WriteLine(\"  The flight destination is \" + e.Result.Semantics[\"destination\"].Value);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.SemanticResultValue value);
    parameters:
    - id: value
      type: System.Speech.Recognition.SemanticResultValue
      description: "De semantische waarde om toe te voegen."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String)
  id: Append(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(String)
  nameWithType: GrammarBuilder.Append(String)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Voegt een wachtwoordzin met de huidige reeks grammar-elementen."
  remarks: '`phrase`is toegevoegd aan het einde van de huidige reeks van elementen.'
  syntax:
    content: public void Append (string phrase);
    parameters:
    - id: phrase
      type: System.String
      description: "De volgorde van woorden toe te voegen."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  id: Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.Append(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,SubsetMatchingMode)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Voegt een element voor een subset van een wachtwoordzin met de huidige reeks grammar-elementen."
  remarks: "Het element subset wordt toegevoegd aan het einde van de huidige reeks van elementen. Zie voor meer informatie over het bouwen van een speech recognition grammatica tekenreeksen met [met behulp van tekenreeksen voor het maken van een grammatica GrammarBuilder](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114).       Zie voor gedetailleerde informatie over het gebruik van de overeenkomende modi subset <xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=fullName>.</xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=fullName>"
  example:
  - "The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value. For example, the generated grammar `OrderedSubset` recognizes the phrases, \"three four five\" and \"one three five\", and the grammar `Subsequence` recognizes the phrase \"three four five\", but not the phrase, \"one three five\".  \n  \n```c#  \n  \nprivate Grammar[] CreateSubsetMatchTest()  \n{  \n  List<Grammar> grammars = new List<Grammar>(4);  \n  \n  string phrase = \"one two three four five six\";  \n  foreach (SubsetMatchingMode mode in  \n    Enum.GetValues(typeof(SubsetMatchingMode)))  \n  {  \n    GrammarBuilder gb = new GrammarBuilder();  \n    gb.Append(phrase, mode);  \n  \n    Grammar grammar = new Grammar(gb);  \n    grammar.Name = mode.ToString();  \n    grammars.Add(grammar);  \n  }  \n  \n  return grammars.ToArray();  \n}  \n```"
  syntax:
    content: public void Append (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);
    parameters:
    - id: phrase
      type: System.String
      description: "De volgorde van woorden toe te voegen."
    - id: subsetMatchingCriteria
      type: System.Speech.Recognition.SubsetMatchingMode
      description: "De overeenkomende de grammatica-modus wordt gebruikt voor het herkennen van de wachtwoordzin op te geven."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  id: Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Voegt een herhaalde grammar-element toe aan de huidige reeks grammar-elementen."
  remarks: "De waarde van `minRepeat` moet groter zijn dan of gelijk zijn aan 0 en kleiner dan of gelijk zijn aan de waarde van `maxRepeat`.      > [!IMPORTANT] > Wanneer u toevoegen <xref:System.Speech.Recognition.GrammarBuilder>objecten die bevatten <xref:System.Speech.Recognition.SemanticResultValue>of <xref:System.Speech.Recognition.SemanticResultKey>exemplaren voor een <xref:System.Speech.Recognition.GrammarBuilder>object, zorg ervoor dat u niet te maken van dubbele semantische elementen met dezelfde sleutelnaam of meerdere semantische elementen die herhaaldelijk kunnen wijzigen de <xref:System.Speech.Recognition.SemanticValue.Value%2A>eigenschap van een <xref:System.Speech.Recognition.SemanticValue>object.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> De spraakherkenner kunt Veroorzaak een uitzondering als deze omstandigheden worden ontdekt. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [Understanding SemanticResultValue en SemanticResultKey objecten](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar. The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "Het herhaalde grammar-element toe te voegen."
    - id: minRepeat
      type: System.Int32
      description: "Het minimum aantal keren dat invoer die overeenkomt met het element gedefinieerd door `builder` om een overeenkomst moet plaatsvinden."
    - id: maxRepeat
      type: System.Int32
      description: "Het maximum aantal keren dat invoer die overeenkomt met het element gedefinieerd door `builder` kan optreden als u wilt vormen een overeenkomst."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)
  id: Append(System.String,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(String,Int32,Int32)
  nameWithType: GrammarBuilder.Append(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,Int32,Int32)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Voegt een herhaalde zin met de huidige reeks grammar-elementen."
  remarks: "De waarde van `minRepeat` moet groter zijn dan of gelijk zijn aan 0 en kleiner dan of gelijk zijn aan de waarde van `maxRepeat`."
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar. The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (string phrase, int minRepeat, int maxRepeat);
    parameters:
    - id: phrase
      type: System.String
      description: "De volgorde herhaalde woorden toe te voegen."
    - id: minRepeat
      type: System.Int32
      description: "Het minimum aantal keren dat invoer overeenkomende `phrase` om een overeenkomst moet plaatsvinden."
    - id: maxRepeat
      type: System.Int32
      description: "Het maximum aantal keren dat invoer overeenkomende `phrase` kan optreden als u wilt vormen een overeenkomst."
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation
  id: AppendDictation
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendDictation()
  nameWithType: GrammarBuilder.AppendDictation()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "De standaard dicteren grammatica toegevoegd aan de huidige reeks grammar-elementen."
  remarks: "Zie voor meer informatie over dicteren grammatica&quot;s <xref:System.Speech.Recognition.DictationGrammar>.</xref:System.Speech.Recognition.DictationGrammar>"
  example:
  - "The following example creates a speech recognition grammar that incorporates dictation.  \n  \n```c#  \n  \nGrammarBuilder builder = new GrammarBuilder();  \nbuilder.Append(\"begin\");  \nbuilder.AppendDictation();  \nbuilder.Append(\"end\");  \nGrammar grammarWithDictation = new Grammar(builder);  \ngrammarWithDictation.Name = \"Grammar with Dictation\";  \n```"
  syntax:
    content: public void AppendDictation ();
    parameters: []
  overload: System.Speech.Recognition.GrammarBuilder.AppendDictation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)
  id: AppendDictation(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendDictation(String)
  nameWithType: GrammarBuilder.AppendDictation(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "De opgegeven dicteren grammatica toegevoegd aan de huidige reeks grammar-elementen."
  remarks: "Voor het gebruik van de spelling dicteren grammatica ingesteld `category` naar `spelling`.       Zie voor meer informatie over dicteren grammatica&quot;s <xref:System.Speech.Recognition.DictationGrammar>.</xref:System.Speech.Recognition.DictationGrammar>"
  example:
  - "The following example creates a speech recognition grammar that incorporates the spelling dictation grammar rules.  \n  \n```c#  \n  \nGrammarBuilder builder = new GrammarBuilder();  \nbuilder.Append(\"begin\");  \nbuilder.AppendDictation(\"spelling\");  \nbuilder.Append(\"end\");  \nGrammar grammarWithDictation = new Grammar(builder);  \ngrammarWithDictation.Name = \"Grammar with Dictation\";  \n```"
  syntax:
    content: public void AppendDictation (string category);
    parameters:
    - id: category
      type: System.String
      description: "De categorie van de grammatica dicteren toe te voegen."
  overload: System.Speech.Recognition.GrammarBuilder.AppendDictation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)
  id: AppendRuleReference(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendRuleReference(String)
  nameWithType: GrammarBuilder.AppendRuleReference(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Voegt een grammatica-definitiebestand met de huidige reeks grammar-elementen."
  remarks: "De URI die wordt geleverd door de `path` argument kan lokaal of extern zijn. De toepassing moet leestoegang hebben tot de locatie van grammaticabestanden van de opgegeven.       Een weergave W3C Speech Recognition grammatica specificatie (SRGS) kunt een Hoofdregel definiëren. Deze methode worden de grammatica, vanaf de Hoofdregel op de huidige reeks grammar-elementen toegevoegd. Voor een specifieke grammaticaregel toevoegen, gebruikt u de <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>methode.</xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>"
  example:
  - "The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml. The content of the cities.grxml file appears below the C# code example.  \n  \n```c#  \n  \nprivate static Grammar CreateCitiesGrammar1()  \n{  \n  GrammarBuilder builder = new GrammarBuilder();  \n  builder.AppendRuleReference(\"file://c:/temp/cities.grxml\");  \n  \n  Grammar citiesGrammar = new Grammar(builder);  \n  citiesGrammar.Name = \"Cities Grammar 1\";  \n  return citiesGrammar;  \n}  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-16\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- cities.grxml:   \n    Defines an SRGS grammar for requesting a flight. This grammar includes  \n    a Cities rule that lists the cities that can be used for departures  \n    and destinations. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      I would like to fly from <ruleref uri=\"#Cities\"/>  \n      to <ruleref uri=\"#Cities\"/>  \n    </item>  \n  </rule>  \n  \n  <rule id=\"Cities\" scope=\"public\">  \n    <one-of>  \n      <item> Seattle </item>  \n      <item> Los Angeles </item>  \n      <item> New York </item>  \n      <item> Miami </item>  \n    </one-of>  \n  </rule>  \n</grammar>  \n```"
  syntax:
    content: public void AppendRuleReference (string path);
    parameters:
    - id: path
      type: System.String
      description: "Het pad of Universal Resource Identifier (URI) van het bestand dat wordt beschreven van een grammatica spraak opname in een ondersteunde indeling."
  overload: System.Speech.Recognition.GrammarBuilder.AppendRuleReference*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)
  id: AppendRuleReference(System.String,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendRuleReference(String,String)
  nameWithType: GrammarBuilder.AppendRuleReference(String,String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "De opgegeven regel van een grammatica-definitiebestand toegevoegd aan de huidige reeks grammar-elementen."
  remarks: "De URI die wordt geleverd door de `path` argument kan lokaal of extern zijn. De toepassing moet leestoegang hebben tot de locatie van grammaticabestanden van de opgegeven.       U kunt het gebruik de <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>methode voor het toevoegen van een grammatica-bestand dat begint met de Hoofdregel.</xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>"
  example:
  - "The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml. The content of the cities.grxml file appears below the C# code example.  \n  \n```c#  \n  \nprivate static Grammar CreateCitiesGrammar2()  \n{  \n  GrammarBuilder builder = new GrammarBuilder();  \n  builder.Append(\"Does\");  \n  builder.AppendRuleReference(@\"c:\\temp\\cities.grxml\", \"Cities\");  \n  builder.Append(\"have a shuttle\");  \n  \n  Grammar citiesGrammar = new Grammar(builder);  \n  citiesGrammar.Name = \"Cities Grammar 2\";  \n  return citiesGrammar;  \n}  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- cities.grxml:   \n    Defines an SRGS grammar for requesting a flight. This grammar includes  \n    a Cities rule that lists the cities that can be used for departures  \n    and destinations. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      I would like to fly from <ruleref uri=\"#Cities\"/>  \n      to <ruleref uri=\"#Cities\"/>  \n    </item>  \n  </rule>  \n  \n  <rule id=\"Cities\" scope=\"public\">  \n    <one-of>  \n      <item> Seattle </item>  \n      <item> Los Angeles </item>  \n      <item> New York </item>  \n      <item> Miami </item>  \n    </one-of>  \n  </rule>  \n</grammar>  \n```"
  syntax:
    content: public void AppendRuleReference (string path, string rule);
    parameters:
    - id: path
      type: System.String
      description: "Het bestandspad of Universal Resource Identifier (URI) van het bestand dat wordt beschreven van een grammatica spraak opname in een ondersteunde indeling."
    - id: rule
      type: System.String
      description: "De id van de regel wilt toevoegen, of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> de standaardregel voor de hoofdmap van het grammaticabestand toevoegen."
  overload: System.Speech.Recognition.GrammarBuilder.AppendRuleReference*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendWildcard
  id: AppendWildcard
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendWildcard()
  nameWithType: GrammarBuilder.AppendWildcard()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendWildcard()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Voegt een herkenning grammatica-element dat overeenkomt met een invoer voor de huidige reeks grammar-elementen."
  remarks: "Het jokerelement wordt toegevoegd aan het einde van de huidige reeks van elementen.       Het jokerelement komt overeen met een gesproken woord. Dit komt niet overeen met achtergrondruis of stilte."
  example:
  - "The following example creates a grammar that accepts password input as a wildcard. The example attaches a <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=fullName> event handler to the grammar that validates the password input.  \n  \n```c#  \nprivate Grammar CreatePasswordGrammar()  \n{  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey passwordKey =  \n    new SemanticResultKey(\"Password\", wildcardBuilder);  \n  \n  GrammarBuilder passwordBuilder =  \n    new GrammarBuilder(\"My Password is\");  \n  passwordBuilder.Append(passwordKey);  \n  \n  Grammar passwordGrammar = new Grammar(passwordBuilder);  \n  passwordGrammar.Name = \"Password input\";  \n  \n  passwordGrammar.SpeechRecognized +=  \n    new EventHandler<SpeechRecognizedEventArgs>(  \n      PasswordInputHandler);  \n  \n  return passwordGrammar;  \n}  \n  \n// Handle the SpeechRecognized event for the password grammar.  \nprivate void PasswordInputHandler(object sender, SpeechRecognizedEventArgs e)  \n{  \n  if (e.Result == null) return;  \n  \n  RecognitionResult result = e.Result;  \n  SemanticValue semantics = e.Result.Semantics;  \n  \n  if (semantics.ContainsKey(\"Password\"))  \n  {  \n    RecognizedAudio passwordAudio =  \n      result.GetAudioForWordRange(  \n        result.Words[3], result.Words[result.Words.Count - 1]);  \n  \n    if (IsValidPassword(passwordAudio))  \n    {  \n      Console.WriteLine(\"Password accepted.\");  \n  \n      // Add code to handle a valid password here.  \n    }  \n    else  \n    {  \n      Console.WriteLine(\"Invalid password.\");  \n  \n      // Add code to handle an invalid password here.  \n    }  \n  }  \n}  \n  \n// Validate the password input.   \nprivate bool IsValidPassword(RecognizedAudio passwordAudio)  \n{  \n  Console.WriteLine(\"Validating password.\");  \n  \n  // Add password validation code here.  \n  \n  return false;  \n}  \n```"
  syntax:
    content: public void AppendWildcard ();
    parameters: []
  overload: System.Speech.Recognition.GrammarBuilder.AppendWildcard*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Culture
  id: Culture
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Culture
  nameWithType: GrammarBuilder.Culture
  fullName: System.Speech.Recognition.GrammarBuilder.Culture
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Opgehaald of ingesteld van de cultuur van de erkenning spraak grammatica."
  remarks: "De <xref:System.Speech.Recognition.Grammar.%23ctor%2A>constructor maakt een <xref:System.Speech.Recognition.Grammar>-object dat kan worden gebruikt door een spraakherkenner van de bijbehorende cultuur.</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.Grammar.%23ctor%2A> Alleen de cultuur-eigenschap van de <xref:System.Speech.Recognition.GrammarBuilder>die is opgegeven als de parameter voor de grammatica-constructor is gebruikt om in te stellen van de cultuur van de resulterende speech recognition grammatica.</xref:System.Speech.Recognition.GrammarBuilder>       Microsoft Windows en de API System.Speech accepteert alle geldige taal land-codes. Om uit te voeren spraakherkenning met de taal die is opgegeven in de `Culture` eigenschap, een engine voor spraakherkenning die ondersteuning biedt voor die taal landcode moet worden geïnstalleerd. De engines voor spraakherkenning die wordt geleverd bij Microsoft Windows 7 werkt met de volgende taal landcodes.      -en GB. Engels (Verenigde Staten) - en-US. Engels (Verenigde Staten) - nl-nl. Duits (Duitsland) - es-ES. Spaans (Spanje) - fr winst Frans (Frankrijk) - ja-JP. Japans (Japan) - zh-CN. Chinees (China) - zh-TW. Chinees (Taiwan) twee letters taalcodes zoals &quot;en&quot;, &quot;fr&quot; of &quot;es&quot; zijn ook toegestaan."
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza with up to four toppings. It specifically sets the <xref:System.Speech.Recognition.GrammarBuilder> object's culture to English (United States).  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object with alternatives for toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public System.Globalization.CultureInfo Culture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "De cultuur van de <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>. De standaardwaarde is de uitvoerende thread <xref:System.Threading.Thread.CurrentUICulture*>eigenschap.</xref:System.Threading.Thread.CurrentUICulture*>"
  overload: System.Speech.Recognition.GrammarBuilder.Culture*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  id: DebugShowPhrases
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: DebugShowPhrases
  nameWithType: GrammarBuilder.DebugShowPhrases
  fullName: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Opgehaald van een tekenreeks waarin de inhoud en structuur van de grammatica die deel uitmaken van de <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>."
  remarks: ''
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza with up to four toppings. It writes the status of the <xref:System.Speech.Recognition.GrammarBuilder> to the console before creating the grammar. This method generates the following output:  \n  \n-   `GrammarBuilder status: I would like a [cheese,mushroom,tomato,onion,anchovy,chic ken,pepperoni] and [cheese,mushroom,tomato,onion,anchovy,chicken,pepperoni] pizza`  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object with alternatives for toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Write the contents and structure of the GrammarBuilder to the console.  \n  Console.WriteLine(\"Grammar content and structure: {0}\", gb.DebugShowPhrases);  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public string DebugShowPhrases { get; }
    return:
      type: System.String
      description: "De huidige inhoud en structuur van de <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>."
  overload: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  id: op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(Choices,GrammarBuilder)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Maakt een nieuw <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> die bevat een <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref> object, gevolgd door een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> object."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>biedt ondersteuning voor conversies van de volgende klassen.</xref:System.Speech.Recognition.GrammarBuilder>      - <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>Deze methode accepteert de bovenstaande voor objecten de `builder` parameter.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> Zie voor meer informatie de <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>operators.</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      > [!IMPORTANT] > Wanneer u combineren <xref:System.Speech.Recognition.Choices>en <xref:System.Speech.Recognition.GrammarBuilder>objecten die bevatten <xref:System.Speech.Recognition.SemanticResultValue>of <xref:System.Speech.Recognition.SemanticResultKey>exemplaren, zorg ervoor dat u niet te maken van dubbele semantische elementen met dezelfde sleutelnaam of meerdere semantische elementen die herhaaldelijk kunnen wijzigen de <xref:System.Speech.Recognition.SemanticValue.Value%2A>eigenschap van een <xref:System.Speech.Recognition.SemanticValue>object.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Choices> De spraakherkenner kunt Veroorzaak een uitzondering als deze omstandigheden worden ontdekt. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [Understanding SemanticResultValue en SemanticResultKey objecten](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "Het eerste grammatica element dat een set alternatieven vertegenwoordigt."
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "Het tweede grammar-element."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Retourneert een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> voor de volgorde van de <code> choices </code> parameter gevolgd door de <code> builder </code> parameter."
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  id: op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,Choices)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Maakt een nieuw <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> die bevat een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> gevolgd door een <xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref>."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>biedt ondersteuning voor conversies van de volgende klassen:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>deze methode accepteert de bovenstaande voor objecten de `builder` parameter.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder> Zie voor meer informatie de <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>operators.</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      > [!IMPORTANT] > Wanneer u combineren <xref:System.Speech.Recognition.Choices>en <xref:System.Speech.Recognition.GrammarBuilder>objecten die bevatten <xref:System.Speech.Recognition.SemanticResultValue>of <xref:System.Speech.Recognition.SemanticResultKey>exemplaren, zorg ervoor dat u niet te maken van dubbele semantische elementen met dezelfde sleutelnaam of meerdere semantische elementen die herhaaldelijk kunnen wijzigen de <xref:System.Speech.Recognition.SemanticValue.Value%2A>eigenschap van een <xref:System.Speech.Recognition.SemanticValue>object.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Choices> De spraakherkenner kunt Veroorzaak een uitzondering als deze omstandigheden worden ontdekt. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [Understanding SemanticResultValue en SemanticResultKey objecten](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] { \"red\", \"green\", \"blue\" });  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    (GrammarBuilder)\"Make background\" + colorChoice;  \n  GrammarBuilder setPhrase =  \n    \"Set background to\" + (GrammarBuilder)colorChoice;  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "Het eerste element van de grammatica."
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "Het tweede grammatica element dat een set van alternatieve elementen vertegenwoordigt."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Retourneert een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> voor de volgorde van de <code> builder </code> parameter gevolgd door de <code> choices </code> parameter."
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  id: op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Maakt een nieuw <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> die bevat een reeks van twee <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> objecten."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>biedt ondersteuning voor conversies van de volgende klassen.</xref:System.Speech.Recognition.GrammarBuilder>      - <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>Deze methode accepteert de bovenstaande voor objecten de `builder1` en `builder2` parameters.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> Zie voor meer informatie de <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>operators.</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      > [!IMPORTANT] > Wanneer u combineren <xref:System.Speech.Recognition.GrammarBuilder>objecten die bevatten <xref:System.Speech.Recognition.SemanticResultValue>of <xref:System.Speech.Recognition.SemanticResultKey>exemplaren, zorg ervoor dat u niet te maken van dubbele semantische elementen met dezelfde sleutelnaam of meerdere semantische elementen die herhaaldelijk kunnen wijzigen de <xref:System.Speech.Recognition.SemanticValue.Value%2A>eigenschap van een <xref:System.Speech.Recognition.SemanticValue>object.</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> De spraakherkenner kunt Veroorzaak een uitzondering als deze omstandigheden worden ontdekt. Zie voor meer informatie over het bouwen van een speech recognition grammatica semantische gegevens met [Understanding SemanticResultValue en SemanticResultKey objecten](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)."
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);
    parameters:
    - id: builder1
      type: System.Speech.Recognition.GrammarBuilder
      description: "Het eerste element van de grammatica."
    - id: builder2
      type: System.Speech.Recognition.GrammarBuilder
      description: "Het tweede grammar-element."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Retourneert een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> voor de volgorde van de <code> builder1 </code> parameter gevolgd door de <code> builder2 </code> parameter."
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  id: op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(GrammarBuilder,String)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,String)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Maakt een nieuw <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> die bevat een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> gevolgd door een wachtwoordzin."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>biedt ondersteuning voor conversies van de volgende klassen.</xref:System.Speech.Recognition.GrammarBuilder>      - <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>Deze methode accepteert de bovenstaande voor objecten de `builder` parameter.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> Zie voor meer informatie de <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>operators.</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.GrammarBuilder builder, string phrase);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "Het eerste element van de grammatica."
    - id: phrase
      type: System.String
      description: "Het tweede grammatica element dat van een reeks woorden vertegenwoordigt."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Retourneert een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> voor de volgorde van de <code> builder </code> parameter gevolgd door de <code> phrase </code> parameter."
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  id: op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(String,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(String,GrammarBuilder)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "Maakt een nieuw <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> die bevat een zin gevolgd door een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>."
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>biedt ondersteuning voor conversies van de volgende klassen.</xref:System.Speech.Recognition.GrammarBuilder>      - <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>- <xref:System.String>Deze methode accepteert de bovenstaande voor objecten de `builder` parameter.</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> Zie voor meer informatie de <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>operators.</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>"
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] { \"red\", \"green\", \"blue\" });  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    (GrammarBuilder)\"Make background\" + colorChoice;  \n  GrammarBuilder setPhrase =  \n    \"Set background to\" + (GrammarBuilder)colorChoice;  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the Grammar object from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (string phrase, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: phrase
      type: System.String
      description: "Het eerste grammar-element, waarmee een reeks woorden."
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "Het tweede grammar-element."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Retourneert een <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> voor de volgorde van de <code> phrase </code> parameter gevolgd door de <code> builder </code> parameter."
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)
  id: op_Implicit(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(Choices)
  nameWithType: GrammarBuilder.op_Implicit(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(Choices)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (System.Speech.Recognition.Choices choices);
    parameters:
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "Moet worden toegevoegd."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Moet worden toegevoegd."
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)
  id: op_Implicit(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(SemanticResultKey)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultKey)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (System.Speech.Recognition.SemanticResultKey semanticKey);
    parameters:
    - id: semanticKey
      type: System.Speech.Recognition.SemanticResultKey
      description: "Moet worden toegevoegd."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Moet worden toegevoegd."
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)
  id: op_Implicit(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(SemanticResultValue)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultValue)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (System.Speech.Recognition.SemanticResultValue semanticValue);
    parameters:
    - id: semanticValue
      type: System.Speech.Recognition.SemanticResultValue
      description: "Moet worden toegevoegd."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Moet worden toegevoegd."
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)
  id: op_Implicit(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(String)
  nameWithType: GrammarBuilder.op_Implicit(String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(String)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (string phrase);
    parameters:
    - id: phrase
      type: System.String
      description: "Moet worden toegevoegd."
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "Moet worden toegevoegd."
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.GrammarBuilder.#ctor
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder()
  nameWithType: GrammarBuilder.GrammarBuilder()
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder()
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(Choices)
  nameWithType: GrammarBuilder.GrammarBuilder(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(Choices)
- uid: System.Speech.Recognition.Choices
  parent: System.Speech.Recognition
  isExternal: false
  name: Choices
  nameWithType: Choices
  fullName: System.Speech.Recognition.Choices
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(SemanticResultKey)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultKey)
- uid: System.Speech.Recognition.SemanticResultKey
  parent: System.Speech.Recognition
  isExternal: false
  name: SemanticResultKey
  nameWithType: SemanticResultKey
  fullName: System.Speech.Recognition.SemanticResultKey
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(SemanticResultValue)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultValue)
- uid: System.Speech.Recognition.SemanticResultValue
  parent: System.Speech.Recognition
  isExternal: false
  name: SemanticResultValue
  nameWithType: SemanticResultValue
  fullName: System.Speech.Recognition.SemanticResultValue
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(String)
  nameWithType: GrammarBuilder.GrammarBuilder(String)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
- uid: System.Speech.Recognition.SubsetMatchingMode
  parent: System.Speech.Recognition
  isExternal: false
  name: SubsetMatchingMode
  nameWithType: SubsetMatchingMode
  fullName: System.Speech.Recognition.SubsetMatchingMode
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(String,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(Choices,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,Choices)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(GrammarBuilder,String)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,String)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(String,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(String,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(Choices)
  nameWithType: GrammarBuilder.Append(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(Choices)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(GrammarBuilder)
  nameWithType: GrammarBuilder.Append(GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(SemanticResultKey)
  nameWithType: GrammarBuilder.Append(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultKey)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(SemanticResultValue)
  nameWithType: GrammarBuilder.Append(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultValue)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(String)
  nameWithType: GrammarBuilder.Append(String)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.Append(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,SubsetMatchingMode)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(String,Int32,Int32)
  nameWithType: GrammarBuilder.Append(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendDictation()
  nameWithType: GrammarBuilder.AppendDictation()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation()
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendDictation(String)
  nameWithType: GrammarBuilder.AppendDictation(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation(String)
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendRuleReference(String)
  nameWithType: GrammarBuilder.AppendRuleReference(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String)
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendRuleReference(String,String)
  nameWithType: GrammarBuilder.AppendRuleReference(String,String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String,String)
- uid: System.Speech.Recognition.GrammarBuilder.AppendWildcard
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendWildcard()
  nameWithType: GrammarBuilder.AppendWildcard()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendWildcard()
- uid: System.Speech.Recognition.GrammarBuilder.Culture
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Culture
  nameWithType: GrammarBuilder.Culture
  fullName: System.Speech.Recognition.GrammarBuilder.Culture
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: DebugShowPhrases
  nameWithType: GrammarBuilder.DebugShowPhrases
  fullName: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(Choices,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,Choices)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(GrammarBuilder,String)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,String)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(String,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(String,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(Choices)
  nameWithType: GrammarBuilder.op_Implicit(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(Choices)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(SemanticResultKey)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultKey)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(SemanticResultValue)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultValue)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(String)
  nameWithType: GrammarBuilder.op_Implicit(String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(String)
- uid: System.Speech.Recognition.GrammarBuilder.#ctor*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder.GrammarBuilder
- uid: System.Speech.Recognition.GrammarBuilder.Add*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add
  nameWithType: GrammarBuilder.Add
- uid: System.Speech.Recognition.GrammarBuilder.Append*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append
  nameWithType: GrammarBuilder.Append
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendDictation
  nameWithType: GrammarBuilder.AppendDictation
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendRuleReference
  nameWithType: GrammarBuilder.AppendRuleReference
- uid: System.Speech.Recognition.GrammarBuilder.AppendWildcard*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendWildcard
  nameWithType: GrammarBuilder.AppendWildcard
- uid: System.Speech.Recognition.GrammarBuilder.Culture*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Culture
  nameWithType: GrammarBuilder.Culture
- uid: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: DebugShowPhrases
  nameWithType: GrammarBuilder.DebugShowPhrases
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition
  nameWithType: GrammarBuilder.op_Addition
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit
  nameWithType: GrammarBuilder.op_Implicit
