### YamlMime:ManagedReference
items:
- uid: System.Runtime.MemoryFailPoint
  id: MemoryFailPoint
  children:
  - System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  - System.Runtime.MemoryFailPoint.Dispose
  - System.Runtime.MemoryFailPoint.Finalize
  langs:
  - csharp
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint
  fullName: System.Runtime.MemoryFailPoint
  type: Class
  summary: "Controleert of er voldoende geheugenbronnen voordat een bewerking wordt uitgevoerd. Deze klasse kan niet worden overgenomen."
  remarks: "> [!NOTE]> Deze klasse is bedoeld voor gebruik in de geavanceerde ontwikkeling.       Het maken van een exemplaar van de klasse MemoryFailPoint maakt een gate geheugen. Een gate geheugen controleert voldoende bronnen zijn voordat u begint een activiteit een grote hoeveelheid geheugen moet. De controle mislukt resulteert in een <xref:System.InsufficientMemoryException>uitzondering wordt veroorzaakt.</xref:System.InsufficientMemoryException> Deze uitzondering wordt voorkomen dat een bewerking wordt gestart en vermindert de kans bestaat dat is mislukt vanwege gebrek aan resources. Dit kunt u de prestaties verminderen, om te voorkomen dat een <xref:System.OutOfMemoryException>uitzondering en beschadigingen staat dat leiden van een onjuiste afhandeling van de uitzondering op willekeurige locaties in uw code tot kan.</xref:System.OutOfMemoryException>      > [!IMPORTANT] > Dit type implementeert de <xref:System.IDisposable>interface.</xref:System.IDisposable> Wanneer u klaar bent met het type, moet u beschikken over het direct of indirect. Aanroepen voor het rechtstreeks verwijderen van het type ervan <xref:System.IDisposable.Dispose%2A>methode in een `try` / `catch` blok.</xref:System.IDisposable.Dispose%2A> Gebruiken om de buitengebruikstelling van het indirect, een taal constructie zoals `using` (in C#) of `Using` (in Visual Basic). Zie voor meer informatie de sectie &quot;Met behulp van een Object dat wordt ge√Ømplementeerd IDisposable&quot; in de <xref:System.IDisposable>interface onderwerp.</xref:System.IDisposable>       Door een <xref:System.InsufficientMemoryException>uitzondering, een toepassing kan onderscheid maken tussen een schatting maken die een bewerking kan niet worden voltooid en een gedeeltelijk voltooide bewerking die door de status van de toepassing mogelijk beschadigd.</xref:System.InsufficientMemoryException> Dit kan een toepassing Verlaag de frequentie van een volledige escalatiebeleid waarvoor het verwijderen van de huidige <xref:System.AppDomain>of het proces wordt gerecycled.</xref:System.AppDomain>       MemoryFailPoint controleert of voldoende geheugen en opeenvolgende virtuele adresruimte beschikbaar in alle garbagecollection heaps zijn en kunnen de grootte van het wisselbestand toenemen.  MemoryFailPoint maakt geen garanties met betrekking tot de beschikbaarheid van het geheugen van de lange termijn tijdens de levensduur van de nieuwe telefoonpoort, maar aanroepfuncties gebruik altijd de <xref:System.Runtime.MemoryFailPoint.Dispose%2A>methode om ervoor te zorgen dat resources die zijn gekoppeld aan MemoryFailPoint zijn vrijgegeven.</xref:System.Runtime.MemoryFailPoint.Dispose%2A>       Als u wilt gebruiken een gate geheugen, moet u een object MemoryFailPoint maken en geef het aantal megabytes (MB) aan geheugen die wordt verwacht dat de volgende bewerking gebruiken. Als er onvoldoende geheugen is niet beschikbaar is, een <xref:System.InsufficientMemoryException>uitzondering.</xref:System.InsufficientMemoryException>       De parameter van de constructor moet een positief geheel getal zijn. Een negatieve waarde wordt gegeven een <xref:System.ArgumentOutOfRangeException>uitzondering.</xref:System.ArgumentOutOfRangeException>       MemoryFailPoint werkt op een granulatie van 16 MB. Alle waarden die kleiner zijn dan 16 MB worden behandeld als 16 MB en andere waarden worden behandeld als het volgende grootste veelvoud van 16 MB."
  example:
  - "MemoryFailPoint enables an application to slow itself to avoid running out of memory in a corrupting manner.  It should be used within a lexical scope.  The following example launches threads to process items in a work queue.  Before each thread is launched, the available memory resources are checked using MemoryFailPoint.  If an exception is thrown, the main method waits until memory is available before launching the next thread.  \n  \n [!code-cs[MemoryFailPoint#1](~/add/codesnippet/csharp/t-system.runtime.memoryf_1.cs)]"
  syntax:
    content: 'public sealed class MemoryFailPoint : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable'
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> klasse, geven de hoeveelheid geheugen vereist is voor een geslaagde uitvoering."
  remarks: "De hoeveelheid geheugen die door uw toepassing wordt gebruikt voor het verwerken van een werkitem kan langs worden bepaald.  Voor een schatting van de hoeveelheid geheugen die uw toepassing moet een aanvraag te verwerken, kunt u overwegen de <xref:System.GC.GetTotalMemory%2A?displayProperty=fullName>methode om te bepalen van de hoeveelheid geheugen die beschikbaar zijn voordat en nadat het aanroepen van de methode die het werkitem verwerkt.</xref:System.GC.GetTotalMemory%2A?displayProperty=fullName> Zie de <xref:System.Runtime.MemoryFailPoint>klasse voor een codevoorbeeld van een die dynamisch bepaalt de waarde voor de `sizeInMegabytes` parameter.</xref:System.Runtime.MemoryFailPoint>"
  example:
  - "The following example demonstrates how to determine the amount of memory a method requires when executing. This code example is part of a larger example provided for the <xref:System.Runtime.MemoryFailPoint> class.  \n  \n [!code-cs[MemoryFailPoint#2](~/add/codesnippet/csharp/m-system.runtime.memoryf_1.cs)]"
  syntax:
    content: public MemoryFailPoint (int sizeInMegabytes);
    parameters:
    - id: sizeInMegabytes
      type: System.Int32
      description: "De grootte van de vereiste geheugen in megabytes. Dit moet een positieve waarde zijn."
  overload: System.Runtime.MemoryFailPoint.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "De opgegeven geheugengrootte is negatief."
  - type: System.InsufficientMemoryException
    commentId: T:System.InsufficientMemoryException
    description: "Er is onvoldoende geheugen om te beginnen met het uitvoeren van de code die wordt beveiligd door de nieuwe telefoonpoort."
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Dispose
  id: Dispose
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Versies van alle resources die worden gebruikt door de <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref>."
  remarks: "Dispose aanroepen wanneer u klaar bent met de <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> De methode Dispose verlaat de <xref:System.Runtime.MemoryFailPoint>in een onbruikbare status.</xref:System.Runtime.MemoryFailPoint> Na het aanroepen <xref:System.Runtime.MemoryFailPoint>, moet u alle verwijzingen naar vrijgeven de <xref:System.Runtime.MemoryFailPoint>zodat het geheugen door de garbage collector vrijmaken kunt die de <xref:System.Runtime.MemoryFailPoint>is bepaald dat zich bevindt.</xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> </xref:System.Runtime.MemoryFailPoint> Zie voor meer informatie [onbeheerde hulpbronnen reinigen](~/add/includes/ajax-current-ext-md.md) en [uitvoering van een methode Dispose](~/add/includes/ajax-current-ext-md.md).      > [!NOTE] > Altijd aanroep verwijderen voordat u uw laatste verwijzing naar de <xref:System.Runtime.MemoryFailPoint>.</xref:System.Runtime.MemoryFailPoint> loslaat Anders wordt de resources die worden gebruikt niet vrij tot het aanroepen van de garbagecollector van de <xref:System.Runtime.MemoryFailPoint>van het object `Finalize` methode.</xref:System.Runtime.MemoryFailPoint>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.MemoryFailPoint.Finalize
  id: Finalize
  parent: System.Runtime.MemoryFailPoint
  langs:
  - csharp
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime
  summary: "Zorgt ervoor dat resources zijn vrijgegeven en andere opschonen-bewerkingen worden uitgevoerd wanneer de garbage collector indexrijen de <xref href=&quot;System.Runtime.MemoryFailPoint&quot;> </xref> object."
  remarks: "De garbage collector roept de methode Finalize wanneer het huidige object is gereed om te worden voltooid."
  syntax:
    content: ~MemoryFailPoint ();
    parameters: []
  overload: System.Runtime.MemoryFailPoint.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  isExternal: false
  name: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InsufficientMemoryException
  parent: System
  isExternal: false
  name: InsufficientMemoryException
  nameWithType: InsufficientMemoryException
  fullName: System.InsufficientMemoryException
- uid: System.Runtime.MemoryFailPoint.#ctor(System.Int32)
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint(Int32)
  nameWithType: MemoryFailPoint.MemoryFailPoint(Int32)
  fullName: System.Runtime.MemoryFailPoint.MemoryFailPoint(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.MemoryFailPoint.Dispose
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose()
  nameWithType: MemoryFailPoint.Dispose()
  fullName: System.Runtime.MemoryFailPoint.Dispose()
- uid: System.Runtime.MemoryFailPoint.Finalize
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize()
  nameWithType: MemoryFailPoint.Finalize()
  fullName: System.Runtime.MemoryFailPoint.Finalize()
- uid: System.Runtime.MemoryFailPoint.#ctor*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: MemoryFailPoint
  nameWithType: MemoryFailPoint.MemoryFailPoint
- uid: System.Runtime.MemoryFailPoint.Dispose*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Dispose
  nameWithType: MemoryFailPoint.Dispose
- uid: System.Runtime.MemoryFailPoint.Finalize*
  parent: System.Runtime.MemoryFailPoint
  isExternal: false
  name: Finalize
  nameWithType: MemoryFailPoint.Finalize
