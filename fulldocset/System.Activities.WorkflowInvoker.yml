### YamlMime:ManagedReference
items:
- uid: System.Activities.WorkflowInvoker
  id: WorkflowInvoker
  children:
  - System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)
  - System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)
  - System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)
  - System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)
  - System.Activities.WorkflowInvoker.CancelAsync(System.Object)
  - System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)
  - System.Activities.WorkflowInvoker.Extensions
  - System.Activities.WorkflowInvoker.Invoke
  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)
  - System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)
  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)
  - System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  - System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1)
  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  - System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)
  - System.Activities.WorkflowInvoker.InvokeAsync
  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  - System.Activities.WorkflowInvoker.InvokeAsync(System.Object)
  - System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)
  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)
  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  - System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)
  - System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)
  - System.Activities.WorkflowInvoker.InvokeCompleted
  langs:
  - csharp
  name: WorkflowInvoker
  nameWithType: WorkflowInvoker
  fullName: System.Activities.WorkflowInvoker
  type: Class
  summary: "Biedt een manier voor het aanroepen van een werkstroom alsof deze een methodeaanroep."
  remarks: "WorkflowInvoker bevat exemplaar en statische methoden voor het aanroepen van werkstromen synchroon en Exemplaarmethoden voor het aanroepen van werkstromen asynchroon.       WorkflowInvoker kan geen exemplaar besturingselement zoals persistent maken, verwijderen of bladwijzers hervatten. Als exemplaar-besturingselement vereist is, gebruikt u <xref:System.Activities.WorkflowApplication>in plaats daarvan.</xref:System.Activities.WorkflowApplication>       Aanroepen voor het uitvoeren van werkstromen synchroon met geen controle van het exemplaar, de <xref:System.Activities.WorkflowInvoker.Invoke%2A>methode.</xref:System.Activities.WorkflowInvoker.Invoke%2A> Voor het uitvoeren van een werkstroom asynchroon met geen controle exemplaar gebruiken de <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>en <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>paren methode, of de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>methode.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> </xref:System.Activities.WorkflowInvoker.EndInvoke%2A> </xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>"
  example:
  - "The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using WorkflowInvoker.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#1](~/add/codesnippet/csharp/t-system.activities.work_6_1.cs)]"
  syntax:
    content: public sealed class WorkflowInvoker
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)
  id: '#ctor(System.Activities.Activity)'
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: WorkflowInvoker(Activity)
  nameWithType: WorkflowInvoker.WorkflowInvoker(Activity)
  fullName: System.Activities.WorkflowInvoker.WorkflowInvoker(Activity)
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Activities.WorkflowInvoker&quot;> </xref> klasse."
  remarks: "<xref:System.Activities.WorkflowInvoker>exemplaar en statische methoden voor het aanroepen van werkstromen synchroon en Exemplaarmethoden voor het aanroepen van werkstromen asynchroon bevat.</xref:System.Activities.WorkflowInvoker>"
  example:
  - "The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#2](~/add/codesnippet/csharp/m-system.activities.work_18_1.cs)]"
  syntax:
    content: public WorkflowInvoker (System.Activities.Activity workflow);
    parameters:
    - id: workflow
      type: System.Activities.Activity
      description: "De workflowdefinitie van de werkstroom moet worden aangeroepen door deze instantie van de <xref href=&quot;System.Activities.WorkflowInvoker&quot;> </xref> klasse."
  overload: System.Activities.WorkflowInvoker.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)
  id: BeginInvoke(System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: BeginInvoke(AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom asynchroon met behulp van de opgegeven <xref:System.AsyncCallback>en de gebruiker opgegeven status.</xref:System.AsyncCallback>"
  remarks: "Roep wilt worden gewaarschuwd wanneer de werkstroom voltooid is en ophalen van de output-parameters van de werkstroom, <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>van de `callback` methode.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Als <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>is aangeroepen voordat de werkstroom is voltooid, worden geblokkeerd totdat de werkstroom is voltooid.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Voor het configureren van een time-outinterval in die de werkstroom moet uitvoeren, gebruikt u een van de <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>overloads die een <xref:System.TimeSpan>.</xref:System.TimeSpan> duren</xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>       Deze methode wordt aangeroepen voor een werkstroom asynchroon met behulp van de <xref:System.IAsyncResult>asynchrone ontwerppatroon.</xref:System.IAsyncResult> [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Overzicht van asynchrone programmering](http://go.microsoft.com/fwlink/?LinkId=141764)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/094aa761-fc5c-46bd-8404-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/094aa761-fc5c-46bd-8404-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginInvoke (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "De methode die moet worden aangeroepen wanneer de werkstroom is voltooid."
    - id: state
      type: System.Object
      description: "Een optionele toepassingsspecifieke-object dat informatie over de asynchrone bewerking bevat."
    return:
      type: System.IAsyncResult
      description: "Een verwijzing naar de asynchrone bewerking worden aangeroepen."
  overload: System.Activities.WorkflowInvoker.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)
  id: BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom asynchroon met behulp van de opgegeven &lt;xref:System.Collections.Generic.IDictionary%602&gt; van invoerparameters <xref:System.AsyncCallback>, en de gebruiker opgegeven status.</xref:System.AsyncCallback>"
  remarks: "Roep wilt worden gewaarschuwd wanneer de werkstroom voltooid is en ophalen van de output-parameters van de werkstroom, <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>van de `callback` methode.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Als <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>is aangeroepen voordat de werkstroom is voltooid, worden geblokkeerd totdat de werkstroom is voltooid.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A>  Voor het configureren van een time-outinterval in die de werkstroom moet uitvoeren, gebruikt u een van de <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>overloads die een <xref:System.TimeSpan>.</xref:System.TimeSpan> duren</xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>       Deze methode wordt aangeroepen voor een werkstroom asynchroon met behulp van de <xref:System.IAsyncResult>asynchrone ontwerppatroon.</xref:System.IAsyncResult> [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Overzicht van asynchrone programmering](http://go.microsoft.com/fwlink/?LinkId=141764)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/f9621cfb-b09b-4086-8161-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/f9621cfb-b09b-4086-8161-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary<string,object> inputs, AsyncCallback callback, object state);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "De woordenlijst van invoerparameters naar de werkstroom, ingevoerd met de naam van het argument."
    - id: callback
      type: System.AsyncCallback
      description: "De methode die moet worden aangeroepen wanneer de werkstroom is voltooid."
    - id: state
      type: System.Object
      description: "Een optionele toepassingsspecifieke-object dat informatie over de asynchrone bewerking bevat."
    return:
      type: System.IAsyncResult
      description: "Een verwijzing naar de asynchrone bewerking worden aangeroepen."
  overload: System.Activities.WorkflowInvoker.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: BeginInvoke(TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom asynchroon met het opgegeven time-outinterval <xref:System.AsyncCallback>, en de gebruiker opgegeven status.</xref:System.AsyncCallback>"
  remarks: "Roep wilt worden gewaarschuwd wanneer de werkstroom voltooid is en ophalen van de output-parameters van de werkstroom, <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>van de `callback` methode.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Als <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>is aangeroepen voordat de werkstroom is voltooid, worden geblokkeerd totdat de werkstroom is voltooid.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Als de werkstroom niet voltooid binnen de opgegeven time-outinterval de workflow is afgebroken en een <xref:System.TimeoutException>gegenereerd wanneer de <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>methode wordt aangeroepen.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> </xref:System.TimeoutException>      > [!NOTE] > De <xref:System.TimeoutException>alleen gegenereerd als het time-outinterval verstrijkt en de werkstroom niet-actieve tijdens de uitvoering wordt.</xref:System.TimeoutException> Een werkstroom die langer duren dan de opgegeven time-outinterval voltooid is voltooid als de werkstroom is niet actief blijft.       Deze methode wordt aangeroepen voor een werkstroom asynchroon met behulp van de <xref:System.IAsyncResult>asynchrone ontwerppatroon.</xref:System.IAsyncResult> [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Overzicht van asynchrone programmering](http://go.microsoft.com/fwlink/?LinkId=141764)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/40384351-3c07-4522-8c26-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/40384351-3c07-4522-8c26-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Het interval waarmee de werkstroom uitvoeren moet voordat deze wordt afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>"
    - id: callback
      type: System.AsyncCallback
      description: "De methode die moet worden aangeroepen wanneer de werkstroom is voltooid."
    - id: state
      type: System.Object
      description: "Een optionele toepassingsspecifieke-object dat informatie over de asynchrone bewerking bevat."
    return:
      type: System.IAsyncResult
      description: "Een verwijzing naar de asynchrone bewerking worden aangeroepen."
  overload: System.Activities.WorkflowInvoker.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom asynchroon met behulp van de opgegeven &lt;xref:System.Collections.Generic.IDictionary%602&gt; van invoerparameters time-outinterval <xref:System.AsyncCallback>, en de gebruiker opgegeven status.</xref:System.AsyncCallback>"
  remarks: "Roep wilt worden gewaarschuwd wanneer de werkstroom voltooid is en ophalen van de output-parameters van de werkstroom, <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>van de `callback` methode.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Als <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>is aangeroepen voordat de werkstroom is voltooid, worden geblokkeerd totdat de werkstroom is voltooid.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> Als de werkstroom niet voltooid binnen de opgegeven time-outinterval de workflow is afgebroken en een <xref:System.TimeoutException>gegenereerd wanneer <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>wordt aangeroepen.</xref:System.Activities.WorkflowInvoker.EndInvoke%2A> </xref:System.TimeoutException>      > [!NOTE] > De <xref:System.TimeoutException>alleen gegenereerd als het time-outinterval verstrijkt en de werkstroom niet-actieve tijdens de uitvoering wordt.</xref:System.TimeoutException> Een werkstroom die langer duren dan de opgegeven time-outinterval voltooid is voltooid als de werkstroom is niet actief blijft.       Deze methode wordt aangeroepen voor een werkstroom asynchroon met behulp van de <xref:System.IAsyncResult>asynchrone ontwerppatroon.</xref:System.IAsyncResult> [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Overzicht van asynchrone programmering](http://go.microsoft.com/fwlink/?LinkId=141764)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/335b9082-13de-46b1-b93d-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/335b9082-13de-46b1-b93d-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "De woordenlijst van invoerparameters naar de werkstroom, ingevoerd met de naam van het argument."
    - id: timeout
      type: System.TimeSpan
      description: "Het interval waarmee de werkstroom uitvoeren moet voordat deze wordt afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>"
    - id: callback
      type: System.AsyncCallback
      description: "De methode die moet worden aangeroepen wanneer de werkstroom is voltooid."
    - id: state
      type: System.Object
      description: "Een optionele toepassingsspecifieke-object dat informatie over de asynchrone bewerking bevat."
    return:
      type: System.IAsyncResult
      description: "Een verwijzing naar de asynchrone bewerking worden aangeroepen."
  overload: System.Activities.WorkflowInvoker.BeginInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.CancelAsync(System.Object)
  id: CancelAsync(System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: CancelAsync(Object)
  nameWithType: WorkflowInvoker.CancelAsync(Object)
  fullName: System.Activities.WorkflowInvoker.CancelAsync(Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Probeert te annuleren van de werkstroom die is aangeroepen met de opgegeven <code> userState </code>."
  remarks: "Alleen een werkstroom aangeroepen door een van de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>overloads die een `userState` parameter kan worden geannuleerd.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>       Als de annulering is gelukt, de <xref:System.ComponentModel.Cancelled%2A>eigenschap van de <xref:System.Activities.InvokeCompletedEventArgs>doorgegeven aan de <xref:System.Activities.WorkflowInvoker.InvokeCompleted>handler is ingesteld op `true`; anders wordt deze ingesteld op `false`.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> </xref:System.Activities.InvokeCompletedEventArgs> </xref:System.ComponentModel.Cancelled%2A>"
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. Once the workflow is invoked, the host attempts to cancel the workflow.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_1_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#34](~/add/codesnippet/csharp/m-system.activities.work_1_2.cs)]"
  syntax:
    content: public void CancelAsync (object userState);
    parameters:
    - id: userState
      type: System.Object
      description: "Het token voor de werkstroom te annuleren."
  overload: System.Activities.WorkflowInvoker.CancelAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)
  id: EndInvoke(System.IAsyncResult)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: EndInvoke(IAsyncResult)
  nameWithType: WorkflowInvoker.EndInvoke(IAsyncResult)
  fullName: System.Activities.WorkflowInvoker.EndInvoke(IAsyncResult)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Retourneert de resultaten van een werkstroom die is aangeroepen met een van de <xref:System.Activities.WorkflowInvoker.BeginInvoke*>overloads.</xref:System.Activities.WorkflowInvoker.BeginInvoke*>"
  remarks: "Als u wilt worden gewaarschuwd wanneer de werkstroom voltooid is en ophalen van de output-parameters van de werkstroom, roepen EndInvoke van de `callback` methode die is opgegeven door <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> Als EndInvoke wordt aangeroepen voordat de werkstroom is voltooid, worden geblokkeerd totdat de werkstroom is voltooid.       Deze methode retourneert het resultaat van een werkstroom aangeroepen asynchroon met behulp van de <xref:System.IAsyncResult>asynchrone ontwerppatroon.</xref:System.IAsyncResult> [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Overzicht van asynchrone programmering](http://go.microsoft.com/fwlink/?LinkId=141764)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling EndInvoke. When the call to EndInvoke returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_22_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#32](~/add/codesnippet/csharp/m-system.activities.work_22_2.cs)]"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> EndInvoke (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "De <xref:System.IAsyncResult>dat verwijst naar de <xref:System.Activities.WorkflowInvoker.BeginInvoke*>bewerking die de werkstroom wordt gestart.</xref:System.Activities.WorkflowInvoker.BeginInvoke*> </xref:System.IAsyncResult>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Een dictionary van de hoofdactiviteit <xref href=&quot;System.Activities.OutArgument&quot;> </xref> en <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> waarden ingevoerd met het argument een naam voor de uitvoer van de werkstroom."
  overload: System.Activities.WorkflowInvoker.EndInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Extensions
  id: Extensions
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Extensions
  nameWithType: WorkflowInvoker.Extensions
  fullName: System.Activities.WorkflowInvoker.Extensions
  type: Property
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Haalt de &lt;xref:System.Collections.ObjectModel.Collection%601&gt; van uitbreidingen die beschikbaar voor werkstromen aangeroepen zijn door een <xref href=&quot;System.Activities.WorkflowInvoker&quot;> </xref> exemplaar."
  remarks: "Deze eigenschap wordt gebruikt door host werkstroomauteurs extensies toevoegen aan het <xref:System.Activities.WorkflowInvoker>exemplaar dus zijn ze beschikbaar zijn voor werkstromen aangeroepen door deze</xref:System.Activities.WorkflowInvoker>"
  example:
  - "The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the Extensions collection of a <xref:System.Activities.WorkflowInvoker> instance. This code example is part of the [Custom Tracking](~/add/includes/ajax-current-ext-md.md) sample.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#40](~/add/codesnippet/csharp/p-system.activities.work_13_1.cs)]"
  syntax:
    content: public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }
    return:
      type: System.Activities.Hosting.WorkflowInstanceExtensionManager
      description: "De &lt;xref:System.Collections.ObjectModel.Collection%601&gt; van uitbreidingen die beschikbaar voor werkstromen aangeroepen zijn door een <xref href=&quot;System.Activities.WorkflowInvoker&quot;> </xref> exemplaar."
  overload: System.Activities.WorkflowInvoker.Extensions*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke
  id: Invoke
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke()
  nameWithType: WorkflowInvoker.Invoke()
  fullName: System.Activities.WorkflowInvoker.Invoke()
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom synchroon met de werkstroomdefinitie die is doorgegeven aan de &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; constructor."
  remarks: "Deze methodeblokken totdat de werkstroom is voltooid, met inbegrip van niet-actieve tijd. Alle uitvoering van de werkstroom is moet worden uitgevoerd op de oproepende thread gegarandeerd. Voor het configureren van een time-outinterval in die de werkstroom moet uitvoeren, gebruikt u een van de <xref:System.Activities.WorkflowInvoker.Invoke%2A>overloads die een <xref:System.TimeSpan>.</xref:System.TimeSpan> duren</xref:System.Activities.WorkflowInvoker.Invoke%2A>"
  example:
  - "The following example invokes a workflow consisting of a single `DiceRoll` activity. The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name. The workflow is invoked twice, using the workflow definition passed into to the `WorkflowInvoker` constructor.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#130](~/add/codesnippet/csharp/m-system.activities.work_6_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#31](~/add/codesnippet/csharp/m-system.activities.work_6_2.cs)]  \n  \n If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded. The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#2](~/add/codesnippet/csharp/m-system.activities.work_6_3.cs)]"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> Invoke ();
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Een dictionary van de hoofdactiviteit <xref href=&quot;System.Activities.OutArgument&quot;> </xref> en <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> waarden ingevoerd met het argument een naam voor de uitvoer van de werkstroom."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)
  id: Invoke(System.Activities.Activity)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity)
  nameWithType: WorkflowInvoker.Invoke(Activity)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom synchroon met de opgegeven workflowdefinitie."
  remarks: "Deze methodeblokken totdat de werkstroom is voltooid, met inbegrip van niet-actieve tijd. Alle uitvoering van de werkstroom is moet worden uitgevoerd op de oproepende thread gegarandeerd. Voor het configureren van een time-outinterval in die de werkstroom moet uitvoeren, gebruikt u een van de <xref:System.Activities.WorkflowInvoker.Invoke%2A>overloads die een <xref:System.TimeSpan>.</xref:System.TimeSpan> duren</xref:System.Activities.WorkflowInvoker.Invoke%2A>"
  example:
  - "The following example invokes a workflow consisting of a single `DiceRoll` activity. The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#130](~/add/codesnippet/csharp/m-system.activities.work_4_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#30](~/add/codesnippet/csharp/m-system.activities.work_4_2.cs)]  \n  \n If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded. The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#1](~/add/codesnippet/csharp/m-system.activities.work_4_3.cs)]"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow);
    parameters:
    - id: workflow
      type: System.Activities.Activity
      description: "De workflowdefinitie van de werkstroom om aan te roepen."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Een dictionary van de hoofdactiviteit <xref href=&quot;System.Activities.OutArgument&quot;> </xref> en <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> waarden ingevoerd met het argument een naam voor de uitvoer van de werkstroom."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "De activiteit die is doorgegeven aan de &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; constructor synchroon met de opgegeven &lt;xref:System.Collections.Generic.IDictionary%602&gt; van invoerparameters."
  remarks: "Deze methodeblokken totdat de werkstroom is voltooid, met inbegrip van niet-actieve tijd. Alle uitvoering van de werkstroom is moet worden uitgevoerd op de oproepende thread gegarandeerd. Voor het configureren van een time-outinterval in die de werkstroom moet uitvoeren, gebruikt u een van de <xref:System.Activities.WorkflowInvoker.Invoke%2A>overloads die een <xref:System.TimeSpan>.</xref:System.TimeSpan> duren</xref:System.Activities.WorkflowInvoker.Invoke%2A>"
  example:
  - "The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments. When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#120](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#22](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_2.cs)]  \n  \n If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments. To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>. In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#121](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_3.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#23](~/add/codesnippet/csharp/18cb98fc-3d29-45f3-9160-_4.cs)]"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> Invoke (System.Collections.Generic.IDictionary<string,object> inputs);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "De woordenlijst van invoerparameters naar de werkstroom, ingevoerd met de naam van het argument."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Een dictionary van de hoofdactiviteit <xref href=&quot;System.Activities.OutArgument&quot;> </xref> en <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> waarden ingevoerd met het argument een naam voor de uitvoer van de werkstroom."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)
  id: Invoke(System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom synchroon met de opgegeven time-outinterval."
  remarks: "Deze methodeblokken totdat de werkstroom is voltooid, met inbegrip van niet-actieve tijd. Alle uitvoering van de werkstroom is moet worden uitgevoerd op de oproepende thread gegarandeerd. Als de werkstroom niet voltooid binnen de opgegeven time-outinterval de workflow is afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>      > [!NOTE] > De <xref:System.TimeoutException>alleen gegenereerd als het time-outinterval verstrijkt en de werkstroom niet-actieve tijdens de uitvoering wordt.</xref:System.TimeoutException> Een werkstroom die langer duren dan de opgegeven time-outinterval voltooid is voltooid als de werkstroom is niet actief blijft."
  example:
  - "The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.  \n  \n```Output  \nThe operation did not complete within the allotted timeout of 00:00:30.   \nThe time allotted to this operation may have been a portion of a longer timeout.  \n```  \n  \n [!code-cs[CFX_WorkflowInvokerExample#51](~/add/codesnippet/csharp/m-system.activities.work_12_1.cs)]  \n  \n For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> Invoke (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Het interval waarmee de werkstroom uitvoeren moet voordat deze wordt afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Een dictionary van de hoofdactiviteit <xref href=&quot;System.Activities.OutArgument&quot;> </xref> en <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> waarden ingevoerd met het argument een naam voor de uitvoer van de werkstroom."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity,IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom synchroon met de opgegeven workflowdefinitie en &lt;xref:System.Collections.Generic.IDictionary%602&gt; van invoerparameters."
  remarks: "Deze methodeblokken totdat de werkstroom is voltooid, met inbegrip van niet-actieve tijd. Alle uitvoering van de werkstroom is moet worden uitgevoerd op de oproepende thread gegarandeerd. Voor het configureren van een time-outinterval in die de werkstroom moet uitvoeren, gebruikt u een van de <xref:System.Activities.WorkflowInvoker.Invoke%2A>overloads die een <xref:System.TimeSpan>.</xref:System.TimeSpan> duren</xref:System.Activities.WorkflowInvoker.Invoke%2A>"
  example:
  - "The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments. When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name. When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#120](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#20](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_2.cs)]  \n  \n If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments. To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>. In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#121](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_3.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#21](~/add/codesnippet/csharp/ca07b181-513a-421b-833c-_4.cs)]"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary<string,object> inputs);
    parameters:
    - id: workflow
      type: System.Activities.Activity
      description: "De workflowdefinitie van de werkstroom om aan te roepen."
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "De woordenlijst van invoerparameters naar de werkstroom, ingevoerd met de naam van het argument."
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Een dictionary van de hoofdactiviteit <xref href=&quot;System.Activities.OutArgument&quot;> </xref> en <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> waarden ingevoerd met het argument een naam voor de uitvoer van de werkstroom."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)
  id: Invoke(System.Activities.Activity,System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom synchroon met de opgegeven workflowdefinitie en time-outinterval."
  remarks: "Deze methodeblokken totdat de werkstroom is voltooid, met inbegrip van niet-actieve tijd. Alle uitvoering van de werkstroom is moet worden uitgevoerd op de oproepende thread gegarandeerd. Als de werkstroom niet voltooid binnen de opgegeven time-outinterval de workflow is afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>      > [!NOTE] > De <xref:System.TimeoutException>alleen gegenereerd als het time-outinterval verstrijkt en de werkstroom niet-actieve tijdens de uitvoering wordt.</xref:System.TimeoutException> Een werkstroom die langer duren dan de opgegeven time-outinterval voltooid is voltooid als de werkstroom is niet actief blijft."
  example:
  - "The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#50](~/add/codesnippet/csharp/c629ab8d-d5ad-4778-bfb5-_1.cs)]  \n  \n For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval."
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow, TimeSpan timeout);
    parameters:
    - id: workflow
      type: System.Activities.Activity
      description: "De workflowdefinitie van de werkstroom om aan te roepen."
    - id: timeout
      type: System.TimeSpan
      description: "Het interval waarmee de werkstroom uitvoeren moet voordat deze wordt afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Een dictionary van de hoofdactiviteit <xref href=&quot;System.Activities.OutArgument&quot;> </xref> en <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> waarden ingevoerd met het argument een naam voor de uitvoer van de werkstroom."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  id: Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "De activiteit die is doorgegeven aan de &lt;xref:System.Activities.WorkflowInvoker.%23ctor%2A&gt; constructor synchroon met de opgegeven &lt;xref:System.Collections.Generic.IDictionary%602&gt; van invoerparameters en het opgegeven time-outinterval."
  remarks: "Deze methodeblokken totdat de werkstroom is voltooid, met inbegrip van niet-actieve tijd. Alle uitvoering van de werkstroom is moet worden uitgevoerd op de oproepende thread gegarandeerd. Als de werkstroom niet voltooid binnen de opgegeven time-outinterval de workflow is afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>      > [!NOTE] > De <xref:System.TimeoutException>alleen gegenereerd als het time-outinterval verstrijkt en de werkstroom niet-actieve tijdens de uitvoering wordt.</xref:System.TimeoutException> Een werkstroom die langer duren dan de opgegeven time-outinterval voltooid is voltooid als de werkstroom is niet actief blijft."
  example:
  - "The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.  \n  \n<CodeContentPlaceHolder>0</CodeContentPlaceHolder>  \n [!code-cs[CFX_WorkflowInvokerExample#51](~/add/codesnippet/csharp/b4c6bab6-3619-4dba-a32f-_1.cs)]  \n  \n For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,object> Invoke (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "De woordenlijst van invoerparameters naar de werkstroom, ingevoerd met de naam van het argument."
    - id: timeout
      type: System.TimeSpan
      description: "Het interval waarmee de werkstroom uitvoeren moet voordat deze wordt afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Een dictionary van de hoofdactiviteit <xref href=&quot;System.Activities.OutArgument&quot;> </xref> en <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> waarden ingevoerd met het argument een naam voor de uitvoer van de werkstroom."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  id: Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom synchroon met de opgegeven workflowdefinitie &lt;xref:System.Collections.Generic.IDictionary%602&gt; van invoerparameters en time-outinterval."
  remarks: "Deze methodeblokken totdat de werkstroom is voltooid, met inbegrip van niet-actieve tijd. Alle uitvoering van de werkstroom is moet worden uitgevoerd op de oproepende thread gegarandeerd. Als de werkstroom niet voltooid binnen de opgegeven time-outinterval de workflow is afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>      > [!NOTE] > De <xref:System.TimeoutException>alleen gegenereerd als het time-outinterval verstrijkt en de werkstroom niet-actieve tijdens de uitvoering wordt.</xref:System.TimeoutException> Een werkstroom die langer duren dan de opgegeven time-outinterval voltooid is voltooid als de werkstroom is niet actief blijft."
  example:
  - "The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute. This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds. The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#50](~/add/codesnippet/csharp/99f81696-783c-40fe-9cab-_1.cs)]  \n  \n For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval."
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,object> Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);
    parameters:
    - id: workflow
      type: System.Activities.Activity
      description: "De workflowdefinitie van de werkstroom om aan te roepen."
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "De woordenlijst van invoerparameters naar de werkstroom, ingevoerd met de naam van het argument."
    - id: timeout
      type: System.TimeSpan
      description: "Het interval waarmee de werkstroom uitvoeren moet voordat deze wordt afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Een dictionary van de hoofdactiviteit <xref href=&quot;System.Activities.OutArgument&quot;> </xref> en <xref href=&quot;System.Activities.InOutArgument&quot;> </xref> waarden ingevoerd met het argument een naam voor de uitvoer van de werkstroom."
  overload: System.Activities.WorkflowInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1)
  id: Invoke``1(System.Activities.Activity`1)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity<TResult>)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow);
    parameters:
    - id: workflow
      type: System.Activities.Activity`1
      description: "Moet worden toegevoegd."
    return:
      type: TResult
      description: "Moet worden toegevoegd."
  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})
  id: Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity<TResult>,IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow, System.Collections.Generic.IDictionary<string,object> inputs);
    parameters:
    - id: workflow
      type: System.Activities.Activity`1
      description: "Moet worden toegevoegd."
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Moet worden toegevoegd."
    return:
      type: TResult
      description: "Moet worden toegevoegd."
  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  id: Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow, System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);
    parameters:
    - id: workflow
      type: System.Activities.Activity`1
      description: "Moet worden toegevoegd."
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Moet worden toegevoegd."
    - id: timeout
      type: System.TimeSpan
      description: "Moet worden toegevoegd."
    return:
      type: TResult
      description: "Moet worden toegevoegd."
  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)
  id: Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  syntax:
    content: public static TResult Invoke<TResult> (System.Activities.Activity<TResult> workflow, System.Collections.Generic.IDictionary<string,object> inputs, out System.Collections.Generic.IDictionary<string,object> additionalOutputs, TimeSpan timeout);
    parameters:
    - id: workflow
      type: System.Activities.Activity`1
      description: "Moet worden toegevoegd."
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Moet worden toegevoegd."
    - id: additionalOutputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "Moet worden toegevoegd."
    - id: timeout
      type: System.TimeSpan
      description: "Moet worden toegevoegd."
    return:
      type: TResult
      description: "Moet worden toegevoegd."
  overload: System.Activities.WorkflowInvoker.Invoke<TResult>*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync
  id: InvokeAsync
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync()
  nameWithType: WorkflowInvoker.InvokeAsync()
  fullName: System.Activities.WorkflowInvoker.InvokeAsync()
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Een werkstroom aanroept asynchroon."
  remarks: "Als u wilt worden gewaarschuwd wanneer de werkstroom voltooid is, verwerkt <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Voor het configureren van een time-outinterval in die de werkstroom moet uitvoeren, gebruikt u een van de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>overloads die een <xref:System.TimeSpan>.</xref:System.TimeSpan> duren</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>       Deze methode wordt aangeroepen voor een werkstroom asynchroon met behulp van de gebeurtenis gebaseerde asynchrone ontwerppatroon. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Overzicht van het asynchrone patroon op basis van gebeurtenissen](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_16_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_16_2.cs)]"
  syntax:
    content: public void InvokeAsync ();
    parameters: []
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom asynchroon met behulp van de opgegeven &lt;xref:System.Collections.Generic.IDictionary%602&gt; van invoerparameters."
  remarks: "Als u wilt worden gewaarschuwd wanneer de werkstroom voltooid is, verwerkt <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Voor het configureren van een time-outinterval in die de werkstroom moet uitvoeren, gebruikt u een van de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>overloads die een <xref:System.TimeSpan>.</xref:System.TimeSpan> duren</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>       Deze methode wordt aangeroepen voor een werkstroom asynchroon met behulp van de gebeurtenis gebaseerde asynchrone ontwerppatroon. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Overzicht van het asynchrone patroon op basis van gebeurtenissen](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/112688e8-a059-4fd1-b597-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/112688e8-a059-4fd1-b597-_2.cs)]"
  syntax:
    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "De woordenlijst van invoerparameters naar de werkstroom, ingevoerd met de naam van het argument."
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Object)
  id: InvokeAsync(System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(Object)
  nameWithType: WorkflowInvoker.InvokeAsync(Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom asynchroon met behulp van de opgegeven unieke id."
  remarks: "De `userState` parameter uniek zijn in alle actieve <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>bewerkingen voor de huidige activiteit.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> Als de `userState` parameter is niet uniek zijn, een <xref:System.ArgumentException>gegenereerd.</xref:System.ArgumentException> `userState`wordt gebruikt voor het identificeren van de werkstroom in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, en om te annuleren van de werkstroom zijn gebruikt <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</xref:System.Activities.WorkflowInvoker.CancelAsync%2A> </xref:System.Activities.WorkflowInvoker.InvokeCompleted>       Als u wilt worden gewaarschuwd wanneer de werkstroom voltooid is, verwerkt <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Voor het configureren van een time-outinterval in die de werkstroom moet uitvoeren, gebruikt u een van de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>overloads die een <xref:System.TimeSpan>.</xref:System.TimeSpan> duren</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>       Deze methode wordt aangeroepen voor een werkstroom asynchroon met behulp van de gebeurtenis gebaseerde asynchrone ontwerppatroon. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Overzicht van het asynchrone patroon op basis van gebeurtenissen](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_25_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_25_2.cs)]"
  syntax:
    content: public void InvokeAsync (object userState);
    parameters:
    - id: userState
      type: System.Object
      description: "Een gebruiker gemaakte object gebruikt om te onderscheiden van deze bepaalde asynchrone aanroepbewerking vanuit andere huidige asynchrone bewerkingen aanroepen."
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)
  id: InvokeAsync(System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(TimeSpan)
  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom asynchroon met het opgegeven time-outinterval."
  remarks: "Als u wilt worden gewaarschuwd wanneer de werkstroom voltooid is, verwerkt <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Als de werkstroom niet voltooid binnen de opgegeven time-outinterval de workflow is afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>      > [!NOTE] > De <xref:System.TimeoutException>alleen gegenereerd als het time-outinterval verstrijkt en de werkstroom niet-actieve tijdens de uitvoering wordt.</xref:System.TimeoutException> Een werkstroom die langer duren dan de opgegeven time-outinterval voltooid is voltooid als de werkstroom is niet actief blijft.       Deze methode wordt aangeroepen voor een werkstroom asynchroon met behulp van de gebeurtenis gebaseerde asynchrone ontwerppatroon. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Overzicht van het asynchrone patroon op basis van gebeurtenissen](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_10_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_10_2.cs)]"
  syntax:
    content: public void InvokeAsync (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Het interval waarmee de werkstroom uitvoeren moet voordat deze wordt afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>"
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)
  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(IDictionary<String,Object>,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom asynchroon met behulp van de opgegeven &lt;xref:System.Collections.Generic.IDictionary%602&gt; van invoerparameters en een unieke id."
  remarks: "De `userState` parameter uniek zijn in alle actieve <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>bewerkingen voor de huidige activiteit.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> Als `userState` is niet uniek zijn, een <xref:System.ArgumentException>gegenereerd.</xref:System.ArgumentException> `userState`wordt gebruikt voor het identificeren van de werkstroom in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, en om te annuleren van de werkstroom zijn gebruikt <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</xref:System.Activities.WorkflowInvoker.CancelAsync%2A> </xref:System.Activities.WorkflowInvoker.InvokeCompleted>       Als u wilt worden gewaarschuwd wanneer de werkstroom voltooid is, verwerkt <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Voor het configureren van een time-outinterval in die de werkstroom moet uitvoeren, gebruikt u een van de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>overloads die een <xref:System.TimeSpan>.</xref:System.TimeSpan> duren</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>       Deze methode wordt aangeroepen voor een werkstroom asynchroon met behulp van de gebeurtenis gebaseerde asynchrone ontwerppatroon. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Overzicht van het asynchrone patroon op basis van gebeurtenissen](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/a95cbf8c-ccca-42d5-b4d9-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/a95cbf8c-ccca-42d5-b4d9-_2.cs)]"
  syntax:
    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs, object userState);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "De woordenlijst van invoerparameters naar de werkstroom, ingevoerd met de naam van het argument."
    - id: userState
      type: System.Object
      description: "Een gebruiker gemaakte object gebruikt om te onderscheiden van deze bepaalde asynchrone aanroepbewerking vanuit andere huidige asynchrone bewerkingen aanroepen."
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom asynchroon met het opgegeven &lt;xref:System.Collections.Generic.IDictionary%602&gt; van invoerparameters en het opgegeven time-outinterval."
  remarks: "Als u wilt worden gewaarschuwd wanneer de werkstroom voltooid is, verwerkt <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Als de werkstroom niet voltooid binnen de opgegeven time-outinterval de workflow is afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>      > [!NOTE] > De <xref:System.TimeoutException>alleen gegenereerd als het time-outinterval verstrijkt en de werkstroom niet-actieve tijdens de uitvoering wordt.</xref:System.TimeoutException> Een werkstroom die langer duren dan de opgegeven time-outinterval voltooid is voltooid als de werkstroom is niet actief blijft.       Deze methode wordt aangeroepen voor een werkstroom asynchroon met behulp van de gebeurtenis gebaseerde asynchrone ontwerppatroon. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Overzicht van het asynchrone patroon op basis van gebeurtenissen](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/db1ef47f-8edf-438d-b4fc-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/db1ef47f-8edf-438d-b4fc-_2.cs)]"
  syntax:
    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "De woordenlijst van invoerparameters naar de werkstroom, ingevoerd met de naam van het argument."
    - id: timeout
      type: System.TimeSpan
      description: "Het interval waarmee de werkstroom uitvoeren moet voordat deze wordt afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>"
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)
  id: InvokeAsync(System.TimeSpan,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(TimeSpan,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom asynchroon met het opgegeven time-outinterval en een unieke identificatie."
  remarks: "De `userState` parameter uniek zijn in alle actieve <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>bewerkingen voor de huidige activiteit.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> Als `userState` is niet uniek zijn, een <xref:System.ArgumentException>gegenereerd.</xref:System.ArgumentException> `userState`wordt gebruikt voor het identificeren van de werkstroom in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, en om te annuleren van de werkstroom zijn gebruikt <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</xref:System.Activities.WorkflowInvoker.CancelAsync%2A> </xref:System.Activities.WorkflowInvoker.InvokeCompleted>       Als u wilt worden gewaarschuwd wanneer de werkstroom voltooid is, verwerkt <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Als de werkstroom niet voltooid binnen de opgegeven time-outinterval de workflow is afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>      > [!NOTE] > De <xref:System.TimeoutException>alleen gegenereerd als het time-outinterval verstrijkt en de werkstroom niet-actieve tijdens de uitvoering wordt.</xref:System.TimeoutException> Een werkstroom die langer duren dan de opgegeven time-outinterval voltooid is voltooid als de werkstroom is niet actief blijft.       Deze methode wordt aangeroepen voor een werkstroom asynchroon met behulp van de gebeurtenis gebaseerde asynchrone ontwerppatroon. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Overzicht van het asynchrone patroon op basis van gebeurtenissen](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/m-system.activities.work_2_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/m-system.activities.work_2_2.cs)]"
  syntax:
    content: public void InvokeAsync (TimeSpan timeout, object userState);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "Het interval waarmee de werkstroom uitvoeren moet voordat deze wordt afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>"
    - id: userState
      type: System.Object
      description: "Een gebruiker gemaakte object gebruikt om te onderscheiden van deze bepaalde asynchrone aanroepbewerking vanuit andere huidige asynchrone bewerkingen aanroepen."
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)
  id: InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Hiermee wordt een werkstroom asynchroon met het opgegeven &lt;xref:System.Collections.Generic.IDictionary%602&gt; van invoerparameters, het opgegeven time-outinterval en een unieke id."
  remarks: "De `userState` parameter uniek zijn in alle actieve <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>bewerkingen voor de huidige activiteit.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> Als `userState` is niet uniek zijn, een <xref:System.ArgumentException>gegenereerd.</xref:System.ArgumentException> `userState`wordt gebruikt voor het identificeren van de werkstroom in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, en om te annuleren van de werkstroom zijn gebruikt <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</xref:System.Activities.WorkflowInvoker.CancelAsync%2A> </xref:System.Activities.WorkflowInvoker.InvokeCompleted>       Als u wilt worden gewaarschuwd wanneer de werkstroom voltooid is, verwerkt <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</xref:System.Activities.WorkflowInvoker.InvokeCompleted> Als de werkstroom niet voltooid binnen de opgegeven time-outinterval de workflow is afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>      > [!NOTE] > De <xref:System.TimeoutException>alleen gegenereerd als het time-outinterval verstrijkt en de werkstroom niet-actieve tijdens de uitvoering wordt.</xref:System.TimeoutException> Een werkstroom die langer duren dan de opgegeven time-outinterval voltooid is voltooid als de werkstroom is niet actief blijft.       Deze methode wordt aangeroepen voor een werkstroom asynchroon met behulp van de gebeurtenis gebaseerde asynchrone ontwerppatroon. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)][Overzicht van het asynchrone patroon op basis van gebeurtenissen](http://go.microsoft.com/fwlink/?LinkId=141765)."
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/7a3dc9a9-66d7-4131-ad3f-_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/7a3dc9a9-66d7-4131-ad3f-_2.cs)]"
  syntax:
    content: public void InvokeAsync (System.Collections.Generic.IDictionary<string,object> inputs, TimeSpan timeout, object userState);
    parameters:
    - id: inputs
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "De woordenlijst van invoerparameters naar de werkstroom, ingevoerd met de naam van het argument."
    - id: timeout
      type: System.TimeSpan
      description: "Het interval waarmee de werkstroom uitvoeren moet voordat deze wordt afgebroken en een <xref:System.TimeoutException>gegenereerd.</xref:System.TimeoutException>"
    - id: userState
      type: System.Object
      description: "Een gebruiker gemaakte object gebruikt om te onderscheiden van deze bepaalde asynchrone aanroepbewerking vanuit andere huidige asynchrone bewerkingen aanroepen."
  overload: System.Activities.WorkflowInvoker.InvokeAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.WorkflowInvoker.InvokeCompleted
  id: InvokeCompleted
  parent: System.Activities.WorkflowInvoker
  langs:
  - csharp
  name: InvokeCompleted
  nameWithType: WorkflowInvoker.InvokeCompleted
  fullName: System.Activities.WorkflowInvoker.InvokeCompleted
  type: Event
  assemblies:
  - System.Activities
  namespace: System.Activities
  summary: "Deze gebeurtenis treedt op wanneer de werkstroom wordt aangeroepen door een van de <xref:System.Activities.WorkflowInvoker.InvokeAsync*>overloads is voltooid of geannuleerd.</xref:System.Activities.WorkflowInvoker.InvokeAsync*>"
  remarks: "Verwerken dit om te bepalen of een werkstroom wordt aangeroepen met een van de <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>overloads is voltooid en op te halen van de Uitvoerargumenten van de voltooide workflow.</xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>"
  example:
  - "The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. When the workflow completes these are retrieved in the InvokeCompleted handler.  \n  \n [!code-cs[CFX_WorkflowInvokerExample#131](~/add/codesnippet/csharp/e-system.activities.work_1.cs)]  \n  \n [!code-cs[CFX_WorkflowInvokerExample#33](~/add/codesnippet/csharp/e-system.activities.work_2.cs)]"
  syntax:
    content: public event EventHandler<System.Activities.InvokeCompletedEventArgs> InvokeCompleted;
    return:
      type: System.EventHandler{System.Activities.InvokeCompletedEventArgs}
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: WorkflowInvoker(Activity)
  nameWithType: WorkflowInvoker.WorkflowInvoker(Activity)
  fullName: System.Activities.WorkflowInvoker.WorkflowInvoker(Activity)
- uid: System.Activities.Activity
  parent: System.Activities
  isExternal: false
  name: Activity
  nameWithType: Activity
  fullName: System.Activities.Activity
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: BeginInvoke(AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,AsyncCallback,Object)
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,Object>
  nameWithType: IDictionary<String,Object>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: BeginInvoke(TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(TimeSpan,AsyncCallback,Object)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
  nameWithType: WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
  fullName: System.Activities.WorkflowInvoker.BeginInvoke(IDictionary<String,Object>,TimeSpan,AsyncCallback,Object)
- uid: System.Activities.WorkflowInvoker.CancelAsync(System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: CancelAsync(Object)
  nameWithType: WorkflowInvoker.CancelAsync(Object)
  fullName: System.Activities.WorkflowInvoker.CancelAsync(Object)
- uid: System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: EndInvoke(IAsyncResult)
  nameWithType: WorkflowInvoker.EndInvoke(IAsyncResult)
  fullName: System.Activities.WorkflowInvoker.EndInvoke(IAsyncResult)
- uid: System.Activities.WorkflowInvoker.Extensions
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Extensions
  nameWithType: WorkflowInvoker.Extensions
  fullName: System.Activities.WorkflowInvoker.Extensions
- uid: System.Activities.Hosting.WorkflowInstanceExtensionManager
  parent: System.Activities.Hosting
  isExternal: false
  name: WorkflowInstanceExtensionManager
  nameWithType: WorkflowInstanceExtensionManager
  fullName: System.Activities.Hosting.WorkflowInstanceExtensionManager
- uid: System.Activities.WorkflowInvoker.Invoke
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke()
  nameWithType: WorkflowInvoker.Invoke()
  fullName: System.Activities.WorkflowInvoker.Invoke()
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity)
  nameWithType: WorkflowInvoker.Invoke(Activity)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity)
- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>)
- uid: System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(TimeSpan)
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity,IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>)
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,TimeSpan)
- uid: System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(IDictionary<String,Object>,TimeSpan)
- uid: System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity,IDictionary<String,Object>,TimeSpan)
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity<TResult>)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>)
- uid: TResult
  isExternal: true
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Activities.Activity`1
  parent: System.Activities
  isExternal: false
  name: Activity<TResult>
  nameWithType: Activity<TResult>
  fullName: System.Activities.Activity<TResult>
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity<TResult>,IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>)
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,TimeSpan)
- uid: System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity`1,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.Invoke(Activity<TResult>,IDictionary<String,Object>,IDictionary<String,Object>,TimeSpan)
- uid: System.Activities.WorkflowInvoker.InvokeAsync
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync()
  nameWithType: WorkflowInvoker.InvokeAsync()
  fullName: System.Activities.WorkflowInvoker.InvokeAsync()
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(IDictionary<String,Object>)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(Object)
  nameWithType: WorkflowInvoker.InvokeAsync(Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(Object)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(TimeSpan)
  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(IDictionary<String,Object>,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,Object)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(IDictionary<String,Object>,TimeSpan)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(TimeSpan,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(TimeSpan,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(TimeSpan,Object)
- uid: System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
  nameWithType: WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
  fullName: System.Activities.WorkflowInvoker.InvokeAsync(IDictionary<String,Object>,TimeSpan,Object)
- uid: System.Activities.WorkflowInvoker.InvokeCompleted
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeCompleted
  nameWithType: WorkflowInvoker.InvokeCompleted
  fullName: System.Activities.WorkflowInvoker.InvokeCompleted
- uid: System.EventHandler{System.Activities.InvokeCompletedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<InvokeCompletedEventArgs>
  nameWithType: EventHandler<InvokeCompletedEventArgs>
  fullName: System.EventHandler<System.Activities.InvokeCompletedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Activities.InvokeCompletedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Activities.InvokeCompletedEventArgs
    name: InvokeCompletedEventArgs
    nameWithType: InvokeCompletedEventArgs
    fullName: InvokeCompletedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.WorkflowInvoker.#ctor*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: WorkflowInvoker
  nameWithType: WorkflowInvoker.WorkflowInvoker
- uid: System.Activities.WorkflowInvoker.BeginInvoke*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: BeginInvoke
  nameWithType: WorkflowInvoker.BeginInvoke
- uid: System.Activities.WorkflowInvoker.CancelAsync*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: CancelAsync
  nameWithType: WorkflowInvoker.CancelAsync
- uid: System.Activities.WorkflowInvoker.EndInvoke*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: EndInvoke
  nameWithType: WorkflowInvoker.EndInvoke
- uid: System.Activities.WorkflowInvoker.Extensions*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Extensions
  nameWithType: WorkflowInvoker.Extensions
- uid: System.Activities.WorkflowInvoker.Invoke*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke
  nameWithType: WorkflowInvoker.Invoke
- uid: System.Activities.WorkflowInvoker.Invoke<TResult>*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: Invoke<TResult>
  nameWithType: WorkflowInvoker.Invoke<TResult>
- uid: System.Activities.WorkflowInvoker.InvokeAsync*
  parent: System.Activities.WorkflowInvoker
  isExternal: false
  name: InvokeAsync
  nameWithType: WorkflowInvoker.InvokeAsync
