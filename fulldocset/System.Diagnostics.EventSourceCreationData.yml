### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventSourceCreationData
  id: EventSourceCreationData
  children:
  - System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
  - System.Diagnostics.EventSourceCreationData.CategoryCount
  - System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  - System.Diagnostics.EventSourceCreationData.LogName
  - System.Diagnostics.EventSourceCreationData.MachineName
  - System.Diagnostics.EventSourceCreationData.MessageResourceFile
  - System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  - System.Diagnostics.EventSourceCreationData.Source
  langs:
  - csharp
  name: EventSourceCreationData
  nameWithType: EventSourceCreationData
  fullName: System.Diagnostics.EventSourceCreationData
  type: Class
  summary: "Hiermee geeft u de configuratie-instellingen gebruikt voor het maken van een bron van het gebeurtenislogboek op de lokale computer of een externe computer."
  remarks: "De klasse EventSourceCreationData gebruiken voor het configureren van een nieuwe bron voor het schrijven van gelokaliseerde posten naar een gebeurtenislogboek. Het is niet nodig deze klasse gebruiken om te lezen uit een gebeurtenislogboek.       Deze klasse definieert de configuratie-instellingen voor een nieuwe gebeurtenisbron en de bijbehorende gebeurtenislogboek. Het bijbehorende gebeurtenislogboek kunnen zich op de lokale computer of een externe computer. Als u een nieuwe bron voor een nieuwe of bestaande-gebeurtenislogboek op de lokale computer, stelt de <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>en <xref:System.Diagnostics.EventSourceCreationData.Source%2A>Eigenschappen van een EventSourceCreationData en de aanroep van de <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName>methode.</xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> </xref:System.Diagnostics.EventSourceCreationData.Source%2A> </xref:System.Diagnostics.EventSourceCreationData.LogName%2A> Deze methode maakt u de gegevensbron die u in de <xref:System.Diagnostics.EventSourceCreationData.Source%2A>eigenschap en registreert deze voor het gebeurtenislogboek is opgegeven in <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>.</xref:System.Diagnostics.EventSourceCreationData.LogName%2A> opgeeft</xref:System.Diagnostics.EventSourceCreationData.Source%2A> Dit gedrag is vergelijkbaar met het gebruik van de <xref:System.Diagnostics.EventLogInstaller>klasse om te registreren van een gebeurtenisbron voor een gebeurtenislogboek.</xref:System.Diagnostics.EventLogInstaller>       Gebruik de <xref:System.Diagnostics.EventLog.WriteEvent%2A>en <xref:System.Diagnostics.EventLog.WriteEntry%2A>methoden voor het schrijven van gebeurtenissen naar een gebeurtenislogboek.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A> U moet een gebeurtenisbron voor het schrijven van gebeurtenissen; opgeven u moet maken en configureren van de gebeurtenisbron voordat het eerste item met de bron worden geschreven.       Maak de nieuwe gebeurtenisbron tijdens de installatie van uw toepassing. Hierdoor kan de tijd voor het besturingssysteem naar het vernieuwen van de lijst met bronnen van geregistreerde gebeurtenissen en de bijbehorende configuraties. Als het besturingssysteem is niet vernieuwd voor de lijst met bronnen van gebeurtenissen en u probeert te schrijven van een gebeurtenis met de nieuwe bron, mislukt de bewerking schrijven. U kunt een nieuwe bron met een <xref:System.Diagnostics.EventLogInstaller>, of met behulp van de <xref:System.Diagnostics.EventLog.CreateEventSource%2A>methode.</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> U moet beheerdersrechten hebben op de computer voor het maken van een nieuwe gebeurtenisbron.       U kunt een gebeurtenisbron voor een bestaande gebeurtenislogboek of een nieuw gebeurtenislogboek maken. Wanneer u een nieuwe bron voor een nieuw gebeurtenislogboek maakt, wordt het systeem wordt de bron voor het logboek geregistreerd, maar het logboek is niet gemaakt totdat het eerste item wordt geschreven naar het.       Elke bron kan alleen schrijven naar een gebeurtenislogboek op een tijdstip; uw toepassing kunt gebruiken, meerdere bronnen naar meerdere gebeurtenislogboeken te schrijven. Uw toepassing moet mogelijk meerdere bronnen die zijn geconfigureerd voor verschillende gebeurtenislogboeken of bestanden andere resource.       Om de configuratiedetails van een bestaande gegevensbron wijzigt, moet u de bron verwijderen en vervolgens te maken met de nieuwe configuratie. Als andere toepassingen of onderdelen gebruikt de bestaande bron, maakt u een nieuwe bron met de bijgewerkte configuratie in plaats van de bestaande bron verwijderen.       U kunt de gebeurtenisbron registreren met de gelokaliseerde hulpbronnen voor de gebeurtenis categorie en bericht-tekenreeksen. Uw toepassing kunt logboekvermeldingen resource-id&quot;s, in plaats van de werkelijke tekenreeks opgeven. De Event Viewer maakt gebruik van de resource-id te zoeken en weergeven van de opgegeven tekenreeks van het gelokaliseerde bronbestand op basis van huidige taalinstellingen. U kunt een afzonderlijk bestand voor de gebeurteniscategorieÃ«n, berichten en parameter invoegtekenreeksen registreren of kunt u het bronbestand hetzelfde voor alle drie typen tekenreeksen registreren. Gebruik de <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, en <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>Eigenschappen voor het configureren van de bron voor het schrijven van gelokaliseerde posten naar het gebeurtenislogboek.</xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> Als uw toepassing tekenreekswaarden rechtstreeks naar het gebeurtenislogboek schrijft, hoeft u niet in te stellen van deze eigenschappen.       De bron moet worden geconfigureerd voor het schrijven van gelokaliseerde vermeldingen of voor het schrijven van directe tekenreeksen. De <xref:System.Diagnostics.EventLog.WriteEntry%2A>methode de opgegeven tekenreeks schrijft rechtstreeks naar het gebeurtenislogboek; gebruikt een bronbestand lokaliseerbare bericht niet.</xref:System.Diagnostics.EventLog.WriteEntry%2A> Gebruik de <xref:System.Diagnostics.EventLog.WriteEvent%2A>methode gebeurtenissen met behulp van een bronbestand gelokaliseerde bericht schrijven.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Als uw toepassing vermeldingen met resource-id&quot;s en tekenreekswaarden schrijft, moet u twee afzonderlijke gegevensbronnen registreren. Bijvoorbeeld een bron configureren met bronbestanden en gebruik vervolgens deze bron in de <xref:System.Diagnostics.EventLog.WriteEvent%2A>methode voor het schrijven van vermeldingen met behulp van de resource-id&quot;s naar het gebeurtenislogboek.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Vervolgens maakt u een andere bron zonder bronbestanden en gebruik deze bron in de <xref:System.Diagnostics.EventLog.WriteEntry%2A>methode tekenreeksen rechtstreeks naar het gebeurtenislogboek wordt geschreven met behulp van die bron schrijven.</xref:System.Diagnostics.EventLog.WriteEntry%2A>"
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. The code example verifies that the source does not conflict with an existing event source, and then creates the new event source for the specified event log.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_7_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_7_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_7_1.cs)]"
  syntax:
    content: public class EventSourceCreationData
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: EventSourceCreationData(String,String)
  nameWithType: EventSourceCreationData.EventSourceCreationData(String,String)
  fullName: System.Diagnostics.EventSourceCreationData.EventSourceCreationData(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Diagnostics.EventSourceCreationData&quot;> </xref> klasse met de naam van een opgegeven gebeurtenis bron- en gebeurtenislogboek."
  remarks: "Om te posten naar een gebeurtenislogboek schrijven, moet u eerst een gebeurtenisbron voor het logboek voor systeemgebeurtenissen maken. Voor het registreren van een nieuwe bron initialiseren een <xref:System.Diagnostics.EventSourceCreationData>exemplaar, het configureren van de eigenschappen van de instantie voor uw toepassing en de aanroep van de <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName>methode.</xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> </xref:System.Diagnostics.EventSourceCreationData> Wanneer de bron is geregistreerd, kunt u vermeldingen uit de bron via de <xref:System.Diagnostics.EventLog.WriteEvent%2A>of <xref:System.Diagnostics.EventLog.WriteEntry%2A>methoden.</xref:System.Diagnostics.EventLog.WriteEntry%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A>       U kunt de gebeurtenisbron registreren met de gelokaliseerde hulpbronnen voor de gebeurtenis categorie en bericht-tekenreeksen. Uw toepassing kunt logboekvermeldingen resource-id&quot;s, in plaats van de werkelijke tekenreeks opgeven. De Event Viewer maakt gebruik van de resource-id te zoeken en weergeven van de opgegeven tekenreeks van het gelokaliseerde bronbestand op basis van huidige taalinstellingen. U kunt een afzonderlijk bestand voor de gebeurteniscategorieÃ«n, berichten en parameter invoegtekenreeksen registreren of kunt u het bronbestand hetzelfde voor alle drie typen tekenreeksen registreren. Gebruik de <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, en <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>Eigenschappen voor het configureren van de bron voor het schrijven van gelokaliseerde posten naar het gebeurtenislogboek.</xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> </xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> Als uw toepassing tekenreekswaarden rechtstreeks naar het gebeurtenislogboek schrijft, hoeft u niet in te stellen van deze eigenschappen.       De bron moet worden geconfigureerd voor het schrijven van gelokaliseerde vermeldingen of voor het schrijven van directe tekenreeksen. Als uw toepassing vermeldingen met resource-id&quot;s en tekenreekswaarden schrijft, moet u twee afzonderlijke gegevensbronnen registreren. Bijvoorbeeld een bron configureren met bronbestanden en gebruik vervolgens deze bron in de <xref:System.Diagnostics.EventLog.WriteEvent%2A>methode voor het schrijven van vermeldingen met behulp van de resource-id&quot;s naar het gebeurtenislogboek.</xref:System.Diagnostics.EventLog.WriteEvent%2A> Vervolgens maakt u een andere bron zonder bronbestanden en gebruik deze bron in de <xref:System.Diagnostics.EventLog.WriteEntry%2A>methode voor het schrijven van tekenreeksen rechtstreeks naar het gebeurtenislogboek.</xref:System.Diagnostics.EventLog.WriteEntry%2A>       De volgende tabel toont de eerste waarden voor een <xref:System.Diagnostics.EventSourceCreationData>.</xref:System.Diagnostics.EventSourceCreationData>      | Eigenschap | InitiÃ«le waarde |   |--------------|-------------------|   | <xref:System.Diagnostics.EventSourceCreationData.Source%2A>| De `source` parameter. |   | <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>| De `logName` parameter. |   | <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>| De lokale computer (&quot;. &quot;). |   | <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>| Nul |   | <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>| `null` (`Nothing` in Visual Basic). |   | <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>| `null` (`Nothing` in Visual Basic). |   | <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>| `null` (`Nothing` in Visual Basic).|</xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A></xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A></xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A></xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A></xref:System.Diagnostics.EventSourceCreationData.MachineName%2A></xref:System.Diagnostics.EventSourceCreationData.LogName%2A></xref:System.Diagnostics.EventSourceCreationData.Source%2A>"
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/80a35863-8201-4059-9f79-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/80a35863-8201-4059-9f79-_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/80a35863-8201-4059-9f79-_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public EventSourceCreationData (string source, string logName);
    parameters:
    - id: source
      type: System.String
      description: "De naam registreren bij het gebeurtenislogboek als bron van de vermeldingen."
    - id: logName
      type: System.String
      description: "De naam van het logboek waarop de items van de bron worden geschreven."
  overload: System.Diagnostics.EventSourceCreationData.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.CategoryCount
  id: CategoryCount
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: CategoryCount
  nameWithType: EventSourceCreationData.CategoryCount
  fullName: System.Diagnostics.EventSourceCreationData.CategoryCount
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van het aantal categorieÃ«n in het bronbestand voor de categorie."
  remarks: "Gebruik de CategoryCount en <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>eigenschappen schrijven van gebeurtenissen met de gelokaliseerde categorie tekenreeksen.</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> De categorie voor een vermelding in de logboeken weergegeven als u een categorie opgeven bij het schrijven van de gebeurtenis. Gebeurtenislogboek-categorieÃ«n zijn toepassingsspecifieke tekenreeksen die helpen Filtergebeurtenissen of bevatten meer informatie over de gebeurtenis. Uw toepassing kan bijvoorbeeld verschillende categorieÃ«n voor verschillende onderdelen of verschillende bewerkingen definiÃ«ren.       GebeurteniscategorieÃ«n zijn optioneel. Als uw toepassing geen categorieÃ«n gebruikt, niet de CategoryCount ingesteld en <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>Eigenschappen.</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>       Zie voor meer informatie over het definiÃ«ren van de event-berichten en bouwen van de bronbestanden van de gebeurtenis, het onderwerp &quot;Bericht Compiler&quot; in de Platform SDK-documentatie op [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_2_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_2_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_2_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public int CategoryCount { get; set; }
    return:
      type: System.Int32
      description: "Het aantal categorieÃ«n in het bronbestand voor de categorie. De standaardwaarde is nul."
  overload: System.Diagnostics.EventSourceCreationData.CategoryCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "De eigenschap is ingesteld op een negatieve waarde of op een waarde groter is dan &lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;."
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  id: CategoryResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: CategoryResourceFile
  nameWithType: EventSourceCreationData.CategoryResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van het pad van het bronbestand die categorie tekenreeksen voor de bron bevat."
  remarks: "Gebruik de <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>en eigenschappen van het bestand CategoryResourceFile schrijven van gebeurtenissen met de gelokaliseerde categorie tekenreeksen.</xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A> De categorie voor een vermelding in de logboeken weergegeven als u een categorie opgeven bij het schrijven van de gebeurtenis. Gebeurtenislogboek-categorieÃ«n zijn toepassingsspecifieke tekenreeksen die helpen Filtergebeurtenissen of bevatten meer informatie over de gebeurtenis. Uw toepassing kan bijvoorbeeld verschillende categorieÃ«n voor verschillende onderdelen of verschillende bewerkingen definiÃ«ren.       GebeurteniscategorieÃ«n zijn optioneel. niet ingesteld als uw toepassing geen categorieÃ«n gebruikt, de <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>en eigenschappen van het bestand CategoryResourceFile.</xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>       Zie voor meer informatie over het definiÃ«ren van de event-berichten en bouwen van de bronbestanden van de gebeurtenis, het onderwerp &quot;Bericht Compiler&quot; in de Platform SDK-documentatie op [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_10_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_10_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_10_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string CategoryResourceFile { get; set; }
    return:
      type: System.String
      description: "Het pad van het bronbestand voor de categorie. De standaardwaarde is een lege tekenreeks (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.CategoryResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.LogName
  id: LogName
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: LogName
  nameWithType: EventSourceCreationData.LogName
  fullName: System.Diagnostics.EventSourceCreationData.LogName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van de naam van het gebeurtenislogboek op waarnaar de bron vermeldingen schrijft."
  remarks: "Use the LogName property to identify the event log that your application writes entries to using the new source. The event log can be a new log or an existing log. Applications and services should write to the Application log or a custom log. Device drivers should write to the System log. If you do not explicitly set the LogName property, the event log defaults to the Application log.  \n  \n> [!NOTE]\n>  The Security log is read-only.  \n  \n To target an existing log for the new source, set the LogName property to the existing event log name. To create a new event log for the source, you must set the LogName property. Event log names must consist of printable characters, and cannot include the characters '*', '?', or '\\\\'. The first 8 characters of the event log name must be different from the first 8 characters of existing names of event logs on the specified computer.  \n  \n The operating system stores event logs as files. When you use <xref:System.Diagnostics.EventLogInstaller> or the <xref:System.Diagnostics.EventLog.CreateEventSource%2A> method to create a new event log, the associated file is stored in the %SystemRoot%\\System32\\Config directory on the specified computer. The file name is set by appending the first 8 characters of the LogName property with the \".evt\" file name extension."
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_19_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_19_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_19_1.cs)]"
  syntax:
    content: public string LogName { get; set; }
    return:
      type: System.String
      description: "De naam van het gebeurtenislogboek. Dit kan de toepassing, systeembestanden of een aangepaste logboeknaam zijn. De standaardwaarde is &quot;Application&quot;."
  overload: System.Diagnostics.EventSourceCreationData.LogName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.MachineName
  id: MachineName
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: MachineName
  nameWithType: EventSourceCreationData.MachineName
  fullName: System.Diagnostics.EventSourceCreationData.MachineName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van de naam van de computer waarop de bron van de gebeurtenis te registreren."
  remarks: "De waarde van de computernaam kan niet een lege tekenreeks zijn. Als de computernaam niet expliciet is ingesteld, wordt standaard op de lokale computer (&quot;. &quot;).       Bij het registreren van een bron op een externe computer, moet u beheerdersrechten hebben op die computer de registerwaarden met voldoende machtigingen schrijven."
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_21_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_21_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_21_1.cs)]"
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "De naam van het systeem waarop de bron van de gebeurtenis te registreren. De standaardwaarde is de lokale computer (&quot;. &quot;)."
  overload: System.Diagnostics.EventSourceCreationData.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De computernaam is ongeldig."
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.MessageResourceFile
  id: MessageResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: MessageResourceFile
  nameWithType: EventSourceCreationData.MessageResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.MessageResourceFile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van het pad van het bronbestand van het bericht dat berichtindeling tekenreeksen voor de bron bevat."
  remarks: "Gebruik de eigenschap MessageResourceFile voor het configureren van de bron van een gebeurtenislogboek gelokaliseerde event-berichten worden geschreven. Gebeurtenisberichten zijn toepassingsspecifieke tekenreeksen met een beschrijving van de gebeurtenis voor de gebruiker.       Uw toepassing kunt logboekvermeldingen resource-id&quot;s schrijven. Een bron-id indexeert een bericht dat zich in de MessageResourceFile. De Event Viewer maakt gebruik van de resource-id te zoeken en weergeven van de opgegeven tekenreeks van het gelokaliseerde bericht bronbestand op basis van huidige taalinstellingen.       De gebeurtenisbron moet worden geconfigureerd voor het schrijven van gelokaliseerde vermeldingen of voor het schrijven van directe tekenreeksen. Gebruik de <xref:System.Diagnostics.EventLog.WriteEvent%2A>methode gelokaliseerde vermeldingen voor een bron die is geconfigureerd met een bronbestand bericht schrijven.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Als uw toepassing schrijft rechtstreeks gebeurtenis berichttekenreeksen, in plaats van een resource-id in een vertaalde bron-bestand, stel de eigenschap MessageResourceFile.       Zie voor meer informatie over het definiÃ«ren van de event-berichten en bouwen van de bronbestanden van de gebeurtenis, het onderwerp &quot;Bericht Compiler&quot; in de Platform SDK-documentatie op [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_3_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_3_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_3_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string MessageResourceFile { get; set; }
    return:
      type: System.String
      description: "Het pad van het bronbestand van het bericht. De standaardwaarde is een lege tekenreeks (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.MessageResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  id: ParameterResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: ParameterResourceFile
  nameWithType: EventSourceCreationData.ParameterResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van het pad van het bronbestand met tekenreeksen voor bericht-parameter voor de bron."
  remarks: "Gebruik de eigenschap ParameterResourceFile voor het configureren van de bron van een gebeurtenislogboek gelokaliseerde event-berichten met de ingevoegde parametertekenreeksen worden geschreven. Elk gebeurtenisbericht gelokaliseerde is opgegeven in de <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>eigenschap tijdelijke aanduidingen voor invoegtekenreeksen kan bevatten.</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> Deze tijdelijke aanduidingen worden gebruikt om op te geven van de positie en de bron-id voor een tekenreeks taalonafhankelijke binnen het gebeurtenisbericht. De logboeken de tijdelijke aanduidingen met behulp van de bijbehorende tekenreeksen uit de ParameterResourceFile ingevuld en indelingen van het gebeurtenislogboekbericht voor de gebeurtenisvermelding gelokaliseerde.       Bijvoorbeeld de volgende sectie van een tekstbestand bericht definieert een tekenreeks met een parameter tijdelijke aanduiding: ```      MessageId = 1501   Severity = Success   Facility = Application   SymbolicName = COMPONENT_STARTING   Language=English   Component %%6050 is starting.   .   ``` binnen het bronbestand parameter de invoegingstekenreeks moet worden gedefinieerd met de bron-id die overeenkomt met de tijdelijke aanduiding, zoals hieronder wordt weergegeven: ```   MessageId = 6050   Severity = Success   Facility = Application   SymbolicName = COMPONENT_NAME_MSGID   Language=English   TRIGGER.EXE   .   ``` de gebeurtenisbron moet worden geconfigureerd voor het schrijven van gelokaliseerde vermeldingen of voor het schrijven van directe tekenreeksen. Gebruik de <xref:System.Diagnostics.EventLog.WriteEvent%2A>methode gelokaliseerde vermeldingen voor een bron die is geconfigureerd met een bronbestand bericht schrijven.</xref:System.Diagnostics.EventLog.WriteEvent%2A>       Als uw toepassing gebeurtenis berichttekenreeksen schrijft rechtstreeks naar het gebeurtenislogboek, of als uw <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>eigenschap bevat geen berichten met de parameter invoegen tijdelijke aanduidingen, stel de eigenschap ParameterResourceFile.</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>       Zie voor meer informatie over het definiÃ«ren van de event-berichten en bouwen van de bronbestanden van de gebeurtenis, het onderwerp &quot;Bericht Compiler&quot; in de Platform SDK-documentatie op [http://msdn.microsoft.com](http://msdn.microsoft.com/)."
  example:
  - "The following code example determines whether the event source named `SampleApplicationSource` is registered on the local computer. If the event source does not exist, the example sets the message resource file for the source and creates the new event source. Finally, the code example sets the localized display name for the event log, using the resource identifier value in `DisplayNameMsgId` and the resource file path in `messageFile`.  \n  \n [!code-cpp[EventLog_WriteEvent#6](~/add/codesnippet/cpp/p-system.diagnostics.eve_31_1.cpp)]\n [!code-vb[EventLog_WriteEvent#6](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_31_1.vb)]\n [!code-cs[EventLog_WriteEvent#6](~/add/codesnippet/csharp/p-system.diagnostics.eve_31_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings. Specifically, the message defined for resource identifier 1004 uses a placeholder for a parameter string defined for resource identifier 5002.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public string ParameterResourceFile { get; set; }
    return:
      type: System.String
      description: "Het pad van het bronbestand voor de parameter. De standaardwaarde is een lege tekenreeks (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.ParameterResourceFile*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventSourceCreationData.Source
  id: Source
  parent: System.Diagnostics.EventSourceCreationData
  langs:
  - csharp
  name: Source
  nameWithType: EventSourceCreationData.Source
  fullName: System.Diagnostics.EventSourceCreationData.Source
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "Opgehaald of ingesteld van de naam registreren bij het gebeurtenislogboek als gebeurtenisbron voor een."
  remarks: "De bronnaam is vaak de naam van de toepassing of de naam van een onderdeel in een grote toepassing. De <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName>methode maakt gebruik van de bron <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>, en <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>Eigenschappen voor het maken van registerwaarden op de doelcomputer voor de nieuwe bron- en de bijbehorende gebeurtenis logboek</xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> </xref:System.Diagnostics.EventSourceCreationData.LogName%2A> </xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=fullName> Een nieuwe naam voor de gegevensbron mag niet overeenkomen met de naam van een bestaande gegevensbron of de naam van een bestaande gebeurtenislogboek op de doelcomputer.       Nadat de registerwaarden voor de bron zijn gemaakt, kan de bron in uw toepassing gebruiken vermeldingen in het geconfigureerde gebeurtenislogboek schrijven.       Elke bron kan alleen schrijven naar een gebeurtenislogboek op een tijdstip; uw toepassing kunt gebruiken, meerdere bronnen naar meerdere gebeurtenislogboeken te schrijven. Uw toepassing moet mogelijk meerdere bronnen die zijn geconfigureerd voor verschillende gebeurtenislogboeken of bestanden andere resource."
  example:
  - "The following code example sets the configuration properties for an event source from command-line arguments. The input arguments specify the event source name, event log name, computer name, and event message resource file. This example is part of a larger example provided for the <xref:System.Diagnostics.EventSourceCreationData> class.  \n  \n [!code-vb[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_13_1.vb)]\n [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/cpp/p-system.diagnostics.eve_13_1.cpp)]\n [!code-cs[EventLog_EventSourceCreation_Properties#2](~/add/codesnippet/csharp/p-system.diagnostics.eve_13_1.cs)]"
  syntax:
    content: public string Source { get; set; }
    return:
      type: System.String
      description: "De naam registreren bij het gebeurtenislogboek als bron van de vermeldingen. De standaardwaarde is een lege tekenreeks (&quot;&quot;)."
  overload: System.Diagnostics.EventSourceCreationData.Source*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: EventSourceCreationData(String,String)
  nameWithType: EventSourceCreationData.EventSourceCreationData(String,String)
  fullName: System.Diagnostics.EventSourceCreationData.EventSourceCreationData(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventSourceCreationData.CategoryCount
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryCount
  nameWithType: EventSourceCreationData.CategoryCount
  fullName: System.Diagnostics.EventSourceCreationData.CategoryCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventSourceCreationData.CategoryResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.CategoryResourceFile
- uid: System.Diagnostics.EventSourceCreationData.LogName
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: LogName
  nameWithType: EventSourceCreationData.LogName
  fullName: System.Diagnostics.EventSourceCreationData.LogName
- uid: System.Diagnostics.EventSourceCreationData.MachineName
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MachineName
  nameWithType: EventSourceCreationData.MachineName
  fullName: System.Diagnostics.EventSourceCreationData.MachineName
- uid: System.Diagnostics.EventSourceCreationData.MessageResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventSourceCreationData.MessageResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.MessageResourceFile
- uid: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventSourceCreationData.ParameterResourceFile
  fullName: System.Diagnostics.EventSourceCreationData.ParameterResourceFile
- uid: System.Diagnostics.EventSourceCreationData.Source
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: Source
  nameWithType: EventSourceCreationData.Source
  fullName: System.Diagnostics.EventSourceCreationData.Source
- uid: System.Diagnostics.EventSourceCreationData.#ctor*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: EventSourceCreationData
  nameWithType: EventSourceCreationData.EventSourceCreationData
- uid: System.Diagnostics.EventSourceCreationData.CategoryCount*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryCount
  nameWithType: EventSourceCreationData.CategoryCount
- uid: System.Diagnostics.EventSourceCreationData.CategoryResourceFile*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: CategoryResourceFile
  nameWithType: EventSourceCreationData.CategoryResourceFile
- uid: System.Diagnostics.EventSourceCreationData.LogName*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: LogName
  nameWithType: EventSourceCreationData.LogName
- uid: System.Diagnostics.EventSourceCreationData.MachineName*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MachineName
  nameWithType: EventSourceCreationData.MachineName
- uid: System.Diagnostics.EventSourceCreationData.MessageResourceFile*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: MessageResourceFile
  nameWithType: EventSourceCreationData.MessageResourceFile
- uid: System.Diagnostics.EventSourceCreationData.ParameterResourceFile*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: ParameterResourceFile
  nameWithType: EventSourceCreationData.ParameterResourceFile
- uid: System.Diagnostics.EventSourceCreationData.Source*
  parent: System.Diagnostics.EventSourceCreationData
  isExternal: false
  name: Source
  nameWithType: EventSourceCreationData.Source
