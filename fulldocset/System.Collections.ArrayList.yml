### YamlMime:ManagedReference
items:
- uid: System.Collections.ArrayList
  id: ArrayList
  children:
  - System.Collections.ArrayList.#ctor
  - System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  - System.Collections.ArrayList.#ctor(System.Int32)
  - System.Collections.ArrayList.Adapter(System.Collections.IList)
  - System.Collections.ArrayList.Add(System.Object)
  - System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - System.Collections.ArrayList.BinarySearch(System.Object)
  - System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.Capacity
  - System.Collections.ArrayList.Clear
  - System.Collections.ArrayList.Clone
  - System.Collections.ArrayList.Contains(System.Object)
  - System.Collections.ArrayList.CopyTo(System.Array)
  - System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  - System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  - System.Collections.ArrayList.Count
  - System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  - System.Collections.ArrayList.FixedSize(System.Collections.IList)
  - System.Collections.ArrayList.GetEnumerator
  - System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  - System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.Insert(System.Int32,System.Object)
  - System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.IsFixedSize
  - System.Collections.ArrayList.IsReadOnly
  - System.Collections.ArrayList.IsSynchronized
  - System.Collections.ArrayList.Item(System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  - System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  - System.Collections.ArrayList.Remove(System.Object)
  - System.Collections.ArrayList.RemoveAt(System.Int32)
  - System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  - System.Collections.ArrayList.Reverse
  - System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  - System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.Sort
  - System.Collections.ArrayList.Sort(System.Collections.IComparer)
  - System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  - System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  - System.Collections.ArrayList.Synchronized(System.Collections.IList)
  - System.Collections.ArrayList.SyncRoot
  - System.Collections.ArrayList.ToArray
  - System.Collections.ArrayList.ToArray(System.Type)
  - System.Collections.ArrayList.TrimToSize
  langs:
  - csharp
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
  type: Class
  summary: "Implementeert de <xref:System.Collections.IList>interface gebruik van een matrix die dynamisch wordt vergroot zoals wordt vereist.</xref:System.Collections.IList>       Om te bladeren naar de broncode van .NET Framework voor dit type, Zie de [Verwijzingsbron](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643)."
  remarks: "> [!NOTE]> Zie om weer te geven de broncode van .NET Framework voor dit type, de [Verwijzingsbron](http://referencesource.microsoft.com/#mscorlib/system/collections/arraylist.cs#3e3f6715773d6643). Blader door de broncode online, downloaden de verwijzing voor offline te bekijken en doorloop de bronnen (met inbegrip van patches en updates) tijdens de foutopsporing; Zie [instructies](http://referencesource.microsoft.com/).       De klasse ArrayList is ontworpen voor heterogene verzamelingen van objecten bevatten. Echter, biedt dit niet altijd de beste prestaties. In plaats daarvan wordt aangeraden het volgende: - voor een heterogene verzameling objecten, gebruik de `List<Object>` (in C#) of `List(Of Object)` typen (in Visual Basic).      -Voor een homogene verzameling van objecten, gebruikt u de <xref:System.Collections.Generic.List%601>klasse.</xref:System.Collections.Generic.List%601>       Zie de sectie &quot;Prestatieoverwegingen&quot; in de <xref:System.Collections.Generic.List%601>naslagonderwerp voor een beschrijving van de relatieve prestaties van deze klassen.</xref:System.Collections.Generic.List%601>       De ArrayList kan niet worden gegarandeerd moet worden gesorteerd.  U moet de ArrayList sorteren door het aanroepen van de <xref:System.Collections.ArrayList.Sort%2A>methode voor het uitvoeren van bewerkingen (zoals <xref:System.Collections.ArrayList.BinarySearch%2A>) waarvoor de ArrayList moet worden gesorteerd.</xref:System.Collections.ArrayList.BinarySearch%2A> </xref:System.Collections.ArrayList.Sort%2A> Om te blijven van een verzameling die automatisch worden gesorteerd als nieuwe elementen worden toegevoegd, kunt u de <xref:System.Collections.Generic.SortedSet%601>klasse.</xref:System.Collections.Generic.SortedSet%601>       De capaciteit van een ArrayList is het aantal elementen die de ArrayList kan bevatten. Wanneer elementen worden toegevoegd aan een ArrayList, de capaciteit automatisch wordt verhoogd door Hertoewijzing zoals wordt vereist. De capaciteit kan worden verlaagd door het aanroepen van <xref:System.Collections.ArrayList.TrimToSize%2A>of door de <xref:System.Collections.ArrayList.Capacity%2A>eigenschap expliciet.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.TrimToSize%2A>       Voor zeer grote ArrayList objecten, verhoogt u de maximale capaciteit naar 2 miljard elementen op een 64-bits systeem door het instellen van de `enabled` kenmerk van het configuratie-element moet `true` in de runtime omgeving.       Elementen in deze verzameling zijn toegankelijk via een geheel getal-index.  Indexen in deze verzameling zijn gebaseerd op nul.       De verzameling ArrayList accepteert `null` als een geldige waarde. Kunt u ook dubbele elementen.       Multidimensionale matrices met als elementen in een verzameling ArrayList wordt niet ondersteund."
  example:
  - "The following code example shows how to create and initialize an ArrayList and how to display its values.  \n  \n [!code-cpp[Classic ArrayList Example#1](~/add/codesnippet/cpp/t-system.collections.arr_1.cpp)]\n [!code-cs[Classic ArrayList Example#1](~/add/codesnippet/csharp/t-system.collections.arr_1.cs)]\n [!code-vb[Classic ArrayList Example#1](~/add/codesnippet/visualbasic/t-system.collections.arr_1.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.ArrayList/ArrayListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class ArrayList : ICloneable, System.Collections.IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor
  id: '#ctor'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> klasse die leeg is en is de initiÃ«le standaardcapaciteit."
  remarks: "De capaciteit van een <xref:System.Collections.ArrayList>is het aantal elementen die de <xref:System.Collections.ArrayList>kan bevatten.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Wanneer elementen worden toegevoegd aan een <xref:System.Collections.ArrayList>, de capaciteit automatisch verhoogd zoals wordt vereist door het opnieuw toewijzen van de interne matrix.</xref:System.Collections.ArrayList>       Als de grootte van de verzameling kan worden geschat, voorkomen geven de begincapaciteit moet een aantal formaatwijzigingen bij het toevoegen van elementen in de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> uitvoeren       Deze constructor is een bewerking O(1)."
  syntax:
    content: public ArrayList ();
    parameters: []
  overload: System.Collections.ArrayList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  id: '#ctor(System.Collections.ICollection)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> klasse die bevat elementen die zijn gekopieerd uit de opgegeven verzameling en met de dezelfde begincapaciteit als het aantal elementen die zijn gekopieerd."
  remarks: "De capaciteit van een <xref:System.Collections.ArrayList>is het aantal elementen die de <xref:System.Collections.ArrayList>kan bevatten.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Wanneer elementen worden toegevoegd aan een <xref:System.Collections.ArrayList>, de capaciteit automatisch verhoogd zoals wordt vereist door het opnieuw toewijzen van de interne matrix.</xref:System.Collections.ArrayList>       Als de grootte van de verzameling kan worden geschat, voorkomen geven de begincapaciteit moet een aantal formaatwijzigingen bij het toevoegen van elementen in de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> uitvoeren       De elementen zijn gekopieerd naar de <xref:System.Collections.ArrayList>in dezelfde volgorde als die ze worden gelezen door de <xref:System.Collections.IEnumerator>van de <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.IEnumerator> </xref:System.Collections.ArrayList>       Deze constructor is een O (`n`)-bewerking, waarbij `n` is het aantal elementen in `c`."
  syntax:
    content: public ArrayList (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "De <xref:System.Collections.ICollection>waarvan de elementen worden gekopieerd naar de nieuwe lijst.</xref:System.Collections.ICollection>"
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> klasse die is leeg en heeft de opgegeven initiÃ«le capaciteit."
  remarks: "De capaciteit van een <xref:System.Collections.ArrayList>is het aantal elementen die de <xref:System.Collections.ArrayList>kan bevatten.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Wanneer elementen worden toegevoegd aan een <xref:System.Collections.ArrayList>, de capaciteit automatisch verhoogd zoals wordt vereist door het opnieuw toewijzen van de interne matrix.</xref:System.Collections.ArrayList>       Als de grootte van de verzameling kan worden geschat, voorkomen geven de begincapaciteit moet een aantal formaatwijzigingen bij het toevoegen van elementen in de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> uitvoeren       Deze constructor is een O (`n`)-bewerking, waarbij `n` is `capacity`."
  syntax:
    content: public ArrayList (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Het aantal elementen dat de nieuwe lijst kan in eerste instantie worden opgeslagen."
  overload: System.Collections.ArrayList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>is kleiner dan nul."
  platform:
  - net462
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  id: Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Maakt een <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper voor een specifieke <xref:System.Collections.IList>.</xref:System.Collections.IList>"
  remarks: "Adapter kopieert de inhoud van <xref:System.Collections.IList>.</xref:System.Collections.IList> geen In plaats daarvan maakt het alleen een <xref:System.Collections.ArrayList>wrapper rond <xref:System.Collections.IList>; daarom wijzigingen aan de <xref:System.Collections.IList>ook van invloed op de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.IList> </xref:System.Collections.IList> </xref:System.Collections.ArrayList>       De <xref:System.Collections.ArrayList>klasse biedt algemene <xref:System.Collections.ArrayList.Reverse%2A>, <xref:System.Collections.ArrayList.BinarySearch%2A>en <xref:System.Collections.ArrayList.Sort%2A>methoden.</xref:System.Collections.ArrayList.Sort%2A> </xref:System.Collections.ArrayList.BinarySearch%2A> </xref:System.Collections.ArrayList.Reverse%2A> </xref:System.Collections.ArrayList> Deze wrapper mag een manier om te gebruiken van deze methoden op <xref:System.Collections.IList>; het uitvoeren van deze algemene bewerkingen via de wrapper mogelijk wel minder efficiÃ«nt dan bewerkingen rechtstreeks op de <xref:System.Collections.IList>.</xref:System.Collections.IList> toegepast</xref:System.Collections.IList>       Deze methode is een bewerking O(1).      ## Versie compatibiliteit In de .NET Framework versie 1.0 en 1.1, aanroepen van de <xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29>overbelasting van de methode op de <xref:System.Collections.ArrayList>wrapper een enumerator die het tweede argument behandeld als een bovengrens in plaats van een aantal geretourneerd.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.GetEnumerator%28System.Int32%2CSystem.Int32%29> In de [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] het tweede argument correct wordt behandeld als een aantal."
  syntax:
    content: public static System.Collections.ArrayList Adapter (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "De <xref:System.Collections.IList>laten teruglopen.</xref:System.Collections.IList>"
    return:
      type: System.Collections.ArrayList
      description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper rond de <xref:System.Collections.IList>.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.Adapter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Add(System.Object)
  id: Add(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Een object toegevoegd aan het einde van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList>accepteert `null` als een geldige waarde en dubbele elementen zijn toegestaan.</xref:System.Collections.ArrayList>       Als <xref:System.Collections.ArrayList.Count%2A>al gelijk is aan <xref:System.Collections.ArrayList.Capacity%2A>, wordt de capaciteit van de <xref:System.Collections.ArrayList>wordt verhoogd met automatisch opnieuw toewijzen van de interne matrix en de bestaande elementen zijn gekopieerd naar de nieuwe matrix voordat het nieuwe element is toegevoegd.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A>       Als <xref:System.Collections.ArrayList.Count%2A>is minder dan <xref:System.Collections.ArrayList.Capacity%2A>, deze methode is een bewerking O(1).</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> Als de capaciteit worden verhoogd moet om ruimte is voor het nieuwe element, deze methode wordt een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_4_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_4_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_4_1.cpp)]"
  syntax:
    content: public virtual int Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>worden toegevoegd aan het einde van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> index waarop de <code> value </code> is toegevoegd."
  overload: System.Collections.ArrayList.Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen.       - of - de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  id: AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Voegt de elementen van een <xref:System.Collections.ICollection>aan het einde van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ArrayList>accepteert `null` als een geldige waarde en dubbele elementen zijn toegestaan.</xref:System.Collections.ArrayList>       De volgorde van de elementen in de <xref:System.Collections.ICollection>blijft behouden in de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ICollection>       Als de nieuwe <xref:System.Collections.ArrayList.Count%2A>(de huidige <xref:System.Collections.ArrayList.Count%2A>plus de grootte van de verzameling) is groter dan <xref:System.Collections.ArrayList.Capacity%2A>, wordt de capaciteit van de <xref:System.Collections.ArrayList>wordt verhoogd met automatisch opnieuw toewijzen van de interne matrix zodat de nieuwe onderdelen en de bestaande elementen zijn gekopieerd naar de nieuwe matrix voordat de nieuwe elementen worden toegevoegd.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> </xref:System.Collections.ArrayList.Count%2A>       Als de <xref:System.Collections.ArrayList>aankan nieuwe elementen zonder toename van de <xref:System.Collections.ArrayList.Capacity%2A>, deze methode is een O (`n`) bewerking, waarbij `n` is het aantal elementen moet worden toegevoegd.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList> Als de capaciteit worden verhoogd moet om ruimte is voor de nieuwe elementen, deze methode wordt een O (`n` + `m`)-bewerking, waarbij `n` is het aantal elementen moet worden toegevoegd en `m` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to add elements to the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.arr_0_1.cs)]\n [!code-vb[Classic ArrayList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_0_1.vb)]\n [!code-cpp[Classic ArrayList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.arr_0_1.cpp)]"
  syntax:
    content: public virtual void AddRange (System.Collections.ICollection c);
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "De <xref:System.Collections.ICollection>waarvan de elementen moeten worden toegevoegd aan het einde van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> De verzameling zelf kan niet worden <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, maar deze kan elementen bevatten die zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.AddRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen.       - of - de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  id: BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Zoekt u de volledige gesorteerd <xref href=&quot;System.Collections.ArrayList&quot;> </xref> voor een element met de standaardvergelijkingsfunctie en retourneert de op nul gebaseerde index van het element."
  remarks: "De `value` parameter en elk element van de <xref:System.Collections.ArrayList>moet worden geÃ¯mplementeerd de <xref:System.IComparable>interface die wordt gebruikt voor vergelijkingen.</xref:System.IComparable> </xref:System.Collections.ArrayList> De elementen van de <xref:System.Collections.ArrayList>al moeten worden gesorteerd in oplopende waarde volgens de sorteervolgorde gedefinieerd door de <xref:System.IComparable>implementatie; anders wordt het resultaat is mogelijk onjuist.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Vergelijken `null` met elk type is toegestaan en genereert een uitzondering opgetreden bij het gebruik van <xref:System.IComparable>.</xref:System.IComparable> Als u sorteert, `null` wordt beschouwd als minder dan geen andere objecten.       Als de <xref:System.Collections.ArrayList>bevat meer dan een element met dezelfde waarde, de methode retourneert alleen een van de incidenten en het mogelijk een van de instanties, niet noodzakelijkerwijs het eerste beheerpunt retourneren.</xref:System.Collections.ArrayList>       Als de <xref:System.Collections.ArrayList>niet de opgegeven waarde bevat de methode retourneert een negatief geheel getal.</xref:System.Collections.ArrayList> U kunt de bewerking bitsgewijze aanvulling (~) toepassen op deze-negatief geheel getal ophalen van de index van het eerste element zijn dat groter is dan de waarde van de zoekopdracht. Bij het invoegen van de waarde in de <xref:System.Collections.ArrayList>, deze index moet worden gebruikt als de invoegpositie voor het onderhouden van de sorteervolgorde.</xref:System.Collections.ArrayList>       Deze methode is een O (log `n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to use <xref:System.Collections.ArrayList.BinarySearch%2A> to locate a specific object in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_13_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_13_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_13_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>vinden.</xref:System.Object> De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "De op nul gebaseerde index van <code> value </code> in de gesorteerde <xref href=&quot;System.Collections.ArrayList&quot;> </xref>als <code> value </code> is gevonden, anders wordt een negatief getal, namelijk de bitsgewijze aanvulling van de index van het volgende element die groter is dan <code> value </code> of, als er geen groter element, het bitsgewijze complement van <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*> is"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Noch <code> value </code> noch de elementen van <xref href=&quot;System.Collections.ArrayList&quot;> </xref> implementeren de <xref:System.IComparable>interface.</xref:System.IComparable>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>value</code>is niet van hetzelfde type als de elementen van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Zoekt u de volledige gesorteerd <xref href=&quot;System.Collections.ArrayList&quot;> </xref> voor een element met de opgegeven vergelijkingsfunctie en retourneert de op nul gebaseerde index van het element."
  remarks: "De vergelijkingsfunctie aanpassen hoe de elementen worden vergeleken. U kunt bijvoorbeeld een <xref:System.Collections.CaseInsensitiveComparer>-exemplaar, zoals de vergelijkingsfunctie voor niet-hoofdlettergevoelige tekenreeks zoekopdrachten uit te voeren.</xref:System.Collections.CaseInsensitiveComparer>       Als `comparer` is opgegeven, de elementen van de <xref:System.Collections.ArrayList>worden vergeleken met de opgegeven waarde met behulp van de opgegeven <xref:System.Collections.IComparer>uitvoering.</xref:System.Collections.IComparer> </xref:System.Collections.ArrayList> De elementen van de <xref:System.Collections.ArrayList>al moeten worden gesorteerd in oplopende waarde volgens de sorteervolgorde gedefinieerd door `comparer`; anders wordt het resultaat is mogelijk onjuist.</xref:System.Collections.ArrayList>       Als `comparer` is `null`, de vergelijking wordt gedaan met behulp van de <xref:System.IComparable>implementatie geboden door het element zelf of de opgegeven waarde.</xref:System.IComparable> De elementen van de <xref:System.Collections.ArrayList>al moeten worden gesorteerd in oplopende waarde volgens de sorteervolgorde gedefinieerd door de <xref:System.IComparable>implementatie; anders wordt het resultaat is mogelijk onjuist.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Vergelijken `null` met elk type is toegestaan en genereert een uitzondering opgetreden bij het gebruik van <xref:System.IComparable>.</xref:System.IComparable> Als u sorteert, `null` wordt beschouwd als minder dan geen andere objecten.       Als de <xref:System.Collections.ArrayList>bevat meer dan een element met dezelfde waarde, de methode retourneert alleen een van de incidenten en het mogelijk een van de instanties, niet noodzakelijkerwijs het eerste beheerpunt retourneren.</xref:System.Collections.ArrayList>       Als de <xref:System.Collections.ArrayList>niet de opgegeven waarde bevat de methode retourneert een negatief geheel getal.</xref:System.Collections.ArrayList> U kunt de bewerking bitsgewijze aanvulling (~) toepassen op deze-negatief geheel getal ophalen van de index van het eerste element zijn dat groter is dan de waarde van de zoekopdracht. Bij het invoegen van de waarde in de <xref:System.Collections.ArrayList>, deze index moet worden gebruikt als de invoegpositie voor het onderhouden van de sorteervolgorde.</xref:System.Collections.ArrayList>       Deze methode is een O (log `n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following example creates an <xref:System.Collections.ArrayList> of colored animals. The provided <xref:System.Collections.IComparer> performs the string comparison for the binary search. The results of both an iterative search and a binary search are displayed.  \n  \n [!code-cpp[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/cpp/51ebb232-4223-422e-9ecb-_1.cpp)]\n [!code-cs[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/csharp/51ebb232-4223-422e-9ecb-_1.cs)]\n [!code-vb[Classic ArrayList.BinarySearch1 Example#2](~/add/codesnippet/visualbasic/51ebb232-4223-422e-9ecb-_1.vb)]"
  syntax:
    content: public virtual int BinarySearch (object value, System.Collections.IComparer comparer);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>vinden.</xref:System.Object> De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: comparer
      type: System.Collections.IComparer
      description: "De <xref:System.Collections.IComparer>implementatie moet worden gebruikt bij het vergelijken van elementen.</xref:System.Collections.IComparer>       - of - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> gebruiken de standaardvergelijkingsfunctie die de <xref:System.IComparable>uitvoering van elk element.</xref:System.IComparable>"
    return:
      type: System.Int32
      description: "De op nul gebaseerde index van <code> value </code> in de gesorteerde <xref href=&quot;System.Collections.ArrayList&quot;> </xref>als <code> value </code> is gevonden, anders wordt een negatief getal, namelijk de bitsgewijze aanvulling van de index van het volgende element die groter is dan <code> value </code> of, als er geen groter element, het bitsgewijze complement van <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*> is"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>comparer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> en geen van beide <code>value</code> noch de elementen van <xref href=&quot;System.Collections.ArrayList&quot;> </xref> implementeren de <xref:System.IComparable> interface."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> en <code>value</code> is niet van hetzelfde type als de elementen van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Zoekt u een bereik van elementen in de gesorteerde <xref href=&quot;System.Collections.ArrayList&quot;> </xref> voor een element met de opgegeven vergelijkingsfunctie en retourneert de op nul gebaseerde index van het element."
  remarks: "De vergelijkingsfunctie aanpassen hoe de elementen worden vergeleken. U kunt bijvoorbeeld een <xref:System.Collections.CaseInsensitiveComparer>-exemplaar, zoals de vergelijkingsfunctie voor niet-hoofdlettergevoelige tekenreeks zoekopdrachten uit te voeren.</xref:System.Collections.CaseInsensitiveComparer>       Als `comparer` is opgegeven, de elementen van de <xref:System.Collections.ArrayList>worden vergeleken met de opgegeven waarde met behulp van de opgegeven <xref:System.Collections.IComparer>uitvoering.</xref:System.Collections.IComparer> </xref:System.Collections.ArrayList> De elementen van de <xref:System.Collections.ArrayList>al moeten worden gesorteerd in oplopende waarde volgens de sorteervolgorde gedefinieerd door `comparer`; anders wordt het resultaat is mogelijk onjuist.</xref:System.Collections.ArrayList>       Als `comparer` is `null`, de vergelijking wordt gedaan met behulp van de <xref:System.IComparable>implementatie geboden door het element zelf of de opgegeven waarde.</xref:System.IComparable> De elementen van de <xref:System.Collections.ArrayList>al moeten worden gesorteerd in oplopende waarde volgens de sorteervolgorde gedefinieerd door de <xref:System.IComparable>implementatie; anders wordt het resultaat is mogelijk onjuist.</xref:System.IComparable> </xref:System.Collections.ArrayList>       Vergelijken `null` met elk type is toegestaan en genereert een uitzondering opgetreden bij het gebruik van <xref:System.IComparable>.</xref:System.IComparable> Als u sorteert, `null` wordt beschouwd als minder dan geen andere objecten.       Als de <xref:System.Collections.ArrayList>bevat meer dan een element met dezelfde waarde, de methode retourneert alleen een van de incidenten en het mogelijk een van de instanties, niet noodzakelijkerwijs het eerste beheerpunt retourneren.</xref:System.Collections.ArrayList>       Als de <xref:System.Collections.ArrayList>niet de opgegeven waarde bevat de methode retourneert een negatief geheel getal.</xref:System.Collections.ArrayList> U kunt de bewerking bitsgewijze aanvulling (~) toepassen op deze-negatief geheel getal ophalen van de index van het eerste element zijn dat groter is dan de waarde van de zoekopdracht. Bij het invoegen van de waarde in de <xref:System.Collections.ArrayList>, deze index moet worden gebruikt als de invoegpositie voor het onderhouden van de sorteervolgorde.</xref:System.Collections.ArrayList>       Deze methode is een O (log `n`)-bewerking, waarbij `n` is `count`."
  syntax:
    content: public virtual int BinarySearch (int index, int count, object value, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde startIndex van het bereik moet worden gezocht."
    - id: count
      type: System.Int32
      description: "De lengte van het bereik moet worden gezocht."
    - id: value
      type: System.Object
      description: "De <xref:System.Object>vinden.</xref:System.Object> De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: comparer
      type: System.Collections.IComparer
      description: "De <xref:System.Collections.IComparer>implementatie moet worden gebruikt bij het vergelijken van elementen.</xref:System.Collections.IComparer>       - of - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> gebruiken de standaardvergelijkingsfunctie die de <xref:System.IComparable>uitvoering van elk element.</xref:System.IComparable>"
    return:
      type: System.Int32
      description: "De op nul gebaseerde index van <code> value </code> in de gesorteerde <xref href=&quot;System.Collections.ArrayList&quot;> </xref>als <code> value </code> is gevonden, anders wordt een negatief getal, namelijk de bitsgewijze aanvulling van de index van het volgende element die groter is dan <code> value </code> of, als er geen groter element, het bitsgewijze complement van <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*> is"
  overload: System.Collections.ArrayList.BinarySearch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>en <code>count</code> niet aanduiding maken van een geldig bereik in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - of - <code>comparer</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> en geen van beide <code>value</code> noch de elementen van <xref href=&quot;System.Collections.ArrayList&quot;> </xref> implementeren de <xref:System.IComparable> interface."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>comparer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> en <code>value</code> is niet van hetzelfde type als de elementen van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul.       - of - <code>count</code> is kleiner dan nul."
  platform:
  - net462
- uid: System.Collections.ArrayList.Capacity
  id: Capacity
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Opgehaald of ingesteld van het aantal elementen die de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> kan bevatten."
  remarks: "Capaciteit is het aantal elementen die de <xref:System.Collections.ArrayList>kunt opslaan.</xref:System.Collections.ArrayList> <xref:System.Collections.ArrayList.Count%2A>is het aantal elementen daadwerkelijk in de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Count%2A>       Capaciteit is altijd groter dan of gelijk zijn aan <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> Als <xref:System.Collections.ArrayList.Count%2A>dan er capaciteit is tijdens het toevoegen van elementen, de capaciteit wordt automatisch verhoogd met het opnieuw toewijzen van de interne matrix voordat de oude elementen kopiÃ«ren en toevoegen van nieuwe elementen.</xref:System.Collections.ArrayList.Count%2A>       De capaciteit kan worden verlaagd door het aanroepen van <xref:System.Collections.ArrayList.TrimToSize%2A>of door de eigenschap capaciteit expliciet.</xref:System.Collections.ArrayList.TrimToSize%2A> Wanneer de waarde van de capaciteit is expliciet ingesteld, wordt de interne matrix ook opnieuw toegewezen aan de opgegeven capaciteit.       Ophalen van de waarde van deze eigenschap is een bewerking O(1); een O instellen van de eigenschap is (`n`)-bewerking, waarbij `n` is de nieuwe capaciteit."
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "Het aantal elementen die de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> kan bevatten."
  overload: System.Collections.ArrayList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Capaciteit is ingesteld op een waarde die kleiner is dan <xref:System.Collections.ArrayList.Count*>.</xref:System.Collections.ArrayList.Count*>"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Er is onvoldoende geheugen beschikbaar op het systeem."
  platform:
  - net462
- uid: System.Collections.ArrayList.Clear
  id: Clear
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee verwijdert u alle elementen van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList.Count%2A>is ingesteld op nul en verwijzingen naar andere objecten in de elementen van de verzameling ook worden vrijgegeven.</xref:System.Collections.ArrayList.Count%2A>       <xref:System.Collections.ArrayList.Capacity%2A>blijft ongewijzigd.</xref:System.Collections.ArrayList.Capacity%2A>  Opnieuw instellen van de capaciteit van de <xref:System.Collections.ArrayList>, roepen <xref:System.Collections.ArrayList.TrimToSize%2A>of stel de <xref:System.Collections.ArrayList.Capacity%2A>eigenschap rechtstreeks.</xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.TrimToSize%2A> </xref:System.Collections.ArrayList> Een lege bijsnijden <xref:System.Collections.ArrayList>Hiermee stelt u de capaciteit van de <xref:System.Collections.ArrayList>naar de standaardcapaciteit.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_18_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_18_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_18_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.ArrayList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen.       - of - de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
- uid: System.Collections.ArrayList.Clone
  id: Clone
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Maakt een recente kopie van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Een recente kopie van een verzameling kopieert alleen de elementen van de verzameling of ze verwijzingstypen of typen zijn, maar deze worden niet gekopieerd door de objecten die de verwijzingen naar verwijzen. De verwijzingen in de nieuwe verzameling verwijzen naar dezelfde objecten die de verwijzingen in de oorspronkelijke verzameling naar verwijzen.       Daarentegen een diepe kopie van een verzameling kopieert de elementen en alles direct of indirect waarnaar wordt verwezen door de elementen.       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Een recente kopie van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee wordt bepaald of een element in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Deze methode voert een lineaire zoeken; Deze methode is daarom een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Deze methode bepaalt gelijkheid door het aanroepen van <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Beginnen met .NET Framework 2.0, deze methode maakt gebruik van een verzameling objecten <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden op `item` om te bepalen of item bestaat.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> In eerdere versies van .NET Framework, deze beslissing is gemaakt met behulp van de <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden van de `item` parameter voor de objecten in de verzameling.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  syntax:
    content: public virtual bool Contains (object item);
    parameters:
    - id: item
      type: System.Object
      description: "De <xref:System.Object>te vinden in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>item</code> is found in the <xref href=&quot;System.Collections.ArrayList&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Collections.ArrayList.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  id: CopyTo(System.Array)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopieert de gehele <xref href=&quot;System.Collections.ArrayList&quot;> </xref> naar een compatibele eendimensionale <xref:System.Array>, te beginnen aan het begin van de doelmatrix.</xref:System.Array>"
  remarks: "De opgegeven matrix moet van een compatibel type.       Deze methode gebruikt <xref:System.Array.Copy%2A?displayProperty=fullName>kopiÃ«ren van de elementen.</xref:System.Array.Copy%2A?displayProperty=fullName>       De elementen zijn gekopieerd naar de <xref:System.Array>in dezelfde volgorde als waarin de enumerator de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> doorloopt</xref:System.Array>       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cs[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.arr_6_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_6_1.vb)]\n [!code-cpp[Classic ArrayList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.arr_6_1.cpp)]"
  syntax:
    content: public virtual void CopyTo (Array array);
    parameters:
    - id: array
      type: System.Array
      description: "De eendimensionale <xref:System.Array>die het doel van de elementen die zijn gekopieerd uit <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> De <xref:System.Array>moet hebben op nul gebaseerde indexering.</xref:System.Array>"
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>is multidimensionaal.       - of - het aantal elementen in de bron <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is groter dan het aantal elementen dat de bestemming <code>array</code> kan bevatten."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Het type van de bron <xref href=&quot;System.Collections.ArrayList&quot;> </xref> kan niet automatisch worden geconverteerd naar het type van de bestemming <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopieert de gehele <xref href=&quot;System.Collections.ArrayList&quot;> </xref> naar een compatibele eendimensionale <xref:System.Array>, te beginnen bij de opgegeven index van de doelmatrix.</xref:System.Array>"
  remarks: "De opgegeven matrix moet van een compatibel type.       Deze methode gebruikt <xref:System.Array.Copy%2A?displayProperty=fullName>kopiÃ«ren van de elementen.</xref:System.Array.Copy%2A?displayProperty=fullName>       De elementen zijn gekopieerd naar de <xref:System.Array>in dezelfde volgorde als waarin de enumerator de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> doorloopt</xref:System.Array>       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_27_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_27_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_27_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "De eendimensionale <xref:System.Array>die het doel van de elementen die zijn gekopieerd uit <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> De <xref:System.Array>moet hebben op nul gebaseerde indexering.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "De op nul gebaseerde index in `array` welke kopiÃ«ren begint."
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>is kleiner dan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>is multidimensionaal.       - of - het aantal elementen in de bron <xref href=&quot;System.Collections.ArrayList&quot;> </xref> groter is dan de beschikbare ruimte vanaf <code>arrayIndex</code> aan het einde van de bestemming <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Het type van de bron <xref href=&quot;System.Collections.ArrayList&quot;> </xref> kan niet automatisch worden geconverteerd naar het type van de bestemming <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Een bereik van elementen uit kopieert de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> naar een compatibele eendimensionale <xref:System.Array>, te beginnen bij de opgegeven index van de doelmatrix.</xref:System.Array>"
  remarks: "De opgegeven matrix moet van een compatibel type.       Deze methode gebruikt <xref:System.Array.Copy%2A?displayProperty=fullName>kopiÃ«ren van de elementen.</xref:System.Array.Copy%2A?displayProperty=fullName>       De elementen zijn gekopieerd naar de <xref:System.Array>in dezelfde volgorde als waarin de enumerator de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> doorloopt</xref:System.Array>       Deze methode is een O (`n`)-bewerking, waarbij `n` is `count`."
  example:
  - "The following code example shows how to copy an <xref:System.Collections.ArrayList> into a one-dimensional <xref:System.Array?displayProperty=fullName>.  \n  \n [!code-cpp[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/cpp/971aa346-8de3-42af-8cd4-_1.cpp)]\n [!code-cs[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/csharp/971aa346-8de3-42af-8cd4-_1.cs)]\n [!code-vb[Classic ArrayList.CopyTo1 Example#1](~/add/codesnippet/visualbasic/971aa346-8de3-42af-8cd4-_1.vb)]"
  syntax:
    content: public virtual void CopyTo (int index, Array array, int arrayIndex, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index in de bron <xref href=&quot;System.Collections.ArrayList&quot;> </xref> welke kopiÃ«ren begint."
    - id: array
      type: System.Array
      description: "De eendimensionale <xref:System.Array>die het doel van de elementen die zijn gekopieerd uit <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Array> De <xref:System.Array>moet hebben op nul gebaseerde indexering.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "De op nul gebaseerde index in `array` welke kopiÃ«ren begint."
    - id: count
      type: System.Int32
      description: "Het aantal elementen te kopiÃ«ren."
  overload: System.Collections.ArrayList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul.       - of - <code>arrayIndex</code> is kleiner dan nul.       - of - <code>count</code> is kleiner dan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>is multidimensionaal.       - of - <code>index</code> is gelijk aan of groter zijn dan de <xref:System.Collections.ArrayList.Count*> van de bron <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - of - het aantal elementen vanaf <code>index</code> aan het einde van de bron <xref href=&quot;System.Collections.ArrayList&quot;> </xref> groter is dan de beschikbare ruimte vanaf <code>arrayIndex</code> aan het einde van de bestemming <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Het type van de bron <xref href=&quot;System.Collections.ArrayList&quot;> </xref> kan niet automatisch worden geconverteerd naar het type van de bestemming <code> array </code>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Count
  id: Count
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee wordt het aantal elementen daadwerkelijk in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList.Capacity%2A>het aantal elementen is die de <xref:System.Collections.ArrayList>kunt opslaan.</xref:System.Collections.ArrayList></xref:System.Collections.ArrayList.Capacity%2A> Aantal is het aantal elementen die daadwerkelijk in de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       <xref:System.Collections.ArrayList.Capacity%2A>is altijd groter zijn dan of gelijk aan Count.</xref:System.Collections.ArrayList.Capacity%2A> Als het aantal hoger is dan <xref:System.Collections.ArrayList.Capacity%2A>tijdens het toevoegen van elementen, de capaciteit automatisch wordt verhoogd met het opnieuw toewijzen van de interne matrix voordat de oude elementen kopiÃ«ren en toevoegen van nieuwe elementen.</xref:System.Collections.ArrayList.Capacity%2A>       Ophalen van de waarde van deze eigenschap is een O(1)-bewerking."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "Het aantal elementen daadwerkelijk in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  id: FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert een <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper met een vaste grootte."
  remarks: "Deze wrapper kan worden gebruikt om te voorkomen dat toevoegingen aan en verwijderen van de oorspronkelijke <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> De elementen kunnen nog steeds worden gewijzigd of vervangen.       Een verzameling met een vaste grootte is gewoon een verzameling met een wrapper waardoor toevoegen en verwijderen van elementen; daarom als wijzigingen zijn aangebracht in de onderliggende verzameling, inclusief het toevoegen of verwijderen van elementen, de verzameling met vaste grootte wordt doorgevoerd die wijzigingen.       Deze methode is een bewerking O(1)."
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/m-system.collections.arr_12_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_12_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/m-system.collections.arr_12_1.cpp)]"
  syntax:
    content: public static System.Collections.ArrayList FixedSize (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> laten teruglopen."
    return:
      type: System.Collections.ArrayList
      description: "Een <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper met een vaste grootte."
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  id: FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert een <xref:System.Collections.IList>wrapper met een vaste grootte.</xref:System.Collections.IList>"
  remarks: "Deze wrapper kan worden gebruikt om te voorkomen dat toevoegingen aan en verwijderen van de oorspronkelijke <xref:System.Collections.IList>.</xref:System.Collections.IList> De elementen kunnen nog steeds worden gewijzigd of vervangen.       Een verzameling met een vaste grootte is gewoon een verzameling met een wrapper waardoor toevoegen en verwijderen van elementen; daarom als wijzigingen zijn aangebracht in de onderliggende verzameling, inclusief het toevoegen of verwijderen van elementen, de verzameling met vaste grootte wordt doorgevoerd die wijzigingen.       Deze methode is een bewerking O(1)."
  syntax:
    content: public static System.Collections.IList FixedSize (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "De <xref:System.Collections.IList>laten teruglopen.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "Een <xref:System.Collections.IList>wrapper met een vaste grootte.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.FixedSize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert een enumerator voor de hele <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "De `foreach` -instructie van de taal C# (`for each` in Visual Basic) de complexiteit van de opsommingen worden verborgen.  Daarom kan het gebruik `foreach` wordt aanbevolen, in plaats van rechtstreeks bewerken van de enumerator.       Enumerators kunnen worden gebruikt om de gegevens in de verzameling te lezen, maar ze kunnen niet worden gebruikt om de onderliggende verzameling niet wijzigen.       In eerste instantie bevindt de enumerator zich vÃ³Ã³r het eerste element in de verzameling. <xref:System.Collections.IEnumerator.Reset%2A>brengt ook de enumerator terug naar deze positie.</xref:System.Collections.IEnumerator.Reset%2A>  Op deze positie <xref:System.Collections.IEnumerator.Current%2A>is niet gedefinieerd.</xref:System.Collections.IEnumerator.Current%2A> U moet daarom aanroepen <xref:System.Collections.IEnumerator.MoveNext%2A>om door te gaan van de enumerator voor het eerste element van de verzameling voordat het lezen van <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>retourneert de hetzelfde object totdat de <xref:System.Collections.IEnumerator.MoveNext%2A>of <xref:System.Collections.IEnumerator.Reset%2A>wordt aangeroepen.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Hiermee stelt u <xref:System.Collections.IEnumerator.Current%2A>naar het volgende element.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Als <xref:System.Collections.IEnumerator.MoveNext%2A>geeft het einde van de verzameling, de enumerator bevindt zich na het laatste element in de verzameling en <xref:System.Collections.IEnumerator.MoveNext%2A>retourneert `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Wanneer de enumerator is op deze positie, volgende aanroepen naar <xref:System.Collections.IEnumerator.MoveNext%2A>ook retourneren `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Als de laatste aanroep aan <xref:System.Collections.IEnumerator.MoveNext%2A>geretourneerd `false`, <xref:System.Collections.IEnumerator.Current%2A>is niet gedefinieerd.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>U kunt naar het eerste element van de verzameling opnieuw aanroepen <xref:System.Collections.IEnumerator.Reset%2A>gevolgd door <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> instellen       Een enumerator blijft geldig zolang de verzameling ongewijzigd blijft. Als er wijzigingen zijn aangebracht aan de verzameling, zoals het toevoegen, wijzigen of verwijderen van elementen, de enumerator is permanent ongeldig en het gedrag is niet gedefinieerd.       De enumerator heeft geen exclusieve toegang tot de verzameling; inventariseren door middel van een verzameling is daarom intrinsiek geen procedure thread-safe.  Om te garanderen thread veiligheid tijdens de opsomming, vergrendelt u de verzameling gedurende de volledige inventarisatie.  Als u wilt toestaan dat de verzameling worden geopend door meerdere threads voor lezen en schrijven, moet u uw eigen synchronisatie implementeren.       Deze methode is een bewerking O(1)."
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_2_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_2_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Een <xref:System.Collections.IEnumerator>voor de hele <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  id: GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert een enumerator voor een aantal elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "De `foreach` -instructie van de taal C# (`for each` in Visual C++ `For Each` Visual Basic) de complexiteit van de opsommingen worden verborgen.  Daarom kan het gebruik `foreach` wordt aanbevolen, in plaats van rechtstreeks bewerken van de enumerator.       Enumerators kunnen worden gebruikt om de gegevens in de verzameling te lezen, maar ze kunnen niet worden gebruikt om de onderliggende verzameling niet wijzigen.       In eerste instantie bevindt de enumerator zich vÃ³Ã³r het eerste element in de verzameling. <xref:System.Collections.IEnumerator.Reset%2A>brengt ook de enumerator terug naar deze positie.</xref:System.Collections.IEnumerator.Reset%2A>  Op deze positie <xref:System.Collections.IEnumerator.Current%2A>is niet gedefinieerd.</xref:System.Collections.IEnumerator.Current%2A> U moet daarom aanroepen <xref:System.Collections.IEnumerator.MoveNext%2A>om door te gaan van de enumerator voor het eerste element van de verzameling voordat het lezen van <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>retourneert de hetzelfde object totdat de <xref:System.Collections.IEnumerator.MoveNext%2A>of <xref:System.Collections.IEnumerator.Reset%2A>wordt aangeroepen.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Hiermee stelt u <xref:System.Collections.IEnumerator.Current%2A>naar het volgende element.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Als <xref:System.Collections.IEnumerator.MoveNext%2A>geeft het einde van de verzameling, de enumerator bevindt zich na het laatste element in de verzameling en <xref:System.Collections.IEnumerator.MoveNext%2A>retourneert `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Wanneer de enumerator is op deze positie, volgende aanroepen naar <xref:System.Collections.IEnumerator.MoveNext%2A>ook retourneren `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Als de laatste aanroep aan <xref:System.Collections.IEnumerator.MoveNext%2A>geretourneerd `false`, <xref:System.Collections.IEnumerator.Current%2A>is niet gedefinieerd.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>U kunt naar het eerste element van de verzameling opnieuw aanroepen <xref:System.Collections.IEnumerator.Reset%2A>gevolgd door <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> instellen       Een enumerator blijft geldig zolang de verzameling ongewijzigd blijft. Als er wijzigingen zijn aangebracht aan de verzameling, zoals het toevoegen, wijzigen of verwijderen van elementen, de enumerator is permanent ongeldig en het gedrag is niet gedefinieerd.       De enumerator heeft geen exclusieve toegang tot de verzameling; inventariseren door middel van een verzameling is daarom intrinsiek geen procedure thread-safe.  Om te garanderen thread veiligheid tijdens de opsomming, vergrendelt u de verzameling gedurende de volledige inventarisatie.  Als u wilt toestaan dat de verzameling worden geopend door meerdere threads voor lezen en schrijven, moet u uw eigen synchronisatie implementeren.       Deze methode is een bewerking O(1).      ## Versie compatibiliteit In de .NET Framework versie 1.0 en 1.1, de enumerator voor een <xref:System.Collections.ArrayList>wrapper die is geretourneerd door de <xref:System.Collections.ArrayList.Adapter%2A>methode het tweede argument behandeld als een bovengrens in plaats van een aantal.</xref:System.Collections.ArrayList.Adapter%2A> </xref:System.Collections.ArrayList> In de [!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)] het tweede argument correct wordt behandeld als een aantal."
  example:
  - "The following example gets the enumerator for an <xref:System.Collections.ArrayList>, and the enumerator for a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/csharp/m-system.collections.arr_10_1.cs)]\n [!code-vb[Collections.ArrayList.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.collections.arr_10_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde startIndex van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> sectie die de enumerator naar verwijzen moet."
    - id: count
      type: System.Int32
      description: "Het aantal elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> sectie die de enumerator naar verwijzen moet."
    return:
      type: System.Collections.IEnumerator
      description: "Een <xref:System.Collections.IEnumerator>voor het opgegeven bereik van elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.ArrayList.GetEnumerator*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul.       - of - <code>count</code> is kleiner dan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>en <code>count</code> Geef een geldig bereik in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert een <xref href=&quot;System.Collections.ArrayList&quot;> </xref> die staat voor een subset van de elementen in de bron <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Deze methode maakt geen exemplaren van de onderdelen. De nieuwe <xref:System.Collections.ArrayList>is alleen een venster weergeven in de bron <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Echter, alle volgende wijzigingen aan de bron <xref:System.Collections.ArrayList>moet worden uitgevoerd via deze weergavevenster <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Als u wijzigingen rechtstreeks op de bron <xref:System.Collections.ArrayList>, het weergavevenster <xref:System.Collections.ArrayList>ongeldig wordt gemaakt en er bewerkingen op een <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> retourneert</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Deze methode is een bewerking O(1)."
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/m-system.collections.arr_7_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/m-system.collections.arr_7_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_7_1.vb)]"
  syntax:
    content: public virtual System.Collections.ArrayList GetRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde <xref href=&quot;System.Collections.ArrayList&quot;> </xref> index op het bereik wordt gestart."
    - id: count
      type: System.Int32
      description: "Het aantal elementen in het bereik."
    return:
      type: System.Collections.ArrayList
      description: "Een <xref href=&quot;System.Collections.ArrayList&quot;> </xref> die staat voor een subset van de elementen in de bron <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.GetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul.       - of - <code>count</code> is kleiner dan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>en <code>count</code> niet aanduiding maken van een geldig bereik van elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  id: IndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Zoekt naar de opgegeven <xref:System.Object>en retourneert de op nul gebaseerde index van het eerste exemplaar binnen de gehele <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  remarks: "De <xref:System.Collections.ArrayList>doorsturen bij het eerste element begint en eindigt bij het laatste element wordt gezocht.</xref:System.Collections.ArrayList>       Deze methode voert een lineaire zoeken; Deze methode is daarom een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Deze methode bepaalt gelijkheid door het aanroepen van <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Beginnen met .NET Framework 2.0, deze methode maakt gebruik van een verzameling objecten <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden op `item` om te bepalen of item bestaat.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> In eerdere versies van .NET Framework, deze beslissing is gemaakt met behulp van de <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden van de `item` parameter voor de objecten in de verzameling.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_28_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_28_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_28_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>te vinden in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "De op nul gebaseerde index van het eerste exemplaar van <code> value </code> binnen de gehele <xref href=&quot;System.Collections.ArrayList&quot;> </xref>als gevonden, anders wordt -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  id: IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Zoekt naar de opgegeven <xref:System.Object>en retourneert de op nul gebaseerde index van het eerste exemplaar binnen het bereik van elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> die loopt van de opgegeven index naar het laatste element.</xref:System.Object>"
  remarks: "De <xref:System.Collections.ArrayList>doorzocht doorsturen vanaf `startIndex` en eindigt bij het laatste element.</xref:System.Collections.ArrayList>       Deze methode voert een lineaire zoeken; Deze methode is daarom een O (`n`)-bewerking, waarbij `n` is het aantal elementen vanaf `startIndex` aan het einde van de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList>       Deze methode bepaalt gelijkheid door het aanroepen van <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Beginnen met .NET Framework 2.0, deze methode maakt gebruik van een verzameling objecten <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden op `item` om te bepalen of item bestaat.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> In eerdere versies van .NET Framework, deze beslissing is gemaakt met behulp van de <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden van de `item` parameter voor de objecten in de verzameling.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_22_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_22_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_22_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>te vinden in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "De op nul gebaseerde startIndex van de zoekopdracht. 0 (nul) is geldig in een lege lijst."
    return:
      type: System.Int32
      description: "De op nul gebaseerde index van het eerste exemplaar van <code> value </code> binnen het bereik van elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> die loopt van <code> startIndex </code> naar het laatste element, als gevonden, anders wordt -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>valt buiten het bereik van geldige indexen voor de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  id: IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Zoekt naar de opgegeven <xref:System.Object>en retourneert de op nul gebaseerde index van het eerste exemplaar binnen het bereik van elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> die begint bij de opgegeven index en bevat het opgegeven aantal elementen.</xref:System.Object>"
  remarks: "De <xref:System.Collections.ArrayList>doorzocht doorsturen vanaf `startIndex` en eindigt bij `startIndex` plus `count` min 1, als `count` is groter dan 0.</xref:System.Collections.ArrayList>       Deze methode voert een lineaire zoeken; Deze methode is daarom een O (`n`)-bewerking, waarbij `n` is `count`.       Deze methode bepaalt gelijkheid door het aanroepen van <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Beginnen met .NET Framework 2.0, deze methode maakt gebruik van een verzameling objecten <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden op `item` om te bepalen of item bestaat.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> In eerdere versies van .NET Framework, deze beslissing is gemaakt met behulp van de <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden van de `item` parameter voor de objecten in de verzameling.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the first occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_19_1.cpp)]\n [!code-cs[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_19_1.cs)]\n [!code-vb[Classic ArrayList.IndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_19_1.vb)]"
  syntax:
    content: public virtual int IndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>te vinden in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "De op nul gebaseerde startIndex van de zoekopdracht. 0 (nul) is geldig in een lege lijst."
    - id: count
      type: System.Int32
      description: "Het aantal elementen in de sectie om te zoeken."
    return:
      type: System.Int32
      description: "De op nul gebaseerde index van het eerste exemplaar van <code> value </code> binnen het bereik van elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> die begint bij <code> startIndex </code> en bevat <code> count </code> aantal elementen, als gevonden, anders wordt -1."
  overload: System.Collections.ArrayList.IndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>valt buiten het bereik van geldige indexen voor de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - of - <code>count</code> is kleiner dan nul.       - of - <code>startIndex</code> en <code>count</code> Geef een geldige sectie in het <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee voegt u een element in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> bij de opgegeven index."
  remarks: "<xref:System.Collections.ArrayList>accepteert `null` als een geldige waarde en dubbele elementen zijn toegestaan.</xref:System.Collections.ArrayList>       Als <xref:System.Collections.ArrayList.Count%2A>al gelijk is aan <xref:System.Collections.ArrayList.Capacity%2A>, wordt de capaciteit van de <xref:System.Collections.ArrayList>wordt verhoogd met automatisch opnieuw toewijzen van de interne matrix en de bestaande elementen zijn gekopieerd naar de nieuwe matrix voordat het nieuwe element is toegevoegd.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A>       Als `index` gelijk is aan <xref:System.Collections.ArrayList.Count%2A>, `value` wordt toegevoegd aan het einde van <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Count%2A>       Geschikt voor het nieuwe element in verzamelingen van aangrenzende elementen, zoals lijsten, de elementen die achter de invoegpositie omlaag te verplaatsen. Als de verzameling is geÃ¯ndexeerd, worden de indexen van de elementen die verplaatst worden ook bijgewerkt. Dit gedrag is niet van toepassing op verzamelingen waar elementen conceptueel gezien zijn gegroepeerd in buckets, zoals een hash-tabel.       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/m-system.collections.arr_15_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_15_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/m-system.collections.arr_15_1.cpp)]"
  syntax:
    content: public virtual void Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index waarop `value` moet worden ingevoegd."
    - id: value
      type: System.Object
      description: "De <xref:System.Object>invoegen.</xref:System.Object> De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul.       - of - <code>index</code> is groter dan <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen.       - of - de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  id: InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee voegt u de onderdelen van een verzameling in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> bij de opgegeven index."
  remarks: "<xref:System.Collections.ArrayList>accepteert `null` als een geldige waarde en dubbele elementen zijn toegestaan.</xref:System.Collections.ArrayList>       Als de nieuwe <xref:System.Collections.ArrayList.Count%2A>(de huidige <xref:System.Collections.ArrayList.Count%2A>plus de grootte van de verzameling) is groter dan <xref:System.Collections.ArrayList.Capacity%2A>, wordt de capaciteit van de <xref:System.Collections.ArrayList>wordt verhoogd met automatisch opnieuw toewijzen van de interne matrix zodat de nieuwe onderdelen en de bestaande elementen zijn gekopieerd naar de nieuwe matrix voordat de nieuwe elementen worden toegevoegd.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Capacity%2A> </xref:System.Collections.ArrayList.Count%2A> </xref:System.Collections.ArrayList.Count%2A>       Als `index` is gelijk aan <xref:System.Collections.ArrayList.Count%2A>, worden de elementen toegevoegd aan het einde van <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList.Count%2A>       De volgorde van de elementen in de <xref:System.Collections.ICollection>blijft behouden in de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ICollection>       Geschikt voor het nieuwe element in verzamelingen van aangrenzende elementen, zoals lijsten, de elementen die achter de invoegpositie omlaag te verplaatsen. Als de verzameling is geÃ¯ndexeerd, worden de indexen van de elementen die verplaatst worden ook bijgewerkt. Dit gedrag is niet van toepassing op verzamelingen waar elementen conceptueel gezien zijn gegroepeerd in buckets, zoals een hash-tabel.       Deze methode is een O (`n` + `m`)-bewerking, waarbij `n` is het aantal elementen moet worden toegevoegd en `m` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to insert elements into the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Insert Example#1](~/add/codesnippet/csharp/2b051d32-7260-4f65-b4d6-_1.cs)]\n [!code-vb[Classic ArrayList.Insert Example#1](~/add/codesnippet/visualbasic/2b051d32-7260-4f65-b4d6-_1.vb)]\n [!code-cpp[Classic ArrayList.Insert Example#1](~/add/codesnippet/cpp/2b051d32-7260-4f65-b4d6-_1.cpp)]"
  syntax:
    content: public virtual void InsertRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index waarop de nieuwe onderdelen moeten worden ingevoegd."
    - id: c
      type: System.Collections.ICollection
      description: "De <xref:System.Collections.ICollection>waarvan de elementen moeten worden ingevoegd in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> De verzameling zelf kan niet worden <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, maar deze kan elementen bevatten die zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.InsertRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul.       - of - <code>index</code> is groter dan <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen.       - of - de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
- uid: System.Collections.ArrayList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Haalt een waarde die aangeeft of de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> heeft een vaste grootte."
  remarks: "Een verzameling met een vaste grootte is niet toegestaan het toevoegen of verwijderen van elementen nadat de verzameling is gemaakt, maar kunt u de wijziging van bestaande elementen.       Een verzameling met een vaste grootte is gewoon een verzameling met een wrapper waardoor toevoegen en verwijderen van elementen; daarom als wijzigingen zijn aangebracht in de onderliggende verzameling, inclusief het toevoegen of verwijderen van elementen, de verzameling met vaste grootte wordt doorgevoerd die wijzigingen.       Ophalen van de waarde van deze eigenschap is een O(1)-bewerking."
  example:
  - "The following code example shows how to create a fixed-size wrapper around an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/csharp/p-system.collections.arr_2_1.cs)]\n [!code-vb[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_2_1.vb)]\n [!code-cpp[Classic ArrayList.IsFixedSize Example#1](~/add/codesnippet/cpp/p-system.collections.arr_2_1.cpp)]"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> heeft een vaste grootte, anders wordt <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Haalt een waarde die aangeeft of de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen."
  remarks: "Een verzameling die is alleen-lezen is het toevoegen, verwijderen of wijzigen van de elementen niet toegestaan, nadat de verzameling is gemaakt.       Een verzameling die is alleen-lezen is gewoon een verzameling met een wrapper waardoor het wijzigen van de collectie. daarom als wijzigingen worden aangebracht in de onderliggende verzameling, de verzameling alleen-lezen wordt doorgevoerd die wijzigingen.       Ophalen van de waarde van deze eigenschap is een O(1)-bewerking."
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/p-system.collections.arr_3_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/p-system.collections.arr_3_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen, anders, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Haalt een waarde die aangeeft of de toegang tot de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is gesynchroniseerd (thread-veilig)."
  remarks: "Om te waarborgen van de veiligheid van de thread van de <xref:System.Collections.ArrayList>, alle bewerkingen moeten worden uitgevoerd via de wrapper die is geretourneerd door de <xref:System.Collections.ArrayList.Synchronized%2A>methode.</xref:System.Collections.ArrayList.Synchronized%2A> </xref:System.Collections.ArrayList>       Inventariseren door middel van een verzameling is intrinsiek niet een thread-veilige procedure. Zelfs wanneer een verzameling wordt gesynchroniseerd, andere threads kunnen nog steeds de verzameling niet wijzigen, waardoor de enumerator is een uitzondering. Om te garanderen thread veiligheid tijdens de opsomming, moet u de verzameling tijdens de gehele opsomming vergrendelen of het gevolg van wijzigingen die door andere threads uitzonderingen wordt onderschept."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_0_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_0_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_0_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.arr_0_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.arr_0_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.arr_0_2.cs)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de toegang tot de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is gesynchroniseerd (thread-safe); anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Opgehaald of ingesteld van het element bij de opgegeven index."
  remarks: "Het artikel retourneert een <xref:System.Object>dus u moet voor het casten van de geretourneerde waarde naar het oorspronkelijke type om deze te bewerken</xref:System.Object> Het is belangrijk te weten dat <xref:System.Collections.ArrayList>is geen sterk getypeerde verzameling.</xref:System.Collections.ArrayList> Zie voor een alternatieve sterk getypeerde <xref:System.Collections.Generic.List%601>.</xref:System.Collections.Generic.List%601>       <xref:System.Collections.ArrayList>accepteert `null` als een geldige waarde en dubbele elementen zijn toegestaan.</xref:System.Collections.ArrayList>       Deze eigenschap biedt de mogelijkheid toegang tot een specifiek element in de verzameling met de volgende syntaxis: `myCollection[index]`.       Het trefwoord wordt gebruikt voor het definiÃ«ren van de indexeerfuncties in plaats van de implementatie van de eigenschap Item van de taal C#. Visual Basic implementeert Item als een standaardeigenschap dezelfde functionaliteit indexering bieden.       Ophalen van de waarde van deze eigenschap is een bewerking O(1); de eigenschap is ook een O(1)-bewerking."
  example:
  - "The following code example creates an <xref:System.Collections.ArrayList> and adds several items. The example demonstrates accessing elements with the Item property (the indexer in C#), and changing an element by assigning a new value to the Item property for a specified index. The example also shows that the Item property cannot be used to access or add elements outside the current size of the list.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#1](~/add/codesnippet/cpp/p-system.collections.arr_1_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Item#1](~/add/codesnippet/csharp/p-system.collections.arr_1_1.cs)]\n [!code-vb[System.Collections.ArrayList.Item#1](~/add/codesnippet/visualbasic/p-system.collections.arr_1_1.vb)]  \n  \n The following example uses the Item property explicitly to assign values to items in the list. The example defines a class that inherits an <xref:System.Collections.ArrayList> and adds a method to scramble the list items.  \n  \n [!code-cpp[System.Collections.ArrayList.Item#2](~/add/codesnippet/cpp/p-system.collections.arr_1_2.cpp)]\n [!code-vb[System.Collections.ArrayList.Item#2](~/add/codesnippet/visualbasic/p-system.collections.arr_1_2.vb)]\n [!code-cs[System.Collections.ArrayList.Item#2](~/add/codesnippet/csharp/p-system.collections.arr_1_2.cs)]"
  syntax:
    content: public virtual object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index van het element ophalen of instellen."
    return:
      type: System.Object
      description: "Het element bij de opgegeven index."
  overload: System.Collections.ArrayList.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul.       - of - <code>index</code> is gelijk aan of groter zijn dan <xref:System.Collections.ArrayList.Count*>."
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  id: LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Zoekt naar de opgegeven <xref:System.Object>en retourneert de op nul gebaseerde index van het laatste exemplaar binnen de gehele <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  remarks: "De <xref:System.Collections.ArrayList>terug op het laatste element begint en eindigt bij het eerste element wordt gezocht.</xref:System.Collections.ArrayList>       Deze methode voert een lineaire zoeken; Deze methode is daarom een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Beginnen met .NET Framework 2.0, deze methode maakt gebruik van een verzameling objecten <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden op `item` om te bepalen of item bestaat.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> In eerdere versies van .NET Framework, deze beslissing is gemaakt met behulp van de <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden van de `item` parameter voor de objecten in de verzameling.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_14_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_14_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_14_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>te vinden in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "De op nul gebaseerde index van het laatste exemplaar van <code> value </code> binnen de gehele de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>als gevonden, anders wordt -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  id: LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Zoekt naar de opgegeven <xref:System.Object>en retourneert de op nul gebaseerde index van het laatste exemplaar binnen het bereik van elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> die loopt van het eerste element aan de opgegeven index.</xref:System.Object>"
  remarks: "De <xref:System.Collections.ArrayList>wordt gezocht naar achteren begint bij `startIndex` en eindigt bij het eerste element.</xref:System.Collections.ArrayList>       Deze methode voert een lineaire zoeken; Deze methode is daarom een O (`n`)-bewerking, waarbij `n` is het aantal elementen vanaf het begin van de <xref:System.Collections.ArrayList>naar `startIndex`.</xref:System.Collections.ArrayList>       Deze methode bepaalt gelijkheid door het aanroepen van <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Beginnen met .NET Framework 2.0, deze methode maakt gebruik van een verzameling objecten <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden op `item` om te bepalen of item bestaat.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> In eerdere versies van .NET Framework, deze beslissing is gemaakt met behulp van de <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden van de `item` parameter voor de objecten in de verzameling.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/m-system.collections.arr_26_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/m-system.collections.arr_26_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_26_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>te vinden in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "De op nul gebaseerde startIndex van achterwaarts zoeken."
    return:
      type: System.Int32
      description: "De op nul gebaseerde index van het laatste exemplaar van <code> value </code> binnen het bereik van elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> die loopt van het eerste element dat <code> startIndex </code>als gevonden, anders wordt -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>valt buiten het bereik van geldige indexen voor de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  id: LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Zoekt naar de opgegeven <xref:System.Object>en retourneert de op nul gebaseerde index van het laatste exemplaar binnen het bereik van elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> die het opgegeven aantal elementen, en eindigt bij de opgegeven index bevat.</xref:System.Object>"
  remarks: "De <xref:System.Collections.ArrayList>wordt gezocht naar achteren begint bij `startIndex` en eindigt bij `startIndex` min `count` plus 1, als `count` is groter dan 0.</xref:System.Collections.ArrayList>       Deze methode voert een lineaire zoeken; Deze methode is daarom een O (`n`)-bewerking, waarbij `n` is `count`.       Deze methode bepaalt gelijkheid door het aanroepen van <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Beginnen met .NET Framework 2.0, deze methode maakt gebruik van een verzameling objecten <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden op `item` om te bepalen of item bestaat.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> In eerdere versies van .NET Framework, deze beslissing is gemaakt met behulp van de <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden van de `item` parameter voor de objecten in de verzameling.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of the last occurrence of a specified element. Note that `LastIndexOf` is a backward search; therefore, `count` must be less than or equal to `startIndex` + 1.  \n  \n [!code-cpp[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/cpp/62fe9219-7086-43ad-b565-_1.cpp)]\n [!code-cs[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/csharp/62fe9219-7086-43ad-b565-_1.cs)]\n [!code-vb[Classic ArrayList.LastIndexOf Example#1](~/add/codesnippet/visualbasic/62fe9219-7086-43ad-b565-_1.vb)]"
  syntax:
    content: public virtual int LastIndexOf (object value, int startIndex, int count);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>te vinden in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: startIndex
      type: System.Int32
      description: "De op nul gebaseerde startIndex van achterwaarts zoeken."
    - id: count
      type: System.Int32
      description: "Het aantal elementen in de sectie om te zoeken."
    return:
      type: System.Int32
      description: "De op nul gebaseerde index van het laatste exemplaar van <code> value </code> binnen het bereik van elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> die bevat <code> count </code> aantal elementen en eindigt bij <code> startIndex </code>als gevonden, anders wordt -1."
  overload: System.Collections.ArrayList.LastIndexOf*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>startIndex</code>valt buiten het bereik van geldige indexen voor de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.       - of - <code>count</code> is kleiner dan nul.       - of - <code>startIndex</code> en <code>count</code> Geef een geldige sectie in het <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  id: ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert een alleen-lezen <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper."
  remarks: "Om te voorkomen dat alle wijzigingen aan `list`, blootstellen `list` alleen via deze wrapper.       Een verzameling die is alleen-lezen is gewoon een verzameling met een wrapper waardoor het wijzigen van de verzameling. Als wijzigingen worden aangebracht in de onderliggende verzameling, wordt deze wijzigingen doorgevoerd in de verzameling alleen-lezen.       Deze methode is een bewerking O(1)."
  example:
  - "The following code example shows how to create a read-only wrapper around an <xref:System.Collections.ArrayList> and how to determine if an <xref:System.Collections.ArrayList> is read-only.  \n  \n [!code-cs[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_9_1.cs)]\n [!code-cpp[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_9_1.cpp)]\n [!code-vb[Classic ArrayList.ReadOnly1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_9_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList ReadOnly (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> laten teruglopen."
    return:
      type: System.Collections.ArrayList
      description: "Een alleen-lezen <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper rond <code> list </code>."
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  id: ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert een alleen-lezen <xref:System.Collections.IList>wrapper.</xref:System.Collections.IList>"
  remarks: "Om te voorkomen dat alle wijzigingen aan `list`, blootstellen `list` alleen via deze wrapper.       Een verzameling die is alleen-lezen is gewoon een verzameling met een wrapper waardoor het wijzigen van de verzameling. Als wijzigingen worden aangebracht in de onderliggende verzameling, wordt deze wijzigingen doorgevoerd in de verzameling alleen-lezen.       Deze methode is een bewerking O(1)."
  syntax:
    content: public static System.Collections.IList ReadOnly (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "De <xref:System.Collections.IList>laten teruglopen.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "Een alleen-lezen <xref:System.Collections.IList>wrapper rond <code> list </code>.</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.ReadOnly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee verwijdert u het eerste exemplaar van een specifiek object van het <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Als de <xref:System.Collections.ArrayList>bevat niet het opgegeven object het <xref:System.Collections.ArrayList>blijft ongewijzigd.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Er is geen uitzondering is opgetreden.       Deze methode voert een lineaire zoeken; Deze methode is daarom een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>       Deze methode bepaalt gelijkheid door het aanroepen van <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       In verzamelingen van aangrenzende elementen, zoals lijsten, verplaatsen de elementen die achter de verwijderde element omhoog naar de vrijgekomen spot in beslag nemen. Als de verzameling is geÃ¯ndexeerd, worden de indexen van de elementen die verplaatst worden ook bijgewerkt. Dit gedrag is niet van toepassing op verzamelingen waar elementen conceptueel gezien zijn gegroepeerd in buckets, zoals een hash-tabel."
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_5_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_5_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_5_1.cs)]"
  syntax:
    content: public virtual void Remove (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "De <xref:System.Object>verwijderen uit de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.Remove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen.       - of - de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee verwijdert u het element bij de opgegeven index van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Nadat het element is verwijderd, wordt de grootte van de verzameling aangepast en de waarde van de <xref:System.Collections.ArrayList.Count%2A>eigenschap met Ã©Ã©n verlaagd.</xref:System.Collections.ArrayList.Count%2A>       In verzamelingen van aangrenzende elementen, zoals lijsten, verplaatsen de elementen die achter de verwijderde element omhoog naar de vrijgekomen spot in beslag nemen. Als de verzameling is geÃ¯ndexeerd, worden de indexen van de elementen die verplaatst worden ook bijgewerkt. Dit gedrag is niet van toepassing op verzamelingen waar elementen conceptueel gezien zijn gegroepeerd in buckets, zoals een hash-tabel.       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_24_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_24_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_24_1.cs)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index van het element te verwijderen."
  overload: System.Collections.ArrayList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul.       - of - <code>index</code> is gelijk aan of groter zijn dan <xref:System.Collections.ArrayList.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen.       - of - de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee verwijdert u een bereik van elementen uit de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "In verzamelingen van aangrenzende elementen, zoals lijsten, verplaatsen de elementen die achter de verwijderde element omhoog naar de vrijgekomen spot in beslag nemen. Als de verzameling is geÃ¯ndexeerd, worden de indexen van de elementen die verplaatst worden ook bijgewerkt. Dit gedrag is niet van toepassing op verzamelingen waar elementen conceptueel gezien zijn gegroepeerd in buckets, zoals een hash-tabel.       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from the <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Remove Example#1](~/add/codesnippet/cpp/m-system.collections.arr_21_1.cpp)]\n [!code-vb[Classic ArrayList.Remove Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_21_1.vb)]\n [!code-cs[Classic ArrayList.Remove Example#1](~/add/codesnippet/csharp/m-system.collections.arr_21_1.cs)]"
  syntax:
    content: public virtual void RemoveRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde startIndex van het bereik van elementen te verwijderen."
    - id: count
      type: System.Int32
      description: "Het aantal elementen te verwijderen."
  overload: System.Collections.ArrayList.RemoveRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul.       - of - <code>count</code> is kleiner dan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>en <code>count</code> niet aanduiding maken van een geldig bereik van elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen.       - of - de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  id: Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert een <xref href=&quot;System.Collections.ArrayList&quot;> </xref> waarvan de elementen zijn kopieÃ«n van de opgegeven waarde."
  remarks: "<xref:System.Collections.ArrayList>accepteert `null` als een geldige waarde en dubbele elementen zijn toegestaan.</xref:System.Collections.ArrayList>       Deze methode is een O (`n`)-bewerking, waarbij `n` is `count`."
  example:
  - "The following code example shows how to create and initialize a new <xref:System.Collections.ArrayList> with the same value.  \n  \n [!code-cpp[Classic ArrayList.Repeat Example#1](~/add/codesnippet/cpp/m-system.collections.arr_1_1.cpp)]\n [!code-cs[Classic ArrayList.Repeat Example#1](~/add/codesnippet/csharp/m-system.collections.arr_1_1.cs)]\n [!code-vb[Classic ArrayList.Repeat Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_1_1.vb)]"
  syntax:
    content: public static System.Collections.ArrayList Repeat (object value, int count);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>kopiÃ«ren meerdere keren in het nieuwe <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object> De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    - id: count
      type: System.Int32
      description: "Het aantal keren `value` moeten worden gekopieerd."
    return:
      type: System.Collections.ArrayList
      description: "Een <xref href=&quot;System.Collections.ArrayList&quot;> </xref> met <code> count </code> aantal elementen, die allemaal kopieÃ«n van zijn <code> value </code>."
  overload: System.Collections.ArrayList.Repeat*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>count</code>is kleiner dan nul."
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse
  id: Reverse
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Keert de volgorde van de elementen in de gehele <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Deze methode gebruikt <xref:System.Array.Reverse%2A?displayProperty=fullName>de volgorde van de elementen zodat het element bij de <xref:System.Collections.ArrayList>[i] wanneer ik een index binnen het bereik is verplaatst naar <xref:System.Collections.ArrayList>[j], waarbij j gelijk is aan `index`  +  `index`  +  `count` - i - 1.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName>       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to reverse the sort order of the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Reverse Example#1](~/add/codesnippet/csharp/m-system.collections.arr_20_1.cs)]\n [!code-cpp[Classic ArrayList.Reverse Example#1](~/add/codesnippet/cpp/m-system.collections.arr_20_1.cpp)]\n [!code-vb[Classic ArrayList.Reverse Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_20_1.vb)]"
  syntax:
    content: public virtual void Reverse ();
    parameters: []
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen."
  platform:
  - net462
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Keert de volgorde van de elementen in het opgegeven bereik."
  remarks: "Deze methode gebruikt <xref:System.Array.Reverse%2A?displayProperty=fullName>de volgorde van de elementen zodat het element bij de <xref:System.Collections.ArrayList>[i] wanneer ik een index binnen het bereik is verplaatst naar <xref:System.Collections.ArrayList>[j], waarbij j gelijk is aan `index`  +  `index`  +  `count` - i - 1.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> </xref:System.Array.Reverse%2A?displayProperty=fullName>       Deze methode is een O (`n`)-bewerking, waarbij `n` is `count`."
  example:
  - "The following code example shows how to reverse the sort order of the values in a range of elements in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cpp[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/cpp/m-system.collections.arr_3_1.cpp)]\n [!code-cs[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/csharp/m-system.collections.arr_3_1.cs)]\n [!code-vb[Classic ArrayList.Reverse1 Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_3_1.vb)]"
  syntax:
    content: public virtual void Reverse (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde startIndex van het bereik om terug te draaien."
    - id: count
      type: System.Int32
      description: "Het aantal elementen in het bereik om terug te draaien."
  overload: System.Collections.ArrayList.Reverse*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul.       - of - <code>count</code> is kleiner dan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>en <code>count</code> niet aanduiding maken van een geldig bereik van elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen."
  platform:
  - net462
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  id: SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "De elementen van een verzameling gekopieerd via een bereik van elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "<xref:System.Collections.ArrayList>accepteert `null` als een geldige waarde en dubbele elementen zijn toegestaan.</xref:System.Collections.ArrayList>       De volgorde van de elementen in de <xref:System.Collections.ICollection>blijft behouden in de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ICollection>       Deze methode is een O (`n` + 1)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to set and get a range of elements in the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.SetRange Example#1](~/add/codesnippet/csharp/23e2a8fa-8e09-46ee-8256-_1.cs)]\n [!code-cpp[Classic ArrayList.SetRange Example#1](~/add/codesnippet/cpp/23e2a8fa-8e09-46ee-8256-_1.cpp)]\n [!code-vb[Classic ArrayList.SetRange Example#1](~/add/codesnippet/visualbasic/23e2a8fa-8e09-46ee-8256-_1.vb)]"
  syntax:
    content: public virtual void SetRange (int index, System.Collections.ICollection c);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde <xref href=&quot;System.Collections.ArrayList&quot;> </xref> index waarop u wilt beginnen met het kopiÃ«ren van de elementen van `c`."
    - id: c
      type: System.Collections.ICollection
      description: "De <xref:System.Collections.ICollection>waarvan de elementen kopiÃ«ren naar de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Collections.ICollection> De verzameling zelf kan niet worden <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, maar deze kan elementen bevatten die zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.ArrayList.SetRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul.       - of - <code>index</code> plus het aantal elementen in <code>c</code> is groter dan <xref:System.Collections.ArrayList.Count*>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>c</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen."
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort
  id: Sort
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Sorteert de elementen in de gehele <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Deze methode maakt gebruik van <xref:System.Array.Sort%2A?displayProperty=fullName>, waarbij de algoritme QuickSort wordt gebruikt.</xref:System.Array.Sort%2A?displayProperty=fullName> De QuickSort-algoritme is een vergelijking sortering (ook wel een instabiele sorteren), wat dat betekent een &quot;kleiner dan of gelijk aan&quot; vergelijkingsbewerking bepaalt welke van twee elementen in de laatste gesorteerde lijst eerst moet plaatsvinden. Echter, als twee elementen gelijk zijn, de oorspronkelijke volgorde mogelijk niet worden bewaard. Een stabiele sortering bewaart daarentegen de volgorde van elementen die gelijk zijn. Als u een stabiele sortering, moet u een aangepaste implementeren <xref:System.Collections.IComparer>interface voor gebruik met de andere overloads van deze methode.</xref:System.Collections.IComparer>       Gemiddeld deze methode een O is (`n` logboek `n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>; in het ergste geval een O is (`n`^&2;) bewerking.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Sort Example#1](~/add/codesnippet/csharp/m-system.collections.arr_11_1.cs)]\n [!code-vb[Classic ArrayList.Sort Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_11_1.vb)]\n [!code-cpp[Classic ArrayList.Sort Example#1](~/add/codesnippet/cpp/m-system.collections.arr_11_1.cpp)]"
  syntax:
    content: public virtual void Sort ();
    parameters: []
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen."
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  id: Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Sorteert de elementen in de gehele <xref href=&quot;System.Collections.ArrayList&quot;> </xref> met behulp van de opgegeven vergelijkingsfunctie."
  remarks: "Gebruik de methode Sort te sorteren van een lijst met objecten met een aangepaste vergelijkingsfunctie waarmee de <xref:System.Collections.IComparer>interface.</xref:System.Collections.IComparer> Als u doorgeeft `null` voor `comparer`, deze methode maakt gebruik van de <xref:System.IComparable>uitvoering van elk element.</xref:System.IComparable> In dit geval moet u ervoor zorgen dat de objecten in de lijst implementeert de <xref:System.Collections.IComparer>-interface of een uitzondering wordt uitgevoerd.</xref:System.Collections.IComparer>       Bovendien met behulp van de <xref:System.IComparable>implementatie betekent de lijst sorteert vergelijking (ook wel een instabiele sorteren); dat wil zeggen, als twee elementen gelijk zijn, de volgorde mogelijk niet worden bewaard.</xref:System.IComparable> Een stabiele sortering bewaart daarentegen de volgorde van elementen die gelijk zijn. Als u een stabiele sortering, moet u een aangepaste implementeren <xref:System.Collections.IComparer>interface.</xref:System.Collections.IComparer>       Gemiddeld deze methode een O is (`n` logboek `n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>; in het ergste geval een O is (`n`^&2;) bewerking.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to sort the values in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/cpp/m-system.collections.arr_16_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/csharp/m-system.collections.arr_16_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_2#1](~/add/codesnippet/visualbasic/m-system.collections.arr_16_1.vb)]"
  syntax:
    content: public virtual void Sort (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "De <xref:System.Collections.IComparer>implementatie moet worden gebruikt bij het vergelijken van elementen.</xref:System.Collections.IComparer>       - of - een null-verwijzing (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> in Visual Basic) te gebruiken de <xref:System.IComparable>uitvoering van elk element.</xref:System.IComparable>"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Er is een fout opgetreden bij het vergelijken van twee elementen."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>wordt doorgegeven voor <code> comparer </code>, en de elementen in de lijst <xref:System.IComparable>.</xref:System.IComparable> niet wordt geÃ¯mplementeerd"
  platform:
  - net462
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Sorteert de elementen in een bereik van elementen in <xref href=&quot;System.Collections.ArrayList&quot;> </xref> met behulp van de opgegeven vergelijkingsfunctie."
  remarks: "Als `comparer` is ingesteld op `null`, deze methode sorteert vergelijking (ook wel een instabiele sorteren); dat wil zeggen, als twee elementen gelijk zijn, de volgorde mogelijk niet worden bewaard. Een stabiele sortering bewaart daarentegen de volgorde van elementen die gelijk zijn. Als u een stabiele sortering, moet u een aangepaste implementeren <xref:System.Collections.IComparer>interface.</xref:System.Collections.IComparer>       Gemiddeld deze methode is een O (`n` logboek `n`)-bewerking, waarbij `n` is `count`; in het ergste geval is een bewerking O(n^2)."
  example:
  - "The following code example shows how to sort the values in a range of elements in an <xref:System.Collections.ArrayList> using the default comparer and a custom comparer that reverses the sort order.  \n  \n [!code-cpp[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/cpp/b0a7df76-2f5d-45d4-bb7a-_1.cpp)]\n [!code-cs[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/csharp/b0a7df76-2f5d-45d4-bb7a-_1.cs)]\n [!code-vb[System.Collections.ArrayList.Sort_3#1](~/add/codesnippet/visualbasic/b0a7df76-2f5d-45d4-bb7a-_1.vb)]"
  syntax:
    content: public virtual void Sort (int index, int count, System.Collections.IComparer comparer);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde startIndex van het bereik te sorteren."
    - id: count
      type: System.Int32
      description: "De lengte van het bereik te sorteren."
    - id: comparer
      type: System.Collections.IComparer
      description: "De <xref:System.Collections.IComparer>implementatie moet worden gebruikt bij het vergelijken van elementen.</xref:System.Collections.IComparer>       - of - een null-verwijzing (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref> in Visual Basic) te gebruiken de <xref:System.IComparable>uitvoering van elk element.</xref:System.IComparable>"
  overload: System.Collections.ArrayList.Sort*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul.       - of - <code>count</code> is kleiner dan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>en <code>count</code> Geef een geldig bereik in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Er is een fout opgetreden bij het vergelijken van twee elementen."
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  id: Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert een <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper die is gesynchroniseerd (thread-veilig)."
  remarks: "Om te waarborgen van de veiligheid van de thread van de <xref:System.Collections.ArrayList>, moeten alle bewerkingen worden uitgevoerd via deze wrapper.</xref:System.Collections.ArrayList>       Inventariseren door middel van een verzameling is intrinsiek niet een thread-veilige procedure. Zelfs wanneer een verzameling wordt gesynchroniseerd, andere threads kunnen nog steeds de verzameling niet wijzigen, waardoor de enumerator is een uitzondering. Om te garanderen thread veiligheid tijdens de opsomming, moet u de verzameling tijdens de gehele opsomming vergrendelen of het gevolg van wijzigingen die door andere threads uitzonderingen wordt onderschept."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_25_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_25_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_25_1.cs)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize an <xref:System.Collections.ArrayList>, determine if an <xref:System.Collections.ArrayList> is synchronized and use a synchronized <xref:System.Collections.ArrayList>.  \n  \n [!code-vb[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_25_2.vb)]\n [!code-cpp[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.arr_25_2.cpp)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.arr_25_2.cs)]"
  syntax:
    content: public static System.Collections.ArrayList Synchronized (System.Collections.ArrayList list);
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> om te synchroniseren."
    return:
      type: System.Collections.ArrayList
      description: "Een <xref href=&quot;System.Collections.ArrayList&quot;> </xref> wrapper die is gesynchroniseerd (thread-veilig)."
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  id: Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert een <xref:System.Collections.IList>wrapper die is gesynchroniseerd (thread-veilig).</xref:System.Collections.IList>"
  remarks: "Om te waarborgen van de veiligheid van de thread van de <xref:System.Collections.ArrayList>, moeten alle bewerkingen worden uitgevoerd via deze wrapper.</xref:System.Collections.ArrayList>       Inventariseren door middel van een verzameling is intrinsiek niet een thread-veilige procedure. Zelfs wanneer een verzameling wordt gesynchroniseerd, andere threads kunnen nog steeds de verzameling niet wijzigen, waardoor de enumerator is een uitzondering. Om te garanderen thread veiligheid tijdens de opsomming, moet u de verzameling tijdens de gehele opsomming vergrendelen of het gevolg van wijzigingen die door andere threads uitzonderingen wordt onderschept."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ArrayList.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.arr_23_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.arr_23_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.arr_23_1.cs)]  \n  \n This method is an O(1) operation."
  syntax:
    content: public static System.Collections.IList Synchronized (System.Collections.IList list);
    parameters:
    - id: list
      type: System.Collections.IList
      description: "De <xref:System.Collections.IList>om te synchroniseren.</xref:System.Collections.IList>"
    return:
      type: System.Collections.IList
      description: "Een <xref:System.Collections.IList>wrapper die is gesynchroniseerd (thread-veilig).</xref:System.Collections.IList>"
  overload: System.Collections.ArrayList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.ArrayList.SyncRoot
  id: SyncRoot
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Haalt een object dat kan worden gebruikt voor het synchroniseren van toegang tot de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Maken van een gesynchroniseerde versie van de <xref:System.Collections.ArrayList>, gebruiken de <xref:System.Collections.ArrayList.Synchronized%2A>methode.</xref:System.Collections.ArrayList.Synchronized%2A> </xref:System.Collections.ArrayList> Afgeleide klassen kunnen evenwel de eigen gesynchroniseerde versie van de <xref:System.Collections.ArrayList>met behulp van de eigenschap SyncRoot.</xref:System.Collections.ArrayList> De code voor het synchroniseren moet bewerkingen uitvoeren op de SyncRoot van de <xref:System.Collections.ArrayList>, niet rechtstreeks op de <xref:System.Collections.ArrayList>.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList> Dit zorgt ervoor dat de juiste werking van de verzamelingen die zijn afgeleid van andere objecten. In het bijzonder houdt juiste synchronisatie met andere threads dat tegelijkertijd kan worden wijzigt de <xref:System.Collections.ArrayList>object.</xref:System.Collections.ArrayList>       Inventariseren door middel van een verzameling is intrinsiek niet een thread-veilige procedure. Zelfs wanneer een verzameling wordt gesynchroniseerd, andere threads kunnen nog steeds de verzameling niet wijzigen, waardoor de enumerator is een uitzondering. Om te garanderen thread veiligheid tijdens de opsomming, moet u de verzameling tijdens de gehele opsomming vergrendelen of het gevolg van wijzigingen die door andere threads uitzonderingen wordt onderschept."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \n  \n [!code-cpp[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.arr_4_1.cpp)]\n [!code-vb[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.arr_4_1.vb)]\n [!code-cs[Classic ArrayList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.arr_4_1.cs)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Een object dat kan worden gebruikt voor het synchroniseren van toegang tot de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray
  id: ToArray
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopieert de elementen van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> naar een nieuwe <xref:System.Object>matrix.</xref:System.Object>"
  remarks: "De elementen zijn gekopieerd met behulp van <xref:System.Array.Copy%2A?displayProperty=fullName>, namelijk een O (`n`) bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  syntax:
    content: public virtual object[] ToArray ();
    parameters: []
    return:
      type: System.Object[]
      description: "Een <xref:System.Object>matrix met kopieÃ«n van de elementen van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>.</xref:System.Object>"
  overload: System.Collections.ArrayList.ToArray*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.ArrayList.ToArray(System.Type)
  id: ToArray(System.Type)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopieert de elementen van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> naar een nieuwe matrix van het opgegeven elementtype."
  remarks: "Alle objecten in de <xref:System.Collections.ArrayList>object wordt geconverteerd naar de <xref:System.Type>opgegeven in de `type` parameter.</xref:System.Type> </xref:System.Collections.ArrayList>       De elementen zijn gekopieerd met behulp van <xref:System.Array.Copy%2A?displayProperty=fullName>, namelijk een O (`n`) bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A> </xref:System.Array.Copy%2A?displayProperty=fullName>"
  example:
  - "The following copy example shows how to copy the elements of an <xref:System.Collections.ArrayList> to a string array.  \n  \n [!code-cs[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/csharp/m-system.collections.arr_17_1.cs)]\n [!code-cpp[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/cpp/m-system.collections.arr_17_1.cpp)]\n [!code-vb[System.Collections.ArrayList.ToArray#1](~/add/codesnippet/visualbasic/m-system.collections.arr_17_1.vb)]"
  syntax:
    content: public virtual Array ToArray (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "Het element <xref:System.Type>van de doelmatrix maken en elementen te kopiÃ«ren.</xref:System.Type>"
    return:
      type: System.Array
      description: "Een matrix van het opgegeven elementtype met kopieÃ«n van de elementen van de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  overload: System.Collections.ArrayList.ToArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Het type van de bron <xref href=&quot;System.Collections.ArrayList&quot;> </xref> kan niet automatisch worden geconverteerd naar het opgegeven type."
  platform:
  - net462
- uid: System.Collections.ArrayList.TrimToSize
  id: TrimToSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee stelt u de capaciteit aan het werkelijke aantal elementen in de <xref href=&quot;System.Collections.ArrayList&quot;> </xref>."
  remarks: "Deze methode kan worden gebruikt om te minimaliseren van een verzameling geheugen overhead als er geen nieuwe elementen wordt toegevoegd aan de verzameling.       Om in te stellen een <xref:System.Collections.ArrayList>aanroepen naar de oorspronkelijke staat de <xref:System.Collections.ArrayList.Clear%2A>methode voordat u TrimToSize aanroept.</xref:System.Collections.ArrayList.Clear%2A> </xref:System.Collections.ArrayList> Een lege bijsnijden <xref:System.Collections.ArrayList>Hiermee stelt u de capaciteit van de <xref:System.Collections.ArrayList>naar de standaardcapaciteit.</xref:System.Collections.ArrayList> </xref:System.Collections.ArrayList>       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.ArrayList.Count%2A>.</xref:System.Collections.ArrayList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of the <xref:System.Collections.ArrayList> and how to clear the values of the <xref:System.Collections.ArrayList>.  \n  \n [!code-cs[Classic ArrayList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.arr_8_1.cs)]\n [!code-cpp[Classic ArrayList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.arr_8_1.cpp)]\n [!code-vb[Classic ArrayList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.arr_8_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.ArrayList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.ArrayList&quot;> </xref> is alleen-lezen.       - of - de <xref href=&quot;System.Collections.ArrayList&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.ArrayList.#ctor
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(ICollection)
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(IList)
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ArrayList.Add(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(Object)
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(ICollection)
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(Object)
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Object,IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch(Int32,Int32,Object,IComparer)
  nameWithType: ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(Int32,Int32,Object,IComparer)
- uid: System.Collections.ArrayList.Capacity
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
- uid: System.Collections.ArrayList.Clone
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
- uid: System.Collections.ArrayList.Contains(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(Array)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: ArrayList.CopyTo(Array,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Array,Int32)
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo(Int32,Array,Int32,Int32)
  nameWithType: ArrayList.CopyTo(Int32,Array,Int32,Int32)
  fullName: System.Collections.ArrayList.CopyTo(Int32,Array,Int32,Int32)
- uid: System.Collections.ArrayList.Count
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(ArrayList)
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(IList)
- uid: System.Collections.ArrayList.GetEnumerator
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator(Int32,Int32)
  nameWithType: ArrayList.GetEnumerator(Int32,Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(Int32,Int32)
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange(Int32,Int32)
  nameWithType: ArrayList.GetRange(Int32,Int32)
  fullName: System.Collections.ArrayList.GetRange(Int32,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(Object)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32)
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.IndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.IndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert(Int32,Object)
  nameWithType: ArrayList.Insert(Int32,Object)
  fullName: System.Collections.ArrayList.Insert(Int32,Object)
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange(Int32,ICollection)
  nameWithType: ArrayList.InsertRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.InsertRange(Int32,ICollection)
- uid: System.Collections.ArrayList.IsFixedSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item(Int32)
  nameWithType: ArrayList.Item(Int32)
  fullName: System.Collections.ArrayList.Item(Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(Object)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32)
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf(Object,Int32,Int32)
  nameWithType: ArrayList.LastIndexOf(Object,Int32,Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(Object,Int32,Int32)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(ArrayList)
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(IList)
- uid: System.Collections.ArrayList.Remove(System.Object)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(Object)
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(Int32)
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange(Int32,Int32)
  nameWithType: ArrayList.RemoveRange(Int32,Int32)
  fullName: System.Collections.ArrayList.RemoveRange(Int32,Int32)
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat(Object,Int32)
  nameWithType: ArrayList.Repeat(Object,Int32)
  fullName: System.Collections.ArrayList.Repeat(Object,Int32)
- uid: System.Collections.ArrayList.Reverse
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse(Int32,Int32)
  nameWithType: ArrayList.Reverse(Int32,Int32)
  fullName: System.Collections.ArrayList.Reverse(Int32,Int32)
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange(Int32,ICollection)
  nameWithType: ArrayList.SetRange(Int32,ICollection)
  fullName: System.Collections.ArrayList.SetRange(Int32,ICollection)
- uid: System.Collections.ArrayList.Sort
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(IComparer)
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort(Int32,Int32,IComparer)
  nameWithType: ArrayList.Sort(Int32,Int32,IComparer)
  fullName: System.Collections.ArrayList.Sort(Int32,Int32,IComparer)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(ArrayList)
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(IList)
- uid: System.Collections.ArrayList.SyncRoot
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.ArrayList.ToArray(System.Type)
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.ArrayList.TrimToSize
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
- uid: System.Collections.ArrayList.#ctor*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList.ArrayList
- uid: System.Collections.ArrayList.Adapter*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Adapter
  nameWithType: ArrayList.Adapter
- uid: System.Collections.ArrayList.Add*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Add
  nameWithType: ArrayList.Add
- uid: System.Collections.ArrayList.AddRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: AddRange
  nameWithType: ArrayList.AddRange
- uid: System.Collections.ArrayList.BinarySearch*
  parent: System.Collections.ArrayList
  isExternal: false
  name: BinarySearch
  nameWithType: ArrayList.BinarySearch
- uid: System.Collections.ArrayList.Capacity*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Capacity
  nameWithType: ArrayList.Capacity
- uid: System.Collections.ArrayList.Clear*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clear
  nameWithType: ArrayList.Clear
- uid: System.Collections.ArrayList.Clone*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Clone
  nameWithType: ArrayList.Clone
- uid: System.Collections.ArrayList.Contains*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Contains
  nameWithType: ArrayList.Contains
- uid: System.Collections.ArrayList.CopyTo*
  parent: System.Collections.ArrayList
  isExternal: false
  name: CopyTo
  nameWithType: ArrayList.CopyTo
- uid: System.Collections.ArrayList.Count*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Count
  nameWithType: ArrayList.Count
- uid: System.Collections.ArrayList.FixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: FixedSize
  nameWithType: ArrayList.FixedSize
- uid: System.Collections.ArrayList.GetEnumerator*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetEnumerator
  nameWithType: ArrayList.GetEnumerator
- uid: System.Collections.ArrayList.GetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: GetRange
  nameWithType: ArrayList.GetRange
- uid: System.Collections.ArrayList.IndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IndexOf
  nameWithType: ArrayList.IndexOf
- uid: System.Collections.ArrayList.Insert*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Insert
  nameWithType: ArrayList.Insert
- uid: System.Collections.ArrayList.InsertRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: InsertRange
  nameWithType: ArrayList.InsertRange
- uid: System.Collections.ArrayList.IsFixedSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
- uid: System.Collections.ArrayList.IsReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
- uid: System.Collections.ArrayList.IsSynchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
- uid: System.Collections.ArrayList.Item*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Item
  nameWithType: ArrayList.Item
- uid: System.Collections.ArrayList.LastIndexOf*
  parent: System.Collections.ArrayList
  isExternal: false
  name: LastIndexOf
  nameWithType: ArrayList.LastIndexOf
- uid: System.Collections.ArrayList.ReadOnly*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ReadOnly
  nameWithType: ArrayList.ReadOnly
- uid: System.Collections.ArrayList.Remove*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Remove
  nameWithType: ArrayList.Remove
- uid: System.Collections.ArrayList.RemoveAt*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveAt
  nameWithType: ArrayList.RemoveAt
- uid: System.Collections.ArrayList.RemoveRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: RemoveRange
  nameWithType: ArrayList.RemoveRange
- uid: System.Collections.ArrayList.Repeat*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Repeat
  nameWithType: ArrayList.Repeat
- uid: System.Collections.ArrayList.Reverse*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Reverse
  nameWithType: ArrayList.Reverse
- uid: System.Collections.ArrayList.SetRange*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SetRange
  nameWithType: ArrayList.SetRange
- uid: System.Collections.ArrayList.Sort*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Sort
  nameWithType: ArrayList.Sort
- uid: System.Collections.ArrayList.Synchronized*
  parent: System.Collections.ArrayList
  isExternal: false
  name: Synchronized
  nameWithType: ArrayList.Synchronized
- uid: System.Collections.ArrayList.SyncRoot*
  parent: System.Collections.ArrayList
  isExternal: false
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
- uid: System.Collections.ArrayList.ToArray*
  parent: System.Collections.ArrayList
  isExternal: false
  name: ToArray
  nameWithType: ArrayList.ToArray
- uid: System.Collections.ArrayList.TrimToSize*
  parent: System.Collections.ArrayList
  isExternal: false
  name: TrimToSize
  nameWithType: ArrayList.TrimToSize
