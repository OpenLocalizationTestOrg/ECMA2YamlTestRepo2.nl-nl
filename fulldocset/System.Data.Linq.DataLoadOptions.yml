### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.DataLoadOptions
  id: DataLoadOptions
  children:
  - System.Data.Linq.DataLoadOptions.#ctor
  - System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)
  - System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  - System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)
  - System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  langs:
  - csharp
  name: DataLoadOptions
  nameWithType: DataLoadOptions
  fullName: System.Data.Linq.DataLoadOptions
  type: Class
  summary: "Biedt om direct te laden en gerelateerde gegevens filteren."
  remarks: "##Algemene wanneer u een query voor een object, u alleen het opgevraagde object op te halen. De *gerelateerde* objecten worden niet automatisch is opgehaald op hetzelfde moment. (Zie voor meer informatie [opvragen via relaties](~/add/includes/ajax-current-ext-md.md).)       De klasse DataLoadOptions biedt twee methoden voor het bereiken van direct bij het laden van de opgegeven gerelateerde gegevens. De <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>methode kunt u direct laden van gegevens met betrekking tot het belangrijkste doel.</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> De <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A>methode voor het filteren van verwante objecten kunt.</xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A>      ## Regels Let op de volgende regels met betrekking tot DataLoadOptions gebruik:-het toewijzen van een DataLoadOptions naar een <xref:System.Data.Linq.DataContext>nadat de eerste query is uitgevoerd, genereert een uitzondering.</xref:System.Data.Linq.DataContext>      -Een DataLoadOptions wijzigen nadat deze is toegewezen aan een <xref:System.Data.Linq.DataContext>genereert een uitzondering ## cyclus verwerken <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>en <xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A>richtlijnen moeten cycli niet maken.</xref:System.Data.Linq.DataLoadOptions.AssociateWith%2A> </xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> </xref:System.Data.Linq.DataContext> De volgende voorbeelden van dergelijke grafieken vertegenwoordigen:-voorbeeld 1: Self recursieve - `dlo.LoadWith<Employee>(e => e.Reports);` -voorbeeld 2: Back-aanwijzers - `dlo.LoadWith <Customer>(c => C.Orders);`           -    `dlo.LoadWith <Order>(o => o.Customer);` -voorbeeld 3: langer cycli Hoewel dit niet in een goed genormaliseerde model gebeurt, is het mogelijk.          - `dlo.LoadWith <A>(a => a.Bs);`           -    `dlo.LoadWith <B>(b => b.Cs);`           -    `dlo.LoadWith <C>(c => c.As);` -Voorbeeld 4: Self recursieve subquery&quot;s - `dlo.AssociateWith<A>(a=>a.As.Where(a=>a.Id=33));` -voorbeeld 5: langer recursieve subquery&quot;s - `dlo.AssociateWith<A>(a=>a.Bs.Where(b=>b.Id==3));`           -    `dlo.AssociateWith<B>(b=>b.As.Where(a=>a.Id==3));` hieronder vindt u enkele algemene regels die u helpen begrijpen wat er gebeurt in deze scenario&quot;s.       **LoadWith** elke aanroep van <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>controleert of cycli zijn ge√Øntroduceerd in de grafiek.</xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> Als er, zoals in de voorbeelden 1, 2 en 3 een uitzondering is opgetreden.       **AssociateWith** de motor tijdens de uitvoering niet de bestaande SubQuery kunnen van toepassing op de relatie in de expressie.      -In voorbeeld 4, de `Where` component wordt uitgevoerd tegen alle `A`, niet alleen de resources subplan gefilterd door de SubQuery expressie zelf (omdat die recursieve) - In voorbeeld 5, de eerste `Where` component wordt toegepast op alle de `B`s, zelfs als er subquery&quot;s zijn op `B`. De tweede `Where` component wordt toegepast op alle de `A`subquery&quot;s s, zelfs als er op `A`."
  example:
  - When you retrieve `Customers` from the Northwind sample database, you can use DataLoadOptions to specify that `Orders` is also to be retrieved. You can even specify which subset of `Orders` to retrieve.
  syntax:
    content: public sealed class DataLoadOptions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.#ctor
  id: '#ctor'
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: DataLoadOptions()
  nameWithType: DataLoadOptions.DataLoadOptions()
  fullName: System.Data.Linq.DataLoadOptions.DataLoadOptions()
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Data.Linq.DataLoadOptions&quot;> </xref> klasse."
  syntax:
    content: public DataLoadOptions ();
    parameters: []
  overload: System.Data.Linq.DataLoadOptions.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)
  id: AssociateWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: AssociateWith(LambdaExpression)
  nameWithType: DataLoadOptions.AssociateWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(LambdaExpression)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Filtert de objecten die zijn opgehaald voor een bepaalde relatie."
  remarks: "In het volgende voorbeeld wordt de binnenste lus doorloopt alleen via de `Orders` die niet nu zijn verzonden."
  example:
  - >-
    [!code-vb[System.Data.Linq.DataLoadOptions#1](~/add/codesnippet/visualbasic/snip/module1.vb#1)]
     [!code-cs[System.Data.Linq.DataLoadOptions#1](~/add/codesnippet/csharp/testmakenew/program.cs#1)]
  syntax:
    content: public void AssociateWith (System.Linq.Expressions.LambdaExpression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: "De query moet worden gebruikt op een bepaald een-op-veel-veld of eigenschap identificeert. Let op het volgende: als de expressie niet met een veld of eigenschap die een een-op-veel-relatie vertegenwoordigt begint, wordt een uitzondering gegenereerd.       Als een operator dan een geldige operator wordt weergegeven in de expressie, wordt een uitzondering opgetreden. Geldige operatoren zijn als volgt: waarin OrderBy ThenBy OrderByDescending ThenByDescending uitvoeren"
  overload: System.Data.Linq.DataLoadOptions.AssociateWith*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: AssociateWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public void AssociateWith<T> (System.Linq.Expressions.Expression<Func<T,object>> expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "Moet worden toegevoegd."
  overload: System.Data.Linq.DataLoadOptions.AssociateWith<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)
  id: LoadWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: LoadWith(LambdaExpression)
  nameWithType: DataLoadOptions.LoadWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(LambdaExpression)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "Haalt gegevens met betrekking tot het belangrijkste doel met behulp van een lambda-expressie opgegeven."
  remarks: "In het volgende voorbeeld alle de `Orders` voor alle de `Customers` die zich bevinden in Londen worden opgehaald wanneer de query wordt uitgevoerd. Als gevolg hiervan, opeenvolgende toegang tot de `Orders` -eigenschap op een `Customer` object niet automatisch een nieuwe databasequery."
  example:
  - >-
    [!code-vb[System.Data.Linq.DataLoadOptions#2](~/add/codesnippet/visualbasic/snip/module1.vb#2)]
     [!code-cs[System.Data.Linq.DataLoadOptions#2](~/add/codesnippet/csharp/testmakenew/program.cs#2)]
  syntax:
    content: public void LoadWith (System.Linq.Expressions.LambdaExpression expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.LambdaExpression
      description: "Een lambda-expressie die het gerelateerde materiaal identificeert."
  overload: System.Data.Linq.DataLoadOptions.LoadWith*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  id: LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  langs:
  - csharp
  name: LoadWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public void LoadWith<T> (System.Linq.Expressions.Expression<Func<T,object>> expression);
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
      description: "Moet worden toegevoegd."
  overload: System.Data.Linq.DataLoadOptions.LoadWith<T>*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.DataLoadOptions.#ctor
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: DataLoadOptions()
  nameWithType: DataLoadOptions.DataLoadOptions()
  fullName: System.Data.Linq.DataLoadOptions.DataLoadOptions()
- uid: System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith(LambdaExpression)
  nameWithType: DataLoadOptions.AssociateWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(LambdaExpression)
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: true
  name: LambdaExpression
  nameWithType: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.AssociateWith(Expression<Func<T,Object>>)
- uid: System.Linq.Expressions.Expression{System.Func{T,System.Object}}
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression<Func<T,Object>>
  nameWithType: Expression<Func<T,Object>>
  fullName: System.Linq.Expressions.Expression<System.Func<T,System.Object>>
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    nameWithType: Expression
    fullName: Expression<System.Func<T,System.Object>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<T,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith(LambdaExpression)
  nameWithType: DataLoadOptions.LoadWith(LambdaExpression)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(LambdaExpression)
- uid: System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith(Expression<Func<T,Object>>)
  nameWithType: DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
  fullName: System.Data.Linq.DataLoadOptions.LoadWith(Expression<Func<T,Object>>)
- uid: System.Data.Linq.DataLoadOptions.#ctor*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: DataLoadOptions
  nameWithType: DataLoadOptions.DataLoadOptions
- uid: System.Data.Linq.DataLoadOptions.AssociateWith*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith
  nameWithType: DataLoadOptions.AssociateWith
- uid: System.Data.Linq.DataLoadOptions.AssociateWith<T>*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: AssociateWith<T>
  nameWithType: DataLoadOptions.AssociateWith<T>
- uid: System.Data.Linq.DataLoadOptions.LoadWith*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith
  nameWithType: DataLoadOptions.LoadWith
- uid: System.Data.Linq.DataLoadOptions.LoadWith<T>*
  parent: System.Data.Linq.DataLoadOptions
  isExternal: false
  name: LoadWith<T>
  nameWithType: DataLoadOptions.LoadWith<T>
