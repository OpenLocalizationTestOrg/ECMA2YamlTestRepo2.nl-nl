### YamlMime:ManagedReference
items:
- uid: System.Windows.Threading.DispatcherObject
  id: DispatcherObject
  children:
  - System.Windows.Threading.DispatcherObject.#ctor
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  langs:
  - csharp
  name: DispatcherObject
  nameWithType: DispatcherObject
  fullName: System.Windows.Threading.DispatcherObject
  type: Class
  summary: "Hiermee geeft u een object dat is gekoppeld aan een <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref>."
  remarks: "Alleen de thread die de <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>is gemaakt op kan rechtstreeks toegang hebben tot de DispatcherObject.</xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>  Aanroepen voor toegang tot een DispatcherObject vanuit een andere thread dan de thread op de DispatcherObject is gemaakt, <xref:System.Windows.Threading.Dispatcher.Invoke%2A>of <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>op de <xref:System.Windows.Threading.Dispatcher>de DispatcherObject is gekoppeld.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A>       Subklassen van DispatcherObject die nodig zijn om af te dwingen thread veiligheid kunnen dit doen door het aanroepen van <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>op alle openbare methoden.</xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>  Wordt gegarandeerd dat de aanroepende thread is de thread waarop het DispatcherObject is gemaakt.       Een DispatcherObject kan niet onafhankelijk worden gemaakt; dat wil zeggen, zijn alle constructors beveiligd.       Objecten die zijn afgeleid van DispatcherObject hebben thread-affiniteit.       Objecten die zijn afgeleid van <xref:System.Windows.Freezable>zijn gratis thread wanneer ze worden bevroren.</xref:System.Windows.Freezable>  Zie voor meer informatie de [Freezable objecten overzicht](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public abstract class DispatcherObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.#ctor
  id: '#ctor'
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: DispatcherObject()
  nameWithType: DispatcherObject.DispatcherObject()
  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref> klasse."
  syntax:
    content: protected DispatcherObject ();
    parameters: []
  overload: System.Windows.Threading.DispatcherObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.CheckAccess
  id: CheckAccess
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: CheckAccess()
  nameWithType: DispatcherObject.CheckAccess()
  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Hiermee wordt bepaald of de aanroepende thread toegang tot dit <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>."
  remarks: "Alleen de thread de <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>is gemaakt op mogelijk toegang tot de <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>       Een willekeurige thread kunt controleren of deze toegang tot deze <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> heeft       Het verschil tussen CheckAccess en <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>is dat CheckAccess retourneert een Booleaanse waarde die aangeeft of de aanroepende thread toegang tot dit heeft <xref:System.Windows.Threading.DispatcherObject>en <xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>genereert een uitzondering als de aanroepende thread geen toegang tot deze heeft <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.VerifyAccess%2A>       Aanroepen van deze methode is identiek aan aanroepen <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>van de gekoppelde <xref:System.Windows.Threading.Dispatcher>object.</xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.CheckAccess%2A>"
  example:
  - "The following example uses CheckAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  The CheckAccess method on the <xref:System.Windows.Controls.Button> is called to verify access to the thread.  If the calling thread has access, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is posted onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.  \n  \n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/visualbasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccesscheckaccess)]\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessCheckAccess](~/add/codesnippet/csharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccesscheckaccess)]"
  syntax:
    content: public bool CheckAccess ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de aanroepende thread toegang tot dit object heeft; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.Threading.DispatcherObject.CheckAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.Dispatcher
  id: Dispatcher
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
  fullName: System.Windows.Threading.DispatcherObject.Dispatcher
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Haalt de <xref href=&quot;System.Windows.Threading.Dispatcher&quot;> </xref> dit <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref> is gekoppeld."
  remarks: "Alleen de thread die de Dispatcher is gemaakt op mogelijk toegang tot de <xref:System.Windows.Threading.DispatcherObject>rechtstreeks.</xref:System.Windows.Threading.DispatcherObject>  Voor toegang tot een <xref:System.Windows.Threading.DispatcherObject>vanuit een andere thread dan de thread de <xref:System.Windows.Threading.DispatcherObject>is gemaakt, roepen <xref:System.Windows.Threading.Dispatcher.Invoke%2A>en <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>op de <xref:System.Windows.Threading.Dispatcher>de <xref:System.Windows.Threading.DispatcherObject>is gekoppeld.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.Dispatcher> </xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> </xref:System.Windows.Threading.Dispatcher.Invoke%2A> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject>"
  syntax:
    content: public System.Windows.Threading.Dispatcher Dispatcher { get; }
    return:
      type: System.Windows.Threading.Dispatcher
      description: "De dispatcher."
  overload: System.Windows.Threading.DispatcherObject.Dispatcher*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess
  id: VerifyAccess
  parent: System.Windows.Threading.DispatcherObject
  langs:
  - csharp
  name: VerifyAccess()
  nameWithType: DispatcherObject.VerifyAccess()
  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows.Threading
  summary: "Wordt afgedwongen dat de aanroepende thread toegang tot dit heeft <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>."
  remarks: "Alleen de thread de <xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>is gemaakt op mogelijk toegang tot de <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.Dispatcher%2A>       Een willekeurige thread kunt controleren of deze toegang tot deze <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> heeft       Het verschil tussen <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>en VerifyAccess is dat <xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>retourneert een Booleaanse waarde die aangeeft of de aanroepende thread toegang tot dit heeft <xref:System.Windows.Threading.DispatcherObject>en VerifyAccess genereert een uitzondering als de aanroepende thread geen toegang tot deze heeft <xref:System.Windows.Threading.DispatcherObject>.</xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject> </xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A> </xref:System.Windows.Threading.DispatcherObject.CheckAccess%2A>"
  example:
  - "The following example uses VerifyAccess to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.  If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.  \n  \n [!code-vb[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/visualbasic/dispatcherobjectaccesssample/window1.xaml.vb#dispatcherobjectaccessverifyaccess)]\n [!code-cs[DispatcherObjectAccessSample#DispatcherObjectAccessVerifyAccess](~/add/codesnippet/csharp/DispatcherObjectAccessSample/Window1.xaml.cs#dispatcherobjectaccessverifyaccess)]"
  syntax:
    content: public void VerifyAccess ();
    parameters: []
  overload: System.Windows.Threading.DispatcherObject.VerifyAccess*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "de aanroepende thread heeft geen toegang tot dit <xref href=&quot;System.Windows.Threading.DispatcherObject&quot;> </xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Threading.DispatcherObject.#ctor
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: DispatcherObject()
  nameWithType: DispatcherObject.DispatcherObject()
  fullName: System.Windows.Threading.DispatcherObject.DispatcherObject()
- uid: System.Windows.Threading.DispatcherObject.CheckAccess
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: CheckAccess()
  nameWithType: DispatcherObject.CheckAccess()
  fullName: System.Windows.Threading.DispatcherObject.CheckAccess()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Threading.DispatcherObject.Dispatcher
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
  fullName: System.Windows.Threading.DispatcherObject.Dispatcher
- uid: System.Windows.Threading.Dispatcher
  parent: System.Windows.Threading
  isExternal: false
  name: Dispatcher
  nameWithType: Dispatcher
  fullName: System.Windows.Threading.Dispatcher
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: VerifyAccess()
  nameWithType: DispatcherObject.VerifyAccess()
  fullName: System.Windows.Threading.DispatcherObject.VerifyAccess()
- uid: System.Windows.Threading.DispatcherObject.#ctor*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: DispatcherObject
  nameWithType: DispatcherObject.DispatcherObject
- uid: System.Windows.Threading.DispatcherObject.CheckAccess*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: CheckAccess
  nameWithType: DispatcherObject.CheckAccess
- uid: System.Windows.Threading.DispatcherObject.Dispatcher*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: Dispatcher
  nameWithType: DispatcherObject.Dispatcher
- uid: System.Windows.Threading.DispatcherObject.VerifyAccess*
  parent: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: VerifyAccess
  nameWithType: DispatcherObject.VerifyAccess
