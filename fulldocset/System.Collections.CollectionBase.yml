### YamlMime:ManagedReference
items:
- uid: System.Collections.CollectionBase
  id: CollectionBase
  children:
  - System.Collections.CollectionBase.#ctor
  - System.Collections.CollectionBase.#ctor(System.Int32)
  - System.Collections.CollectionBase.Capacity
  - System.Collections.CollectionBase.Clear
  - System.Collections.CollectionBase.Count
  - System.Collections.CollectionBase.GetEnumerator
  - System.Collections.CollectionBase.InnerList
  - System.Collections.CollectionBase.List
  - System.Collections.CollectionBase.OnClear
  - System.Collections.CollectionBase.OnClearComplete
  - System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnValidate(System.Object)
  - System.Collections.CollectionBase.RemoveAt(System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  - System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  - System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  - System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  - System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  name: CollectionBase
  nameWithType: CollectionBase
  fullName: System.Collections.CollectionBase
  type: Class
  summary: "Biedt de <xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;> </xref> basisklasse voor een sterk getypeerde verzameling."
  remarks: "Een exemplaar CollectionBase kan altijd worden gewijzigd. Zie <xref:System.Collections.ReadOnlyCollectionBase>voor een alleen-lezen-versie van deze klasse.</xref:System.Collections.ReadOnlyCollectionBase>       De capaciteit van een CollectionBase is het aantal elementen die de CollectionBase kan bevatten. Wanneer elementen worden toegevoegd aan een CollectionBase, de capaciteit automatisch wordt verhoogd door Hertoewijzing zoals wordt vereist. De capaciteit kan worden verlaagd door in te stellen de <xref:System.Collections.CollectionBase.Capacity%2A>eigenschap expliciet.</xref:System.Collections.CollectionBase.Capacity%2A>"
  example:
  - "The following code example implements the CollectionBase class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/t-system.collections.col_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/t-system.collections.col_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/t-system.collections.col_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class CollectionBase : System.Collections.IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.#ctor
  id: '#ctor'
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: CollectionBase()
  nameWithType: CollectionBase.CollectionBase()
  fullName: System.Collections.CollectionBase.CollectionBase()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> klasse met de initiële standaardcapaciteit."
  remarks: "De capaciteit van een <xref:System.Collections.CollectionBase>is het aantal elementen die de <xref:System.Collections.CollectionBase>kan bevatten.</xref:System.Collections.CollectionBase> </xref:System.Collections.CollectionBase> Wanneer elementen worden toegevoegd aan een <xref:System.Collections.CollectionBase>, de capaciteit automatisch verhoogd zoals wordt vereist door het opnieuw toewijzen van de interne matrix.</xref:System.Collections.CollectionBase>       Als de grootte van de verzameling kan worden geschat, voorkomen geven de begincapaciteit moet een aantal formaatwijzigingen bij het toevoegen van elementen in de <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase> uitvoeren       Deze constructor is een bewerking O(1)."
  syntax:
    content: protected CollectionBase ();
    parameters: []
  overload: System.Collections.CollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: CollectionBase(Int32)
  nameWithType: CollectionBase.CollectionBase(Int32)
  fullName: System.Collections.CollectionBase.CollectionBase(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> klasse met de opgegeven capaciteit."
  remarks: "De capaciteit van een <xref:System.Collections.CollectionBase>is het aantal elementen die de <xref:System.Collections.CollectionBase>kan bevatten.</xref:System.Collections.CollectionBase> </xref:System.Collections.CollectionBase> Wanneer elementen worden toegevoegd aan een <xref:System.Collections.CollectionBase>, de capaciteit automatisch verhoogd zoals wordt vereist door het opnieuw toewijzen van de interne matrix.</xref:System.Collections.CollectionBase>       Als de grootte van de verzameling kan worden geschat, voorkomen geven de begincapaciteit moet een aantal formaatwijzigingen bij het toevoegen van elementen in de <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase> uitvoeren       Deze constructor is een O (`n`)-bewerking, waarbij `n` is `capacity`."
  syntax:
    content: protected CollectionBase (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "Het aantal elementen dat de nieuwe lijst kan in eerste instantie worden opgeslagen."
  overload: System.Collections.CollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.Capacity
  id: Capacity
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: Capacity
  nameWithType: CollectionBase.Capacity
  fullName: System.Collections.CollectionBase.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Opgehaald of ingesteld van het aantal elementen die de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> kan bevatten."
  remarks: "Capaciteit is het aantal elementen die de <xref:System.Collections.CollectionBase>kunt opslaan.</xref:System.Collections.CollectionBase> <xref:System.Collections.CollectionBase.Count%2A>is het aantal elementen daadwerkelijk in de <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase></xref:System.Collections.CollectionBase.Count%2A>       Capaciteit is altijd groter dan of gelijk zijn aan <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A> Als <xref:System.Collections.CollectionBase.Count%2A>dan er capaciteit is tijdens het toevoegen van elementen, de capaciteit wordt automatisch verhoogd met het opnieuw toewijzen van de interne matrix voordat de oude elementen kopiëren en toevoegen van nieuwe elementen.</xref:System.Collections.CollectionBase.Count%2A>       De capaciteit kan door de eigenschap capaciteit expliciet worden verlaagd. Wanneer de waarde van de capaciteit is expliciet ingesteld, wordt de interne matrix ook opnieuw toegewezen aan de opgegeven capaciteit.       Ophalen van de waarde van deze eigenschap is een bewerking O(1); de eigenschap is een O (`n`)-bewerking, waarbij `n` is de nieuwe capaciteit."
  syntax:
    content: public int Capacity { get; set; }
    return:
      type: System.Int32
      description: "Het aantal elementen die de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> kan bevatten."
  overload: System.Collections.CollectionBase.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Capaciteit is ingesteld op een waarde die kleiner is dan <xref:System.Collections.CollectionBase.Count*>.</xref:System.Collections.CollectionBase.Count*>"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Er is onvoldoende geheugen beschikbaar op het systeem."
  platform:
  - net462
- uid: System.Collections.CollectionBase.Clear
  id: Clear
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: Clear()
  nameWithType: CollectionBase.Clear()
  fullName: System.Collections.CollectionBase.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee verwijdert u alle objecten van de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar. Deze methode kan niet worden overschreven."
  remarks: "<xref:System.Collections.CollectionBase.Count%2A>is ingesteld op nul.</xref:System.Collections.CollectionBase.Count%2A>       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>       Om aangepaste acties uitvoeren vóór of na de verzameling is uitgeschakeld, overschrijven de beveiligde <xref:System.Collections.CollectionBase.OnClear%2A>of <xref:System.Collections.CollectionBase.OnClearComplete%2A>methode.</xref:System.Collections.CollectionBase.OnClearComplete%2A> </xref:System.Collections.CollectionBase.OnClear%2A>"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.CollectionBase.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.Count
  id: Count
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: Count
  nameWithType: CollectionBase.Count
  fullName: System.Collections.CollectionBase.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee wordt het aantal elementen in de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar. Deze eigenschap kan niet worden overschreven."
  remarks: ''
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/p-system.collections.col_0_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/p-system.collections.col_0_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/p-system.collections.col_0_1.vb)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Het aantal elementen in de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar.       Ophalen van de waarde van deze eigenschap is een O(1)-bewerking."
  overload: System.Collections.CollectionBase.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: CollectionBase.GetEnumerator()
  fullName: System.Collections.CollectionBase.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert een enumerator die doorloopt de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar."
  remarks: "[Visual Basic C#]       De `foreach` -instructie van de taal C# (`for each` in Visual Basic) de complexiteit van de opsommingen worden verborgen.  Daarom kan het gebruik `foreach` wordt aanbevolen, in plaats van rechtstreeks bewerken van de enumerator.       Enumerators kunnen worden gebruikt om de gegevens in de verzameling te lezen, maar ze kunnen niet worden gebruikt om de onderliggende verzameling niet wijzigen.       In eerste instantie bevindt de enumerator zich vóór het eerste element in de verzameling. <xref:System.Collections.IEnumerator.Reset%2A>brengt ook de enumerator terug naar deze positie.</xref:System.Collections.IEnumerator.Reset%2A> Op deze functie, het aanroepen van <xref:System.Collections.IEnumerator.Current%2A>er een uitzondering gegenereerd.</xref:System.Collections.IEnumerator.Current%2A> U moet daarom aanroepen <xref:System.Collections.IEnumerator.MoveNext%2A>om door te gaan van de enumerator voor het eerste element van de verzameling voordat het lezen van <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>retourneert de hetzelfde object totdat de <xref:System.Collections.IEnumerator.MoveNext%2A>of <xref:System.Collections.IEnumerator.Reset%2A>wordt aangeroepen.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Hiermee stelt u <xref:System.Collections.IEnumerator.Current%2A>naar het volgende element.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Als <xref:System.Collections.IEnumerator.MoveNext%2A>geeft het einde van de verzameling, de enumerator bevindt zich na het laatste element in de verzameling en <xref:System.Collections.IEnumerator.MoveNext%2A>retourneert `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Wanneer de enumerator is op deze positie, volgende aanroepen naar <xref:System.Collections.IEnumerator.MoveNext%2A>ook retourneren `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Als de laatste aanroep aan <xref:System.Collections.IEnumerator.MoveNext%2A>geretourneerd `false`, aanroepende <xref:System.Collections.IEnumerator.Current%2A>er een uitzondering gegenereerd.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>U kunt naar het eerste element van de verzameling opnieuw aanroepen <xref:System.Collections.IEnumerator.Reset%2A>gevolgd door <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> instellen       Een enumerator blijft geldig zolang de verzameling ongewijzigd blijft. Als er wijzigingen zijn aangebracht aan de verzameling, zoals het toevoegen, wijzigen of verwijderen van elementen, in de enumerator permanent ongeldig wordt gemaakt en de volgende aanroep aan <xref:System.Collections.IEnumerator.MoveNext%2A>of <xref:System.Collections.IEnumerator.Reset%2A>er een <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Als de verzameling is gewijzigd tussen <xref:System.Collections.IEnumerator.MoveNext%2A>en <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>retourneert het element dat is ingesteld op, zelfs als de enumerator is al ongeldig gemaakt.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       De enumerator heeft geen exclusieve toegang tot de verzameling; inventariseren door middel van een verzameling is daarom niet intrinsiek een thread-veilige procedure. Zelfs wanneer een verzameling wordt gesynchroniseerd, andere threads kunnen nog steeds de verzameling niet wijzigen, waardoor de enumerator is een uitzondering. Om te garanderen thread veiligheid tijdens de opsomming, moet u de verzameling tijdens de gehele opsomming vergrendelen of het gevolg van wijzigingen die door andere threads uitzonderingen wordt onderschept.       Terwijl de GetEnumerator-methode niet zichtbaar voor de COM-clients standaard is, overnemen van de <xref:System.Collections.CollectionBase>klasse kan worden weergegeven en kan ongewenst gedrag veroorzaken in COM-clients.</xref:System.Collections.CollectionBase>       Deze methode is een bewerking O(1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_2_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_2_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_2_1.vb)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Een <xref:System.Collections.IEnumerator>voor de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.CollectionBase.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.InnerList
  id: InnerList
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: InnerList
  nameWithType: CollectionBase.InnerList
  fullName: System.Collections.CollectionBase.InnerList
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Haalt een <xref href=&quot;System.Collections.ArrayList&quot;> </xref> bevat de lijst met elementen in de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar."
  remarks: "De methoden op * worden aangeroepen alleen op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.List%2A>eigenschap, maar niet op het exemplaar dat wordt geretourneerd door de eigenschap InnerList.</xref:System.Collections.CollectionBase.List%2A>"
  syntax:
    content: protected System.Collections.ArrayList InnerList { get; }
    return:
      type: System.Collections.ArrayList
      description: "Een <xref href=&quot;System.Collections.ArrayList&quot;> </xref> die vertegenwoordigt de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar zelf.       Ophalen van de waarde van deze eigenschap is een O(1)-bewerking."
  overload: System.Collections.CollectionBase.InnerList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.List
  id: List
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: List
  nameWithType: CollectionBase.List
  fullName: System.Collections.CollectionBase.List
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Haalt een <xref:System.Collections.IList>bevat de lijst met elementen in de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar.</xref:System.Collections.IList>"
  remarks: "De methoden op * worden aangeroepen op het exemplaar dat wordt geretourneerd door de eigenschap lijst, maar niet op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.InnerList%2A>eigenschap.</xref:System.Collections.CollectionBase.InnerList%2A>       Ophalen van de waarde van deze eigenschap is een O(1)-bewerking."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/p-system.collections.col_1_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/p-system.collections.col_1_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/p-system.collections.col_1_1.vb)]"
  syntax:
    content: protected System.Collections.IList List { get; }
    return:
      type: System.Collections.IList
      description: "Een <xref:System.Collections.IList>die vertegenwoordigt de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar zelf.</xref:System.Collections.IList>"
  overload: System.Collections.CollectionBase.List*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnClear
  id: OnClear
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnClear()
  nameWithType: CollectionBase.OnClear()
  fullName: System.Collections.CollectionBase.OnClear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Aanvullende aangepaste processen worden uitgevoerd als het wissen van de inhoud van de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar."
  remarks: "De standaardimplementatie van deze methode is bedoeld om te worden genegeerd door een afgeleide klasse moet een bepaalde actie uitvoeren voordat de verzameling is uitgeschakeld.       De methoden op * worden aangeroepen alleen op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.List%2A>eigenschap, maar niet op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.InnerList%2A>eigenschap.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Als het proces is mislukt, wordt de verzameling teruggedraaid naar de vorige status.       De standaardimplementatie van deze methode is een bewerking O(1)."
  syntax:
    content: protected virtual void OnClear ();
    parameters: []
  overload: System.Collections.CollectionBase.OnClear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnClearComplete
  id: OnClearComplete
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnClearComplete()
  nameWithType: CollectionBase.OnClearComplete()
  fullName: System.Collections.CollectionBase.OnClearComplete()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Aanvullende aangepaste processen uitvoert na het uitschakelen van de inhoud van de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar."
  remarks: "De standaardimplementatie van deze methode is bedoeld om te worden genegeerd door een afgeleide klasse uit te voeren van een bepaalde actie nadat de verzameling is uitgeschakeld.       De methoden op * worden aangeroepen alleen op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.List%2A>eigenschap, maar niet op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.InnerList%2A>eigenschap.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       De standaardimplementatie van deze methode is een bewerking O(1)."
  syntax:
    content: protected virtual void OnClearComplete ();
    parameters: []
  overload: System.Collections.CollectionBase.OnClearComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  id: OnInsert(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnInsert(Int32,Object)
  nameWithType: CollectionBase.OnInsert(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Aanvullende aangepaste processen worden uitgevoerd voordat het invoegen van een nieuw element in de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar."
  remarks: "De standaardimplementatie van deze methode is bedoeld om te worden genegeerd door een afgeleide klasse een actie uitgevoerd voordat het opgegeven element is ingevoegd.       De methoden op * worden aangeroepen alleen op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.List%2A>eigenschap, maar niet op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.InnerList%2A>eigenschap.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Als het proces is mislukt, wordt de verzameling teruggedraaid naar de vorige status.       De standaardimplementatie van deze methode is een bewerking O(1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_1_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_1_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_1_1.vb)]"
  syntax:
    content: protected virtual void OnInsert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index waarop u wilt invoegen `value`."
    - id: value
      type: System.Object
      description: "De nieuwe waarde van het element bij de `index`."
  overload: System.Collections.CollectionBase.OnInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  id: OnInsertComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnInsertComplete(Int32,Object)
  nameWithType: CollectionBase.OnInsertComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsertComplete(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Aanvullende aangepaste processen uitvoert na het invoegen van een nieuw element in de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar."
  remarks: "De standaardimplementatie van deze methode is bedoeld om te worden genegeerd door een afgeleide klasse een actie uitgevoerd nadat het opgegeven element is ingevoegd.       De methoden op * worden aangeroepen alleen op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.List%2A>eigenschap, maar niet op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.InnerList%2A>eigenschap.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       De verzameling teruggedraaid naar de oorspronkelijke staat als een van de volgende gebeurt:-het proces is mislukt.      -Deze methode is Veroorzaak een uitzondering onderdrukt.       De standaardimplementatie van deze methode is een bewerking O(1)."
  syntax:
    content: protected virtual void OnInsertComplete (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index waarop u wilt invoegen `value`."
    - id: value
      type: System.Object
      description: "De nieuwe waarde van het element bij de `index`."
  overload: System.Collections.CollectionBase.OnInsertComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  id: OnRemove(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnRemove(Int32,Object)
  nameWithType: CollectionBase.OnRemove(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemove(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Aanvullende aangepaste processen worden uitgevoerd als het verwijderen van een element vanuit het <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar."
  remarks: "De standaardimplementatie van deze methode is bedoeld om te worden genegeerd door een afgeleide klasse een actie uitgevoerd voordat het opgegeven element is verwijderd.       De methoden op * worden aangeroepen alleen op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.List%2A>eigenschap, maar niet op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.InnerList%2A>eigenschap.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Als het proces is mislukt, wordt de verzameling teruggedraaid naar de vorige status.       De standaardimplementatie van deze methode is een bewerking O(1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_0_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_0_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_0_1.vb)]"
  syntax:
    content: protected virtual void OnRemove (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index waarop `value` kan worden gevonden."
    - id: value
      type: System.Object
      description: "De waarde van het element verwijderen uit `index`."
  overload: System.Collections.CollectionBase.OnRemove*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  id: OnRemoveComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnRemoveComplete(Int32,Object)
  nameWithType: CollectionBase.OnRemoveComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemoveComplete(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Aanvullende aangepaste processen uitvoert na het verwijderen van een element vanuit het <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar."
  remarks: "De standaardimplementatie van deze methode is bedoeld om te worden genegeerd door een afgeleide klasse een actie uitgevoerd nadat het opgegeven element is verwijderd.       De methoden op * worden aangeroepen alleen op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.List%2A>eigenschap, maar niet op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.InnerList%2A>eigenschap.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       De verzameling teruggedraaid naar de oorspronkelijke staat als een van de volgende gebeurt:-het proces is mislukt.      -Deze methode is Veroorzaak een uitzondering onderdrukt.       De standaardimplementatie van deze methode is een bewerking O(1)."
  syntax:
    content: protected virtual void OnRemoveComplete (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index waarop `value` kan worden gevonden."
    - id: value
      type: System.Object
      description: "De waarde van het element verwijderen uit `index`."
  overload: System.Collections.CollectionBase.OnRemoveComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  id: OnSet(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnSet(Int32,Object,Object)
  nameWithType: CollectionBase.OnSet(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSet(Int32,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Aanvullende aangepaste processen worden uitgevoerd voordat het instellen van een waarde de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar."
  remarks: "De standaardimplementatie van deze methode is bedoeld om te worden genegeerd door een afgeleide klasse moet een bepaalde actie uitvoeren voordat het opgegeven element is ingesteld.       De methoden op * worden aangeroepen alleen op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.List%2A>eigenschap, maar niet op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.InnerList%2A>eigenschap.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       Als het proces is mislukt, wordt de verzameling teruggedraaid naar de vorige status.       De standaardimplementatie van deze methode is een bewerking O(1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/b38eea40-0898-4372-aa13-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/b38eea40-0898-4372-aa13-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/b38eea40-0898-4372-aa13-_1.vb)]"
  syntax:
    content: protected virtual void OnSet (int index, object oldValue, object newValue);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index waarop `oldValue` kan worden gevonden."
    - id: oldValue
      type: System.Object
      description: "De waarde vervangt `newValue`."
    - id: newValue
      type: System.Object
      description: "De nieuwe waarde van het element bij de `index`."
  overload: System.Collections.CollectionBase.OnSet*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  id: OnSetComplete(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnSetComplete(Int32,Object,Object)
  nameWithType: CollectionBase.OnSetComplete(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSetComplete(Int32,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Aanvullende aangepaste processen uitvoert na het instellen van een waarde de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar."
  remarks: "De standaardimplementatie van deze methode is bedoeld om te worden genegeerd door een afgeleide klasse een actie uitgevoerd nadat het opgegeven element is ingesteld.       De methoden op * worden aangeroepen alleen op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.List%2A>eigenschap, maar niet op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.InnerList%2A>eigenschap.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       De verzameling teruggedraaid naar de oorspronkelijke staat als een van de volgende gebeurt:-het proces is mislukt.      -Deze methode is Veroorzaak een uitzondering onderdrukt.       De standaardimplementatie van deze methode is een bewerking O(1)."
  syntax:
    content: protected virtual void OnSetComplete (int index, object oldValue, object newValue);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index waarop `oldValue` kan worden gevonden."
    - id: oldValue
      type: System.Object
      description: "De waarde vervangt `newValue`."
    - id: newValue
      type: System.Object
      description: "De nieuwe waarde van het element bij de `index`."
  overload: System.Collections.CollectionBase.OnSetComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.OnValidate(System.Object)
  id: OnValidate(System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: OnValidate(Object)
  nameWithType: CollectionBase.OnValidate(Object)
  fullName: System.Collections.CollectionBase.OnValidate(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Aanvullende aangepaste processen voert bij het valideren van een waarde."
  remarks: "De standaardimplementatie van deze methode wordt bepaald of `value` is `null`, en als dat het geval is, genereert <xref:System.ArgumentNullException>.</xref:System.ArgumentNullException> Het is bedoeld om te worden genegeerd door een afgeleide klasse aanvullende actie uitvoeren tijdens de validatie van het opgegeven element.       De methoden op * worden aangeroepen alleen op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.List%2A>eigenschap, maar niet op het exemplaar dat wordt geretourneerd door de <xref:System.Collections.CollectionBase.InnerList%2A>eigenschap.</xref:System.Collections.CollectionBase.InnerList%2A> </xref:System.Collections.CollectionBase.List%2A>       De standaardimplementatie van deze methode is een bewerking O(1)."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/m-system.collections.col_3_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/m-system.collections.col_3_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/m-system.collections.col_3_1.vb)]"
  syntax:
    content: protected virtual void OnValidate (object value);
    parameters:
    - id: value
      type: System.Object
      description: "Het object te valideren."
  overload: System.Collections.CollectionBase.OnValidate*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.CollectionBase.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: CollectionBase.RemoveAt(Int32)
  fullName: System.Collections.CollectionBase.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee verwijdert u het element bij de opgegeven index van de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> exemplaar. Deze methode is niet overschrijfbare."
  remarks: "In verzamelingen van aangrenzende elementen, zoals lijsten, verplaatsen de elementen die achter de verwijderde element omhoog naar de vrijgekomen spot in beslag nemen. Als de verzameling is geïndexeerd, worden de indexen van de elementen die verplaatst worden ook bijgewerkt. Dit gedrag is niet van toepassing op verzamelingen waar elementen conceptueel gezien zijn gegroepeerd in buckets, zoals een hash-tabel.       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index van het element te verwijderen."
  overload: System.Collections.CollectionBase.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul.       - of - <code>index</code> is gelijk aan of groter zijn dan <xref:System.Collections.CollectionBase.Count*>."
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopieert de gehele <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> naar een compatibele eendimensionale <xref:System.Array>, te beginnen bij de opgegeven index van de doelmatrix.</xref:System.Array>"
  remarks: "De opgegeven matrix moet van een compatibel type.       Deze methode gebruikt <xref:System.Array.Copy%2A?displayProperty=fullName>kopiëren van de elementen.</xref:System.Array.Copy%2A?displayProperty=fullName>       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "De eendimensionale <xref:System.Array>die het doel van de elementen die zijn gekopieerd uit <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Array> De <xref:System.Array>moet hebben op nul gebaseerde indexering.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index in `array` welke kopiëren begint."
  overload: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>is multidimensionaal.       - of - het aantal elementen in de bron <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> groter is dan de beschikbare ruimte vanaf <code>index</code> aan het einde van de bestemming <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Het type van de bron <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> kan niet automatisch worden geconverteerd naar het type van de bestemming <code> array </code>."
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: CollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Haalt een waarde die aangeeft of de toegang tot de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> is gesynchroniseerd (thread-veilig)."
  remarks: "Een <xref:System.Collections.CollectionBase>exemplaar is niet gesynchroniseerd.</xref:System.Collections.CollectionBase> Afgeleide klassen kunnen bieden een gesynchroniseerde versie van de <xref:System.Collections.CollectionBase>met behulp van de <xref:System.Collections.ICollection.SyncRoot%2A>eigenschap.</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.CollectionBase>       Inventariseren door middel van een verzameling is intrinsiek niet een thread-veilige procedure. Zelfs wanneer een verzameling wordt gesynchroniseerd, andere threads kunnen nog steeds de verzameling niet wijzigen, waardoor de enumerator is een uitzondering. Om te garanderen thread veiligheid tijdens de opsomming, moet u de verzameling tijdens de gehele opsomming vergrendelen of het gevolg van wijzigingen die door andere threads uitzonderingen wordt onderschept.       De volgende voorbeeldcode laat zien hoe vergrendelen op de verzameling met behulp van de <xref:System.Collections.ICollection.SyncRoot%2A>tijdens de gehele opsomming: [!code-cpp [System.Collections.CollectionBase#2](~/add/codesnippet/cpp/c3b5b435-5577-4ea3-8822-_1.cpp)][!code-cs[System.Collections.CollectionBase#2](~/add/codesnippet/csharp/c3b5b435-5577-4ea3-8822-_1.cs)][!code-vb[System.Collections.CollectionBase#2](~/add/codesnippet/visualbasic/c3b5b435-5577-4ea3-8822-_1.vb) ] ophalen van de waarde van deze eigenschap is een bewerking O(1).    </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de toegang tot de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> is gesynchroniseerd (thread-safe); anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: CollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Haalt een object dat kan worden gebruikt voor het synchroniseren van toegang tot de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>."
  remarks: "Afgeleide klassen kunnen bieden hun eigen gesynchroniseerde versie van de <xref:System.Collections.CollectionBase>met behulp van de <xref:System.Collections.ICollection.SyncRoot%2A>eigenschap.</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.CollectionBase> De code voor het synchroniseren moet bewerkingen uitvoeren op de <xref:System.Collections.ICollection.SyncRoot%2A>van de <xref:System.Collections.CollectionBase>, niet rechtstreeks op de <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase> </xref:System.Collections.CollectionBase> </xref:System.Collections.ICollection.SyncRoot%2A> Dit zorgt ervoor dat de juiste werking van de verzamelingen die zijn afgeleid van andere objecten. In het bijzonder houdt juiste synchronisatie met andere threads dat tegelijkertijd kan worden wijzigt de <xref:System.Collections.CollectionBase>object.</xref:System.Collections.CollectionBase>       Inventariseren door middel van een verzameling is intrinsiek niet een thread-veilige procedure. Zelfs wanneer een verzameling wordt gesynchroniseerd, andere threads kunnen nog steeds de verzameling niet wijzigen, waardoor de enumerator is een uitzondering. Om te garanderen thread veiligheid tijdens de opsomming, moet u de verzameling tijdens de gehele opsomming vergrendelen of het gevolg van wijzigingen die door andere threads uitzonderingen wordt onderschept.       De volgende voorbeeldcode laat zien hoe vergrendelen op de verzameling met behulp van de <xref:System.Collections.ICollection.SyncRoot%2A>tijdens de gehele opsomming: [!code-cpp [System.Collections.CollectionBase#2](~/add/codesnippet/cpp/cacfe8dc-771f-47eb-a7e1-_1.cpp)][!code-cs[System.Collections.CollectionBase#2](~/add/codesnippet/csharp/cacfe8dc-771f-47eb-a7e1-_1.cs)][!code-vb[System.Collections.CollectionBase#2](~/add/codesnippet/visualbasic/cacfe8dc-771f-47eb-a7e1-_1.vb) ] ophalen van de waarde van deze eigenschap is een bewerking O(1).    </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Een object dat kan worden gebruikt voor het synchroniseren van toegang tot de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>."
  overload: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: CollectionBase.System.Collections.IList.Add(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Een object toegevoegd aan het einde van de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>."
  remarks: "Als <xref:System.Collections.CollectionBase.Count%2A>al gelijk is aan de capaciteit, de capaciteit van de lijst wordt verdubbeld door automatisch opnieuw toewijzen van de interne matrix en de bestaande elementen kopiëren naar de nieuwe matrix voordat het nieuwe element is toegevoegd.</xref:System.Collections.CollectionBase.Count%2A>       Als <xref:System.Collections.CollectionBase.Count%2A>is kleiner dan de capaciteit is deze methode een bewerking O(1).</xref:System.Collections.CollectionBase.Count%2A> Als de capaciteit worden verhoogd moet om ruimte is voor het nieuwe element, deze methode wordt een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>"
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/9be064c1-54ea-4721-8714-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/9be064c1-54ea-4721-8714-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/9be064c1-54ea-4721-8714-_1.vb)]"
  syntax:
    content: int IList.Add (object value);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>worden toegevoegd aan het einde van de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Object>"
    return:
      type: System.Int32
      description: "De <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> index waarop de <code> value </code> is toegevoegd."
  overload: System.Collections.CollectionBase.System#Collections#IList#Add*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> is alleen-lezen.       - of - de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: CollectionBase.System.Collections.IList.Contains(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee wordt bepaald of de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> een specifiek-element bevat."
  remarks: "Deze methode voert een lineaire zoeken; Deze methode is daarom een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>       Deze methode bepaalt gelijkheid door het aanroepen van <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Beginnen met .NET Framework 2.0, deze methode maakt gebruik van een verzameling objecten <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden op `item` om te bepalen of `item` bestaat.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> In eerdere versies van .NET Framework, deze beslissing is gemaakt met behulp van de <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden van de `item` parameter voor de objecten in de verzameling.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/c05c77a6-90e8-47cd-a625-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/c05c77a6-90e8-47cd-a625-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/c05c77a6-90e8-47cd-a625-_1.vb)]"
  syntax:
    content: bool IList.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>te vinden in de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> bevat het opgegeven <code> value </code>; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.CollectionBase.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: CollectionBase.System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Zoekt naar de opgegeven <xref:System.Object>en retourneert de op nul gebaseerde index van het eerste exemplaar binnen de gehele <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Object>"
  remarks: "Deze methode voert een lineaire zoeken; Deze methode is daarom een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>       Deze methode bepaalt gelijkheid door het aanroepen van <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       Beginnen met .NET Framework 2.0, deze methode maakt gebruik van een verzameling objecten <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden op `item` om te bepalen of `item` bestaat.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> In eerdere versies van .NET Framework, deze beslissing is gemaakt met behulp van de <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden van de `item` parameter voor de objecten in de verzameling.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/154015bb-f734-471d-93de-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/154015bb-f734-471d-93de-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/154015bb-f734-471d-93de-_1.vb)]"
  syntax:
    content: int IList.IndexOf (object value);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>te vinden in de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Object>"
    return:
      type: System.Int32
      description: "De op nul gebaseerde index van het eerste exemplaar van <code> value </code> binnen de gehele <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>als gevonden, anders wordt -1."
  overload: System.Collections.CollectionBase.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: CollectionBase.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee voegt u een element in de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> bij de opgegeven index."
  remarks: "Als <xref:System.Collections.CollectionBase.Count%2A>al gelijk is aan de capaciteit, de capaciteit van de lijst wordt verdubbeld door automatisch opnieuw toewijzen van de interne matrix voordat het nieuwe element wordt ingevoegd.</xref:System.Collections.CollectionBase.Count%2A>       Als `index` gelijk is aan <xref:System.Collections.CollectionBase.Count%2A>, `value` wordt toegevoegd aan het einde van <xref:System.Collections.CollectionBase>.</xref:System.Collections.CollectionBase> </xref:System.Collections.CollectionBase.Count%2A>       Geschikt voor het nieuwe element in verzamelingen van aangrenzende elementen, zoals lijsten, de elementen die achter de invoegpositie omlaag te verplaatsen. Als de verzameling is geïndexeerd, worden de indexen van de elementen die verplaatst worden ook bijgewerkt. Dit gedrag is niet van toepassing op verzamelingen waar elementen conceptueel gezien zijn gegroepeerd in buckets, zoals een hash-tabel.       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>"
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/f8b730a7-8cec-40ed-9d7e-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/f8b730a7-8cec-40ed-9d7e-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/f8b730a7-8cec-40ed-9d7e-_1.vb)]"
  syntax:
    content: void IList.Insert (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index waarop `value` moet worden ingevoegd."
    - id: value
      type: System.Object
      description: "De <xref:System.Object>invoegen.</xref:System.Object>"
  overload: System.Collections.CollectionBase.System#Collections#IList#Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul.       - of - <code>index</code> is groter dan <xref:System.Collections.CollectionBase.Count*>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> is alleen-lezen.       - of - de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: CollectionBase.System.Collections.IList.IsFixedSize
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Haalt een waarde die aangeeft of de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> heeft een vaste grootte."
  remarks: "Een verzameling met een vaste grootte is niet toegestaan het toevoegen of verwijderen van elementen nadat de verzameling is gemaakt, maar kunt u de wijziging van bestaande elementen.       Een verzameling met een vaste grootte is gewoon een verzameling met een wrapper waardoor toevoegen en verwijderen van elementen; daarom als wijzigingen zijn aangebracht in de onderliggende verzameling, inclusief het toevoegen of verwijderen van elementen, de verzameling met vaste grootte wordt doorgevoerd die wijzigingen.       Ophalen van de waarde van deze eigenschap is een O(1)-bewerking."
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> heeft een vaste grootte, anders wordt <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.IsReadOnly
  nameWithType: CollectionBase.System.Collections.IList.IsReadOnly
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Haalt een waarde die aangeeft of de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> is alleen-lezen."
  remarks: "Een verzameling die is alleen-lezen is het toevoegen, verwijderen of wijzigen van de elementen niet toegestaan, nadat de verzameling is gemaakt.       Een verzameling die is alleen-lezen is gewoon een verzameling met een wrapper waardoor het wijzigen van de collectie. daarom als wijzigingen worden aangebracht in de onderliggende verzameling, de verzameling alleen-lezen wordt doorgevoerd die wijzigingen.       Ophalen van de waarde van deze eigenschap is een O(1)-bewerking."
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> is alleen-lezen, anders, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: CollectionBase.System.Collections.IList.Item(Int32)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Opgehaald of ingesteld van het element bij de opgegeven index."
  remarks: "Deze eigenschap biedt de mogelijkheid toegang tot een specifiek element in de verzameling met de volgende syntaxis: `myCollection[index]`.       Ophalen van de waarde van deze eigenschap is een bewerking O(1); de eigenschap is ook een O(1)-bewerking."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/83a912ba-0bf4-468a-a9c4-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/83a912ba-0bf4-468a-a9c4-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/83a912ba-0bf4-468a-a9c4-_1.vb)]"
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index van het element ophalen of instellen."
    return:
      type: System.Object
      description: "Het element bij de opgegeven index."
  overload: System.Collections.CollectionBase.System#Collections#IList#Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul.       - of - <code>index</code> is gelijk aan of groter zijn dan <xref:System.Collections.CollectionBase.Count*>."
  platform:
  - net462
- uid: System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: CollectionBase.System.Collections.IList.Remove(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee verwijdert u het eerste exemplaar van een specifiek object van het <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>."
  remarks: "Als de <xref:System.Collections.CollectionBase>bevat niet het opgegeven object het <xref:System.Collections.CollectionBase>blijft ongewijzigd.</xref:System.Collections.CollectionBase> </xref:System.Collections.CollectionBase> Er is geen uitzondering is opgetreden.       Deze methode voert een lineaire zoeken; Deze methode is daarom een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.CollectionBase.Count%2A>.</xref:System.Collections.CollectionBase.Count%2A>       Deze methode bepaalt gelijkheid door het aanroepen van <xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>       In verzamelingen van aangrenzende elementen, zoals lijsten, verplaatsen de elementen die achter de verwijderde element omhoog naar de vrijgekomen spot in beslag nemen. Als de verzameling is geïndexeerd, worden de indexen van de elementen die verplaatst worden ook bijgewerkt. Dit gedrag is niet van toepassing op verzamelingen waar elementen conceptueel gezien zijn gegroepeerd in buckets, zoals een hash-tabel."
  example:
  - "The following code example implements the <xref:System.Collections.CollectionBase> class and uses that implementation to create a collection of <xref:System.Int16> objects.  \n  \n [!code-cpp[System.Collections.CollectionBase#1](~/add/codesnippet/cpp/92a20c91-2133-45e3-9527-_1.cpp)]\n [!code-cs[System.Collections.CollectionBase#1](~/add/codesnippet/csharp/92a20c91-2133-45e3-9527-_1.cs)]\n [!code-vb[System.Collections.CollectionBase#1](~/add/codesnippet/visualbasic/92a20c91-2133-45e3-9527-_1.vb)]"
  syntax:
    content: void IList.Remove (object value);
    parameters:
    - id: value
      type: System.Object
      description: "De <xref:System.Object>verwijderen uit de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref>.</xref:System.Object>"
  overload: System.Collections.CollectionBase.System#Collections#IList#Remove*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <code> value </code> parameter is niet gevonden in de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> object."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> is alleen-lezen.       - of - de <xref href=&quot;System.Collections.CollectionBase&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Collections.CollectionBase.#ctor
  parent: System.Collections.CollectionBase
  isExternal: false
  name: CollectionBase()
  nameWithType: CollectionBase.CollectionBase()
  fullName: System.Collections.CollectionBase.CollectionBase()
- uid: System.Collections.CollectionBase.#ctor(System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: CollectionBase(Int32)
  nameWithType: CollectionBase.CollectionBase(Int32)
  fullName: System.Collections.CollectionBase.CollectionBase(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.CollectionBase.Capacity
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Capacity
  nameWithType: CollectionBase.Capacity
  fullName: System.Collections.CollectionBase.Capacity
- uid: System.Collections.CollectionBase.Clear
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Clear()
  nameWithType: CollectionBase.Clear()
  fullName: System.Collections.CollectionBase.Clear()
- uid: System.Collections.CollectionBase.Count
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Count
  nameWithType: CollectionBase.Count
  fullName: System.Collections.CollectionBase.Count
- uid: System.Collections.CollectionBase.GetEnumerator
  parent: System.Collections.CollectionBase
  isExternal: false
  name: GetEnumerator()
  nameWithType: CollectionBase.GetEnumerator()
  fullName: System.Collections.CollectionBase.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.CollectionBase.InnerList
  parent: System.Collections.CollectionBase
  isExternal: false
  name: InnerList
  nameWithType: CollectionBase.InnerList
  fullName: System.Collections.CollectionBase.InnerList
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.CollectionBase.List
  parent: System.Collections.CollectionBase
  isExternal: false
  name: List
  nameWithType: CollectionBase.List
  fullName: System.Collections.CollectionBase.List
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.CollectionBase.OnClear
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnClear()
  nameWithType: CollectionBase.OnClear()
  fullName: System.Collections.CollectionBase.OnClear()
- uid: System.Collections.CollectionBase.OnClearComplete
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnClearComplete()
  nameWithType: CollectionBase.OnClearComplete()
  fullName: System.Collections.CollectionBase.OnClearComplete()
- uid: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnInsert(Int32,Object)
  nameWithType: CollectionBase.OnInsert(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsert(Int32,Object)
- uid: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnInsertComplete(Int32,Object)
  nameWithType: CollectionBase.OnInsertComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnInsertComplete(Int32,Object)
- uid: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnRemove(Int32,Object)
  nameWithType: CollectionBase.OnRemove(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemove(Int32,Object)
- uid: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnRemoveComplete(Int32,Object)
  nameWithType: CollectionBase.OnRemoveComplete(Int32,Object)
  fullName: System.Collections.CollectionBase.OnRemoveComplete(Int32,Object)
- uid: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnSet(Int32,Object,Object)
  nameWithType: CollectionBase.OnSet(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSet(Int32,Object,Object)
- uid: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnSetComplete(Int32,Object,Object)
  nameWithType: CollectionBase.OnSetComplete(Int32,Object,Object)
  fullName: System.Collections.CollectionBase.OnSetComplete(Int32,Object,Object)
- uid: System.Collections.CollectionBase.OnValidate(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnValidate(Object)
  nameWithType: CollectionBase.OnValidate(Object)
  fullName: System.Collections.CollectionBase.OnValidate(Object)
- uid: System.Collections.CollectionBase.RemoveAt(System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: CollectionBase.RemoveAt(Int32)
  fullName: System.Collections.CollectionBase.RemoveAt(Int32)
- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: CollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: CollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.SyncRoot
- uid: System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: CollectionBase.System.Collections.IList.Add(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Add(Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: CollectionBase.System.Collections.IList.Contains(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Contains(Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: CollectionBase.System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.IndexOf(Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: CollectionBase.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Insert(Int32,Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: CollectionBase.System.Collections.IList.IsFixedSize
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsFixedSize
- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: CollectionBase.System.Collections.IList.IsReadOnly
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsReadOnly
- uid: System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: CollectionBase.System.Collections.IList.Item(Int32)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Item(Int32)
- uid: System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: CollectionBase.System.Collections.IList.Remove(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Remove(Object)
- uid: System.Collections.CollectionBase.#ctor*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: CollectionBase
  nameWithType: CollectionBase.CollectionBase
- uid: System.Collections.CollectionBase.Capacity*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Capacity
  nameWithType: CollectionBase.Capacity
- uid: System.Collections.CollectionBase.Clear*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Clear
  nameWithType: CollectionBase.Clear
- uid: System.Collections.CollectionBase.Count*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: Count
  nameWithType: CollectionBase.Count
- uid: System.Collections.CollectionBase.GetEnumerator*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: GetEnumerator
  nameWithType: CollectionBase.GetEnumerator
- uid: System.Collections.CollectionBase.InnerList*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: InnerList
  nameWithType: CollectionBase.InnerList
- uid: System.Collections.CollectionBase.List*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: List
  nameWithType: CollectionBase.List
- uid: System.Collections.CollectionBase.OnClear*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnClear
  nameWithType: CollectionBase.OnClear
- uid: System.Collections.CollectionBase.OnClearComplete*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnClearComplete
  nameWithType: CollectionBase.OnClearComplete
- uid: System.Collections.CollectionBase.OnInsert*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnInsert
  nameWithType: CollectionBase.OnInsert
- uid: System.Collections.CollectionBase.OnInsertComplete*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnInsertComplete
  nameWithType: CollectionBase.OnInsertComplete
- uid: System.Collections.CollectionBase.OnRemove*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnRemove
  nameWithType: CollectionBase.OnRemove
- uid: System.Collections.CollectionBase.OnRemoveComplete*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnRemoveComplete
  nameWithType: CollectionBase.OnRemoveComplete
- uid: System.Collections.CollectionBase.OnSet*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnSet
  nameWithType: CollectionBase.OnSet
- uid: System.Collections.CollectionBase.OnSetComplete*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnSetComplete
  nameWithType: CollectionBase.OnSetComplete
- uid: System.Collections.CollectionBase.OnValidate*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: OnValidate
  nameWithType: CollectionBase.OnValidate
- uid: System.Collections.CollectionBase.RemoveAt*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: RemoveAt
  nameWithType: CollectionBase.RemoveAt
- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: CollectionBase.System.Collections.ICollection.CopyTo
- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: CollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: CollectionBase.System.Collections.ICollection.SyncRoot
- uid: System.Collections.CollectionBase.System#Collections#IList#Add*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: CollectionBase.System.Collections.IList.Add
- uid: System.Collections.CollectionBase.System#Collections#IList#Contains*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: CollectionBase.System.Collections.IList.Contains
- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: CollectionBase.System.Collections.IList.IndexOf
- uid: System.Collections.CollectionBase.System#Collections#IList#Insert*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: CollectionBase.System.Collections.IList.Insert
- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: CollectionBase.System.Collections.IList.IsFixedSize
- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: CollectionBase.System.Collections.IList.IsReadOnly
- uid: System.Collections.CollectionBase.System#Collections#IList#Item*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: CollectionBase.System.Collections.IList.Item
- uid: System.Collections.CollectionBase.System#Collections#IList#Remove*
  parent: System.Collections.CollectionBase
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: CollectionBase.System.Collections.IList.Remove
