### YamlMime:ManagedReference
items:
- uid: System.Web.Caching.CacheDependency
  id: CacheDependency
  children:
  - System.Web.Caching.CacheDependency.#ctor
  - System.Web.Caching.CacheDependency.#ctor(System.String)
  - System.Web.Caching.CacheDependency.#ctor(System.String[])
  - System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  - System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  - System.Web.Caching.CacheDependency.DependencyDispose
  - System.Web.Caching.CacheDependency.Dispose
  - System.Web.Caching.CacheDependency.FinishInit
  - System.Web.Caching.CacheDependency.GetFileDependencies
  - System.Web.Caching.CacheDependency.GetUniqueID
  - System.Web.Caching.CacheDependency.HasChanged
  - System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  - System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  - System.Web.Caching.CacheDependency.UtcLastModified
  langs:
  - csharp
  name: CacheDependency
  nameWithType: CacheDependency
  fullName: System.Web.Caching.CacheDependency
  type: Class
  summary: "Zorgt voor een afhankelijkheidsrelatie tussen een item dat is opgeslagen in een ASP.NET-toepassing <xref href=&quot;System.Web.Caching.Cache&quot;> </xref> object en een bestand, Cachesleutel, een matrix van één of een ander CacheDependency-object. De klasse CacheDependency bewaakt de afhankelijkheidsrelaties zodat wanneer deze wordt gewijzigd, het item in de cache wordt automatisch verwijderd."
  remarks: "Als u een item toevoegen aan de cache die afhankelijk is van een ander object, zoals een bestand of een matrix van bestanden, wordt het afhankelijke item automatisch verwijderd uit de cache wanneer het object wordt gewijzigd. Stel bijvoorbeeld dat u maakt een <xref:System.Data.DataSet>object op basis van gegevens in een XML-bestand.</xref:System.Data.DataSet> U kunt toevoegen de <xref:System.Data.DataSet>aan de cache met een CacheDependency-object waarmee de <xref:System.Data.DataSet>afhankelijk van het XML-bestand.</xref:System.Data.DataSet> </xref:System.Data.DataSet> Als het XML-bestand wordt gewijzigd, de <xref:System.Data.DataSet>is verwijderd uit de cache.</xref:System.Data.DataSet>       U kunt items met afhankelijkheden toevoegen aan de cache van uw toepassing met de <xref:System.Web.Caching.Cache.Add%2A>en <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName>methoden.</xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> </xref:System.Web.Caching.Cache.Add%2A> U kunt geen gebruiken de <xref:System.Web.Caching.Cache.Item%2A>eigenschap items toevoegen aan de cache met afhankelijkheden.</xref:System.Web.Caching.Cache.Item%2A>       Als u een afhankelijkheid instelt, u geen exemplaar maken van de klasse CacheDependency opgeven van de bestanden, sleutels of mappen op waarop het item afhankelijke is en geeft u de afhankelijkheid voor de <xref:System.Web.Caching.Cache.Add%2A>of <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName>methode.</xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> </xref:System.Web.Caching.Cache.Add%2A> Het CacheDependency-exemplaar kan vertegenwoordigen één bestand of map, een matrix van bestanden of mappen of een matrix van bestanden of mappen samen met een matrix van cache-sleutels (dit zijn andere items die zijn opgeslagen de <xref:System.Web.Caching.Cache>object).</xref:System.Web.Caching.Cache>"
  example:
  - "The following code example demonstrates using the <xref:System.Web.Caching.CacheDependency.HasChanged%2A> property to determine whether a CacheDependency changed since the previous request for an item in the <xref:System.Web.Caching.Cache>. The `dt` value passed in the `start` parameter is set to <xref:System.DateTime.Now%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/visualbasic/t-system.web.caching.cac_3_1.aspx)]\n [!code-cs[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/csharp/t-system.web.caching.cac_3_1.aspx)]"
  syntax:
    content: 'public class CacheDependency : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor
  id: '#ctor'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency()
  nameWithType: CacheDependency.CacheDependency()
  fullName: System.Web.Caching.CacheDependency.CacheDependency()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klasse."
  remarks: "Als u wilt uw eigen klasse afgeleid <xref:System.Web.Caching.CacheDependency>, implementeert u deze versie van de CacheDependency-constructor.</xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example is a class that implements this version of the <xref:System.Web.Caching.CacheDependency> constructor as all classes that derive from <xref:System.Web.Caching.CacheDependency> are required to.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_2_1.vb)]"
  syntax:
    content: protected CacheDependency ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String)
  nameWithType: CacheDependency.CacheDependency(String)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klasse waarbij een bestand of map op wijzigingen wordt gecontroleerd."
  remarks: "If the directory or file specified in the `filename` parameter is not found in the file system, it will be treated as missing. If the directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when the directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file."
  example:
  - "The following code example creates an instance of the <xref:System.Web.Caching.CacheDependency> class with a dependency on an XML file. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method then adds an item to the <xref:System.Web.Caching.Cache> that is dependent upon that file.  \n  \n [!code-vb[Classic CacheDependency.CacheDependency Example#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_5_1.vb)]\n [!code-cs[Classic CacheDependency.CacheDependency Example#1](~/add/codesnippet/csharp/m-system.web.caching.cac_5_1.cs)]  \n  \n You can also use the following technique to add an item to the <xref:System.Web.Caching.Cache> with a dependency on a file.  \n  \n [!code-cs[Single File Dependency Cache entry#1](~/add/codesnippet/csharp/m-system.web.caching.cac_5_2.aspx)]\n [!code-vb[Single File Dependency Cache entry#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_5_2.aspx)]"
  syntax:
    content: public CacheDependency (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "Het pad naar een bestand of map die het object in de cache is afhankelijk van is. Wanneer deze bron wordt gewijzigd, wordt het object in de cache verouderd en wordt verwijderd uit de cache."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[])
  nameWithType: CacheDependency.CacheDependency(String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[])
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klasse die een matrix met paden (voor bestanden of mappen) voor wijzigingen bewaakt."
  remarks: "If any of the files or directories in the array changes or is removed from the array, the cached item becomes obsolete and is removed from the application's <xref:System.Web.Caching.Cache> object.  \n  \n Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  When you create the array that contains the file dependencies, you must define the number of files that the item you are adding to the <xref:System.Web.Caching.Cache> is dependent on."
  example:
  - "The following code example demonstrates how to use the <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method to add an item to the <xref:System.Web.Caching.Cache> with dependencies on an array of files. You can also make the item dependent on an array of directories.  \n  \n [!code-vb[Multiple file based dependency#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_12_1.aspx)]\n [!code-cs[Multiple file based dependency#1](~/add/codesnippet/csharp/m-system.web.caching.cac_12_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames);
    parameters:
    - id: filenames
      type: System.String[]
      description: "Een matrix met paden (voor bestanden of mappen) die het object in de cache is afhankelijk van is. Wanneer een van deze wijzigingen resources, het object in de cache verouderd en wordt verwijderd uit de cache."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  id: '#ctor(System.String,System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String,DateTime)
  nameWithType: CacheDependency.CacheDependency(String,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String,DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klasse waarbij een bestand of map op wijzigingen wordt gecontroleerd."
  remarks: "If the directory or file specified in the `filename` parameter is not found in the file system, it will be treated as missing. If the directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when the directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of the directory or file passed in the `filename` parameter. If the last modified date is later than the date and time set passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example uses this constructor to instantiate a <xref:System.Web.Caching.CacheDependency> object, then inserts an item into the <xref:System.Web.Caching.Cache> with that dependency. The `dt` value passed in the `start` parameter is set to <xref:System.DateTime.Now%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_0_1.aspx)]\n [!code-cs[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/csharp/m-system.web.caching.cac_0_1.aspx)]"
  syntax:
    content: public CacheDependency (string filename, DateTime start);
    parameters:
    - id: filename
      type: System.String
      description: "Het pad naar een bestand of map die het object in de cache is afhankelijk van is. Wanneer deze bron wordt gewijzigd, wordt het object in de cache verouderd en wordt verwijderd uit de cache."
    - id: start
      type: System.DateTime
      description: "De tijd op basis waarvan de laatste wijzigingsdatum van de map of bestand controleren."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  id: '#ctor(System.String[],System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klasse die een matrix met paden (voor bestanden of mappen) voor wijzigingen controleert en geeft een tijdstip waarop controle begint."
  remarks: "If any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of the array passed in the `filenames` parameter. If the last modified date of any object in the array is later than the date and time set passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example creates a <xref:System.Web.Caching.CacheDependency> object that passes two XML files and a <xref:System.DateTime.Now%2A?displayProperty=fullName> value when the object is included as a parameter argument in an <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method call.  \n  \n [!code-vb[CacheDependency Constructor4#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_10_1.aspx)]\n [!code-cs[CacheDependency Constructor4#1](~/add/codesnippet/csharp/m-system.web.caching.cac_10_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, DateTime start);
    parameters:
    - id: filenames
      type: System.String[]
      description: "Een matrix met paden (voor bestanden of mappen) die het object in de cache is afhankelijk van is. Wanneer een van deze wijzigingen resources, het object in de cache verouderd en wordt verwijderd uit de cache."
    - id: start
      type: System.DateTime
      description: "De tijd op basis waarvan de laatste wijzigingsdatum van de objecten in de matrix te controleren."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  id: '#ctor(System.String[],System.String[])'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[])
  nameWithType: CacheDependency.CacheDependency(String[],String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[])
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klasse waarbij een matrix met paden (voor bestanden of mappen), een matrix van cache sleutels of beide op wijzigingen wordt gecontroleerd."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file."
  example:
  - "The following code fragment demonstrates how to insert an item into your application's <xref:System.Web.Caching.Cache> with a dependency on a key to another item placed in the cache. Since this method uses array syntax, you must define the number of keys on which the item you are adding to the <xref:System.Web.Caching.Cache> is dependent.  \n  \n [!code-vb[Key based dependency#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_11_1.aspx)]\n [!code-cs[Key based dependency#1](~/add/codesnippet/csharp/m-system.web.caching.cac_11_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys);
    parameters:
    - id: filenames
      type: System.String[]
      description: "Een matrix met paden (voor bestanden of mappen) die het object in de cache is afhankelijk van is. Wanneer een van deze wijzigingen resources, het object in de cache verouderd en wordt verwijderd uit de cache."
    - id: cachekeys
      type: System.String[]
      description: "Een matrix van cache sleutels die het nieuwe object controleert op wijzigingen. Wanneer een van deze wijzigingen van de sleutels cache, wordt het object in de cache die is gekoppeld aan dit afhankelijkheidsobject verouderd en wordt verwijderd uit de cache."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  id: '#ctor(System.String[],System.String[],System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klasse waarbij een matrix met paden (voor bestanden of mappen), een matrix van cache sleutels of beide op wijzigingen wordt gecontroleerd."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of any object passed in the `filenames` or `cachekeys` parameters. If the last modified date of any of those objects is later than the date and time set passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example creates a `CreateDependency` method. When this method is called, it creates a <xref:System.DateTime> object and the <xref:System.Web.Caching.Cache.Item%2A?displayProperty=fullName> property is used to add an item to the cache with a `key` parameter of `key1` and a value of `Value 1`. An array of strings, `dependencyKey`, is then created with the value of `key1` as well. This <xref:System.Web.Caching.CacheDependency> constructor then instantiates a <xref:System.Web.Caching.CacheDependency> object that passes `dependencyKey` and the <xref:System.DateTime> object as parameter arguments. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method is called next, using the <xref:System.Web.Caching.CacheDependency> object as a parameter. This makes the object added to the cache using the <xref:System.Web.Caching.Cache.Insert%2A> method dependent on the `key1` key.  \n  \n [!code-cs[CacheDependency Constructor6#1](~/add/codesnippet/csharp/8a673c60-cf9e-4171-bfff-_1.aspx)]\n [!code-vb[CacheDependency Constructor6#1](~/add/codesnippet/visualbasic/8a673c60-cf9e-4171-bfff-_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys, DateTime start);
    parameters:
    - id: filenames
      type: System.String[]
      description: "Een matrix met paden (voor bestanden of mappen) die het object in de cache is afhankelijk van is. Wanneer een van deze wijzigingen resources, het object in de cache verouderd en wordt verwijderd uit de cache."
    - id: cachekeys
      type: System.String[]
      description: "Een matrix van cache sleutels die het nieuwe object controleert op wijzigingen. Wanneer een van deze wijzigingen van de sleutels cache, wordt het object in de cache die is gekoppeld aan dit afhankelijkheidsobject verouderd en wordt verwijderd uit de cache."
    - id: start
      type: System.DateTime
      description: "De datum en tijd op basis waarvan u om te controleren van de laatste wijzigingsdatum van de objecten die zijn doorgegeven de `filenames` en `cachekeys` matrices."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  id: '#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[],CacheDependency)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klasse waarbij een matrix met paden (voor bestanden of mappen), een matrix van cache sleutels of beide op wijzigingen wordt gecontroleerd. Ook kan zichzelf afhankelijk is van een afzonderlijk exemplaar van de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klasse."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file."
  example:
  - "The following code example creates a `CreateDependency` method. When this method is called, it uses the <xref:System.Web.Caching.Cache.Item%2A?displayProperty=fullName> property to add an item to the cache with a `key` parameter of `key1` and a value of `Value 1`. An array of strings, `dependencyKey`, is then created with the value of `key1` as well. The <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=fullName> constructor is used to create a <xref:System.Web.Caching.CacheDependency> object, `dep1`, which passes `dependencyKey` as a parameter argument. A second <xref:System.Web.Caching.CacheDependency> object, `dep2`, is created using this constructor, with `dep1` passed as the third parameter argument. This second dependency is dependent on the first. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method is called next, using the second <xref:System.Web.Caching.CacheDependency> object as a parameter. If the first dependency changes in any way, the cached item will be invalidated.  \n  \n [!code-vb[CacheDependency Constructor7#1](~/add/codesnippet/visualbasic/e6e24549-1cfa-4cc8-9d48-_1.aspx)]\n [!code-cs[CacheDependency Constructor7#1](~/add/codesnippet/csharp/e6e24549-1cfa-4cc8-9d48-_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency);
    parameters:
    - id: filenames
      type: System.String[]
      description: "Een matrix met paden (voor bestanden of mappen) die het object in de cache is afhankelijk van is. Wanneer een van deze wijzigingen resources, het object in de cache verouderd en wordt verwijderd uit de cache."
    - id: cachekeys
      type: System.String[]
      description: "Een matrix van cache sleutels die het nieuwe object controleert op wijzigingen. Wanneer een van deze wijzigingen van de sleutels cache, wordt het object in de cache die is gekoppeld aan dit afhankelijkheidsobject verouderd en wordt verwijderd uit de cache."
    - id: dependency
      type: System.Web.Caching.CacheDependency
      description: "Een ander exemplaar van de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klasse waarvan dit exemplaar afhankelijk is."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  id: '#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)'
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: CacheDependency(String[],String[],CacheDependency,DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klasse waarbij een matrix met paden (voor bestanden of mappen), een matrix van cache sleutels of beide op wijzigingen wordt gecontroleerd. Ook kan zichzelf afhankelijk is van een ander exemplaar van de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klasse en een tijdstip waarop de controle begint."
  remarks: "Also, if any of the directories or files specified in the `filenames` parameter is not found in the file system, it is treated as missing. If a directory or file is missing when the object with the dependency is added to the <xref:System.Web.Caching.Cache>, the cached object will be removed from the <xref:System.Web.Caching.Cache> when that directory or file is created.  \n  \n For example, assume that you add an object to the <xref:System.Web.Caching.Cache> with a dependency on the following file path: c:\\stocks\\xyz.dat. If that file is not found when the <xref:System.Web.Caching.CacheDependency> object is created, but is created later, the cached object is removed upon the creation of the xyz.dat file.  \n  \n> [!NOTE]\n>  Change tracking begins immediately and is not directly based on the `start` parameter. Use the `start` parameter to pass a date and time in the past against which you want to check the last modified date of any of the objects passed in the `filenames`, `cachekeys`, or `dependency` parameters. If the last modified date for any of those objects is later than the date and time passed in the `start` parameter, the cached item is removed from the <xref:System.Web.Caching.Cache>."
  example:
  - "The following code example shows a `CreateDependency` method. When this method is called, it creates a <xref:System.DateTime> object and the <xref:System.Web.Caching.Cache.Item%2A?displayProperty=fullName> property is used to add an item to the cache with a key parameter of `key1` and a value of `Value 1`. An array of strings, `dependencyKey`, is then created with the value at its first (and only) index set to the value of `key1` as well. The <xref:System.Web.Caching.CacheDependency.%23ctor%2A?displayProperty=fullName> constructor is then used to create a <xref:System.Web.Caching.CacheDependency> object, `dep1`, which passes `dependencyKey` as a parameter argument. A second <xref:System.Web.Caching.CacheDependency> object, `dep2`, is then created using this constructor, with `dep1` and the <xref:System.DateTime> object passed as parameter arguments. This second dependency is dependent on the first, and dependency monitoring will begin 10 seconds after the `CreateDependency` method is called. The <xref:System.Web.Caching.Cache.Insert%2A?displayProperty=fullName> method is called next, using the second <xref:System.Web.Caching.CacheDependency> object as a parameter. If the first dependency changes in any way, the cached item will be invalidated.  \n  \n [!code-cs[CacheDependency Constructor8#1](~/add/codesnippet/csharp/b4a521ab-493f-41c7-94fa-_1.aspx)]\n [!code-vb[CacheDependency Constructor8#1](~/add/codesnippet/visualbasic/b4a521ab-493f-41c7-94fa-_1.aspx)]"
  syntax:
    content: public CacheDependency (string[] filenames, string[] cachekeys, System.Web.Caching.CacheDependency dependency, DateTime start);
    parameters:
    - id: filenames
      type: System.String[]
      description: "Een matrix met paden (voor bestanden of mappen) die het object in de cache is afhankelijk van is. Wanneer een van deze wijzigingen resources, het object in de cache verouderd en wordt verwijderd uit de cache."
    - id: cachekeys
      type: System.String[]
      description: "Een matrix van cache sleutels die het nieuwe object controleert op wijzigingen. Wanneer een van deze wijzigingen van de sleutels cache, wordt het object in de cache die is gekoppeld aan dit afhankelijkheidsobject verouderd en wordt verwijderd uit de cache."
    - id: dependency
      type: System.Web.Caching.CacheDependency
      description: "Een ander exemplaar van de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klasse waarvan dit exemplaar afhankelijk is."
    - id: start
      type: System.DateTime
      description: "De tijd op basis waarvan de laatste wijzigingsdatum van de objecten in de arrays controleren en de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> object."
  overload: System.Web.Caching.CacheDependency.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.DependencyDispose
  id: DependencyDispose
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: DependencyDispose()
  nameWithType: CacheDependency.DependencyDispose()
  fullName: System.Web.Caching.CacheDependency.DependencyDispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Versies van de resources die worden gebruikt door de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klasse en alle klassen die zijn afgeleid van <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref>."
  remarks: "Een klasse die is afgeleid van de <xref:System.Web.Caching.CacheDependency>klasse is vereist voor het implementeren van deze methode om de afgeleide klasse heeft gebruikte resources op te schonen.</xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example shows a class that inherits from the <xref:System.Web.Caching.CacheDependency> class and overrides the DependencyDispose method. When this method is called, it sets a custom Boolean property named `Disposed` to `true`.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_7_1.vb)]"
  syntax:
    content: protected virtual void DependencyDispose ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.DependencyDispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.Dispose
  id: Dispose
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: Dispose()
  nameWithType: CacheDependency.Dispose()
  fullName: System.Web.Caching.CacheDependency.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Versies van de resources die worden gebruikt door de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> object."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.FinishInit
  id: FinishInit
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: FinishInit()
  nameWithType: CacheDependency.FinishInit()
  fullName: System.Web.Caching.CacheDependency.FinishInit()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Initialisatie van voltooit de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> object."
  remarks: "De methode FinishInit is voltooid voor de initialisatie van de <xref:System.Web.Caching.CacheDependency>object.</xref:System.Web.Caching.CacheDependency> Deze methode wordt aangeroepen door alle <xref:System.Web.Caching.CacheDependency>constructors.</xref:System.Web.Caching.CacheDependency>"
  syntax:
    content: protected void FinishInit ();
    parameters: []
  overload: System.Web.Caching.CacheDependency.FinishInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.GetFileDependencies
  id: GetFileDependencies
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: GetFileDependencies()
  nameWithType: CacheDependency.GetFileDependencies()
  fullName: System.Web.Caching.CacheDependency.GetFileDependencies()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Hiermee haalt u de afhankelijkheden."
  syntax:
    content: public virtual string[] GetFileDependencies ();
    parameters: []
    return:
      type: System.String[]
      description: "De afhankelijkheden."
  overload: System.Web.Caching.CacheDependency.GetFileDependencies*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.GetUniqueID
  id: GetUniqueID
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: GetUniqueID()
  nameWithType: CacheDependency.GetUniqueID()
  fullName: System.Web.Caching.CacheDependency.GetUniqueID()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Haalt een unieke id voor een <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> object."
  remarks: "Deze methode kan zijn bijzonder nuttig voor het bijhouden van meerdere exemplaren van de <xref:System.Web.Caching.CacheDependency>klasse die is gekoppeld aan een item of een toepassing.</xref:System.Web.Caching.CacheDependency>       De id is een combinatie van de bestandsnaam (voor de afhankelijkheid van een bestand) of de naam van de sleutel (voor de afhankelijkheid van een cache-sleutel) en een tekenreeks die door deze methode wordt toegewezen aan de afhankelijkheid. In de klassen die zijn afgeleid van de <xref:System.Web.Caching.CacheDependency>klasse, kunt u deze methode om aan te passen hoe wordt de unieke id gegenereerd overschrijven.</xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example creates an <xref:System.Web.Caching.AggregateCacheDependency> object, named `aggDep`, with two <xref:System.Web.Caching.CacheDependency> objects in its array. Once `aggDep` is instantiated, the code calls the GetUniqueID method to generate a unique identifier for both dependencies that `aggDep` contains and displays the identifiers to the containing page. An item is then added to the <xref:System.Web.Caching.Cache>, using the <xref:System.Web.Caching.Cache.Insert%2A> method, with `aggDep` as a dependency.  \n  \n [!code-vb[CachingSamples_AggregateCacheDependency1#3](~/add/codesnippet/visualbasic/m-system.web.caching.cac_1_1.aspx)]"
  syntax:
    content: public virtual string GetUniqueID ();
    parameters: []
    return:
      type: System.String
      description: "De unieke id voor de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> object."
  overload: System.Web.Caching.CacheDependency.GetUniqueID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.HasChanged
  id: HasChanged
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: HasChanged
  nameWithType: CacheDependency.HasChanged
  fullName: System.Web.Caching.CacheDependency.HasChanged
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Haalt een waarde die aangeeft of de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> -object is gewijzigd."
  remarks: "U kunt een item toevoegen aan een ASP.NET-toepassing <xref:System.Web.Caching.Cache>met een <xref:System.Web.Caching.CacheDependency>.</xref:System.Web.Caching.CacheDependency> </xref:System.Web.Caching.Cache> Wanneer de <xref:System.Web.Caching.CacheDependency>wordt gewijzigd, het item toegevoegd aan de <xref:System.Web.Caching.Cache>is ongeldig gemaakt en verwijderd uit de cache.</xref:System.Web.Caching.Cache> </xref:System.Web.Caching.CacheDependency> U kunt deze eigenschap gebruiken om te bepalen of een <xref:System.Web.Caching.CacheDependency>is gewijzigd en opnieuw maken van het item in de <xref:System.Web.Caching.Cache>als die is opgetreden.</xref:System.Web.Caching.Cache> </xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example demonstrates using the HasChanged property to determine whether a <xref:System.Web.Caching.CacheDependency> changed since the previous request for an item in the <xref:System.Web.Caching.Cache>. The `dt` value passed in the `start` parameter is set to <xref:System.DateTime.Now%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/visualbasic/p-system.web.caching.cac_1_1.aspx)]\n [!code-cs[System.Web.Caching.CacheDependency_HasChanged#1](~/add/codesnippet/csharp/p-system.web.caching.cac_1_1.aspx)]"
  syntax:
    content: public bool HasChanged { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> -object is gewijzigd; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.Caching.CacheDependency.HasChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  id: NotifyDependencyChanged(System.Object,System.EventArgs)
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: NotifyDependencyChanged(Object,EventArgs)
  nameWithType: CacheDependency.NotifyDependencyChanged(Object,EventArgs)
  fullName: System.Web.Caching.CacheDependency.NotifyDependencyChanged(Object,EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "De base waarschuwt <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> -object dat de afhankelijkheid dat wordt vertegenwoordigd door een afgeleide <xref href=&quot;System.Web.Caching.CacheDependency&quot;> </xref> klasse is gewijzigd."
  remarks: "Een klasse die is afgeleid van de <xref:System.Web.Caching.CacheDependency>klasse deze methode moet geïmplementeerd.</xref:System.Web.Caching.CacheDependency>       Wanneer u afgeleid van de <xref:System.Web.Caching.CacheDependency>klasse, gebruikt u de basisfunctionaliteit van elke methode of eigenschap die u niet worden genegeerd.</xref:System.Web.Caching.CacheDependency> Wanneer u een exemplaar van de afgeleide klasse maakt, vertegenwoordigt voor de bestanden, cache-sleutels, databasetabellen of andere willekeurige objecten die u wilt maken van een item in de cache afhankelijk van. Wanneer een afhankelijkheid item wordt gewijzigd, deze methode een melding van de basisfunctionaliteit van de <xref:System.Web.Caching.CacheDependency>klasse die het item gewijzigd, zodat de waarden van de <xref:System.Web.Caching.CacheDependency.HasChanged%2A>en <xref:System.Web.Caching.CacheDependency.UtcLastModified%2A>Eigenschappen kunnen worden bijgewerkt.</xref:System.Web.Caching.CacheDependency.UtcLastModified%2A> </xref:System.Web.Caching.CacheDependency.HasChanged%2A> </xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following code example shows a class that inherits from the <xref:System.Web.Caching.CacheDependency> class. It creates a public method, `ResetDependency`, that uses the <xref:System.Web.Caching.CacheDependency.SetUtcLastModified%2A> method to change the time at which the dependency was modified, and then calls the NotifyDependencyChanged method.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/0410edfc-9961-4a15-80eb-_1.vb)]"
  syntax:
    content: protected void NotifyDependencyChanged (object sender, EventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "De bron van de gebeurtenis."
    - id: e
      type: System.EventArgs
      description: "Een &lt;xref:System.EventArgs?displayProperty=fullName&gt; object waarin de gebeurtenisgegevens worden opgeslagen."
  overload: System.Web.Caching.CacheDependency.NotifyDependencyChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  id: SetUtcLastModified(System.DateTime)
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: SetUtcLastModified(DateTime)
  nameWithType: CacheDependency.SetUtcLastModified(DateTime)
  fullName: System.Web.Caching.CacheDependency.SetUtcLastModified(DateTime)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Markeert de tijd waarop een afhankelijkheid laatst gewijzigd."
  remarks: ''
  example:
  - "The following code example shows a class that inherits from the <xref:System.Web.Caching.CacheDependency> class. It creates a public method, `ResetDependency`, that uses the SetUtcLastModified method to change the time at which the dependency was modified, and then calls the <xref:System.Web.Caching.CacheDependency.NotifyDependencyChanged%2A> method.  \n  \n [!code-vb[CacheDependency_Whidbey_Example1#1](~/add/codesnippet/visualbasic/m-system.web.caching.cac_6_1.vb)]"
  syntax:
    content: protected void SetUtcLastModified (DateTime utcLastModified);
    parameters:
    - id: utcLastModified
      type: System.DateTime
      description: "De tijd waarop de afhankelijkheid laatst is gewijzigd."
  overload: System.Web.Caching.CacheDependency.SetUtcLastModified*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Caching.CacheDependency.UtcLastModified
  id: UtcLastModified
  parent: System.Web.Caching.CacheDependency
  langs:
  - csharp
  name: UtcLastModified
  nameWithType: CacheDependency.UtcLastModified
  fullName: System.Web.Caching.CacheDependency.UtcLastModified
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Caching
  summary: "Hiermee haalt u de tijd waarop de afhankelijkheid voor het laatst is gewijzigd."
  remarks: "Deze eigenschap wordt gemeten in Coordinated Universal Time (UTC) (ook wel bekend als Greenwich Mean Time)."
  example:
  - "The following code example uses the <xref:System.Web.Caching.AggregateCacheDependency> class to add an item, with two <xref:System.Web.Caching.CacheDependency> object dependencies, to the <xref:System.Web.Caching.Cache>. When a request for the <xref:System.Web.Caching.Cache> item is made, the code checks whether the item is in the <xref:System.Web.Caching.Cache>. If it is, the UtcLastModified property is converted to a string and displayed on the page. If it is not, the item and its two dependencies are created and added to the <xref:System.Web.Caching.Cache>.  \n  \n [!code-vb[CachingSamples_AggregateCacheDependency1#2](~/add/codesnippet/visualbasic/p-system.web.caching.cac_0_1.aspx)]"
  syntax:
    content: public DateTime UtcLastModified { get; }
    return:
      type: System.DateTime
      description: "De tijd waarop de afhankelijkheid voor het laatst is gewijzigd."
  overload: System.Web.Caching.CacheDependency.UtcLastModified*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Caching.CacheDependency.#ctor
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency()
  nameWithType: CacheDependency.CacheDependency()
  fullName: System.Web.Caching.CacheDependency.CacheDependency()
- uid: System.Web.Caching.CacheDependency.#ctor(System.String)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String)
  nameWithType: CacheDependency.CacheDependency(String)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[])
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[])
  nameWithType: CacheDependency.CacheDependency(String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Caching.CacheDependency.#ctor(System.String,System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String,DateTime)
  nameWithType: CacheDependency.CacheDependency(String,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String,DateTime)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],DateTime)
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[])
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[])
  nameWithType: CacheDependency.CacheDependency(String[],String[])
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[])
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[],DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],DateTime)
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[],CacheDependency)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency)
- uid: System.Web.Caching.CacheDependency
  parent: System.Web.Caching
  isExternal: false
  name: CacheDependency
  nameWithType: CacheDependency
  fullName: System.Web.Caching.CacheDependency
- uid: System.Web.Caching.CacheDependency.#ctor(System.String[],System.String[],System.Web.Caching.CacheDependency,System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency(String[],String[],CacheDependency,DateTime)
  nameWithType: CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
  fullName: System.Web.Caching.CacheDependency.CacheDependency(String[],String[],CacheDependency,DateTime)
- uid: System.Web.Caching.CacheDependency.DependencyDispose
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: DependencyDispose()
  nameWithType: CacheDependency.DependencyDispose()
  fullName: System.Web.Caching.CacheDependency.DependencyDispose()
- uid: System.Web.Caching.CacheDependency.Dispose
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: Dispose()
  nameWithType: CacheDependency.Dispose()
  fullName: System.Web.Caching.CacheDependency.Dispose()
- uid: System.Web.Caching.CacheDependency.FinishInit
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: FinishInit()
  nameWithType: CacheDependency.FinishInit()
  fullName: System.Web.Caching.CacheDependency.FinishInit()
- uid: System.Web.Caching.CacheDependency.GetFileDependencies
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetFileDependencies()
  nameWithType: CacheDependency.GetFileDependencies()
  fullName: System.Web.Caching.CacheDependency.GetFileDependencies()
- uid: System.Web.Caching.CacheDependency.GetUniqueID
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetUniqueID()
  nameWithType: CacheDependency.GetUniqueID()
  fullName: System.Web.Caching.CacheDependency.GetUniqueID()
- uid: System.Web.Caching.CacheDependency.HasChanged
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: HasChanged
  nameWithType: CacheDependency.HasChanged
  fullName: System.Web.Caching.CacheDependency.HasChanged
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Caching.CacheDependency.NotifyDependencyChanged(System.Object,System.EventArgs)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: NotifyDependencyChanged(Object,EventArgs)
  nameWithType: CacheDependency.NotifyDependencyChanged(Object,EventArgs)
  fullName: System.Web.Caching.CacheDependency.NotifyDependencyChanged(Object,EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.Caching.CacheDependency.SetUtcLastModified(System.DateTime)
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: SetUtcLastModified(DateTime)
  nameWithType: CacheDependency.SetUtcLastModified(DateTime)
  fullName: System.Web.Caching.CacheDependency.SetUtcLastModified(DateTime)
- uid: System.Web.Caching.CacheDependency.UtcLastModified
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: UtcLastModified
  nameWithType: CacheDependency.UtcLastModified
  fullName: System.Web.Caching.CacheDependency.UtcLastModified
- uid: System.Web.Caching.CacheDependency.#ctor*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: CacheDependency
  nameWithType: CacheDependency.CacheDependency
- uid: System.Web.Caching.CacheDependency.DependencyDispose*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: DependencyDispose
  nameWithType: CacheDependency.DependencyDispose
- uid: System.Web.Caching.CacheDependency.Dispose*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: Dispose
  nameWithType: CacheDependency.Dispose
- uid: System.Web.Caching.CacheDependency.FinishInit*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: FinishInit
  nameWithType: CacheDependency.FinishInit
- uid: System.Web.Caching.CacheDependency.GetFileDependencies*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetFileDependencies
  nameWithType: CacheDependency.GetFileDependencies
- uid: System.Web.Caching.CacheDependency.GetUniqueID*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: GetUniqueID
  nameWithType: CacheDependency.GetUniqueID
- uid: System.Web.Caching.CacheDependency.HasChanged*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: HasChanged
  nameWithType: CacheDependency.HasChanged
- uid: System.Web.Caching.CacheDependency.NotifyDependencyChanged*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: NotifyDependencyChanged
  nameWithType: CacheDependency.NotifyDependencyChanged
- uid: System.Web.Caching.CacheDependency.SetUtcLastModified*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: SetUtcLastModified
  nameWithType: CacheDependency.SetUtcLastModified
- uid: System.Web.Caching.CacheDependency.UtcLastModified*
  parent: System.Web.Caching.CacheDependency
  isExternal: false
  name: UtcLastModified
  nameWithType: CacheDependency.UtcLastModified
