### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.NativeWindow
  id: NativeWindow
  children:
  - System.Windows.Forms.NativeWindow.#ctor
  - System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)
  - System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)
  - System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)
  - System.Windows.Forms.NativeWindow.DestroyHandle
  - System.Windows.Forms.NativeWindow.Finalize
  - System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)
  - System.Windows.Forms.NativeWindow.Handle
  - System.Windows.Forms.NativeWindow.OnHandleChange
  - System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)
  - System.Windows.Forms.NativeWindow.ReleaseHandle
  - System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)
  langs:
  - csharp
  name: NativeWindow
  nameWithType: NativeWindow
  fullName: System.Windows.Forms.NativeWindow
  type: Class
  summary: "Biedt een laag niveau inkapseling van een vensterkoppeling en een procedure venster."
  remarks: "Deze klasse wordt automatisch beheerd venster klasse maken en de registratie.       Een venster is niet in aanmerking komen voor garbagecollection wanneer deze gekoppeld aan een vensterkoppeling is. Zodat het juiste garbagecollection moeten ingangen ofwel worden vernietigd handmatig met <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>of vrijgegeven met <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> </xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>      > [!NOTE] > De <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>methode wordt aangeroepen wanneer het bericht WM_NCDESTROY wordt verwerkt.</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> Dit betekent dat er zijn ook gevallen welke wanneer u niet hoeft aan te roepen handmatig <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, maar het is raadzaam om te doen. maar</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>       De klasse NativeWindow biedt de volgende eigenschappen en methoden voor het beheren van ingangen: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, en <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> </xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> </xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> </xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A>"
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name. The example creates two classes that inherit from NativeWindow that accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message. The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the NativeWindow will use. The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.  \n  \n [!code-cpp[NativeWindow#1](~/add/codesnippet/cpp/t-system.windows.forms.n_0_1.cpp)]\n [!code-cs[NativeWindow#1](~/add/codesnippet/csharp/t-system.windows.forms.n_0_1.cs)]\n [!code-vb[NativeWindow#1](~/add/codesnippet/visualbasic/t-system.windows.forms.n_0_1.vb)]"
  syntax:
    content: 'public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Windows.Forms.IWin32Window
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.#ctor
  id: '#ctor'
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: NativeWindow()
  nameWithType: NativeWindow.NativeWindow()
  fullName: System.Windows.Forms.NativeWindow.NativeWindow()
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Initialiseert een exemplaar van de <xref href=&quot;System.Windows.Forms.NativeWindow&quot;> </xref> klasse."
  remarks: "Dit is de standaardconstructor NativeWindow geleverd door de compiler. De <xref:System.Windows.Forms.NativeWindow>klasse heeft ook een statische constructor die toepassing berichten domeinomvattende handlers en hash-tabellen initialiseert.</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: public NativeWindow ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)
  id: AssignHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: AssignHandle(IntPtr)
  nameWithType: NativeWindow.AssignHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.AssignHandle(IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Een ingang toegewezen aan dit venster."
  remarks: "<xref:System.Windows.Forms.NativeWindow.WndProc%2A>onderschept verzonden vensterberichten aan de `handle` parameter.</xref:System.Windows.Forms.NativeWindow.WndProc%2A> Gebruik <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>opnieuw instellen van de greep venster procedure met de standaard venster procedure.</xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>       De methodeaanroepen AssignHandle de <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>methode aan te geven dat de waarde van de <xref:System.Windows.Forms.NativeWindow.Handle%2A>eigenschap wordt gewijzigd.</xref:System.Windows.Forms.NativeWindow.Handle%2A> </xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>      > [!NOTE] > De ingang toewijzen kan niet in een andere toepassing-proces."
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the AssignHandle and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_4_1.cpp)]\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_4_1.cs)]\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_4_1.vb)]"
  syntax:
    content: public void AssignHandle (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "De koppeling toewijzen aan dit venster."
  overload: System.Windows.Forms.NativeWindow.AssignHandle*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Dit venster is al een ingang."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "De windows-procedure voor het bijbehorende systeemeigen venster kan niet worden opgehaald."
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)
  id: CreateHandle(System.Windows.Forms.CreateParams)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: CreateHandle(CreateParams)
  nameWithType: NativeWindow.CreateHandle(CreateParams)
  fullName: System.Windows.Forms.NativeWindow.CreateHandle(CreateParams)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Maakt en de ingang van een venster met het maken van de opgegeven parameters."
  remarks: "De `cp` parameter geeft u de waarden die worden doorgegeven aan de systeemeigen Win32 `CreateWindowEx` methode voor het maken van een venster en de greep.       Wanneer de <xref:System.Windows.Forms.CreateParams.ClassName%2A>veld is niet `null`, de zojuist gemaakte vensterkoppeling neemt over van de opgegeven klasse.</xref:System.Windows.Forms.CreateParams.ClassName%2A> Bijvoorbeeld, als <xref:System.Windows.Forms.CreateParams.ClassName%2A>is ingesteld op `BUTTON`, het nieuwe venster is gebaseerd op de Win32 `BUTTON` venster klasse</xref:System.Windows.Forms.CreateParams.ClassName%2A> De <xref:System.Windows.Forms.CreateParams.Param%2A>eigenschap van de <xref:System.Windows.Forms.CreateParams.ClassName%2A>object moet `null` of verwijzen naar een exemplaar van een klasse die is gedeclareerd als een structuur.</xref:System.Windows.Forms.CreateParams.ClassName%2A> </xref:System.Windows.Forms.CreateParams.Param%2A>       Deze code is een fragment uit het voorbeeld in de <xref:System.Windows.Forms.NativeWindow>overzicht van de klasse.</xref:System.Windows.Forms.NativeWindow> Bepaalde code wordt niet weergegeven omwille van de beknopt alternatief bevat. Zie <xref:System.Windows.Forms.NativeWindow>voor het hele codegedeelte.</xref:System.Windows.Forms.NativeWindow>      > [!NOTE] > De naam van de klasse die is geregistreerd met het besturingssysteem."
  example:
  - "The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the CreateHandle method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.  \n  \n> [!NOTE]\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \n  \n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/4bc4c996-2177-4901-b43d-_1.cpp)]\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/4bc4c996-2177-4901-b43d-_1.cs)]\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/4bc4c996-2177-4901-b43d-_1.vb)]"
  syntax:
    content: public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);
    parameters:
    - id: cp
      type: System.Windows.Forms.CreateParams
      description: "Een <xref href=&quot;System.Windows.Forms.CreateParams&quot;> </xref> Hiermee worden de parameters maken voor dit venster."
  overload: System.Windows.Forms.NativeWindow.CreateHandle*
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Het besturingssysteem heeft te weinig bronnen bij het maken van de native-venster."
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "De systeemeigen Win32-API kan het opgegeven venster niet maken."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De ingang van het huidige systeemeigen venster is al toegewezen; in de uitleg, de <xref:System.Windows.Forms.NativeWindow.Handle*>eigenschap is niet gelijk aan <xref:System.IntPtr.Zero>.</xref:System.IntPtr.Zero> </xref:System.Windows.Forms.NativeWindow.Handle*>"
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)
  id: DefWndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: DefWndProc(Message)
  nameWithType: NativeWindow.DefWndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.DefWndProc(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Hiermee wordt de standaard venster procedure die is gekoppeld aan dit venster."
  remarks: "Normaal gesproken u alleen de DefWndProc methode aanroepen wanneer u het vensterberichten worden onderschept en de standaard venster procedure dat wilt voor het afhandelen van het bericht. DefWndProc mag niet worden aangeroepen om een venster bericht verzenden naar het venster. de Win32 aanroepen `SendMessage` werken in plaats daarvan.       Er treedt een fout aan te roepen DefWndProc wanneer de <xref:System.Windows.Forms.NativeWindow.Handle%2A>eigenschap is ingesteld op 0.</xref:System.Windows.Forms.NativeWindow.Handle%2A>"
  syntax:
    content: public void DefWndProc (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "Het bericht dat momenteel wordt verwerkt."
  overload: System.Windows.Forms.NativeWindow.DefWndProc*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.DestroyHandle
  id: DestroyHandle
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: DestroyHandle()
  nameWithType: NativeWindow.DestroyHandle()
  fullName: System.Windows.Forms.NativeWindow.DestroyHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Het venster en de bijbehorende ingang vernietigd."
  remarks: "Deze methode vernietigt u het venster die zijn gekoppeld aan de <xref:System.Windows.Forms.NativeWindow.Handle%2A>, stelt de <xref:System.Windows.Forms.NativeWindow.Handle%2A>eigenschap in op 0 en aanroepen de <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>methode in overeenstemming met de wijziging.</xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A> Normaal gesproken aanroepen u alleen DestroyHandle wanneer u klaar bent met het systeemeigen venster.      > [!NOTE] > De <xref:System.Windows.Forms.NativeWindow>klasse automatisch wordt vernietigen van het bijbehorende venster en de bronnen in reactie op een bericht WM_DESTROY vrijgeven.</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: public virtual void DestroyHandle ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.DestroyHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.Finalize
  id: Finalize
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: Finalize()
  nameWithType: NativeWindow.Finalize()
  fullName: System.Windows.Forms.NativeWindow.Finalize()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Versies van de resources die zijn gekoppeld aan dit venster."
  remarks: "De methode Finalize verwijdert u de Win32 afgeleide klasse die is gekoppeld aan de huidige <xref:System.Windows.Forms.NativeWindow>exemplaar, de ingang vrijgegeven en plaatst een WM_CLOSE-bericht naar het bijbehorende venster.</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: ~NativeWindow ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)
  id: FromHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: FromHandle(IntPtr)
  nameWithType: NativeWindow.FromHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.FromHandle(IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Hiermee haalt u het venster die zijn gekoppeld aan de opgegeven ingang."
  remarks: "Als u een ingang van een andere methode ontvangt, moet u deze methode gebruiken voor het ophalen van het venster met de ingang die is gekoppeld. De ingang moet al het eigendom zijn door een andere <xref:System.Windows.Forms.NativeWindow>in de huidige verwerken, anders wordt `null` wordt geretourneerd.</xref:System.Windows.Forms.NativeWindow>"
  syntax:
    content: public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: "Een koppeling naar een venster."
    return:
      type: System.Windows.Forms.NativeWindow
      description: "De <xref href=&quot;System.Windows.Forms.NativeWindow&quot;> </xref> die zijn gekoppeld aan de opgegeven ingang. Deze methode retourneert <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> wanneer de ingang is geen een venster gekoppeld."
  overload: System.Windows.Forms.NativeWindow.FromHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.Handle
  id: Handle
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: Handle
  nameWithType: NativeWindow.Handle
  fullName: System.Windows.Forms.NativeWindow.Handle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Hiermee wordt de ingang voor dit venster."
  remarks: "Gebruik deze methode wanneer u Windows-API-methoden waarvoor een ingang voor een venster of het besturingselement aanroept."
  example:
  - "The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this. The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the Handle changes.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.  \n  \n> [!NOTE]\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \n  \n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/p-system.windows.forms.n_14_1.cpp)]\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/p-system.windows.forms.n_14_1.cs)]\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/p-system.windows.forms.n_14_1.vb)]"
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "Als dit lukt, een <xref:System.IntPtr>die de ingang naar de bijbehorende systeemeigen Win32-venster; anders wordt 0 als u geen ingang is gekoppeld aan het venster.</xref:System.IntPtr>"
  overload: System.Windows.Forms.NativeWindow.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.OnHandleChange
  id: OnHandleChange
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: OnHandleChange()
  nameWithType: NativeWindow.OnHandleChange()
  fullName: System.Windows.Forms.NativeWindow.OnHandleChange()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Hiermee geeft u een meldingsmethode die wordt aangeroepen wanneer de koppeling voor een venster wordt gewijzigd."
  remarks: "Deze methode wordt aangeroepen wanneer de waarde van de <xref:System.Windows.Forms.NativeWindow.Handle%2A>eigenschap wordt gewijzigd.</xref:System.Windows.Forms.NativeWindow.Handle%2A>"
  example:
  - "The following code example demonstrates creating a window with a specific operating system window class name. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this. The example also demonstrates overriding the OnHandleChange method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.  \n  \n The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`. This creates a Win32 button window. The location and size of the button is set, along with specifying additional window styles. The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received. Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n> [!NOTE]\n>  Some control types send their window messages to the window parent instead of the window. See the Windows Platform SDK for more information.  \n  \n [!code-cpp[NativeWindow#3](~/add/codesnippet/cpp/m-system.windows.forms.n_1_1.cpp)]\n [!code-cs[NativeWindow#3](~/add/codesnippet/csharp/m-system.windows.forms.n_1_1.cs)]\n [!code-vb[NativeWindow#3](~/add/codesnippet/visualbasic/m-system.windows.forms.n_1_1.vb)]"
  syntax:
    content: protected virtual void OnHandleChange ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.OnHandleChange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)
  id: OnThreadException(System.Exception)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: OnThreadException(Exception)
  nameWithType: NativeWindow.OnThreadException(Exception)
  fullName: System.Windows.Forms.NativeWindow.OnThreadException(Exception)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Als in een afgeleide klasse genegeerd, worden beheerd, een thread van niet-verwerkte uitzondering."
  remarks: "Normaal gesproken <xref:System.Windows.Forms.Application.OnThreadException%2A>ingangen thread uitzonderingen.</xref:System.Windows.Forms.Application.OnThreadException%2A>"
  syntax:
    content: protected virtual void OnThreadException (Exception e);
    parameters:
    - id: e
      type: System.Exception
      description: "Een <xref:System.Exception>die aangeeft dat de niet-verwerkte thread-uitzondering.</xref:System.Exception>"
  overload: System.Windows.Forms.NativeWindow.OnThreadException*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.ReleaseHandle
  id: ReleaseHandle
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: ReleaseHandle()
  nameWithType: NativeWindow.ReleaseHandle()
  fullName: System.Windows.Forms.NativeWindow.ReleaseHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Versies van de ingang die is gekoppeld aan dit venster."
  remarks: "Deze methode vernietigt niet de vensterkoppeling. In plaats daarvan wordt de ingang venster procedure met de standaard venster procedure ingesteld. Hiermee de <xref:System.Windows.Forms.NativeWindow.Handle%2A>eigenschap in op 0 en aanroepen <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>in overeenstemming met de wijziging.</xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> </xref:System.Windows.Forms.NativeWindow.Handle%2A>       Een venster wordt automatisch deze methode aanroept, als het een systeemeigen WM_NCDESTROY Win32-bericht, die aangeeft dat Windows de ingang is vernietigd ontvangt."
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and ReleaseHandle methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_0_1.cpp)]\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_0_1.cs)]\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_0_1.vb)]"
  syntax:
    content: public virtual void ReleaseHandle ();
    parameters: []
  overload: System.Windows.Forms.NativeWindow.ReleaseHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)
  id: WndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  langs:
  - csharp
  name: WndProc(Message)
  nameWithType: NativeWindow.WndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.WndProc(Message)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "Hiermee wordt de standaard venster procedure die is gekoppeld aan dit venster."
  remarks: "Deze methode wordt aangeroepen wanneer een venster bericht wordt verzonden naar de ingang van het venster."
  example:
  - "The following code example demonstrates intercepting operating system window messages in a window procedure. The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.  \n  \n The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the WndProc method to intercept the `WM_ACTIVATEAPP` window message. The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use. The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=fullName> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=fullName> events. When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1``ApplicationActivated` method.  \n  \n This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview. Some code is not shown for the purpose of brevity. See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.  \n  \n [!code-cpp[NativeWindow#2](~/add/codesnippet/cpp/m-system.windows.forms.n_3_1.cpp)]\n [!code-cs[NativeWindow#2](~/add/codesnippet/csharp/m-system.windows.forms.n_3_1.cs)]\n [!code-vb[NativeWindow#2](~/add/codesnippet/visualbasic/m-system.windows.forms.n_3_1.vb)]"
  syntax:
    content: protected virtual void WndProc (ref System.Windows.Forms.Message m);
    parameters:
    - id: m
      type: System.Windows.Forms.Message
      description: "Een <xref href=&quot;System.Windows.Forms.Message&quot;> </xref> dat is gekoppeld aan de huidige Windows-bericht."
  overload: System.Windows.Forms.NativeWindow.WndProc*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Forms.NativeWindow.#ctor
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: NativeWindow()
  nameWithType: NativeWindow.NativeWindow()
  fullName: System.Windows.Forms.NativeWindow.NativeWindow()
- uid: System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: AssignHandle(IntPtr)
  nameWithType: NativeWindow.AssignHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.AssignHandle(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: CreateHandle(CreateParams)
  nameWithType: NativeWindow.CreateHandle(CreateParams)
  fullName: System.Windows.Forms.NativeWindow.CreateHandle(CreateParams)
- uid: System.Windows.Forms.CreateParams
  parent: System.Windows.Forms
  isExternal: false
  name: CreateParams
  nameWithType: CreateParams
  fullName: System.Windows.Forms.CreateParams
- uid: System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DefWndProc(Message)
  nameWithType: NativeWindow.DefWndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.DefWndProc(Message)
- uid: System.Windows.Forms.Message
  parent: System.Windows.Forms
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Windows.Forms.Message
- uid: System.Windows.Forms.NativeWindow.DestroyHandle
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DestroyHandle()
  nameWithType: NativeWindow.DestroyHandle()
  fullName: System.Windows.Forms.NativeWindow.DestroyHandle()
- uid: System.Windows.Forms.NativeWindow.Finalize
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Finalize()
  nameWithType: NativeWindow.Finalize()
  fullName: System.Windows.Forms.NativeWindow.Finalize()
- uid: System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: FromHandle(IntPtr)
  nameWithType: NativeWindow.FromHandle(IntPtr)
  fullName: System.Windows.Forms.NativeWindow.FromHandle(IntPtr)
- uid: System.Windows.Forms.NativeWindow
  parent: System.Windows.Forms
  isExternal: false
  name: NativeWindow
  nameWithType: NativeWindow
  fullName: System.Windows.Forms.NativeWindow
- uid: System.Windows.Forms.NativeWindow.Handle
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Handle
  nameWithType: NativeWindow.Handle
  fullName: System.Windows.Forms.NativeWindow.Handle
- uid: System.Windows.Forms.NativeWindow.OnHandleChange
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnHandleChange()
  nameWithType: NativeWindow.OnHandleChange()
  fullName: System.Windows.Forms.NativeWindow.OnHandleChange()
- uid: System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnThreadException(Exception)
  nameWithType: NativeWindow.OnThreadException(Exception)
  fullName: System.Windows.Forms.NativeWindow.OnThreadException(Exception)
- uid: System.Windows.Forms.NativeWindow.ReleaseHandle
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: ReleaseHandle()
  nameWithType: NativeWindow.ReleaseHandle()
  fullName: System.Windows.Forms.NativeWindow.ReleaseHandle()
- uid: System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: WndProc(Message)
  nameWithType: NativeWindow.WndProc(Message)
  fullName: System.Windows.Forms.NativeWindow.WndProc(Message)
- uid: System.Windows.Forms.NativeWindow.#ctor*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: NativeWindow
  nameWithType: NativeWindow.NativeWindow
- uid: System.Windows.Forms.NativeWindow.AssignHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: AssignHandle
  nameWithType: NativeWindow.AssignHandle
- uid: System.Windows.Forms.NativeWindow.CreateHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: CreateHandle
  nameWithType: NativeWindow.CreateHandle
- uid: System.Windows.Forms.NativeWindow.DefWndProc*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DefWndProc
  nameWithType: NativeWindow.DefWndProc
- uid: System.Windows.Forms.NativeWindow.DestroyHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: DestroyHandle
  nameWithType: NativeWindow.DestroyHandle
- uid: System.Windows.Forms.NativeWindow.Finalize*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Finalize
  nameWithType: NativeWindow.Finalize
- uid: System.Windows.Forms.NativeWindow.FromHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: FromHandle
  nameWithType: NativeWindow.FromHandle
- uid: System.Windows.Forms.NativeWindow.Handle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: Handle
  nameWithType: NativeWindow.Handle
- uid: System.Windows.Forms.NativeWindow.OnHandleChange*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnHandleChange
  nameWithType: NativeWindow.OnHandleChange
- uid: System.Windows.Forms.NativeWindow.OnThreadException*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: OnThreadException
  nameWithType: NativeWindow.OnThreadException
- uid: System.Windows.Forms.NativeWindow.ReleaseHandle*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: ReleaseHandle
  nameWithType: NativeWindow.ReleaseHandle
- uid: System.Windows.Forms.NativeWindow.WndProc*
  parent: System.Windows.Forms.NativeWindow
  isExternal: false
  name: WndProc
  nameWithType: NativeWindow.WndProc
