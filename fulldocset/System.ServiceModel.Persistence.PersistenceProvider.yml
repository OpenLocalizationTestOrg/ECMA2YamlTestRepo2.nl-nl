### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Persistence.PersistenceProvider
  id: PersistenceProvider
  children:
  - System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)
  - System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)
  - System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)
  - System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)
  - System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)
  - System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)
  - System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)
  - System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)
  - System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)
  - System.ServiceModel.Persistence.PersistenceProvider.Id
  - System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)
  - System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)
  - System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)
  langs:
  - csharp
  name: PersistenceProvider
  nameWithType: PersistenceProvider
  fullName: System.ServiceModel.Persistence.PersistenceProvider
  type: Class
  summary: "De abstracte basisklasse waarvan alle voor duurzame services persistentie providers zijn afgeleid."
  remarks: "Gebruikers kunnen maken van klassen die zijn afgeleid van dit type maken voor duurzame services persistentie providers die gebruikmaken van aangepaste persistentie stores, zoals databases van derden, het bestandssysteem of opslagsystemen extern toegankelijk is. Zie <xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory>.</xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory> maken van een systeem geleverde implementatie van dit type die gebruikmaakt van Microsoft SQL Server als een persistentie-archief      > [!NOTE] > Bij het maken van persistentie provider implementaties, is het belangrijk dat de oorspronkelijke identiteit van de thread in de nieuwe provider-methoden (zoals <xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A>.</xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A> Anders kunnen lacunes beveiliging worden gemaakt, omdat operations vervolgens uitgevoerd onder de identiteit van de verkeerde."
  example:
  - For an implementation of this type that uses the file system as a persistence store, see the FilePersistenceProviderFactory.cs file in the DurableServiceFactory SDK sample.
  syntax:
    content: >-
      [System.Obsolete("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]

      public abstract class PersistenceProvider : System.ServiceModel.Channels.CommunicationObject
  inheritance:
  - System.ServiceModel.Channels.CommunicationObject
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)
  id: '#ctor(System.Guid)'
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: PersistenceProvider(Guid)
  nameWithType: PersistenceProvider.PersistenceProvider(Guid)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.PersistenceProvider(Guid)
  type: Constructor
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Wanneer een geïmplementeerd in een afgeleide klasse, initialiseert een nieuw exemplaar van de <xref href=&quot;System.ServiceModel.Persistence.PersistenceProvider&quot;> </xref> klasse."
  remarks: ''
  example:
  - "The following code demonstrates how to use the <xref:System.ServiceModel.Persistence.PersistenceProvider> constructor. This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]the DurableServiceFactory SDK sample.  \n  \n [!code-cs[PersistenceProvider#0](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#0)]"
  syntax:
    content: protected PersistenceProvider (Guid id);
    parameters:
    - id: id
      type: System.Guid
      description: "De unieke id van de statusgegevens van de service worden opgeslagen."
  overload: System.ServiceModel.Persistence.PersistenceProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: BeginCreate(Object,TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginCreate(Object,TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(Object,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Wanneer een geïmplementeerd in een afgeleide klasse, geeft het begin van de fase maken. De fase maken treedt op wanneer service-exemplaar records eerst worden gemaakt in het persistentie-archief."
  remarks: ''
  example:
  - "The following code demonstrates how to implement the BeginCreate method.  \n  \n [!code-cs[PersistenceProvider#14](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#14)]"
  syntax:
    content: public abstract IAsyncResult BeginCreate (object instance, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: instance
      type: System.Object
      description: "De status van het huidige exemplaar."
    - id: timeout
      type: System.TimeSpan
      description: "De periode waarna de persistentieprovider deze poging afgebroken."
    - id: callback
      type: System.AsyncCallback
      description: "De methode die moet worden aangeroepen wanneer de bewerking is voltooid."
    - id: state
      type: System.Object
      description: "Een gebruiker gemaakte object dat wordt onderscheiden van deze asynchrone bewerking van andere bewerkingen."
    return:
      type: System.IAsyncResult
      description: "De status van de aanroep van de asynchrone methode BeginCreate."
  overload: System.ServiceModel.Persistence.PersistenceProvider.BeginCreate*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: BeginDelete(Object,TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginDelete(Object,TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(Object,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Wanneer een geïmplementeerd in een afgeleide klasse, geeft het begin van de Delete-fase. De Delete-fase treedt op wanneer service wordt permanent verwijderd uit de opslag voor persistentie."
  remarks: ''
  example:
  - "The following code demonstrates how to implement the `BeginDelete` method. This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]the DurableServiceFactory SDK sample.  \n  \n [!code-cs[PersistenceProvider#6](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#6)]"
  syntax:
    content: public abstract IAsyncResult BeginDelete (object instance, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: instance
      type: System.Object
      description: "De status van het huidige exemplaar."
    - id: timeout
      type: System.TimeSpan
      description: "De periode waarna de persistentieprovider deze poging afgebroken."
    - id: callback
      type: System.AsyncCallback
      description: "De methode die moet worden aangeroepen wanneer de bewerking is voltooid."
    - id: state
      type: System.Object
      description: "Een gebruiker gemaakte object dat wordt onderscheiden van deze asynchrone bewerking van andere bewerkingen."
    return:
      type: System.IAsyncResult
      description: "De status van de aanroep van de asynchrone methode BeginDelete."
  overload: System.ServiceModel.Persistence.PersistenceProvider.BeginDelete*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: BeginLoad(TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginLoad(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Wanneer een geïmplementeerd in een afgeleide klasse, geeft het begin van de Load-fase. De Load-fase treedt op wanneer gegevens van de gebruikersstatus is geladen in de persistentieprovider uit de opslag voor persistentie."
  remarks: ''
  example:
  - "The following code demonstrates how to implement the `BeginLoad` method. This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]the DurableServiceFactory SDK sample.  \n  \n [!code-cs[PersistenceProvider#7](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#7)]"
  syntax:
    content: public abstract IAsyncResult BeginLoad (TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "De periode waarna de persistentieprovider deze poging afgebroken."
    - id: callback
      type: System.AsyncCallback
      description: "De methode die moet worden aangeroepen wanneer de bewerking is voltooid."
    - id: state
      type: System.Object
      description: "Een gebruiker gemaakte object dat wordt onderscheiden van deze asynchrone bewerking van andere bewerkingen."
    return:
      type: System.IAsyncResult
      description: "De status van de aanroep van de asynchrone methode BeginLoad."
  overload: System.ServiceModel.Persistence.PersistenceProvider.BeginLoad*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)
  id: BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: BeginLoadIfChanged(TimeSpan,Object,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginLoadIfChanged(TimeSpan,Object,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(TimeSpan,Object,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Wanneer een geïmplementeerd in een afgeleide klasse, geeft het begin van de LoadIfChanged-fase. De fase LoadIfChanged treedt op wanneer gegevens van de gebruikersstatus wordt geladen in de persistentieprovider uit de opslag voor persistentie en de van statusgegevens in het persistentie-archief is gewijzigd."
  remarks: ''
  example:
  - "The following code demonstrates how to implement the BeginLoadIfChanged method.  \n  \n [!code-cs[PersistenceProvider#11](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#11)]"
  syntax:
    content: public virtual IAsyncResult BeginLoadIfChanged (TimeSpan timeout, object instanceToken, AsyncCallback callback, object state);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "De periode waarna de persistentieprovider deze poging afgebroken."
    - id: instanceToken
      type: System.Object
      description: "Het token dat is geretourneerd door een eerdere <> </> *> of <> </> *> die staat voor de huidige status vastgehouden door de aanroeper."
    - id: callback
      type: System.AsyncCallback
      description: "De methode die moet worden aangeroepen wanneer de bewerking is voltooid."
    - id: state
      type: System.Object
      description: "Een gebruiker gemaakte object dat wordt onderscheiden van deze asynchrone bewerking van andere bewerkingen."
    return:
      type: System.IAsyncResult
      description: "De status van de aanroep van de asynchrone methode BeginLoadIfChanged."
  overload: System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: BeginUpdate(Object,TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginUpdate(Object,TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(Object,TimeSpan,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Wanneer een geïmplementeerd in een afgeleide klasse, geeft het begin van de Update-fase. De Update-fase treedt op wanneer service statusgegevens in het persistentie-archief wordt bijgewerkt."
  remarks: ''
  example:
  - "The following code demonstrates how to implement the BeginUpdate method.  \n  \n [!code-cs[PersistenceProvider#17](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#17)]"
  syntax:
    content: public abstract IAsyncResult BeginUpdate (object instance, TimeSpan timeout, AsyncCallback callback, object state);
    parameters:
    - id: instance
      type: System.Object
      description: "De status van het huidige exemplaar."
    - id: timeout
      type: System.TimeSpan
      description: "De periode waarna de persistentieprovider deze poging afgebroken."
    - id: callback
      type: System.AsyncCallback
      description: "De methode die moet worden aangeroepen wanneer de bewerking is voltooid."
    - id: state
      type: System.Object
      description: "Een gebruiker gemaakte object dat wordt onderscheiden van deze asynchrone bewerking van andere bewerkingen."
    return:
      type: System.IAsyncResult
      description: "De status van de aanroep van de asynchrone methode BeginUpdate."
  overload: System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)
  id: Create(System.Object,System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: Create(Object,TimeSpan)
  nameWithType: PersistenceProvider.Create(Object,TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Create(Object,TimeSpan)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Wanneer een geïmplementeerd in een afgeleide klasse, maakt een record van de status van service in het persistentie-archief."
  remarks: ''
  example:
  - "The following code demonstrates how to implement the Create method.  \n  \n [!code-cs[PersistenceProvider#15](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#15)]"
  syntax:
    content: public abstract object Create (object instance, TimeSpan timeout);
    parameters:
    - id: instance
      type: System.Object
      description: "De status van het huidige exemplaar."
    - id: timeout
      type: System.TimeSpan
      description: "De periode waarna de persistentieprovider deze poging afgebroken."
    return:
      type: System.Object
      description: "Het exemplaar token overeenkomt met de status van de zojuist hebt opgeslagen. Dit kan worden doorgegeven aan <xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>om te bepalen of de status in het persistentie-archief wijkt af van de status wanneer maken is aangeroepen.</xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>"
  overload: System.ServiceModel.Persistence.PersistenceProvider.Create*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)
  id: Delete(System.Object,System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: Delete(Object,TimeSpan)
  nameWithType: PersistenceProvider.Delete(Object,TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Delete(Object,TimeSpan)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Wanneer een geïmplementeerd in een afgeleide klasse, verwijdert u informatie over de status van de service permanent uit de opslag voor persistentie."
  remarks: ''
  example:
  - "The following code demonstrates how to implement the Delete method. This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]the DurableServiceFactory SDK sample.  \n  \n [!code-cs[PersistenceProvider#9](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#9)]"
  syntax:
    content: public abstract void Delete (object instance, TimeSpan timeout);
    parameters:
    - id: instance
      type: System.Object
      description: "De status van het huidige exemplaar."
    - id: timeout
      type: System.TimeSpan
      description: "De periode waarna de persistentieprovider deze poging afgebroken."
  overload: System.ServiceModel.Persistence.PersistenceProvider.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)
  id: EndCreate(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: EndCreate(IAsyncResult)
  nameWithType: PersistenceProvider.EndCreate(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndCreate(IAsyncResult)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Geïmplementeerd in een afgeleide klasse, geeft aan het einde van de fase maken. De fase maken treedt op wanneer service statusrecords eerst worden gemaakt in het persistentie-archief."
  remarks: ''
  example:
  - "The following code demonstrates how to implement the EndCreate method.  \n  \n [!code-cs[PersistenceProvider#16](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#16)]"
  syntax:
    content: public abstract object EndCreate (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "Een verwijzing naar het resultaat van de bewerking."
    return:
      type: System.Object
      description: "Het exemplaar token overeenkomt met de status van de zojuist hebt opgeslagen. Dit kan worden doorgegeven aan <xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>om te bepalen of de status in het persistentie-archief wijkt af van de status wanneer maken is aangeroepen.</xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>"
  overload: System.ServiceModel.Persistence.PersistenceProvider.EndCreate*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)
  id: EndDelete(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: EndDelete(IAsyncResult)
  nameWithType: PersistenceProvider.EndDelete(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndDelete(IAsyncResult)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Geïmplementeerd in een afgeleide klasse, geeft aan het einde van de Delete-fase. De Delete-fase treedt op wanneer gegevens van de gebruikersstatus wordt permanent verwijderd uit de opslag voor persistentie."
  remarks: ''
  example:
  - "The following code demonstrates how to implement the EndDelete method. This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file. For more information, see the DurableServiceFactory SDK sample.  \n  \n [!code-cs[PersistenceProvider#5](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#5)]"
  syntax:
    content: public abstract void EndDelete (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "Een verwijzing naar het resultaat van de bewerking."
  overload: System.ServiceModel.Persistence.PersistenceProvider.EndDelete*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)
  id: EndLoad(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: EndLoad(IAsyncResult)
  nameWithType: PersistenceProvider.EndLoad(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndLoad(IAsyncResult)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Geïmplementeerd in een afgeleide klasse, geeft aan het einde van de Load-fase. De Load-fase treedt op wanneer gegevens van de gebruikersstatus is geladen in de persistentieprovider uit de opslag voor persistentie."
  remarks: ''
  example:
  - "The following code demonstrates how to use the `EndLoad` method. This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]the DurableServiceFactory SDK sample.  \n  \n [!code-cs[PersistenceProvider#1](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#1)]"
  syntax:
    content: public abstract object EndLoad (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "Een verwijzing naar het resultaat van de bewerking."
    return:
      type: System.Object
      description: "Informatie over de service."
  overload: System.ServiceModel.Persistence.PersistenceProvider.EndLoad*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)
  id: EndLoadIfChanged(System.IAsyncResult,System.Object@)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: EndLoadIfChanged(IAsyncResult,Object)
  nameWithType: PersistenceProvider.EndLoadIfChanged(IAsyncResult,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(IAsyncResult,Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Geïmplementeerd in een afgeleide klasse, geeft aan het einde van de LoadIfChanged-fase. De fase LoadIfChanged treedt op wanneer gegevens van de gebruikersstatus wordt geladen in de persistentieprovider uit de opslag voor persistentie en de van statusgegevens in het persistentie-archief is gewijzigd."
  remarks: ''
  example:
  - "The following code demonstrates how to implement the EndLoadIfChanged method.  \n  \n [!code-cs[PersistenceProvider#12](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#12)]"
  syntax:
    content: public virtual bool EndLoadIfChanged (IAsyncResult result, out object instance);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "Een verwijzing naar het resultaat van de bewerking."
    - id: instance
      type: System.Object
      description: "De status van het huidige exemplaar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het exemplaar <xref uid=&quot;langword_csharp_out&quot; name=&quot;out&quot; href=&quot;&quot;> </xref> parameter is ingesteld met de meest recente versie uit de opslag voor persistentie; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> als de status van de lokale cache al bijgewerkt is."
  overload: System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)
  id: EndUpdate(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: EndUpdate(IAsyncResult)
  nameWithType: PersistenceProvider.EndUpdate(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(IAsyncResult)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Hiermee geeft u het einde van de Update-fase. De Update-fase treedt op wanneer service statusrecords worden bijgewerkt in het persistentie-archief."
  remarks: ''
  example:
  - "The following code demonstrates how to implement the EndUpdate method.  \n  \n [!code-cs[PersistenceProvider#19](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#19)]"
  syntax:
    content: public abstract object EndUpdate (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "Een verwijzing naar het resultaat van de bewerking."
    return:
      type: System.Object
      description: "Het exemplaar token overeenkomt met de status van de zojuist hebt opgeslagen. Dit kan worden doorgegeven aan <xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>om te bepalen of de status in het persistentie-archief wijkt af van de status wanneer maken is aangeroepen.</xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>"
  overload: System.ServiceModel.Persistence.PersistenceProvider.EndUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.Id
  id: Id
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: Id
  nameWithType: PersistenceProvider.Id
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Id
  type: Property
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Hiermee geeft u de <xref:System.Guid>gekoppeld aan dit exemplaar.</xref:System.Guid>"
  remarks: ''
  example:
  - "The following code demonstrates how to use the Id property.  \n  \n [!code-cs[PersistenceProvider#10](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#10)]"
  syntax:
    content: public Guid Id { get; }
    return:
      type: System.Guid
      description: "De GUID die is gekoppeld aan dit exemplaar."
  overload: System.ServiceModel.Persistence.PersistenceProvider.Id*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)
  id: Load(System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: Load(TimeSpan)
  nameWithType: PersistenceProvider.Load(TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Load(TimeSpan)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Wanneer in een afgeleide klasse geïmplementeerd, laadt informatie over de status van de service uit de opslag voor persistentie."
  remarks: "Wijzigingen aangebracht in het beveiligingstoken in de Load-methode, als dat niet wordt teruggezet, blijven van kracht voor het restant van de verwerking van het bericht. Dit betekent dat de servicebewerking gebruikerscode, het pad van het bericht antwoord via de dispatcher, evenals alle foutpaden in de gewijzigde beveiligingscontext wordt uitgevoerd."
  example:
  - "The following code demonstrates how to implement the Load method. This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file. [!INCLUDE[crdefault](~/add/includes/ajax-current-ext-md.md)]the DurableServiceFactory SDK sample.  \n  \n [!code-cs[PersistenceProvider#3](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#3)]"
  syntax:
    content: public abstract object Load (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "De periode waarna de persistentieprovider deze poging afgebroken."
    return:
      type: System.Object
      description: "De status van het geladen exemplaar."
  overload: System.ServiceModel.Persistence.PersistenceProvider.Load*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)
  id: LoadIfChanged(System.TimeSpan,System.Object,System.Object@)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: LoadIfChanged(TimeSpan,Object,Object)
  nameWithType: PersistenceProvider.LoadIfChanged(TimeSpan,Object,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(TimeSpan,Object,Object)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Wanneer een geïmplementeerd in een afgeleide klasse, laadt informatie over de status van de service uit de opslag voor persistentie als die gegevens is gewijzigd."
  remarks: ''
  example:
  - "The following code demonstrates how to implement the LoadIfChanged method.  \n  \n [!code-cs[PersistenceProvider#13](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#13)]"
  syntax:
    content: public virtual bool LoadIfChanged (TimeSpan timeout, object instanceToken, out object instance);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "De periode waarna de persistentieprovider deze poging afgebroken."
    - id: instanceToken
      type: System.Object
      description: "Het token dat is geretourneerd door een eerdere <> </> *> of <> </> *>, die staat voor de huidige status vastgehouden door de aanroeper."
    - id: instance
      type: System.Object
      description: "De status van het huidige exemplaar."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <code> instance </code> <xref uid=&quot;langword_csharp_out&quot; name=&quot;out&quot; href=&quot;&quot;> </xref> parameter is ingesteld met de meest recente versie uit de opslag voor persistentie; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> als de status van de lokale cache al up-to-date is."
  overload: System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)
  id: Update(System.Object,System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  langs:
  - csharp
  name: Update(Object,TimeSpan)
  nameWithType: PersistenceProvider.Update(Object,TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Update(Object,TimeSpan)
  type: Method
  assemblies:
  - System.WorkflowServices
  namespace: System.ServiceModel.Persistence
  summary: "Wanneer een geïmplementeerd in een afgeleide klasse, servicerecords updates staat in het persistentie-archief."
  remarks: ''
  example:
  - "The following code demonstrates how to implement the Update method.  \n  \n [!code-cs[PersistenceProvider#18](~/add/codesnippet/csharp/persistenceprovider/filepersistenceprovider.cs#18)]"
  syntax:
    content: public abstract object Update (object instance, TimeSpan timeout);
    parameters:
    - id: instance
      type: System.Object
      description: "De status van het huidige exemplaar."
    - id: timeout
      type: System.TimeSpan
      description: "De periode waarna de persistentieprovider deze poging afgebroken."
    return:
      type: System.Object
      description: "Het exemplaar token overeenkomt met de status van de zojuist hebt opgeslagen. Dit kan worden doorgegeven aan <xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>om te bepalen of de status in het persistentie-archief wijkt af van de status wanneer maken is aangeroepen.</xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*>"
  overload: System.ServiceModel.Persistence.PersistenceProvider.Update*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Channels.CommunicationObject
  isExternal: false
  name: System.ServiceModel.Channels.CommunicationObject
- uid: System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: PersistenceProvider(Guid)
  nameWithType: PersistenceProvider.PersistenceProvider(Guid)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.PersistenceProvider(Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginCreate(Object,TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginCreate(Object,TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(Object,TimeSpan,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginDelete(Object,TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginDelete(Object,TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(Object,TimeSpan,AsyncCallback,Object)
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginLoad(TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginLoad(TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(TimeSpan,AsyncCallback,Object)
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginLoadIfChanged(TimeSpan,Object,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginLoadIfChanged(TimeSpan,Object,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(TimeSpan,Object,AsyncCallback,Object)
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginUpdate(Object,TimeSpan,AsyncCallback,Object)
  nameWithType: PersistenceProvider.BeginUpdate(Object,TimeSpan,AsyncCallback,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(Object,TimeSpan,AsyncCallback,Object)
- uid: System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Create(Object,TimeSpan)
  nameWithType: PersistenceProvider.Create(Object,TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Create(Object,TimeSpan)
- uid: System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Delete(Object,TimeSpan)
  nameWithType: PersistenceProvider.Delete(Object,TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Delete(Object,TimeSpan)
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndCreate(IAsyncResult)
  nameWithType: PersistenceProvider.EndCreate(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndCreate(IAsyncResult)
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndDelete(IAsyncResult)
  nameWithType: PersistenceProvider.EndDelete(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndDelete(IAsyncResult)
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndLoad(IAsyncResult)
  nameWithType: PersistenceProvider.EndLoad(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndLoad(IAsyncResult)
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndLoadIfChanged(IAsyncResult,Object)
  nameWithType: PersistenceProvider.EndLoadIfChanged(IAsyncResult,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(IAsyncResult,Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndUpdate(IAsyncResult)
  nameWithType: PersistenceProvider.EndUpdate(IAsyncResult)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(IAsyncResult)
- uid: System.ServiceModel.Persistence.PersistenceProvider.Id
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Id
  nameWithType: PersistenceProvider.Id
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Id
- uid: System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Load(TimeSpan)
  nameWithType: PersistenceProvider.Load(TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Load(TimeSpan)
- uid: System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: LoadIfChanged(TimeSpan,Object,Object)
  nameWithType: PersistenceProvider.LoadIfChanged(TimeSpan,Object,Object)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(TimeSpan,Object,Object)
- uid: System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Update(Object,TimeSpan)
  nameWithType: PersistenceProvider.Update(Object,TimeSpan)
  fullName: System.ServiceModel.Persistence.PersistenceProvider.Update(Object,TimeSpan)
- uid: System.ServiceModel.Persistence.PersistenceProvider.#ctor*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: PersistenceProvider
  nameWithType: PersistenceProvider.PersistenceProvider
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginCreate*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginCreate
  nameWithType: PersistenceProvider.BeginCreate
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginDelete*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginDelete
  nameWithType: PersistenceProvider.BeginDelete
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginLoad*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginLoad
  nameWithType: PersistenceProvider.BeginLoad
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginLoadIfChanged
  nameWithType: PersistenceProvider.BeginLoadIfChanged
- uid: System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: BeginUpdate
  nameWithType: PersistenceProvider.BeginUpdate
- uid: System.ServiceModel.Persistence.PersistenceProvider.Create*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Create
  nameWithType: PersistenceProvider.Create
- uid: System.ServiceModel.Persistence.PersistenceProvider.Delete*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Delete
  nameWithType: PersistenceProvider.Delete
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndCreate*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndCreate
  nameWithType: PersistenceProvider.EndCreate
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndDelete*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndDelete
  nameWithType: PersistenceProvider.EndDelete
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndLoad*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndLoad
  nameWithType: PersistenceProvider.EndLoad
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndLoadIfChanged
  nameWithType: PersistenceProvider.EndLoadIfChanged
- uid: System.ServiceModel.Persistence.PersistenceProvider.EndUpdate*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: EndUpdate
  nameWithType: PersistenceProvider.EndUpdate
- uid: System.ServiceModel.Persistence.PersistenceProvider.Id*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Id
  nameWithType: PersistenceProvider.Id
- uid: System.ServiceModel.Persistence.PersistenceProvider.Load*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Load
  nameWithType: PersistenceProvider.Load
- uid: System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: LoadIfChanged
  nameWithType: PersistenceProvider.LoadIfChanged
- uid: System.ServiceModel.Persistence.PersistenceProvider.Update*
  parent: System.ServiceModel.Persistence.PersistenceProvider
  isExternal: false
  name: Update
  nameWithType: PersistenceProvider.Update
