### YamlMime:ManagedReference
items:
- uid: System.Security.IPermission
  id: IPermission
  children:
  - System.Security.IPermission.Copy
  - System.Security.IPermission.Demand
  - System.Security.IPermission.Intersect(System.Security.IPermission)
  - System.Security.IPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.IPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
  type: Interface
  summary: "Methoden die worden geÃ¯mplementeerd door machtigingstypen definieert."
  remarks: "Machtigingen in de common language runtime zijn objecten die worden beschreven sets van bewerkingen die voor de opgegeven bronnen kunnen worden beveiligd. Een object machtiging beschrijft operations of toegang die is onderworpen aan beveiligingscontrole; Dit vormt geen toegang tot of het recht bewerkingen uit te voeren. Machtigingen worden gebruikt door de toepassingscode en het beveiligingssysteem .NET Framework op de volgende manieren.      -Code vraagt om de machtigingen nodig om te kunnen uitvoeren.      -Het beveiligingsbeleid van het systeem verleent machtigingen voor de code in om deze te worden uitgevoerd.      -Code vereist code aanroepen, heeft een machtiging.      -Code overschrijft de stack beveiliging assert / / toestaan alleen-weigeren.      > [!NOTE] > Als u een nieuwe machtiging schrijft, moet u deze interface implementeren in uw klasse.      > [!IMPORTANT] > Een machtiging kan worden geopend door meerdere threads. Bij het implementeren van deze interface, moet u garanderen dat de <xref:System.Security.IPermission.IsSubsetOf%2A>, <xref:System.Security.IPermission.Intersect%2A>, <xref:System.Security.IPermission.Union%2A>, en <xref:System.Security.IPermission.Copy%2A>implementaties van methoden zijn thread-veilig.</xref:System.Security.IPermission.Copy%2A> </xref:System.Security.IPermission.Union%2A> </xref:System.Security.IPermission.Intersect%2A> </xref:System.Security.IPermission.IsSubsetOf%2A>"
  example:
  - "This example shows how to define a permission class for use with code access security. All of the necessary permission interfaces are implemented.  \n  \n [!code-cs[Permission#1](~/add/codesnippet/csharp/t-system.security.ipermi_1.cs)]\n [!code-vb[Permission#1](~/add/codesnippet/visualbasic/t-system.security.ipermi_1.vb)]\n [!code-cpp[Permission#1](~/add/codesnippet/cpp/t-system.security.ipermi_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface IPermission : System.Security.ISecurityEncodable
  implements:
  - System.Security.ISecurityEncodable
  platform:
  - net462
- uid: System.Security.IPermission.Copy
  id: Copy
  parent: System.Security.IPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: IPermission.Copy()
  fullName: System.Security.IPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Maakt en retourneert een identieke kopie van de huidige machtiging."
  remarks: "Een kopie van een machtiging vertegenwoordigt dezelfde toegang tot bronnen als de oorspronkelijke machtiging."
  example:
  - "The following code example demonstrates implementing the Copy method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \n  \n [!code-cs[Permission#4](~/add/codesnippet/csharp/m-system.security.ipermi_2_1.cs)]\n [!code-vb[Permission#4](~/add/codesnippet/visualbasic/m-system.security.ipermi_2_1.vb)]\n [!code-cpp[Permission#4](~/add/codesnippet/cpp/m-system.security.ipermi_2_1.cpp)]"
  syntax:
    content: public System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "Een kopie van de huidige machtiging."
  overload: System.Security.IPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.IPermission.Demand
  id: Demand
  parent: System.Security.IPermission
  langs:
  - csharp
  name: Demand()
  nameWithType: IPermission.Demand()
  fullName: System.Security.IPermission.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Genereert een <xref:System.Security.SecurityException>tijdens het uitvoeren als de beveiligingsvereiste niet voldaan is.</xref:System.Security.SecurityException>"
  remarks: "Deze methode wordt doorgaans gebruikt door beveiligde bibliotheken om ervoor te zorgen dat aanroepfuncties gemachtigd voor toegang tot een bron. Een klasse bestand in een beveiligde class-bibliotheek wordt bijvoorbeeld <xref:System.Security.CodeAccessPermission.Demand%2A>voor de benodigde <xref:System.Security.Permissions.FileIOPermission>voordat u een bestandsbewerking aangevraagd door de aanroeper uitvoert.</xref:System.Security.Permissions.FileIOPermission> </xref:System.Security.CodeAccessPermission.Demand%2A>       Hoewel het merendeel van de klassen die deze interfacemethode implementeren voldoen aan de beveiligingscriteria door het uitvoeren van een volledige stackwalk, wordt niet per se een stackwalk uitgevoerd. Een voorbeeld van een implementatie die niet met een stackwalk werkt is <xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=fullName>.</xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=fullName>       Wanneer een stackwalk wordt uitgevoerd, worden de machtigingen van de code die deze methode aanroept niet onderzocht; de controle van de onmiddellijke aanroeper van die code begint en verloopt van de stack. De aanroepstack wordt doorgaans weergegeven als groeit, zodat de methoden die boven in de aanroepstack methoden lager in de aanroepstack aanroepen. <xref:System.Security.CodeAccessPermission.Demand%2A>lukt alleen als er geen <xref:System.Security.SecurityException>is gegenereerd.</xref:System.Security.SecurityException></xref:System.Security.CodeAccessPermission.Demand%2A>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.IPermission.Demand*
  exceptions: []
  platform:
  - net462
- uid: System.Security.IPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.IPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: IPermission.Intersect(IPermission)
  fullName: System.Security.IPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Maakt en retourneert een machtiging die is het snijpunt van de huidige machtigingen en de opgegeven."
  remarks: "Het snijpunt van twee machtigingen is een machtiging die wordt beschreven welke bewerkingen die ze beide gemeenschappelijk beschrijven. Alleen een vraag die wordt doorgegeven zowel oorspronkelijke machtigingen geeft het snijpunt.       De volgende instructies zijn vereist voor niet true zijn voor alle implementaties van de methode Intersect. `X`en `Y` vertegenwoordigen <xref:System.Security.IPermission>objectverwijzingen die niet `null`.</xref:System.Security.IPermission>      -   `X`. Intersect (`X`) retourneert een waarde gelijk is aan `X`.      -   `X`. Intersect (`Y`) retourneert dezelfde waarde als `Y`. Intersect (`X`).      -   `X`. Intersect (`null`) retourneert `null`."
  example:
  - "The following code example demonstrates implementing the Intersect method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \n  \n [!code-cs[Permission#2](~/add/codesnippet/csharp/m-system.security.ipermi_3_1.cs)]\n [!code-vb[Permission#2](~/add/codesnippet/visualbasic/m-system.security.ipermi_3_1.vb)]\n [!code-cpp[Permission#2](~/add/codesnippet/cpp/m-system.security.ipermi_3_1.cpp)]"
  syntax:
    content: public System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Een machtiging voor intersect met de huidige machtiging. Deze moeten van hetzelfde type als de huidige machtiging."
    return:
      type: System.Security.IPermission
      description: "Een nieuwe machtiging die het snijpunt van de huidige machtigingen en de opgegeven vertegenwoordigt. Deze nieuwe machtiging is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als het snijpunt leeg is."
  overload: System.Security.IPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <code> target </code> parameter is niet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> en is niet een exemplaar van dezelfde klasse als de huidige machtiging."
  platform:
  - net462
- uid: System.Security.IPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.IPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: IPermission.IsSubsetOf(IPermission)
  fullName: System.Security.IPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hiermee wordt bepaald of de huidige machtiging een subset van de opgegeven machtiging."
  remarks: "The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be true for all implementations of the IsSubsetOf method. `X`, `Y`, and `Z` represent <xref:System.Security.IPermission> objects that are not `null`.  \n  \n-   `X`.IsSubsetOf(`X`) returns `true`.  \n  \n-   `X`.IsSubsetOf(`Y`) returns the same value as `Y`.IsSubsetOf(`X`) if and only if `X` and `Y` represent the same set of permissions.  \n  \n-   If `X`.IsSubsetOf(`Y`) and `Y`.IsSubsetOf(`Z`) both return `true`, `X`.IsSubsetOf(`Z`) returns `true`.  \n  \n If `X` represents an empty <xref:System.Security.IPermission> object with a permission state of <xref:System.Security.Permissions.PermissionState> and `Y` represents an <xref:System.Security.IPermission> object that is `null`, `X`.IsSubsetOf(`Y`) returns `true`. If `Z` is also an empty permission, the compound set operation `X`.Union(Z).IsSubsetOf(Y) also returns `true` because the union of two empty permissions is an empty permission."
  example:
  - "The following code example demonstrates implementing the IsSubsetOf method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \n  \n [!code-cs[Permission#3](~/add/codesnippet/csharp/m-system.security.ipermi_1_1.cs)]\n [!code-vb[Permission#3](~/add/codesnippet/visualbasic/m-system.security.ipermi_1_1.vb)]\n [!code-cpp[Permission#3](~/add/codesnippet/cpp/m-system.security.ipermi_1_1.cpp)]"
  syntax:
    content: public bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Een machtiging die moet worden getest voor de relatie subset. Deze machtiging moet van hetzelfde type als de huidige machtiging."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de huidige machtiging een subset van de opgegeven machtiging is; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.IPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <code> target </code> parameter is niet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> en is niet van hetzelfde type als de huidige machtiging."
  platform:
  - net462
- uid: System.Security.IPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.IPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: IPermission.Union(IPermission)
  fullName: System.Security.IPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hiermee maakt u een machtiging die is de vereniging van de huidige machtigingen en de opgegeven."
  remarks: "Het resultaat van een aanroep naar Union is een machtiging die staat voor alle bewerkingen die worden vertegenwoordigd door zowel de huidige machtigingen en de opgegeven. Elke vraag die beide toestemming geeft hun union is geslaagd.       De volgende instructies zijn vereist voor niet true zijn voor alle implementaties van de methode Union. `X`en `Y` vertegenwoordigen <xref:System.Security.IPermission>objecten die geen `null`.</xref:System.Security.IPermission>      -   `X`. Union (`X`) retourneert een object met dezelfde waarde als `X`.      -   `X`. Union (`Y`) retourneert een object met dezelfde waarde als het object dat wordt geretourneerd door `Y`. Union (`X`).      -   `X`. Union (`null`) retourneert een object met dezelfde waarde als `X`."
  example:
  - "The following code example demonstrates implementing the Union method. This code example is part of a larger example provided for the <xref:System.Security.IPermission> class.  \n  \n [!code-cs[Permission#5](~/add/codesnippet/csharp/m-system.security.ipermi_0_1.cs)]\n [!code-vb[Permission#5](~/add/codesnippet/visualbasic/m-system.security.ipermi_0_1.vb)]\n [!code-cpp[Permission#5](~/add/codesnippet/cpp/m-system.security.ipermi_0_1.cpp)]  \n  \n-"
  syntax:
    content: public System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "Een machtiging te combineren met de huidige machtiging. Deze moeten van hetzelfde type als de huidige machtiging."
    return:
      type: System.Security.IPermission
      description: "Een nieuwe machtiging die de samenvoeging van de huidige machtigingen en de opgegeven vertegenwoordigt."
  overload: System.Security.IPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <code> target </code> parameter is niet <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> en is niet van hetzelfde type als de huidige machtiging."
  platform:
  - net462
references:
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.IPermission.Copy
  parent: System.Security.IPermission
  isExternal: false
  name: Copy()
  nameWithType: IPermission.Copy()
  fullName: System.Security.IPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.IPermission.Demand
  parent: System.Security.IPermission
  isExternal: false
  name: Demand()
  nameWithType: IPermission.Demand()
  fullName: System.Security.IPermission.Demand()
- uid: System.Security.IPermission.Intersect(System.Security.IPermission)
  parent: System.Security.IPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: IPermission.Intersect(IPermission)
  fullName: System.Security.IPermission.Intersect(IPermission)
- uid: System.Security.IPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.IPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: IPermission.IsSubsetOf(IPermission)
  fullName: System.Security.IPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.IPermission.Union(System.Security.IPermission)
  parent: System.Security.IPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: IPermission.Union(IPermission)
  fullName: System.Security.IPermission.Union(IPermission)
- uid: System.Security.IPermission.Copy*
  parent: System.Security.IPermission
  isExternal: false
  name: Copy
  nameWithType: IPermission.Copy
- uid: System.Security.IPermission.Demand*
  parent: System.Security.IPermission
  isExternal: false
  name: Demand
  nameWithType: IPermission.Demand
- uid: System.Security.IPermission.Intersect*
  parent: System.Security.IPermission
  isExternal: false
  name: Intersect
  nameWithType: IPermission.Intersect
- uid: System.Security.IPermission.IsSubsetOf*
  parent: System.Security.IPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: IPermission.IsSubsetOf
- uid: System.Security.IPermission.Union*
  parent: System.Security.IPermission
  isExternal: false
  name: Union
  nameWithType: IPermission.Union
