### YamlMime:ManagedReference
items:
- uid: System.Windows.WeakEventManager
  id: WeakEventManager
  children:
  - System.Windows.WeakEventManager.#ctor
  - System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  - System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  - System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  - System.Windows.WeakEventManager.Item(System.Object)
  - System.Windows.WeakEventManager.NewListenerList
  - System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  - System.Windows.WeakEventManager.ReadLock
  - System.Windows.WeakEventManager.Remove(System.Object)
  - System.Windows.WeakEventManager.ScheduleCleanup
  - System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  - System.Windows.WeakEventManager.StartListening(System.Object)
  - System.Windows.WeakEventManager.StopListening(System.Object)
  - System.Windows.WeakEventManager.WriteLock
  langs:
  - csharp
  name: WeakEventManager
  nameWithType: WeakEventManager
  fullName: System.Windows.WeakEventManager
  type: Class
  summary: "Biedt een basisklasse op voor de manager van de gebeurtenis die wordt gebruikt in de *zwakke gebeurtenis patroon*. De manager wordt toegevoegd en verwijdert u listeners voor gebeurtenissen (of retouraanroepen) die ook het patroon gebruiken."
  remarks: "Doorgaans gebruikt u het patroon zwakke gebeurtenis wanneer de bron van de gebeurtenis heeft een levensduur van objecten die onafhankelijk is van de gebeurtenislisteners. De verzendende centrale event-functionaliteit van een WeakEventManager biedt de mogelijkheid de listener-handlers moet worden verwijderd, zelfs als het bronobject zich blijft voordoen. Daarentegen is een normale gebeurtenis koppeling met de `+=` operator zorgt ervoor dat de bron mogelijk verbroken voor een verwijzing naar de listeners. Dit voorkomt dat de ontvanger garbage collector zijn verzameld op tijdige wijze wordt.       Een algemene situatie waarin de levensduur van relaties tussen bronnen en luisteraars moeten gebruiken van het patroon zwakke gebeurtenis is de verwerking van de update-gebeurtenissen die afkomstig zijn van gegevensbindingen.       Het patroon zwakke gebeurtenis kan ook worden gebruikt voor retouraanroepen en reguliere gebeurtenissen."
  syntax:
    content: 'public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.WeakEventManager.#ctor
  id: '#ctor'
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: WeakEventManager()
  nameWithType: WeakEventManager.WeakEventManager()
  fullName: System.Windows.WeakEventManager.WeakEventManager()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Initialiseert baseren klasse waarden wanneer deze wordt gebruikt als de initialisatiefunctie door de constructor van een afgeleide klasse."
  syntax:
    content: protected WeakEventManager ();
    parameters: []
  overload: System.Windows.WeakEventManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  id: DeliverEvent(System.Object,System.EventArgs)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: DeliverEvent(Object,EventArgs)
  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)
  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Biedt de gebeurtenis elke-listener wordt beheerd."
  remarks: "Roep de methode DeliverEvent uit binnen de gebeurtenis-handlers die zijn toegevoegd of verwijderd door de <xref:System.Windows.WeakEventManager.StartListening%2A>en <xref:System.Windows.WeakEventManager.StopListening%2A>implementaties van subklassen.</xref:System.Windows.WeakEventManager.StopListening%2A> </xref:System.Windows.WeakEventManager.StartListening%2A>       Als u de <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>methode in uw `AddListener` implementatie van de klasse wordt de lijst van de gebeurtenis ontvangt listeners wordt opgeslagen in een onderliggende verzameling.</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> (`AddListener` maakt geen deel uit van een interface of een klasse-contract. `AddListener`is de voorgestelde naam voor de methode van uw manager-klasse die <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>aanroept en zwakke gebeurtenis patroon listeners voor de gebeurtenis worden toegevoegd.)       <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>listeners worden toegevoegd aan een enkele lijst.</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> </xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> Als uw implementatie manager meer dan een lijst met listeners per gebeurtenis onderhoudt, gebruik geen DeliverEvent of <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> In plaats daarvan uw implementatie moet maken een eigen <xref:System.Windows.WeakEventManager.ListenerList>exemplaren, `AddListener` listeners moet toevoegen aan de juiste lijst en gebeurtenissen moeten worden geleverd aan de lijst van de juiste listener door het aanroepen van <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void DeliverEvent (object sender, EventArgs args);
    parameters:
    - id: sender
      type: System.Object
      description: "Het object waarop de gebeurtenis wordt verwerkt."
    - id: args
      type: System.EventArgs
      description: "Een <xref:System.EventArgs>waarin de gebeurtenisgegevens voor de gebeurtenis te leveren.</xref:System.EventArgs>"
  overload: System.Windows.WeakEventManager.DeliverEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  id: DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  syntax:
    content: protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);
    parameters:
    - id: sender
      type: System.Object
      description: "Moet worden toegevoegd."
    - id: args
      type: System.EventArgs
      description: "Moet worden toegevoegd."
    - id: list
      type: System.Windows.WeakEventManager.ListenerList
      description: "Moet worden toegevoegd."
  overload: System.Windows.WeakEventManager.DeliverEventToList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  id: GetCurrentManager(System.Type)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: GetCurrentManager(Type)
  nameWithType: WeakEventManager.GetCurrentManager(Type)
  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Retourneert de <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> implementatie die wordt gebruikt voor het opgegeven type."
  remarks: "<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>implementaties Roep deze methode met behulp van hun doorgegeven `managerType`.</xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> De geretourneerde <xref:System.Windows.WeakEventManager>wordt vervolgens gebruikt als de onderscheid die bepaalt welke gebeurtenis is ontvangen en welke klasse-handler aan te roepen.</xref:System.Windows.WeakEventManager>"
  syntax:
    content: protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);
    parameters:
    - id: managerType
      type: System.Type
      description: "Het type voor de <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> voor."
    return:
      type: System.Windows.WeakEventManager
      description: "Het overeenkomende <xref href=&quot;System.Windows.WeakEventManager&quot;> </xref> implementatie."
  overload: System.Windows.WeakEventManager.GetCurrentManager*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Item(System.Object)
  id: Item(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Item(Object)
  nameWithType: WeakEventManager.Item(Object)
  fullName: System.Windows.WeakEventManager.Item(Object)
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Opgehaald of ingesteld van de gegevens worden opgeslagen voor de opgegeven bron."
  remarks: "Afgeleide klassen kunnen kiezen welke gegevens en type op te slaan in deze indexeerfunctie. Dit is normaal gesproken geïmplementeerd als een <xref:System.Windows.WeakEventManager.ListenerList>, dit is een lijst met zwakke verwijzingen naar listeners.</xref:System.Windows.WeakEventManager.ListenerList> Hebt u alleen te wijzigen van dit type als de <xref:System.Windows.WeakEventManager.ListenerList>type kan niet de vereiste gegevens bevatten.</xref:System.Windows.WeakEventManager.ListenerList> Als u dus moet, overschrijven de <xref:System.Windows.WeakEventManager.Purge%2A>methode zodat alle opschoning van het onderliggende type correct is uitgevoerd.</xref:System.Windows.WeakEventManager.Purge%2A>"
  syntax:
    content: protected object this[object source] { get; set; }
    parameters:
    - id: source
      type: System.Object
      description: "De op nul gebaseerde index van de aangevraagde bron."
    return:
      type: System.Object
      description: "Gegevens die door de manager voor deze bron wordt opgeslagen."
  overload: System.Windows.WeakEventManager.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.NewListenerList
  id: NewListenerList
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: NewListenerList()
  nameWithType: WeakEventManager.NewListenerList()
  fullName: System.Windows.WeakEventManager.NewListenerList()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Retourneert een nieuw object listeners op een gebeurtenis bevatten."
  syntax:
    content: protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();
    parameters: []
    return:
      type: System.Windows.WeakEventManager.ListenerList
      description: "Een nieuw object aan een gebeurtenis voor listeners bevatten."
  overload: System.Windows.WeakEventManager.NewListenerList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  id: ProtectedAddHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedAddHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "De opgegeven gemachtigde toevoegen als een gebeurtenis-handler van de opgegeven bron."
  syntax:
    content: protected void ProtectedAddHandler (object source, Delegate handler);
    parameters:
    - id: source
      type: System.Object
      description: "Het bronobject dat de handler gemachtigde is geabonneerd."
    - id: handler
      type: System.Delegate
      description: "De gemachtigde die verantwoordelijk is voor de gebeurtenis die is gemeld door `source`."
  overload: System.Windows.WeakEventManager.ProtectedAddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  id: ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedAddListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Voegt de opgegeven listener toe aan de opgegeven bron voor de gebeurtenis die wordt beheerd."
  remarks: "Roep deze methode in uw klasse manager `AddListener` methoden op <xref:System.Windows.WeakEventManager>implementaties.</xref:System.Windows.WeakEventManager> `AddListener`de voorgestelde naam voor de statische methode die u voor uw klasse manager zodat andere klassen toevoegen van een listener voor de zwakke gebeurtenis patroon definiëren. `AddListener`moet rekening houden met twee parameters: de `source` waar de listener is gekoppeld, en de `listener` exemplaar. Voor uw `AddListener` implementatie, de ProtectedAddListener-methode niet aanroepen voor de huidige manager en dezelfde twee parameters doorgegeven.       Als de lijst met listeners eerder leeg is, ProtectedAddListener roept de <xref:System.Windows.WeakEventManager.StartListening%2A>methode intern, belt die uw specifieke <xref:System.Windows.WeakEventManager.StartListening%2A>overschrijven via polymorfisme.</xref:System.Windows.WeakEventManager.StartListening%2A> </xref:System.Windows.WeakEventManager.StartListening%2A>       ProtectedAddListener listeners worden toegevoegd aan een enkele interne <xref:System.Windows.WeakEventManager.ListenerList>per `source`.</xref:System.Windows.WeakEventManager.ListenerList> Als uw implementatie manager meer dan een lijst met listeners voor elke combinatie van de bron van de gebeurtenis onderhoudt, gebruik geen ProtectedAddListener. In plaats daarvan uw implementatie moet maken een eigen <xref:System.Windows.WeakEventManager.ListenerList>exemplaren, `AddListener` listeners moet toevoegen aan de juiste lijst en gebeurtenissen moeten worden geleverd aan de lijst van de juiste listener door het aanroepen van de <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>gebeurtenis in plaats van de <xref:System.Windows.WeakEventManager.DeliverEvent%2A>methode.</xref:System.Windows.WeakEventManager.DeliverEvent%2A> </xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Object
      description: "De bron voor listeners koppelen."
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "De luisterende klasse (die moet worden geïmplementeerd <xref href=&quot;System.Windows.IWeakEventListener&quot;> </xref>)."
  overload: System.Windows.WeakEventManager.ProtectedAddListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  id: ProtectedRemoveHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedRemoveHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hiermee verwijdert u de eerder toegevoegde handler van de opgegeven bron."
  syntax:
    content: protected void ProtectedRemoveHandler (object source, Delegate handler);
    parameters:
    - id: source
      type: System.Object
      description: "De bron voor de handler van verwijderen."
    - id: handler
      type: System.Delegate
      description: "De gemachtigde verwijderen uit `source`."
  overload: System.Windows.WeakEventManager.ProtectedRemoveHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  id: ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedRemoveListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hiermee verwijdert u een eerder toegevoegde listener van de opgegeven bron."
  remarks: "Roep deze methode in uw klasse manager `RemoveListener` methoden op <xref:System.Windows.WeakEventManager>implementaties.</xref:System.Windows.WeakEventManager> `RemoveListener`de voorgestelde naam voor de statische methode die u voor uw klasse manager zodat andere klassen te verwijderen van een listener voor de zwakke gebeurtenis patroon definiëren. `RemoveListener`moet rekening houden met twee parameters: de `source` waar de listener is verwijderd, en de `listener` klasse. Voor uw `RemoveListener` implementatie, de ProtectedRemoveListener-methode niet aanroepen voor de huidige manager en dezelfde twee parameters doorgegeven.       Als een aanroep van ProtectedRemoveListener de laatste listener in de lijst verwijdert, ProtectedRemoveListener roept de <xref:System.Windows.WeakEventManager.StopListening%2A>methode intern, belt die uw specifieke <xref:System.Windows.WeakEventManager.StopListening%2A>overschrijven via polymorfisme.</xref:System.Windows.WeakEventManager.StopListening%2A> </xref:System.Windows.WeakEventManager.StopListening%2A>       ProtectedRemoveListener listeners verwijdert uit een enkele interne <xref:System.Windows.WeakEventManager.ListenerList>per `source`.</xref:System.Windows.WeakEventManager.ListenerList> Als uw implementatie manager meer dan een lijst met listeners voor elke combinatie van de bron van de gebeurtenis onderhoudt, gebruik geen ProtectedRemoveListener. In plaats daarvan uw implementatie moet maken een eigen <xref:System.Windows.WeakEventManager.ListenerList>exemplaren, `RemoveListener` listeners moet verwijderen uit de lijst en gebeurtenissen moeten worden geleverd aan de lijst van de juiste listener door het aanroepen van de <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>methode in plaats van de <xref:System.Windows.WeakEventManager.DeliverEvent%2A>methode.</xref:System.Windows.WeakEventManager.DeliverEvent%2A> </xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Object
      description: "De bron listeners van verwijderen."
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "De luisterende klasse (die moet worden geïmplementeerd <xref href=&quot;System.Windows.IWeakEventListener&quot;> </xref>)."
  overload: System.Windows.WeakEventManager.ProtectedRemoveListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  id: Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Purge(Object,Object,Boolean)
  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hiermee verwijdert u inactieve listener vermeldingen uit de gegevenslijst voor de opgegeven bron. Retourneert <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> als sommige items daadwerkelijk zijn verwijderd uit de lijst."
  remarks: "De methode opschonen heeft een standaardimplementatie die alle vermeldingen verwijderen wordt als er een <xref:System.Windows.WeakEventManager.ListenerList>.</xref:System.Windows.WeakEventManager.ListenerList> gegevens"
  syntax:
    content: protected virtual bool Purge (object source, object data, bool purgeAll);
    parameters:
    - id: source
      type: System.Object
      description: "De bron voor gebeurtenissen wordt geluisterd."
    - id: data
      type: System.Object
      description: "De gegevens om te controleren. Dit object wordt verwacht een <xref:System.Windows.WeakEventManager.ListenerList>uitvoering.</xref:System.Windows.WeakEventManager.ListenerList>"
    - id: purgeAll
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>om te luisteren naar stoppen `source`, en alle vermeldingen uit volledig verwijderen `data`."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als sommige items daadwerkelijk zijn verwijderd; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Windows.WeakEventManager.Purge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ReadLock
  id: ReadLock
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
  fullName: System.Windows.WeakEventManager.ReadLock
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Stelt een lees-vergrendeling op de onderliggende tabel en retourneert een <xref:System.IDisposable>.</xref:System.IDisposable>"
  remarks: "In afgeleide klassen van query&quot;s naar de tabel in <xref:System.Windows.WeakEventManager.Item%2A>moet altijd worden uitgevoerd binnen een `using (ReadLock) { ... }` component, met uitzondering van query&quot;s die al binnen een schrijfvergrendeling zijn.</xref:System.Windows.WeakEventManager.Item%2A> Deze query&quot;s kunnen nodig zijn als uw klasse biedt ondersteuning voor een meer geavanceerde `AddListener` implementatie vereist dat er meer gegevens buiten de `source` en de `listener`, en maakt gebruik van de <xref:System.Windows.WeakEventManager.Item%2A>verzameling de extra informatie op te slaan.</xref:System.Windows.WeakEventManager.Item%2A>"
  syntax:
    content: protected IDisposable ReadLock { get; }
    return:
      type: System.IDisposable
      description: "Een object dat kan worden gebruikt voor het maken van een vergrendeling op de leden van de tabel gegevens, klikt u vervolgens op de juiste wijze worden verwijderd met een <xref uid=&quot;langword_csharp_using&quot; name=&quot;using&quot; href=&quot;&quot;> </xref> samenstellen."
  overload: System.Windows.WeakEventManager.ReadLock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: WeakEventManager.Remove(Object)
  fullName: System.Windows.WeakEventManager.Remove(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hiermee verwijdert u alle listeners voor de opgegeven bron."
  syntax:
    content: protected void Remove (object source);
    parameters:
    - id: source
      type: System.Object
      description: "De bron om gegevens voor listener te verwijderen."
  overload: System.Windows.WeakEventManager.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ScheduleCleanup
  id: ScheduleCleanup
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ScheduleCleanup()
  nameWithType: WeakEventManager.ScheduleCleanup()
  fullName: System.Windows.WeakEventManager.ScheduleCleanup()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Aanvragen dat een opschonen van niet-gebruikte vermeldingen in de onderliggende lijst van de listener worden uitgevoerd op een lagere prioriteit-thread."
  remarks: "Aanroepen van de methode ScheduleCleanup is vergelijkbaar met het aanroepen van de <xref:System.Windows.WeakEventManager.Purge%2A>methode in de lijst van de huidige manager lagere thread prioriteit met de `purgeAll` parameter ingesteld op `false`.</xref:System.Windows.WeakEventManager.Purge%2A>"
  syntax:
    content: protected void ScheduleCleanup ();
    parameters: []
  overload: System.Windows.WeakEventManager.ScheduleCleanup*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  id: SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: SetCurrentManager(Type,WeakEventManager)
  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Hiermee stelt de huidige manager voor het type opgegeven manager."
  remarks: "Roep de methode SetCurrentManager om te initialiseren van een manager als die is door een aanroep naar vereist uw `CurrentManager` -eigenschap op een <xref:System.Windows.WeakEventManager>uitvoering.</xref:System.Windows.WeakEventManager>"
  syntax:
    content: protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);
    parameters:
    - id: managerType
      type: System.Type
      description: "Het type de nieuwe gebeurtenis manager instellen."
    - id: manager
      type: System.Windows.WeakEventManager
      description: "De nieuwe gebeurtenis manager."
  overload: System.Windows.WeakEventManager.SetCurrentManager*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.StartListening(System.Object)
  id: StartListening(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: StartListening(Object)
  nameWithType: WeakEventManager.StartListening(Object)
  fullName: System.Windows.WeakEventManager.StartListening(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Wanneer in een afgeleide klasse genegeerd, begint met luisteren voor de gebeurtenis die wordt beheerd. Nadat de StartListening-methode voor het eerst wordt aangeroepen, wordt de manager moet in de status van aanroepen <> </> *> of <> </> *> wanneer de relevante gebeurtenis van de opgegeven bron wordt verwerkt."
  syntax:
    content: protected abstract void StartListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "De bron om te beginnen met luisteren op."
  overload: System.Windows.WeakEventManager.StartListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.StopListening(System.Object)
  id: StopListening(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: StopListening(Object)
  nameWithType: WeakEventManager.StopListening(Object)
  fullName: System.Windows.WeakEventManager.StopListening(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Wanneer in een afgeleide klasse genegeerd, stopt met luisteren op de opgegeven bron voor de gebeurtenis die wordt beheerd."
  syntax:
    content: protected abstract void StopListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "De bron om te luisteren op stoppen."
  overload: System.Windows.WeakEventManager.StopListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.WriteLock
  id: WriteLock
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
  fullName: System.Windows.WeakEventManager.WriteLock
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "Stelt een schrijfvergrendeling op de onderliggende tabel en retourneert een<xref:System.IDisposable>.</xref:System.IDisposable>"
  remarks: "In afgeleide klassen alle wijzigingen in de onderliggende tabel moeten worden uitgevoerd binnen een `using (WriteLock) { ... }` component. Deze wijzigingen kunnen nodig zijn als uw klasse biedt ondersteuning voor een meer geavanceerde `AddListener` implementatie vereist dat er meer gegevens buiten de `source` en de `listener`, en maakt gebruik van de <xref:System.Windows.WeakEventManager.Item%2A>verzameling de extra informatie op te slaan.</xref:System.Windows.WeakEventManager.Item%2A>"
  syntax:
    content: protected IDisposable WriteLock { get; }
    return:
      type: System.IDisposable
      description: "Een object dat kan worden gebruikt voor het maken van een vergrendeling op de leden van de tabel gegevens, klikt u vervolgens op de juiste wijze worden verwijderd met een <xref uid=&quot;langword_csharp_using&quot; name=&quot;using&quot; href=&quot;&quot;> </xref> samenstellen."
  overload: System.Windows.WeakEventManager.WriteLock*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.Windows.WeakEventManager.#ctor
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WeakEventManager()
  nameWithType: WeakEventManager.WeakEventManager()
  fullName: System.Windows.WeakEventManager.WeakEventManager()
- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEvent(Object,EventArgs)
  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)
  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
- uid: System.Windows.WeakEventManager.ListenerList
  parent: System.Windows
  isExternal: false
  name: WeakEventManager+ListenerList
  nameWithType: WeakEventManager+ListenerList
  fullName: System.Windows.WeakEventManager+ListenerList
- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: GetCurrentManager(Type)
  nameWithType: WeakEventManager.GetCurrentManager(Type)
  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)
- uid: System.Windows.WeakEventManager
  parent: System.Windows
  isExternal: false
  name: WeakEventManager
  nameWithType: WeakEventManager
  fullName: System.Windows.WeakEventManager
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.WeakEventManager.Item(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Item(Object)
  nameWithType: WeakEventManager.Item(Object)
  fullName: System.Windows.WeakEventManager.Item(Object)
- uid: System.Windows.WeakEventManager.NewListenerList
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: NewListenerList()
  nameWithType: WeakEventManager.NewListenerList()
  fullName: System.Windows.WeakEventManager.NewListenerList()
- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
- uid: System.Windows.IWeakEventListener
  parent: System.Windows
  isExternal: false
  name: IWeakEventListener
  nameWithType: IWeakEventListener
  fullName: System.Windows.IWeakEventListener
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Purge(Object,Object,Boolean)
  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.WeakEventManager.ReadLock
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
  fullName: System.Windows.WeakEventManager.ReadLock
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Windows.WeakEventManager.Remove(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Remove(Object)
  nameWithType: WeakEventManager.Remove(Object)
  fullName: System.Windows.WeakEventManager.Remove(Object)
- uid: System.Windows.WeakEventManager.ScheduleCleanup
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ScheduleCleanup()
  nameWithType: WeakEventManager.ScheduleCleanup()
  fullName: System.Windows.WeakEventManager.ScheduleCleanup()
- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: SetCurrentManager(Type,WeakEventManager)
  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)
- uid: System.Windows.WeakEventManager.StartListening(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StartListening(Object)
  nameWithType: WeakEventManager.StartListening(Object)
  fullName: System.Windows.WeakEventManager.StartListening(Object)
- uid: System.Windows.WeakEventManager.StopListening(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StopListening(Object)
  nameWithType: WeakEventManager.StopListening(Object)
  fullName: System.Windows.WeakEventManager.StopListening(Object)
- uid: System.Windows.WeakEventManager.WriteLock
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
  fullName: System.Windows.WeakEventManager.WriteLock
- uid: System.Windows.WeakEventManager.#ctor*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WeakEventManager
  nameWithType: WeakEventManager.WeakEventManager
- uid: System.Windows.WeakEventManager.DeliverEvent*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEvent
  nameWithType: WeakEventManager.DeliverEvent
- uid: System.Windows.WeakEventManager.DeliverEventToList*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEventToList
  nameWithType: WeakEventManager.DeliverEventToList
- uid: System.Windows.WeakEventManager.GetCurrentManager*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: GetCurrentManager
  nameWithType: WeakEventManager.GetCurrentManager
- uid: System.Windows.WeakEventManager.Item*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Item
  nameWithType: WeakEventManager.Item
- uid: System.Windows.WeakEventManager.NewListenerList*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: NewListenerList
  nameWithType: WeakEventManager.NewListenerList
- uid: System.Windows.WeakEventManager.ProtectedAddHandler*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddHandler
  nameWithType: WeakEventManager.ProtectedAddHandler
- uid: System.Windows.WeakEventManager.ProtectedAddListener*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddListener
  nameWithType: WeakEventManager.ProtectedAddListener
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveHandler
  nameWithType: WeakEventManager.ProtectedRemoveHandler
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveListener
  nameWithType: WeakEventManager.ProtectedRemoveListener
- uid: System.Windows.WeakEventManager.Purge*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Purge
  nameWithType: WeakEventManager.Purge
- uid: System.Windows.WeakEventManager.ReadLock*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
- uid: System.Windows.WeakEventManager.Remove*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Remove
  nameWithType: WeakEventManager.Remove
- uid: System.Windows.WeakEventManager.ScheduleCleanup*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ScheduleCleanup
  nameWithType: WeakEventManager.ScheduleCleanup
- uid: System.Windows.WeakEventManager.SetCurrentManager*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: SetCurrentManager
  nameWithType: WeakEventManager.SetCurrentManager
- uid: System.Windows.WeakEventManager.StartListening*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StartListening
  nameWithType: WeakEventManager.StartListening
- uid: System.Windows.WeakEventManager.StopListening*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StopListening
  nameWithType: WeakEventManager.StopListening
- uid: System.Windows.WeakEventManager.WriteLock*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
