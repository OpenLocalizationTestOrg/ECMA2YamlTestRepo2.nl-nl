### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageQueueEnumerator
  id: MessageQueueEnumerator
  children:
  - System.Messaging.MessageQueueEnumerator.Close
  - System.Messaging.MessageQueueEnumerator.Current
  - System.Messaging.MessageQueueEnumerator.Dispose
  - System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)
  - System.Messaging.MessageQueueEnumerator.LocatorHandle
  - System.Messaging.MessageQueueEnumerator.MoveNext
  - System.Messaging.MessageQueueEnumerator.Reset
  - System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: MessageQueueEnumerator
  nameWithType: MessageQueueEnumerator
  fullName: System.Messaging.MessageQueueEnumerator
  type: Class
  summary: "Biedt een alleen-voorwaarts cursor voor berichten in de berichtenwachtrij van een inventariseren."
  remarks: "Gebruik MessageQueueEnumerator voor dynamische interactie met wachtrijen op het netwerk. Methoden die beschikbaar is via de <xref:System.Messaging.MessageQueue>klasse ofwel een MessageQueueEnumerator met een dynamische lijst met wachtrijen of een matrix met een momentopname van de verzameling van de wachtrij op het moment dat de opgegeven methode is aangeroepen kunt terugkeren.</xref:System.Messaging.MessageQueue>       Er is geen gedefinieerde ordening van wachtrijen in een netwerk. Ze zijn geen geordende, bijvoorbeeld door de computer, label, openbare of persoonlijke status of een andere gebruiker toegankelijk criteria. Een MessageQueueEnumerator is een cursor, geïnitialiseerd op de kop van een dynamische lijst. U kunt de cursor verplaatsen naar de eerste wachtrij van de inventarisatie door het aanroepen van <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>.</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> Nadat de enumerator is geïnitialiseerd, kunt u <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>naar stap vooruit via de resterende wachtrijen.</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>       Het is niet mogelijk naar stap achteruit met een MessageQueueEnumerator. Een cursor staat alleen voorwaartse beweging via de wachtrij-opsomming. U kunt echter aanroepen <xref:System.Messaging.MessageQueueEnumerator.Reset%2A>opnieuw instellen van de inventarisatie en plaats de cursor aan het begin van de lijst opnieuw.</xref:System.Messaging.MessageQueueEnumerator.Reset%2A> Omdat de enumerator dynamisch is, zijn een wachtrij die wordt toegevoegd na de huidige cursorpositie toegankelijk voor de enumerator. Een wachtrij die wordt ingevoegd vóór de huidige cursorpositie zijn zonder de eerste aanroep opnieuw instellen niet toegankelijk."
  example:
  - "The following code example iterates through all the message queues in the network, and examines the path for each queue. Finally, it displays the number of public queues on the network.  \n  \n [!code-cs[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/csharp/t-system.messaging.messa_7_1.cs)]\n [!code-cpp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/cpp/t-system.messaging.messa_7_1.cpp)]\n [!code-vb[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/visualbasic/t-system.messaging.messa_7_1.vb)]"
  syntax:
    content: 'public class MessageQueueEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.IEnumerator
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Close
  id: Close
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Close()
  nameWithType: MessageQueueEnumerator.Close()
  fullName: System.Messaging.MessageQueueEnumerator.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Maakt de resources die zijn gekoppeld aan de enumerator."
  remarks: "Het besturingssysteem behoudt een geopende ingang <xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>, naar de wachtrij enumerator tijdens de levensduur van de cursor.</xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A> Wanneer u klaar bent met de enumerator, vrijgeven aanroep dicht bij de resources die zijn gekoppeld aan de ingang."
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.MessageQueueEnumerator.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Current
  id: Current
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: MessageQueueEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "De huidige opgehaald <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> van de inventarisatie."
  remarks: "Wanneer de enumerator is gemaakt, wijst het niet naar alles zijn, zodat de huidige is niet geldig en genereert een uitzondering als deze is geopend. U moet aanroepen <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>naar plaats de cursor op de eerste wachtrij in de opsomming.</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>       Meerdere aanroepen naar huidige met geen Tussenkomende aanroepen <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>retourneert dezelfde <xref:System.Messaging.MessageQueue>object.</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.MessageQueue Current { get; }
    return:
      type: System.Messaging.MessageQueue
      description: "De wachtrij waarmee de cursor is geplaatst."
  overload: System.Messaging.MessageQueueEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "U huidige aangeroepen voordat de eerste aanroep <> </> *>. De cursor bevindt zich vóór de eerste wachtrij in de opsomming.       - of - u huidige aangeroepen na een aanroep van <> </> *> retourneert onwaar (indicatie dat de cursor bevindt zich na de laatste wachtrij in de inventarisatie)."
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Dispose
  id: Dispose
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageQueueEnumerator.Dispose()
  fullName: System.Messaging.MessageQueueEnumerator.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Versies van alle resources die worden gebruikt door de <xref href=&quot;System.Messaging.MessageQueueEnumerator&quot;> </xref>."
  remarks: "Aanroepen van Dispose kan de bronnen die worden gebruikt door de <xref:System.Messaging.MessageQueueEnumerator>naar opnieuw worden toegewezen voor andere doeleinden.</xref:System.Messaging.MessageQueueEnumerator> Zie voor meer informatie over Dispose [onbeheerde hulpbronnen reinigen](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageQueueEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageQueueEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueEnumerator.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Heft de niet-beheerde bronnen worden gebruikt door de <xref href=&quot;System.Messaging.MessageQueueEnumerator&quot;> </xref> en eventueel de beheerde bronnen vrij."
  remarks: "Deze methode wordt aangeroepen door het publiek <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>methode en de <xref:System.Object.Finalize%2A>methode.</xref:System.Object.Finalize%2A> </xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> `Dispose`Hiermee wordt de beveiligde `Dispose(Boolean)` methode met de `disposing` parameter ingesteld op `true`. <xref:System.Object.Finalize%2A>roept `Dispose` met `disposing` ingesteld op `false`.</xref:System.Object.Finalize%2A>       Wanneer de `disposing` parameter `true`, deze methode worden alle resources die beheerde objecten waarover vrijgegeven dat dit <xref:System.Messaging.MessageQueueEnumerator>verwijzingen.</xref:System.Messaging.MessageQueueEnumerator> Deze methode roept de `Dispose` methode van elk object waarnaar wordt verwezen."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>voor het vrijgeven van zowel beheerde als onbeheerde hulpbronnen; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> om alleen niet-beheerde bronnen vrij te geven."
  overload: System.Messaging.MessageQueueEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle
  id: LocatorHandle
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: LocatorHandle
  nameWithType: MessageQueueEnumerator.LocatorHandle
  fullName: System.Messaging.MessageQueueEnumerator.LocatorHandle
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Hiermee haalt u de systeemeigen koppeling Message Queuing gebruikt voor het vinden van wachtrijen in een netwerk."
  remarks: "Wanneer u niet langer hoeft dit <xref:System.Messaging.MessageQueueEnumerator>exemplaar, neemt u contact <xref:System.Messaging.MessageQueueEnumerator.Close%2A>vrij deze ingang naar de resource.</xref:System.Messaging.MessageQueueEnumerator.Close%2A> </xref:System.Messaging.MessageQueueEnumerator>"
  syntax:
    content: public IntPtr LocatorHandle { get; }
    return:
      type: System.IntPtr
      description: "De systeemeigen koppeling naar de huidige wachtrij."
  overload: System.Messaging.MessageQueueEnumerator.LocatorHandle*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "De ingang bestaat niet."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "De aanroepende code heeft geen leesmachtigingen."
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.MoveNext
  id: MoveNext
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: MessageQueueEnumerator.MoveNext()
  fullName: System.Messaging.MessageQueueEnumerator.MoveNext()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "De enumerator verplaatst naar de volgende wachtrij van de inventarisatie, als deze momenteel beschikbaar is."
  remarks: "MoveNext retourneert `false` onmiddellijk als er geen wachtrijen die zijn gekoppeld aan de opsomming.       MoveNext retourneert `true` totdat het het einde van de verzameling is bereikt. Vervolgens wordt geretourneerd `false` voor elke volgende aanroep. Maar nadat MoveNext heeft geretourneerd `false`, toegang tot de <xref:System.Messaging.MessageQueueEnumerator.Current%2A>eigenschap genereert een uitzondering.</xref:System.Messaging.MessageQueueEnumerator.Current%2A>       Nadat deze is gemaakt, conceptueel gezien een enumerator bevindt zich voor de eerste <xref:System.Messaging.MessageQueue>van de inventarisatie en de eerste aanroep van MoveNext brengt de eerste wachtrij van de inventarisatie in weergave.</xref:System.Messaging.MessageQueue>"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de enumerator is is voortgezet naar de volgende wachtrij; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> als de enumerator heeft het einde van de inventarisatie bereikt."
  overload: System.Messaging.MessageQueueEnumerator.MoveNext*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "De aanroepende code heeft geen leesmachtigingen."
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Reset
  id: Reset
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: MessageQueueEnumerator.Reset()
  fullName: System.Messaging.MessageQueueEnumerator.Reset()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "Hiermee stelt u de cursor, zodat deze naar het begin van de inventarisatie verwijst."
  remarks: "Een enumerator wordt verplaatst in een alleen-voorwaarts richting. Gebruik deze methode om terug te keren naar het begin van de inventarisatie van wachtrijen.       Opnieuw instellen van plaatst u de cursor op de eerste wachtrij in de lijst. U hoeft niet aan te roepen <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>na het opnieuw instellen voor het verplaatsen van de cursor wordt aangeroepen door te sturen naar de eerste wachtrij in de opsomming.</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Messaging.MessageQueueEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "De huidige opgehaald <xref href=&quot;System.Messaging.MessageQueue&quot;> </xref> van de inventarisatie."
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "De wachtrij waarmee de cursor is geplaatst."
  overload: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Messaging.MessageQueueEnumerator.Close
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Close()
  nameWithType: MessageQueueEnumerator.Close()
  fullName: System.Messaging.MessageQueueEnumerator.Close()
- uid: System.Messaging.MessageQueueEnumerator.Current
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageQueueEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.Current
- uid: System.Messaging.MessageQueue
  parent: System.Messaging
  isExternal: false
  name: MessageQueue
  nameWithType: MessageQueue
  fullName: System.Messaging.MessageQueue
- uid: System.Messaging.MessageQueueEnumerator.Dispose
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: MessageQueueEnumerator.Dispose()
  fullName: System.Messaging.MessageQueueEnumerator.Dispose()
- uid: System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageQueueEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueEnumerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: LocatorHandle
  nameWithType: MessageQueueEnumerator.LocatorHandle
  fullName: System.Messaging.MessageQueueEnumerator.LocatorHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Messaging.MessageQueueEnumerator.MoveNext
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: MessageQueueEnumerator.MoveNext()
  fullName: System.Messaging.MessageQueueEnumerator.MoveNext()
- uid: System.Messaging.MessageQueueEnumerator.Reset
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Reset()
  nameWithType: MessageQueueEnumerator.Reset()
  fullName: System.Messaging.MessageQueueEnumerator.Reset()
- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.System.Collections.IEnumerator.Current
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.MessageQueueEnumerator.Close*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Close
  nameWithType: MessageQueueEnumerator.Close
- uid: System.Messaging.MessageQueueEnumerator.Current*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageQueueEnumerator.Current
- uid: System.Messaging.MessageQueueEnumerator.Dispose*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Dispose
  nameWithType: MessageQueueEnumerator.Dispose
- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: LocatorHandle
  nameWithType: MessageQueueEnumerator.LocatorHandle
- uid: System.Messaging.MessageQueueEnumerator.MoveNext*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: MessageQueueEnumerator.MoveNext
- uid: System.Messaging.MessageQueueEnumerator.Reset*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Reset
  nameWithType: MessageQueueEnumerator.Reset
- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current
