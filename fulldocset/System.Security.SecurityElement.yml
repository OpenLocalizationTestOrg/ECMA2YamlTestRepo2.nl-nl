### YamlMime:ManagedReference
items:
- uid: System.Security.SecurityElement
  id: SecurityElement
  children:
  - System.Security.SecurityElement.#ctor(System.String)
  - System.Security.SecurityElement.#ctor(System.String,System.String)
  - System.Security.SecurityElement.AddAttribute(System.String,System.String)
  - System.Security.SecurityElement.AddChild(System.Security.SecurityElement)
  - System.Security.SecurityElement.Attribute(System.String)
  - System.Security.SecurityElement.Attributes
  - System.Security.SecurityElement.Children
  - System.Security.SecurityElement.Copy
  - System.Security.SecurityElement.Equal(System.Security.SecurityElement)
  - System.Security.SecurityElement.Escape(System.String)
  - System.Security.SecurityElement.FromString(System.String)
  - System.Security.SecurityElement.IsValidAttributeName(System.String)
  - System.Security.SecurityElement.IsValidAttributeValue(System.String)
  - System.Security.SecurityElement.IsValidTag(System.String)
  - System.Security.SecurityElement.IsValidText(System.String)
  - System.Security.SecurityElement.SearchForChildByTag(System.String)
  - System.Security.SecurityElement.SearchForTextOfTag(System.String)
  - System.Security.SecurityElement.Tag
  - System.Security.SecurityElement.Text
  - System.Security.SecurityElement.ToString
  langs:
  - csharp
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
  type: Class
  summary: "Hiermee geeft u het XML-objectmodel voor het coderen van beveiligingsobjecten. Deze klasse kan niet worden overgenomen."
  remarks: "Deze klasse is bedoeld als een eenvoudige implementatie van een eenvoudige XML-objectmodel voor gebruik binnen het beveiligingssysteem en niet voor gebruik als een algemene XML-objectmodel. Deze documentatie wordt ervan uitgegaan dat een elementaire kennis van XML.       De eenvoudige XML-objectmodel voor een element bestaat uit de volgende onderdelen:-de tag de naam van het element is.      -De kenmerken zijn nul of meer naam/waarde-paren kenmerk voor het element.      -De onderliggende elementen zijn nul of meer elementen genest `<tag>` en `</tag>`.       Het is raadzaam dat kenmerk op basis van XML-weergave wordt gebruikt voor express beveiligingsonderdelen en hun waarden. Dit betekent dat de eigenschappen van een element worden uitgedrukt als kenmerken en eigenschapswaarden worden uitgedrukt als kenmerkwaarden. Vermijd geneste tekst binnen tags. Voor een `<tag>text</tag>` weergave een representatie van het type `<tag value=&quot;text&quot;/>` gewoonlijk beschikbaar is. Met behulp van deze XML-kenmerken gebaseerde weergave verhoogt de leesbaarheid en Hiermee kunt easy WMI draagbaarheid van de resulterende XML-serialisatie.       Naam van een kenmerk moet een teken of langer, en kan niet worden `null`. Als weergave van de waarde op basis van het element wordt gebruikt, elementen met een tekst die de tekenreeks `null` worden weergegeven in de `<tag/>` formulier; anders wordt de tekst wordt begrensd door de `<tag>` en `</tag>` tokens. Beide formulieren kunnen worden gecombineerd met kenmerken die worden weergegeven als het aanwezig is.       De labels, de kenmerken en de tekst van elementen, zijn indien aanwezig, altijd hoofdlettergevoelig. De XML-vorm offertes bevat en verlaat u indien nodig. Tekenreekswaarden die tekens die ongeldig zijn voor gebruik in XML-resultaat in een <xref:System.ArgumentException>.</xref:System.ArgumentException> opnemen Deze regels zijn van toepassing op alle eigenschappen en methoden.      > [!NOTE] > Voor betere prestaties teken geldigheid is alleen ingeschakeld wanneer het element is gecodeerd in XML-tekst formulier en niet op elke set van een eigenschap of methode. Statische methoden kunt expliciete controleren waar nodig."
  example:
  - "The following example shows the use of members of the SecurityElement class.  \n  \n [!code-vb[SecurityElementMembers#1](~/add/codesnippet/visualbasic/t-system.security.securi_1.vb)]\n [!code-cpp[SecurityElementMembers#1](~/add/codesnippet/cpp/t-system.security.securi_1.cpp)]\n [!code-cs[SecurityElementMembers#1](~/add/codesnippet/csharp/t-system.security.securi_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class SecurityElement
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecurityElement.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SecurityElement(String)
  nameWithType: SecurityElement.SecurityElement(String)
  fullName: System.Security.SecurityElement.SecurityElement(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.SecurityElement&quot;> </xref> klasse met het opgegeven label."
  remarks: "De `tag` parameter moet bestaan uit een geldig XML-tagnaam. Gebruik <xref:System.Security.SecurityElement.Escape%2A>ongeldige tekens verwijderen uit de tekenreeks.</xref:System.Security.SecurityElement.Escape%2A>"
  example:
  - "The following code shows the use of  the SecurityElement constructor to create a new <xref:System.Security.SecurityElement> object.  This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#2](~/add/codesnippet/visualbasic/m-system.security.securi_8_1.vb)]\n [!code-cpp[SecurityElementMembers#2](~/add/codesnippet/cpp/m-system.security.securi_8_1.cpp)]\n [!code-cs[SecurityElementMembers#2](~/add/codesnippet/csharp/m-system.security.securi_8_1.cs)]"
  syntax:
    content: public SecurityElement (string tag);
    parameters:
    - id: tag
      type: System.String
      description: "De codenaam van een XML-element."
  overload: System.Security.SecurityElement.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tag</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <code> tag </code> parameter is ongeldig in XML."
  platform:
  - net462
- uid: System.Security.SecurityElement.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SecurityElement(String,String)
  nameWithType: SecurityElement.SecurityElement(String,String)
  fullName: System.Security.SecurityElement.SecurityElement(String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.SecurityElement&quot;> </xref> klasse met de opgegeven label en tekst."
  remarks: "Als de `text` parameter `null` deze constructor produceert een-element identiek zijn aan de standaard-constructor."
  syntax:
    content: public SecurityElement (string tag, string text);
    parameters:
    - id: tag
      type: System.String
      description: "De codenaam van het XML-element."
    - id: text
      type: System.String
      description: "De tekstinhoud binnen het element."
  overload: System.Security.SecurityElement.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tag</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <code> tag </code> parameter of <code> text </code> parameter is ongeldig in XML."
  platform:
  - net462
- uid: System.Security.SecurityElement.AddAttribute(System.String,System.String)
  id: AddAttribute(System.String,System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: AddAttribute(String,String)
  nameWithType: SecurityElement.AddAttribute(String,String)
  fullName: System.Security.SecurityElement.AddAttribute(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Voegt een naam/waarde-kenmerk toe aan een XML-element."
  remarks: "Namen en waarden in kenmerken mag u alleen geldige XML-kenmerk tekens bevatten. XML-kenmerknamen moeten uniek zijn. Gebruik <xref:System.Security.SecurityElement.Escape%2A>ongeldige tekens verwijderen uit de tekenreeks.</xref:System.Security.SecurityElement.Escape%2A>       Er is geen ondersteuning voor tekenreeksen die tussen aanhalingstekens, dus tekenreeksen voor de naam/waarde-paren geen aanhalingstekens mogen of andere tekens vereisen aan te geven."
  example:
  - "The following code shows the use of the AddAttribute method to add a name/value attribute to an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#4](~/add/codesnippet/visualbasic/m-system.security.securi_5_1.vb)]\n [!code-cpp[SecurityElementMembers#4](~/add/codesnippet/cpp/m-system.security.securi_5_1.cpp)]\n [!code-cs[SecurityElementMembers#4](~/add/codesnippet/csharp/m-system.security.securi_5_1.cs)]"
  syntax:
    content: public void AddAttribute (string name, string value);
    parameters:
    - id: name
      type: System.String
      description: "De naam van het kenmerk."
    - id: value
      type: System.String
      description: "De waarde van het kenmerk."
  overload: System.Security.SecurityElement.AddAttribute*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter or <code>value</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De <code> name </code> parameter of <code> value </code> parameter is ongeldig in XML.       - of - een kenmerk met de naam die is opgegeven door de <code> name </code> bestaat al een parameter."
  platform:
  - net462
- uid: System.Security.SecurityElement.AddChild(System.Security.SecurityElement)
  id: AddChild(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: AddChild(SecurityElement)
  nameWithType: SecurityElement.AddChild(SecurityElement)
  fullName: System.Security.SecurityElement.AddChild(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Voegt een onderliggend element in het XML-element."
  remarks: "Het onderliggende element wordt toegevoegd aan de volgende eerder bestaande onderliggende elementen."
  example:
  - "The following code shows the use of the AddChild method to add a child element to the XML element.  This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#5](~/add/codesnippet/visualbasic/m-system.security.securi_11_1.vb)]\n [!code-cpp[SecurityElementMembers#5](~/add/codesnippet/cpp/m-system.security.securi_11_1.cpp)]\n [!code-cs[SecurityElementMembers#5](~/add/codesnippet/csharp/m-system.security.securi_11_1.cs)]"
  syntax:
    content: public void AddChild (System.Security.SecurityElement child);
    parameters:
    - id: child
      type: System.Security.SecurityElement
      description: "Het onderliggende element om toe te voegen."
  overload: System.Security.SecurityElement.AddChild*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>child</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.Attribute(System.String)
  id: Attribute(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Attribute(String)
  nameWithType: SecurityElement.Attribute(String)
  fullName: System.Security.SecurityElement.Attribute(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hiermee zoekt een kenmerk met de naam in een XML-element."
  remarks: "Met XML als volgt, `Attribute(&quot;B&quot;)` &quot;456&quot; geretourneerd.      ```   <thetag A=&quot;123&quot; B=&quot;456&quot; C=&quot;789&quot;>text</thetag>   ```"
  example:
  - "The following code shows the use of the Attribute method to find an attribute by name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#13](~/add/codesnippet/visualbasic/m-system.security.securi_9_1.vb)]\n [!code-cpp[SecurityElementMembers#13](~/add/codesnippet/cpp/m-system.security.securi_9_1.cpp)]\n [!code-cs[SecurityElementMembers#13](~/add/codesnippet/csharp/m-system.security.securi_9_1.cs)]"
  syntax:
    content: public string Attribute (string name);
    parameters:
    - id: name
      type: System.String
      description: "De naam van het kenmerk voor waarnaar moet worden gezocht."
    return:
      type: System.String
      description: "De waarde die is gekoppeld aan het kenmerk met de naam of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als geen kenmerk met <code> name </code> bestaat."
  overload: System.Security.SecurityElement.Attribute*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.Attributes
  id: Attributes
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Attributes
  nameWithType: SecurityElement.Attributes
  fullName: System.Security.SecurityElement.Attributes
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Opgehaald of ingesteld van de kenmerken van een XML-element als naam/waarde-paren."
  remarks: "Elk kenmerk wordt opgeslagen in de <xref:System.Collections.Hashtable>als een naam/waarde-paar.</xref:System.Collections.Hashtable>       Namen en waarden in kenmerken moeten alleen geldige XML-kenmerk tekens bevatten. Gebruik <xref:System.Security.SecurityElement.Escape%2A>ongeldige tekens verwijderen uit de tekenreeks.</xref:System.Security.SecurityElement.Escape%2A>       Er is geen ondersteuning voor tekenreeksen die tussen aanhalingstekens, dus tekenreeksen voor de naam/waarde-paren geen aanhalingstekens mogen of andere tekens vereisen aan te geven."
  example:
  - "The following code shows the use of the Attributes property to get an attribute of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#15](~/add/codesnippet/visualbasic/p-system.security.securi_3_1.vb)]\n [!code-cpp[SecurityElementMembers#15](~/add/codesnippet/cpp/p-system.security.securi_3_1.cpp)]\n [!code-cs[SecurityElementMembers#15](~/add/codesnippet/csharp/p-system.security.securi_3_1.cs)]"
  syntax:
    content: public System.Collections.Hashtable Attributes { get; set; }
    return:
      type: System.Collections.Hashtable
      description: "De <xref href=&quot;System.Collections.Hashtable&quot;> </xref> -object voor de waarden van het kenmerk van het XML-element."
  overload: System.Security.SecurityElement.Attributes*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "De naam of waarde van de <xref href=&quot;System.Collections.Hashtable&quot;> </xref> object is ongeldig."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De naam is niet de naam van een geldige XML-kenmerk."
  platform:
  - net462
- uid: System.Security.SecurityElement.Children
  id: Children
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Children
  nameWithType: SecurityElement.Children
  fullName: System.Security.SecurityElement.Children
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Opgehaald of ingesteld van de matrix van onderliggende elementen van het XML-element."
  remarks: "Als een <xref:System.Security.SecurityElement>bevat zowel <xref:System.Security.SecurityElement.Text%2A>en onderliggende, <xref:System.Security.SecurityElement.Text%2A>eerste wordt weergegeven.</xref:System.Security.SecurityElement.Text%2A> </xref:System.Security.SecurityElement.Text%2A> </xref:System.Security.SecurityElement>"
  example:
  - "The following code shows the use of the Children property to get the array of child elements of the XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#14](~/add/codesnippet/visualbasic/p-system.security.securi_0_1.vb)]\n [!code-cpp[SecurityElementMembers#14](~/add/codesnippet/cpp/p-system.security.securi_0_1.cpp)]\n [!code-cs[SecurityElementMembers#14](~/add/codesnippet/csharp/p-system.security.securi_0_1.cs)]"
  syntax:
    content: public System.Collections.ArrayList Children { get; set; }
    return:
      type: System.Collections.ArrayList
      description: "De geordende onderliggende elementen van het XML-element als beveiligingselementen."
  overload: System.Security.SecurityElement.Children*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Een onderliggend element van het bovenliggende XML-knooppunt is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.Copy
  id: Copy
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Copy()
  nameWithType: SecurityElement.Copy()
  fullName: System.Security.SecurityElement.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Maakt en retourneert een identieke kopie van de huidige <xref href=&quot;System.Security.SecurityElement&quot;> </xref> object."
  remarks: "De kopie bevat zowel de <xref:System.Security.SecurityElement.Children%2A>en <xref:System.Security.SecurityElement.Attributes%2A>Eigenschappen.</xref:System.Security.SecurityElement.Attributes%2A> </xref:System.Security.SecurityElement.Children%2A>"
  syntax:
    content: public System.Security.SecurityElement Copy ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "Een kopie van de huidige <xref href=&quot;System.Security.SecurityElement&quot;> </xref> object."
  overload: System.Security.SecurityElement.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.Equal(System.Security.SecurityElement)
  id: Equal(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Equal(SecurityElement)
  nameWithType: SecurityElement.Equal(SecurityElement)
  fullName: System.Security.SecurityElement.Equal(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Vergelijkt twee objecten in de XML-element op gelijkheid."
  remarks: "Als er onderliggende elementen, breidt vergelijking recursief aan.       Er is geen ondersteuning voor het vergelijken van verschillende XML-representaties van dezelfde tekens."
  example:
  - "The following code shows the use of the Equal method to compare two XML elements. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#22](~/add/codesnippet/visualbasic/m-system.security.securi_6_1.vb)]\n [!code-cpp[SecurityElementMembers#22](~/add/codesnippet/cpp/m-system.security.securi_6_1.cpp)]\n [!code-cs[SecurityElementMembers#22](~/add/codesnippet/csharp/m-system.security.securi_6_1.cs)]"
  syntax:
    content: public bool Equal (System.Security.SecurityElement other);
    parameters:
    - id: other
      type: System.Security.SecurityElement
      description: "Een XML-element-object waarnaar u wilt vergelijken van het huidige object van het XML-element."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de tag, kenmerknamen en waarden, onderliggende elementen en tekstvelden in het huidige XML-element zijn identiek aan hun collega&quot;s in de <code> other </code> parameter; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecurityElement.Equal*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.Escape(System.String)
  id: Escape(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Escape(String)
  nameWithType: SecurityElement.Escape(String)
  fullName: System.Security.SecurityElement.Escape(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Vervangt ongeldige XML-tekens in een tekenreeks met hun geldige XML-equivalent."
  remarks: "Use this method to replace invalid characters in a string before using the string in a <xref:System.Security.SecurityElement>. If invalid characters are used in a <xref:System.Security.SecurityElement> without being escaped, an <xref:System.ArgumentException> is thrown.  \n  \n The following table shows the invalid XML characters and their escaped equivalents.  \n  \n|invalid XML Character|Replaced With|  \n|---------------------------|-------------------|  \n|\"\\<\"|\"&lt;\"|  \n|\">\"|\"&gt;\"|  \n|\"\\\\\"\"|\"&quot;\"|  \n|\"\\\\'\"|\"&apos;\"|  \n|\"&\"|\"&amp;\"|"
  example:
  - "The following code shows the use of the Escape method to replace invalid XML characters in a string with their valid XML equivalent. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#19](~/add/codesnippet/visualbasic/m-system.security.securi_7_1.vb)]\n [!code-cpp[SecurityElementMembers#19](~/add/codesnippet/cpp/m-system.security.securi_7_1.cpp)]\n [!code-cs[SecurityElementMembers#19](~/add/codesnippet/csharp/m-system.security.securi_7_1.cs)]"
  syntax:
    content: public static string Escape (string str);
    parameters:
    - id: str
      type: System.String
      description: "De tekenreeks waarbinnen escape-ongeldige tekens."
    return:
      type: System.String
      description: "De invoerreeks met ongeldige tekens zijn vervangen."
  overload: System.Security.SecurityElement.Escape*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.FromString(System.String)
  id: FromString(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: FromString(String)
  nameWithType: SecurityElement.FromString(String)
  fullName: System.Security.SecurityElement.FromString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Maakt een element van de beveiliging van een XML-gecodeerde tekenreeks."
  remarks: "Do not use single quotation marks in the XML string; instead, use escaped double quotation marks. For example, instead of \"`<value name='Company'>Microsoft</value>\"` use \"`<value name=\\\"Company\\\">Microsoft</value>\"`.  \n  \n Using single quotation marks can result in either an exception being thrown or, in some cases, the single quotation marks being treated as text in the string."
  syntax:
    content: public static System.Security.SecurityElement FromString (string xml);
    parameters:
    - id: xml
      type: System.String
      description: "De XML-gecodeerde tekenreeks waaruit u wilt maken van de beveiligings-element."
    return:
      type: System.Security.SecurityElement
      description: "Een <xref href=&quot;System.Security.SecurityElement&quot;> </xref> gemaakt op basis van het XML-bestand."
  overload: System.Security.SecurityElement.FromString*
  exceptions:
  - type: System.Security.XmlSyntaxException
    commentId: T:System.Security.XmlSyntaxException
    description: "<code>xml</code>een of meer enkel aanhalingsteken tekens bevat."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xml</code>is<xref uid=&quot;langword_csharp_ null&quot; name=&quot; null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.IsValidAttributeName(System.String)
  id: IsValidAttributeName(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidAttributeName(String)
  nameWithType: SecurityElement.IsValidAttributeName(String)
  fullName: System.Security.SecurityElement.IsValidAttributeName(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hiermee wordt bepaald of een tekenreeks de naam van een geldig kenmerk is."
  remarks: "Deze methode kan worden gebruikt voor het testen van een kenmerk voordat u deze toevoegt aan een element van de beveiliging."
  example:
  - "The following code shows the use of the IsValidAttributeName method to determine whether a string is a valid attribute name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#6](~/add/codesnippet/visualbasic/m-system.security.securi_10_1.vb)]\n [!code-cpp[SecurityElementMembers#6](~/add/codesnippet/cpp/m-system.security.securi_10_1.cpp)]\n [!code-cs[SecurityElementMembers#6](~/add/codesnippet/csharp/m-system.security.securi_10_1.cs)]"
  syntax:
    content: public static bool IsValidAttributeName (string name);
    parameters:
    - id: name
      type: System.String
      description: "De naam van het kenmerk om de geldigheid te testen."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <code> name </code> parameter is een geldig XML-kenmerk naam; anders wordt <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecurityElement.IsValidAttributeName*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.IsValidAttributeValue(System.String)
  id: IsValidAttributeValue(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidAttributeValue(String)
  nameWithType: SecurityElement.IsValidAttributeValue(String)
  fullName: System.Security.SecurityElement.IsValidAttributeValue(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hiermee wordt bepaald of een tekenreeks een ongeldig kenmerkwaarde is."
  remarks: "Deze methode kan worden gebruikt voor het testen van een kenmerk voordat u deze toevoegt aan een element van de beveiliging."
  example:
  - "The following code shows the use of the IsValidAttributeValue method to determine whether a string is a valid attribute value. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#7](~/add/codesnippet/visualbasic/m-system.security.securi_4_1.vb)]\n [!code-cpp[SecurityElementMembers#7](~/add/codesnippet/cpp/m-system.security.securi_4_1.cpp)]\n [!code-cs[SecurityElementMembers#7](~/add/codesnippet/csharp/m-system.security.securi_4_1.cs)]"
  syntax:
    content: public static bool IsValidAttributeValue (string value);
    parameters:
    - id: value
      type: System.String
      description: "De waarde van het kenmerk om de geldigheid te testen."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <code> value </code> -parameter is een geldig XML-kenmerkwaarde; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecurityElement.IsValidAttributeValue*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.IsValidTag(System.String)
  id: IsValidTag(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidTag(String)
  nameWithType: SecurityElement.IsValidTag(String)
  fullName: System.Security.SecurityElement.IsValidTag(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Bepaalt of een tekenreeks een geldig label is."
  remarks: "Dit kan worden gebruikt voor het testen van een <xref:System.Security.SecurityElement.Tag%2A>voordat u deze instelling</xref:System.Security.SecurityElement.Tag%2A>"
  example:
  - "The following code shows the use of the IsValidTag method to determine whether a string is a valid attribute tag. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#10](~/add/codesnippet/visualbasic/m-system.security.securi_3_1.vb)]\n [!code-cpp[SecurityElementMembers#10](~/add/codesnippet/cpp/m-system.security.securi_3_1.cpp)]\n [!code-cs[SecurityElementMembers#10](~/add/codesnippet/csharp/m-system.security.securi_3_1.cs)]"
  syntax:
    content: public static bool IsValidTag (string tag);
    parameters:
    - id: tag
      type: System.String
      description: "De code om de geldigheid te testen."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <code> tag </code> -parameter is een geldig XML-label; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecurityElement.IsValidTag*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.IsValidText(System.String)
  id: IsValidText(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: IsValidText(String)
  nameWithType: SecurityElement.IsValidText(String)
  fullName: System.Security.SecurityElement.IsValidText(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Hiermee wordt bepaald of een tekenreeks geldig als de tekst binnen een XML-element is."
  remarks: "Deze methode kan worden gebruikt om te testen <xref:System.Security.SecurityElement.Text%2A>voordat u deze instelling</xref:System.Security.SecurityElement.Text%2A>"
  example:
  - "The following code shows the use of the IsValidText method to determine whether a string is valid as XML element text. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#9](~/add/codesnippet/visualbasic/m-system.security.securi_2_1.vb)]\n [!code-cpp[SecurityElementMembers#9](~/add/codesnippet/cpp/m-system.security.securi_2_1.cpp)]\n [!code-cs[SecurityElementMembers#9](~/add/codesnippet/csharp/m-system.security.securi_2_1.cs)]"
  syntax:
    content: public static bool IsValidText (string text);
    parameters:
    - id: text
      type: System.String
      description: "De tekst om de geldigheid te testen."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <code> text </code> parameter is geldig XML-tekstelement; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.SecurityElement.IsValidText*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityElement.SearchForChildByTag(System.String)
  id: SearchForChildByTag(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SearchForChildByTag(String)
  nameWithType: SecurityElement.SearchForChildByTag(String)
  fullName: System.Security.SecurityElement.SearchForChildByTag(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Zoeken naar een onderliggend element met de labelnaam van het."
  remarks: "Met XML als volgt, `SearchForChildByTag(&quot;second&quot;)` retourneert het onderliggende element `<second>`.      ```   <thetag A=&quot;123&quot; B=&quot;456&quot; C=&quot;789&quot;> <first>text1</first>          <second>text2</second></thetag>   ```"
  example:
  - "The following code shows the use of the SearchForChildByTag method to find a child by its tag name. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#17](~/add/codesnippet/visualbasic/m-system.security.securi_1_1.vb)]\n [!code-cpp[SecurityElementMembers#17](~/add/codesnippet/cpp/m-system.security.securi_1_1.cpp)]\n [!code-cs[SecurityElementMembers#17](~/add/codesnippet/csharp/m-system.security.securi_1_1.cs)]"
  syntax:
    content: public System.Security.SecurityElement SearchForChildByTag (string tag);
    parameters:
    - id: tag
      type: System.String
      description: "Het label waarvoor u wilt zoeken in de onderliggende elementen."
    return:
      type: System.Security.SecurityElement
      description: "Het eerste onderliggende XML-element met de waarde van het opgegeven label of <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> als er is geen onderliggend element met <code> tag </code> bestaat."
  overload: System.Security.SecurityElement.SearchForChildByTag*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tag</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.SearchForTextOfTag(System.String)
  id: SearchForTextOfTag(System.String)
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: SearchForTextOfTag(String)
  nameWithType: SecurityElement.SearchForTextOfTag(String)
  fullName: System.Security.SecurityElement.SearchForTextOfTag(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Een onderliggend element met de tagnaam van de zoekt en retourneert de tekst opgenomen."
  remarks: "Deze methode is gelijk aan het volgende: [!code-vb [System.Security.SecurityElement#1](~/add/codesnippet/visualbasic/m-system.security.securi_0_1.vb)][!code-cpp[System.Security.SecurityElement#1](~/add/codesnippet/cpp/m-system.security.securi_0_1.cpp)][!code-cs[System.Security.SecurityElement#1](~/add/codesnippet/csharp/m-system.security.securi_0_1.cs) ] met XML als volgt, `SearchForTextOfTag(&quot;second&quot;)` &quot;Tekst2&quot; geretourneerd.          ```   <thetag A=&quot;123&quot; B=&quot;456&quot; C=&quot;789&quot;> <first>text1</first>       <second>text2</second></thetag>   ```"
  example:
  - "The following code shows the use of the SearchForTextOfTag method to find a child by its tag name and return the contained text. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#18](~/add/codesnippet/visualbasic/m-system.security.securi_0_2.vb)]\n [!code-cpp[SecurityElementMembers#18](~/add/codesnippet/cpp/m-system.security.securi_0_2.cpp)]\n [!code-cs[SecurityElementMembers#18](~/add/codesnippet/csharp/m-system.security.securi_0_2.cs)]"
  syntax:
    content: public string SearchForTextOfTag (string tag);
    parameters:
    - id: tag
      type: System.String
      description: "Het label waarvoor u wilt zoeken in de onderliggende elementen."
    return:
      type: System.String
      description: "De tekstinhoud van het eerste onderliggende element met de waarde van het opgegeven label."
  overload: System.Security.SecurityElement.SearchForTextOfTag*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>tag</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityElement.Tag
  id: Tag
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Tag
  nameWithType: SecurityElement.Tag
  fullName: System.Security.SecurityElement.Tag
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Opgehaald of ingesteld van de codenaam van een XML-element."
  remarks: "In XML, het label wordt weergegeven in het script als wordt hieronder weergegeven: ```   <tag attributes>text</tag>   ``` als dit element heeft de onderliggende elementen, vervangt de onderliggende `text`.       Alleen geldige XML-label tekenreeksen toewijzen aan deze eigenschap. Gebruik <xref:System.Security.SecurityElement.Escape%2A>ongeldige tekens verwijderen uit de tekenreeks.</xref:System.Security.SecurityElement.Escape%2A>"
  example:
  - "The following code shows the use of the Tag property to get the tag name of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#11](~/add/codesnippet/visualbasic/p-system.security.securi_1_1.vb)]\n [!code-cpp[SecurityElementMembers#11](~/add/codesnippet/cpp/p-system.security.securi_1_1.cpp)]\n [!code-cs[SecurityElementMembers#11](~/add/codesnippet/csharp/p-system.security.securi_1_1.cs)]"
  syntax:
    content: public string Tag { get; set; }
    return:
      type: System.String
      description: "De codenaam van een XML-element."
  overload: System.Security.SecurityElement.Tag*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The tag is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Het label is niet geldig zijn in XML."
  platform:
  - net462
- uid: System.Security.SecurityElement.Text
  id: Text
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: Text
  nameWithType: SecurityElement.Text
  fullName: System.Security.SecurityElement.Text
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Opgehaald of ingesteld van de tekst in een XML-element."
  remarks: "De tekst mag geen speciale XML-tekens bevatten. Gebruik <xref:System.Security.SecurityElement.Escape%2A>ongeldige tekens verwijderen uit de tekenreeks.</xref:System.Security.SecurityElement.Escape%2A>       Als een <xref:System.Security.SecurityElement>bevat zowel de tekst en <xref:System.Security.SecurityElement.Children%2A>, tekst wordt weergegeven als eerste.</xref:System.Security.SecurityElement.Children%2A> </xref:System.Security.SecurityElement>"
  example:
  - "The following code shows the use of the Text property to get the text of an XML element. This code example is part of a larger example provided for the <xref:System.Security.SecurityElement> class.  \n  \n [!code-vb[SecurityElementMembers#12](~/add/codesnippet/visualbasic/p-system.security.securi_2_1.vb)]\n [!code-cpp[SecurityElementMembers#12](~/add/codesnippet/cpp/p-system.security.securi_2_1.cpp)]\n [!code-cs[SecurityElementMembers#12](~/add/codesnippet/csharp/p-system.security.securi_2_1.cs)]"
  syntax:
    content: public string Text { get; set; }
    return:
      type: System.String
      description: "De waarde van de tekst in een XML-element."
  overload: System.Security.SecurityElement.Text*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "De tekst is niet geldig zijn in XML."
  platform:
  - net462
- uid: System.Security.SecurityElement.ToString
  id: ToString
  parent: System.Security.SecurityElement
  langs:
  - csharp
  name: ToString()
  nameWithType: SecurityElement.ToString()
  fullName: System.Security.SecurityElement.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "Produceert een tekenreeksrepresentatie van een XML-element en de samenstellende kenmerken, onderliggende elementen en tekst."
  remarks: "Deze methode is handig in Foutopsporing om te zien van de XML-weergave van het element."
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "Het XML-element en de inhoud ervan."
  overload: System.Security.SecurityElement.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Security.XmlSyntaxException
  parent: System.Security
  isExternal: false
  name: XmlSyntaxException
  nameWithType: XmlSyntaxException
  fullName: System.Security.XmlSyntaxException
- uid: System.Security.SecurityElement.#ctor(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SecurityElement(String)
  nameWithType: SecurityElement.SecurityElement(String)
  fullName: System.Security.SecurityElement.SecurityElement(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.SecurityElement.#ctor(System.String,System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SecurityElement(String,String)
  nameWithType: SecurityElement.SecurityElement(String,String)
  fullName: System.Security.SecurityElement.SecurityElement(String,String)
- uid: System.Security.SecurityElement.AddAttribute(System.String,System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: AddAttribute(String,String)
  nameWithType: SecurityElement.AddAttribute(String,String)
  fullName: System.Security.SecurityElement.AddAttribute(String,String)
- uid: System.Security.SecurityElement.AddChild(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  isExternal: false
  name: AddChild(SecurityElement)
  nameWithType: SecurityElement.AddChild(SecurityElement)
  fullName: System.Security.SecurityElement.AddChild(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.SecurityElement.Attribute(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: Attribute(String)
  nameWithType: SecurityElement.Attribute(String)
  fullName: System.Security.SecurityElement.Attribute(String)
- uid: System.Security.SecurityElement.Attributes
  parent: System.Security.SecurityElement
  isExternal: false
  name: Attributes
  nameWithType: SecurityElement.Attributes
  fullName: System.Security.SecurityElement.Attributes
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Security.SecurityElement.Children
  parent: System.Security.SecurityElement
  isExternal: false
  name: Children
  nameWithType: SecurityElement.Children
  fullName: System.Security.SecurityElement.Children
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Security.SecurityElement.Copy
  parent: System.Security.SecurityElement
  isExternal: false
  name: Copy()
  nameWithType: SecurityElement.Copy()
  fullName: System.Security.SecurityElement.Copy()
- uid: System.Security.SecurityElement.Equal(System.Security.SecurityElement)
  parent: System.Security.SecurityElement
  isExternal: false
  name: Equal(SecurityElement)
  nameWithType: SecurityElement.Equal(SecurityElement)
  fullName: System.Security.SecurityElement.Equal(SecurityElement)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecurityElement.Escape(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: Escape(String)
  nameWithType: SecurityElement.Escape(String)
  fullName: System.Security.SecurityElement.Escape(String)
- uid: System.Security.SecurityElement.FromString(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: FromString(String)
  nameWithType: SecurityElement.FromString(String)
  fullName: System.Security.SecurityElement.FromString(String)
- uid: System.Security.SecurityElement.IsValidAttributeName(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidAttributeName(String)
  nameWithType: SecurityElement.IsValidAttributeName(String)
  fullName: System.Security.SecurityElement.IsValidAttributeName(String)
- uid: System.Security.SecurityElement.IsValidAttributeValue(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidAttributeValue(String)
  nameWithType: SecurityElement.IsValidAttributeValue(String)
  fullName: System.Security.SecurityElement.IsValidAttributeValue(String)
- uid: System.Security.SecurityElement.IsValidTag(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidTag(String)
  nameWithType: SecurityElement.IsValidTag(String)
  fullName: System.Security.SecurityElement.IsValidTag(String)
- uid: System.Security.SecurityElement.IsValidText(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidText(String)
  nameWithType: SecurityElement.IsValidText(String)
  fullName: System.Security.SecurityElement.IsValidText(String)
- uid: System.Security.SecurityElement.SearchForChildByTag(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SearchForChildByTag(String)
  nameWithType: SecurityElement.SearchForChildByTag(String)
  fullName: System.Security.SecurityElement.SearchForChildByTag(String)
- uid: System.Security.SecurityElement.SearchForTextOfTag(System.String)
  parent: System.Security.SecurityElement
  isExternal: false
  name: SearchForTextOfTag(String)
  nameWithType: SecurityElement.SearchForTextOfTag(String)
  fullName: System.Security.SecurityElement.SearchForTextOfTag(String)
- uid: System.Security.SecurityElement.Tag
  parent: System.Security.SecurityElement
  isExternal: false
  name: Tag
  nameWithType: SecurityElement.Tag
  fullName: System.Security.SecurityElement.Tag
- uid: System.Security.SecurityElement.Text
  parent: System.Security.SecurityElement
  isExternal: false
  name: Text
  nameWithType: SecurityElement.Text
  fullName: System.Security.SecurityElement.Text
- uid: System.Security.SecurityElement.ToString
  parent: System.Security.SecurityElement
  isExternal: false
  name: ToString()
  nameWithType: SecurityElement.ToString()
  fullName: System.Security.SecurityElement.ToString()
- uid: System.Security.SecurityElement.#ctor*
  parent: System.Security.SecurityElement
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement.SecurityElement
- uid: System.Security.SecurityElement.AddAttribute*
  parent: System.Security.SecurityElement
  isExternal: false
  name: AddAttribute
  nameWithType: SecurityElement.AddAttribute
- uid: System.Security.SecurityElement.AddChild*
  parent: System.Security.SecurityElement
  isExternal: false
  name: AddChild
  nameWithType: SecurityElement.AddChild
- uid: System.Security.SecurityElement.Attribute*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Attribute
  nameWithType: SecurityElement.Attribute
- uid: System.Security.SecurityElement.Attributes*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Attributes
  nameWithType: SecurityElement.Attributes
- uid: System.Security.SecurityElement.Children*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Children
  nameWithType: SecurityElement.Children
- uid: System.Security.SecurityElement.Copy*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Copy
  nameWithType: SecurityElement.Copy
- uid: System.Security.SecurityElement.Equal*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Equal
  nameWithType: SecurityElement.Equal
- uid: System.Security.SecurityElement.Escape*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Escape
  nameWithType: SecurityElement.Escape
- uid: System.Security.SecurityElement.FromString*
  parent: System.Security.SecurityElement
  isExternal: false
  name: FromString
  nameWithType: SecurityElement.FromString
- uid: System.Security.SecurityElement.IsValidAttributeName*
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidAttributeName
  nameWithType: SecurityElement.IsValidAttributeName
- uid: System.Security.SecurityElement.IsValidAttributeValue*
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidAttributeValue
  nameWithType: SecurityElement.IsValidAttributeValue
- uid: System.Security.SecurityElement.IsValidTag*
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidTag
  nameWithType: SecurityElement.IsValidTag
- uid: System.Security.SecurityElement.IsValidText*
  parent: System.Security.SecurityElement
  isExternal: false
  name: IsValidText
  nameWithType: SecurityElement.IsValidText
- uid: System.Security.SecurityElement.SearchForChildByTag*
  parent: System.Security.SecurityElement
  isExternal: false
  name: SearchForChildByTag
  nameWithType: SecurityElement.SearchForChildByTag
- uid: System.Security.SecurityElement.SearchForTextOfTag*
  parent: System.Security.SecurityElement
  isExternal: false
  name: SearchForTextOfTag
  nameWithType: SecurityElement.SearchForTextOfTag
- uid: System.Security.SecurityElement.Tag*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Tag
  nameWithType: SecurityElement.Tag
- uid: System.Security.SecurityElement.Text*
  parent: System.Security.SecurityElement
  isExternal: false
  name: Text
  nameWithType: SecurityElement.Text
- uid: System.Security.SecurityElement.ToString*
  parent: System.Security.SecurityElement
  isExternal: false
  name: ToString
  nameWithType: SecurityElement.ToString
