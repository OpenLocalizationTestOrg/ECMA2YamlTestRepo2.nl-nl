### YamlMime:ManagedReference
items:
- uid: System.Collections.SortedList
  id: SortedList
  children:
  - System.Collections.SortedList.#ctor
  - System.Collections.SortedList.#ctor(System.Collections.IComparer)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  - System.Collections.SortedList.#ctor(System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  - System.Collections.SortedList.Add(System.Object,System.Object)
  - System.Collections.SortedList.Capacity
  - System.Collections.SortedList.Clear
  - System.Collections.SortedList.Clone
  - System.Collections.SortedList.Contains(System.Object)
  - System.Collections.SortedList.ContainsKey(System.Object)
  - System.Collections.SortedList.ContainsValue(System.Object)
  - System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  - System.Collections.SortedList.Count
  - System.Collections.SortedList.GetByIndex(System.Int32)
  - System.Collections.SortedList.GetEnumerator
  - System.Collections.SortedList.GetKey(System.Int32)
  - System.Collections.SortedList.GetKeyList
  - System.Collections.SortedList.GetValueList
  - System.Collections.SortedList.IndexOfKey(System.Object)
  - System.Collections.SortedList.IndexOfValue(System.Object)
  - System.Collections.SortedList.IsFixedSize
  - System.Collections.SortedList.IsReadOnly
  - System.Collections.SortedList.IsSynchronized
  - System.Collections.SortedList.Item(System.Object)
  - System.Collections.SortedList.Keys
  - System.Collections.SortedList.Remove(System.Object)
  - System.Collections.SortedList.RemoveAt(System.Int32)
  - System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  - System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  - System.Collections.SortedList.SyncRoot
  - System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.SortedList.TrimToSize
  - System.Collections.SortedList.Values
  langs:
  - csharp
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
  type: Class
  summary: "Vertegenwoordigt een verzameling van sleutel/waarde-paren die zijn gesorteerd op basis van de sleutels en toegankelijk zijn voor sleutel en met de index."
  remarks: "Zie voor de algemene versie van deze verzameling <xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>.</xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>       Een element SortedList toegankelijk zijn voor de sleutel, zoals een element in een <xref:System.Collections.IDictionary>implementatie, of door de index, zoals een element in een <xref:System.Collections.IList>uitvoering.</xref:System.Collections.IList> </xref:System.Collections.IDictionary>       Een object SortedList onderhoudt intern twee matrices voor het opslaan van de elementen van de lijst. dat wil zeggen, één matrix voor de sleutels en een andere matrix voor de bijbehorende waarden. Elk element is een sleutel-waardepaar die toegankelijk is als een <xref:System.Collections.DictionaryEntry>object.</xref:System.Collections.DictionaryEntry> Een sleutel kan niet worden `null`, maar een waarde kan zijn.       De capaciteit van een object SortedList is het aantal elementen die de SortedList kan bevatten. Wanneer elementen worden toegevoegd aan een SortedList, de capaciteit automatisch wordt verhoogd door Hertoewijzing zoals wordt vereist. De capaciteit kan worden verlaagd door het aanroepen van <xref:System.Collections.SortedList.TrimToSize%2A>of door de <xref:System.Collections.SortedList.Capacity%2A>eigenschap expliciet.</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A>       Voor zeer grote SortedList objecten, verhoogt u de maximale capaciteit naar 2 miljard elementen op een 64-bits systeem door het instellen van de `enabled` kenmerk van het configuratie-element moet `true` in de runtime omgeving.       De elementen van een object SortedList zijn gesorteerd op basis van de sleutels op basis van een specifieke <xref:System.Collections.IComparer>implementatie opgegeven wanneer de SortedList wordt gemaakt of volgens de <xref:System.IComparable>implementatie geleverd door de sleutels zelf.</xref:System.IComparable> </xref:System.Collections.IComparer> In beide gevallen moet mag een SortedList geen dubbele sleutels.       De volgorde van de index is gebaseerd op de sorteervolgorde. Wanneer een element wordt toegevoegd, deze in SortedList wordt ingevoegd in de juiste sorteervolgorde en het indexeren dienovereenkomstig aanpast. Als u een element is verwijderd, past de indexering ook dienovereenkomstig. Daarom kan de index van een specifieke sleutel-waardepaar wijzigen, omdat elementen worden toegevoegd of verwijderd uit het object SortedList.       Bewerkingen voor een object SortedList zijn meestal langzamer dan bewerkingen op een <xref:System.Collections.Hashtable>object vanwege de sortering.</xref:System.Collections.Hashtable> De SortedList biedt echter meer flexibele toegang tot de waarden toe te staan via de gekoppelde sleutels of via de indexen.       Elementen in deze verzameling zijn toegankelijk via een geheel getal-index.  Indexen in deze verzameling zijn gebaseerd op nul.       De `foreach` -instructie van de taal C# (`for each` in Visual Basic) retourneert een object van het type van de elementen in de verzameling. Omdat elk element van het object SortedList een sleutel-waardepaar is, is het elementtype niet op het type van de sleutel of het type van de waarde. In plaats daarvan is het elementtype <xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> Bijvoorbeeld: [!code-cpp [klassieke SortedList voorbeeld&#2;](~/add/codesnippet/cpp/t-system.collections.sor_1.cpp)][!code-cs[klassieke SortedList voorbeeld&#2;](~/add/codesnippet/csharp/t-system.collections.sor_1.cs)][!code-vb[klassieke SortedList voorbeeld&#2;](~/add/codesnippet/visualbasic/t-system.collections.sor_1.vb) ] de `foreach` -instructie is een wrapper rond de enumerator waarmee alleen bij het lezen van niet schrijven naar de verzameling.    "
  example:
  - "The following code example shows how to create and initialize a SortedList object and how to print out its keys and values.  \n  \n [!code-cpp[Classic SortedList Example#1](~/add/codesnippet/cpp/t-system.collections.sor_2.cpp)]\n [!code-cs[Classic SortedList Example#1](~/add/codesnippet/csharp/t-system.collections.sor_2.cs)]\n [!code-vb[Classic SortedList Example#1](~/add/codesnippet/visualbasic/t-system.collections.sor_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class SortedList : ICloneable, System.Collections.IDictionary
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor
  id: '#ctor'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Collections.SortedList&quot;> </xref> klasse die leeg is, is de initiële standaardcapaciteit, en is gesorteerd op basis de <xref:System.IComparable>interface geïmplementeerd door elke sleutel toegevoegd aan de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object.</xref:System.IComparable>"
  remarks: "Elke sleutel moet worden geïmplementeerd de <xref:System.IComparable>interface in vergelijking met elke andere sleutel in staat zijn de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList> </xref:System.IComparable> De elementen worden gesorteerd op basis van de <xref:System.IComparable>implementatie van elke sleutel toegevoegd aan de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.IComparable>       De capaciteit van een <xref:System.Collections.SortedList>-object is het aantal elementen die de <xref:System.Collections.SortedList>kan bevatten.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Wanneer elementen worden toegevoegd aan een <xref:System.Collections.SortedList>, de capaciteit automatisch verhoogd zoals wordt vereist door het opnieuw toewijzen van de interne matrix.</xref:System.Collections.SortedList>       Als de grootte van de verzameling kan worden geschat, geven de begincapaciteit niet meer nodig om uit te voeren een aantal formaatwijzigingen tijdens het toevoegen van elementen op de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList>       Deze constructor is een bewerking O(1)."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_7_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_7_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_7_1.cpp)]"
  syntax:
    content: public SortedList ();
    parameters: []
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Collections.SortedList&quot;> </xref> klasse die leeg is, is de initiële standaardcapaciteit en is gesorteerd volgens de opgegeven <xref:System.Collections.IComparer>interface.</xref:System.Collections.IComparer>"
  remarks: "De elementen worden gesorteerd op basis van de opgegeven <xref:System.Collections.IComparer>uitvoering.</xref:System.Collections.IComparer> Als de `comparer` parameter `null`, wordt de <xref:System.IComparable>uitvoering van elke sleutel wordt gebruikt; daarom elke sleutel moet worden geïmplementeerd de <xref:System.IComparable>interface in vergelijking met elke andere sleutel in staat zijn de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       De capaciteit van een <xref:System.Collections.SortedList>-object is het aantal elementen die de <xref:System.Collections.SortedList>kan bevatten.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Wanneer elementen worden toegevoegd aan een <xref:System.Collections.SortedList>, de capaciteit automatisch verhoogd zoals wordt vereist door het opnieuw toewijzen van de interne matrix.</xref:System.Collections.SortedList>       Als de grootte van de verzameling kan worden geschat, geven de begincapaciteit niet meer nodig om uit te voeren een aantal formaatwijzigingen tijdens het toevoegen van elementen op de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList>       Deze constructor is een bewerking O(1)."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_18_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_18_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_18_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "De <xref:System.Collections.IComparer>implementatie moet worden gebruikt bij het vergelijken van sleutels.</xref:System.Collections.IComparer>       - of - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> gebruiken de <xref:System.IComparable>uitvoering van elke sleutel.</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Collections.SortedList&quot;> </xref> klasse die elementen die zijn gekopieerd uit de opgegeven woordenlijst bevat de dezelfde begincapaciteit als het aantal elementen gekopieerd heeft en is gesorteerd op basis de <xref:System.IComparable>interface geïmplementeerd door elke sleutel.</xref:System.IComparable>"
  remarks: "Elke sleutel moet worden geïmplementeerd de <xref:System.IComparable>interface in vergelijking met elke andere sleutel in staat zijn de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList> </xref:System.IComparable> De elementen worden gesorteerd op basis van de <xref:System.IComparable>implementatie van elke sleutel toegevoegd aan de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.IComparable>       Een <xref:System.Collections.Hashtable>object is een voorbeeld van een <xref:System.Collections.IDictionary>implementatie die kan worden doorgegeven aan deze constructor.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> Het nieuwe <xref:System.Collections.SortedList>object bevat een kopie van de sleutels en waarden die zijn opgeslagen in de <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.SortedList>       De capaciteit van een <xref:System.Collections.SortedList>-object is het aantal elementen die de <xref:System.Collections.SortedList>kan bevatten.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Wanneer elementen worden toegevoegd aan een <xref:System.Collections.SortedList>, de capaciteit automatisch verhoogd zoals wordt vereist door het opnieuw toewijzen van de interne matrix.</xref:System.Collections.SortedList>       Als de grootte van de verzameling kan worden geschat, geven de begincapaciteit niet meer nodig om uit te voeren een aantal formaatwijzigingen tijdens het toevoegen van elementen op de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList>       Deze constructor is een O (`n`)-bewerking, waarbij `n` is het aantal elementen in `d`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.sor_9_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.sor_9_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.sor_9_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "De <xref:System.Collections.IDictionary>implementatie om te kopiëren naar een nieuwe <xref href=&quot;System.Collections.SortedList&quot;> </xref> object.</xref:System.Collections.IDictionary>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Een of meer elementen in <code> d </code> implementeert niet de <xref:System.IComparable>interface.</xref:System.IComparable>"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Collections.SortedList&quot;> </xref> klasse die leeg is, heeft de opgegeven begincapaciteit, en is gesorteerd op basis de <xref:System.IComparable>interface geïmplementeerd door elke sleutel toegevoegd aan de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object.</xref:System.IComparable>"
  remarks: "Elke sleutel moet worden geïmplementeerd de <xref:System.IComparable>interface in vergelijking met elke andere sleutel in staat zijn de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList> </xref:System.IComparable> De elementen worden gesorteerd op basis van de <xref:System.IComparable>implementatie van elke sleutel toegevoegd aan de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.IComparable>       De capaciteit van een <xref:System.Collections.SortedList>-object is het aantal elementen die de <xref:System.Collections.SortedList>kan bevatten.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Wanneer elementen worden toegevoegd aan een <xref:System.Collections.SortedList>, de capaciteit automatisch verhoogd zoals wordt vereist door het opnieuw toewijzen van de interne matrix.</xref:System.Collections.SortedList>       Als de grootte van de verzameling kan worden geschat, geven de begincapaciteit niet meer nodig om uit te voeren een aantal formaatwijzigingen tijdens het toevoegen van elementen op de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList>       Deze constructor is een O (`n`)-bewerking, waarbij `n` is `initialCapacity`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.sor_15_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.sor_15_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.sor_15_1.cpp)]"
  syntax:
    content: public SortedList (int initialCapacity);
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: "Het eerste aantal elementen die de <xref href=&quot;System.Collections.SortedList&quot;> </xref> -object kan bevatten."
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>initialCapacity</code>is kleiner dan nul."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Er is onvoldoende geheugen beschikbaar om het maken van een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object met de opgegeven <code> initialCapacity </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  id: '#ctor(System.Collections.IComparer,System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Collections.SortedList&quot;> </xref> klasse die leeg is, heeft de opgegeven begincapaciteit en is gesorteerd volgens de opgegeven <xref:System.Collections.IComparer>interface.</xref:System.Collections.IComparer>"
  remarks: "De elementen worden gesorteerd op basis van de opgegeven <xref:System.Collections.IComparer>uitvoering.</xref:System.Collections.IComparer> Als de `comparer` parameter `null`, wordt de <xref:System.IComparable>uitvoering van elke sleutel wordt gebruikt; daarom elke sleutel moet worden geïmplementeerd de <xref:System.IComparable>interface in vergelijking met elke andere sleutel in staat zijn de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       De capaciteit van een <xref:System.Collections.SortedList>-object is het aantal elementen die de <xref:System.Collections.SortedList>kan bevatten.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Wanneer elementen worden toegevoegd aan een <xref:System.Collections.SortedList>, de capaciteit automatisch verhoogd zoals wordt vereist door het opnieuw toewijzen van de interne matrix.</xref:System.Collections.SortedList>       Als de grootte van de verzameling kan worden geschat, geven de begincapaciteit niet meer nodig om uit te voeren een aantal formaatwijzigingen tijdens het toevoegen van elementen op de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList>       Deze constructor is een O (`n`)-bewerking, waarbij `n` is `capacity`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/1806b376-56fc-45e2-aff7-_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/1806b376-56fc-45e2-aff7-_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/1806b376-56fc-45e2-aff7-_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer, int capacity);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "De <xref:System.Collections.IComparer>implementatie moet worden gebruikt bij het vergelijken van sleutels.</xref:System.Collections.IComparer>       - of - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> gebruiken de <xref:System.IComparable>uitvoering van elke sleutel.</xref:System.IComparable>"
    - id: capacity
      type: System.Int32
      description: "Het eerste aantal elementen die de <xref href=&quot;System.Collections.SortedList&quot;> </xref> -object kan bevatten."
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>is kleiner dan nul."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Er is onvoldoende geheugen beschikbaar om het maken van een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object met de opgegeven <code> capacity </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Collections.SortedList&quot;> </xref> klasse die elementen die zijn gekopieerd uit de opgegeven woordenlijst bevat de dezelfde begincapaciteit als het aantal elementen gekopieerd heeft en is gesorteerd volgens de opgegeven <xref:System.Collections.IComparer>interface.</xref:System.Collections.IComparer>"
  remarks: "De elementen worden gesorteerd op basis van de opgegeven <xref:System.Collections.IComparer>uitvoering.</xref:System.Collections.IComparer> Als de `comparer` parameter `null`, wordt de <xref:System.IComparable>uitvoering van elke sleutel wordt gebruikt; daarom elke sleutel moet worden geïmplementeerd de <xref:System.IComparable>interface in vergelijking met elke andere sleutel in staat zijn de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       Een <xref:System.Collections.Hashtable>object is een voorbeeld van een <xref:System.Collections.IDictionary>implementatie die kan worden doorgegeven aan deze constructor.</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> Het nieuwe <xref:System.Collections.SortedList>object bevat een kopie van de sleutels en waarden die zijn opgeslagen in de <xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> </xref:System.Collections.SortedList>       De capaciteit van een <xref:System.Collections.SortedList>-object is het aantal elementen die de <xref:System.Collections.SortedList>kan bevatten.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Wanneer elementen worden toegevoegd aan een <xref:System.Collections.SortedList>, de capaciteit automatisch verhoogd zoals wordt vereist door het opnieuw toewijzen van de interne matrix.</xref:System.Collections.SortedList>       Als de grootte van de verzameling kan worden geschat, geven de begincapaciteit niet meer nodig om uit te voeren een aantal formaatwijzigingen tijdens het toevoegen van elementen op de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList>       Deze constructor is een O (`n`)-bewerking, waarbij `n` is het aantal elementen in `d`."
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/653e16d8-524e-4544-8674-_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/653e16d8-524e-4544-8674-_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/653e16d8-524e-4544-8674-_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "De <xref:System.Collections.IDictionary>implementatie om te kopiëren naar een nieuwe <xref href=&quot;System.Collections.SortedList&quot;> </xref> object.</xref:System.Collections.IDictionary>"
    - id: comparer
      type: System.Collections.IComparer
      description: "De <xref:System.Collections.IComparer>implementatie moet worden gebruikt bij het vergelijken van sleutels.</xref:System.Collections.IComparer>       - of - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> gebruiken de <xref:System.IComparable>uitvoering van elke sleutel.</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>comparer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>, en een of meer elementen in <code>d</code> implementeert niet de <xref:System.IComparable> interface."
  platform:
  - net462
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Voegt een element met de opgegeven sleutel en waarde die u wilt een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "De invoegpositie wordt bepaald op basis van de vergelijkingsfunctie expliciet of standaard geselecteerd wanneer de <xref:System.Collections.SortedList>-object is gemaakt.</xref:System.Collections.SortedList>       Als <xref:System.Collections.SortedList.Count%2A>al gelijk is aan <xref:System.Collections.SortedList.Capacity%2A>, wordt de capaciteit van de <xref:System.Collections.SortedList>object wordt verhoogd met automatisch opnieuw toewijzen van de interne matrix en de bestaande elementen zijn gekopieerd naar de nieuwe matrix voordat het nieuwe element is toegevoegd.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.Count%2A>       U kunt ook de <xref:System.Collections.SortedList.Item%2A>eigenschap toevoegen van nieuwe elementen door de waarde van een sleutel die niet bestaat de <xref:System.Collections.SortedList>object (bijvoorbeeld `myCollection[&quot;myNonexistentKey&quot;] = myValue`).</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Item%2A> Echter, als de opgegeven sleutel al bestaat in de <xref:System.Collections.SortedList>, instelling de <xref:System.Collections.SortedList.Item%2A>eigenschap overschrijft de oude waarde.</xref:System.Collections.SortedList.Item%2A> </xref:System.Collections.SortedList> De methode Add Wijzig daarentegen niet bestaande elementen.       De elementen van een <xref:System.Collections.SortedList>object worden gesorteerd op basis van de sleutels op basis van een specifieke <xref:System.Collections.IComparer>implementatie opgegeven wanneer de <xref:System.Collections.SortedList>is gemaakt of volgens de <xref:System.IComparable>implementatie geleverd door de sleutels zelf.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Een sleutel kan niet worden `null`, maar een waarde kan zijn.       Deze methode is een O (`n`) bewerking voor niet-gesorteerde gegevens waar `n` is <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Het is een O (logboek `n`) bewerking als het nieuwe element wordt toegevoegd aan het einde van de lijst. Als invoegen een formaat veroorzaakt, de bewerking is O (`n`)."
  example:
  - "The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.sor_4_1.cpp)]\n [!code-vb[Classic SortedList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_4_1.vb)]\n [!code-cs[Classic SortedList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.sor_4_1.cs)]"
  syntax:
    content: public virtual void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "De sleutel van het element om toe te voegen."
    - id: value
      type: System.Object
      description: "De waarde van het element om toe te voegen. De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Een element met de opgegeven <code> key </code> bestaat al in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object.       - of - de <xref href=&quot;System.Collections.SortedList&quot;> </xref> is ingesteld voor gebruik van de <xref:System.IComparable>-interface en <code> key </code> implementeert niet de <xref:System.IComparable>interface.</xref:System.IComparable> </xref:System.IComparable>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.SortedList&quot;> </xref> is alleen-lezen.       - of - de <xref href=&quot;System.Collections.SortedList&quot;> </xref> heeft een vaste grootte."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Er is onvoldoende geheugen beschikbaar om het toevoegen van element op de <xref href=&quot;System.Collections.SortedList&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De vergelijkingsfunctie er een uitzondering gegenereerd."
  platform:
  - net462
- uid: System.Collections.SortedList.Capacity
  id: Capacity
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Opgehaald of ingesteld van de capaciteit van een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "Capaciteit is het aantal elementen die de <xref:System.Collections.SortedList>-object kan opslaan.</xref:System.Collections.SortedList> <xref:System.Collections.SortedList.Count%2A>is het aantal elementen daadwerkelijk in de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList></xref:System.Collections.SortedList.Count%2A>       Capaciteit is altijd groter dan of gelijk zijn aan <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Als <xref:System.Collections.SortedList.Count%2A>capaciteit overschrijdt tijdens het toevoegen van elementen, de capaciteit wordt automatisch verhoogd met het opnieuw toewijzen van de interne matrix voordat de oude elementen kopiëren en toevoegen van nieuwe elementen.</xref:System.Collections.SortedList.Count%2A>       De capaciteit kan worden verlaagd door het aanroepen van <xref:System.Collections.SortedList.TrimToSize%2A>of door de eigenschap capaciteit expliciet.</xref:System.Collections.SortedList.TrimToSize%2A> Wanneer de waarde van de capaciteit is expliciet ingesteld, wordt de interne matrix ook opnieuw toegewezen aan de opgegeven capaciteit.       Ophalen van de waarde van deze eigenschap is een bewerking O(1); de eigenschap is een O (`n`)-bewerking, waarbij `n` is de nieuwe capaciteit."
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "Het aantal elementen die de <xref href=&quot;System.Collections.SortedList&quot;> </xref> -object kan bevatten."
  overload: System.Collections.SortedList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "De waarde die is toegewezen, is kleiner dan het huidige aantal elementen in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Er is onvoldoende geheugen beschikbaar op het systeem."
  platform:
  - net462
- uid: System.Collections.SortedList.Clear
  id: Clear
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee verwijdert u alle elementen van een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "<xref:System.Collections.SortedList.Count%2A>is ingesteld op nul en verwijzingen naar andere objecten in de elementen van de verzameling ook worden vrijgegeven.</xref:System.Collections.SortedList.Count%2A>       <xref:System.Collections.SortedList.Capacity%2A>blijft ongewijzigd.</xref:System.Collections.SortedList.Capacity%2A> Opnieuw instellen van de capaciteit van de <xref:System.Collections.SortedList>object, roepen <xref:System.Collections.SortedList.TrimToSize%2A>of stel de <xref:System.Collections.SortedList.Capacity%2A>eigenschap rechtstreeks.</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A> </xref:System.Collections.SortedList> Een lege bijsnijden <xref:System.Collections.SortedList>Hiermee stelt u de capaciteit van de <xref:System.Collections.SortedList>naar de standaardcapaciteit.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_14_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_14_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_14_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.SortedList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.SortedList&quot;> </xref> object is alleen-lezen.       - of - de <xref href=&quot;System.Collections.SortedList&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
- uid: System.Collections.SortedList.Clone
  id: Clone
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Maakt een recente kopie van een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "Een recente kopie van een verzameling kopieert alleen de elementen van de verzameling of ze verwijzingstypen of waarde van het type, maar worden niet gekopieerd door de objecten die de verwijzingen naar verwijzen. De verwijzingen in de nieuwe verzameling verwijzen naar dezelfde objecten die de verwijzingen in de oorspronkelijke verzameling naar verwijzen.       Daarentegen een diepe kopie van een verzameling kopieert de elementen en alles direct of indirect waarnaar wordt verwezen door de elementen.       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "Een recente kopie van de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  overload: System.Collections.SortedList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee wordt bepaald of een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object een specifieke sleutel bevat."
  remarks: "De elementen van een <xref:System.Collections.SortedList>object worden gesorteerd op basis van de sleutels op basis van een specifieke <xref:System.Collections.IComparer>implementatie opgegeven wanneer de <xref:System.Collections.SortedList>is gemaakt of volgens de <xref:System.IComparable>implementatie geleverd door de sleutels zelf.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Implements <xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>.</xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName> bevat Deze functie werkt precies als <xref:System.Collections.SortedList.ContainsKey%2A>.</xref:System.Collections.SortedList.ContainsKey%2A>       Deze methode maakt gebruik van een algoritme binaire zoekopdracht; Deze methode is daarom een O (log `n`)-bewerking, waarbij `n` is <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Beginnen met .NET Framework 2.0, deze methode maakt gebruik van een verzameling objecten <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden op `item` om te bepalen of item bestaat.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> In eerdere versies van .NET Framework, deze beslissing is gemaakt met behulp van de <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden van de `item` parameter voor de objecten in de verzameling.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_12_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_12_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_12_1.vb)]"
  syntax:
    content: public virtual bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "De sleutel te vinden in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object bevat een element met de opgegeven <code> key </code>; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De vergelijkingsfunctie er een uitzondering gegenereerd."
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee wordt bepaald of een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object een specifieke sleutel bevat."
  remarks: "De elementen van een <xref:System.Collections.SortedList>object worden gesorteerd op basis van de sleutels op basis van een specifieke <xref:System.Collections.IComparer>implementatie opgegeven wanneer de <xref:System.Collections.SortedList>is gemaakt of volgens de <xref:System.IComparable>implementatie geleverd door de sleutels zelf.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Deze methode werkt hetzelfde als voor de <xref:System.Collections.SortedList.Contains%2A>methode.</xref:System.Collections.SortedList.Contains%2A>       Deze methode maakt gebruik van een algoritme binaire zoekopdracht; Deze methode is daarom een O (log `n`)-bewerking, waarbij `n` is <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Beginnen met .NET Framework 2.0, deze methode maakt gebruik van een verzameling objecten <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden op `item` om te bepalen of item bestaat.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> In eerdere versies van .NET Framework, deze beslissing is gemaakt met behulp van de <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden van de `item` parameter voor de objecten in de verzameling.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_16_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_16_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_16_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "De sleutel te vinden in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object bevat een element met de opgegeven <code> key </code>; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De vergelijkingsfunctie er een uitzondering gegenereerd."
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee wordt bepaald of een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object bevat een bepaalde waarde."
  remarks: "De waarden van de elementen van de <xref:System.Collections.SortedList>object worden vergeleken met de opgegeven waarde via de <xref:System.Object.Equals%2A>methode.</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       Deze methode voert een lineaire zoeken; Daarom is de gemiddelde uitvoeringstijd proportioneel aan <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Beginnen met .NET Framework 2.0, deze methode maakt gebruik van een verzameling objecten <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden op `item` om te bepalen of item bestaat.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> In eerdere versies van .NET Framework, deze beslissing is gemaakt met behulp van de <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden van de `item` parameter voor de objecten in de verzameling.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_0_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_0_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_0_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "De waarde te vinden in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object. De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object bevat een element met de opgegeven <code> value </code>; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Kopieën <xref href=&quot;System.Collections.SortedList&quot;> </xref> elementen op een eendimensionale <xref:System.Array>object, beginnend bij de opgegeven index in de matrix.</xref:System.Array>"
  remarks: "De sleutel/waarde-paren worden gekopieerd naar de <xref:System.Array>object in dezelfde volgorde als waarin de enumerator doorloopt de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList> </xref:System.Array>       Kopiëren van alleen de sleutels in de <xref:System.Collections.SortedList>, gebruik `SortedList.Keys.CopyTo`.</xref:System.Collections.SortedList>       Kopiëren van alleen de waarden in de <xref:System.Collections.SortedList>, gebruik `SortedList.Values.CopyTo`.</xref:System.Collections.SortedList>       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.  \n  \n [!code-cs[Classic SortedList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.sor_20_1.cs)]\n [!code-cpp[Classic SortedList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.sor_20_1.cpp)]\n [!code-vb[Classic SortedList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_20_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "De eendimensionale <xref:System.Array>-object dat het doel van de <xref:System.Collections.DictionaryEntry>objecten die zijn gekopieerd uit <xref href=&quot;System.Collections.SortedList&quot;> </xref>.</xref:System.Collections.DictionaryEntry> </xref:System.Array> De <xref:System.Array>moet hebben op nul gebaseerde indexering.</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "De op nul gebaseerde index in `array` welke kopiëren begint."
  overload: System.Collections.SortedList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>is kleiner dan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>is multidimensionaal.       - of - het aantal elementen in de bron <xref href=&quot;System.Collections.SortedList&quot;> </xref> object is groter dan de beschikbare ruimte vanaf <code>arrayIndex</code> aan het einde van de bestemming <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Het type van de bron <xref href=&quot;System.Collections.SortedList&quot;> </xref> kan niet automatisch worden geconverteerd naar het type van de bestemming <code> array </code>."
  platform:
  - net462
- uid: System.Collections.SortedList.Count
  id: Count
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee wordt het aantal elementen in een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "Elk element is een sleutel-waardepaar die toegankelijk is als een <xref:System.Collections.DictionaryEntry>object.</xref:System.Collections.DictionaryEntry>       <xref:System.Collections.SortedList.Capacity%2A>het aantal elementen is die de <xref:System.Collections.SortedList>-object kan opslaan.</xref:System.Collections.SortedList></xref:System.Collections.SortedList.Capacity%2A> Aantal is het aantal elementen die daadwerkelijk in de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>       <xref:System.Collections.SortedList.Capacity%2A>is altijd groter zijn dan of gelijk aan Count.</xref:System.Collections.SortedList.Capacity%2A> Als het aantal hoger is dan <xref:System.Collections.SortedList.Capacity%2A>tijdens het toevoegen van elementen, de capaciteit automatisch wordt verhoogd met het opnieuw toewijzen van de interne matrix voordat de oude elementen kopiëren en toevoegen van nieuwe elementen.</xref:System.Collections.SortedList.Capacity%2A>       Ophalen van de waarde van deze eigenschap is een O(1)-bewerking."
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "Het aantal elementen in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  overload: System.Collections.SortedList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  id: GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee wordt de waarde in de opgegeven index van een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "De volgorde van de index is gebaseerd op de sorteervolgorde. Wanneer een element wordt toegevoegd, wordt ingevoegd in <xref:System.Collections.SortedList>in de juiste sortering volgorde en het indexeren aanpast dienovereenkomstig.</xref:System.Collections.SortedList> Als u een element is verwijderd, past de indexering ook dienovereenkomstig. Daarom de index van een specifieke sleutel-waardepaar mogelijk wijzigen wanneer elementen worden toegevoegd of verwijderd uit de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList>       Deze methode is een bewerking O(1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_8_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_8_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_8_1.vb)]"
  syntax:
    content: public virtual object GetByIndex (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index van de waarde om op te halen."
    return:
      type: System.Object
      description: "De waarde in de opgegeven index van de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  overload: System.Collections.SortedList.GetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>valt buiten het bereik van geldige indexen voor de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  platform:
  - net462
- uid: System.Collections.SortedList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert een <xref:System.Collections.IDictionaryEnumerator>-object dat doorlopen een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object.</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "De `foreach` -instructie van de taal C# (`for each` in Visual Basic) de complexiteit van de opsommingen worden verborgen.  Daarom kan het gebruik `foreach` wordt aanbevolen, in plaats van rechtstreeks bewerken van de enumerator.       Enumerators kunnen worden gebruikt om de gegevens in de verzameling te lezen, maar ze kunnen niet worden gebruikt om de onderliggende verzameling niet wijzigen.       In eerste instantie bevindt de enumerator zich vóór het eerste element in de verzameling. <xref:System.Collections.IEnumerator.Reset%2A>brengt ook de enumerator terug naar deze positie.</xref:System.Collections.IEnumerator.Reset%2A>  Op deze positie <xref:System.Collections.IEnumerator.Current%2A>is niet gedefinieerd.</xref:System.Collections.IEnumerator.Current%2A> U moet daarom aanroepen <xref:System.Collections.IEnumerator.MoveNext%2A>om door te gaan van de enumerator voor het eerste element van de verzameling voordat het lezen van <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>retourneert de hetzelfde object totdat de <xref:System.Collections.IEnumerator.MoveNext%2A>of <xref:System.Collections.IEnumerator.Reset%2A>wordt aangeroepen.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Hiermee stelt u <xref:System.Collections.IEnumerator.Current%2A>naar het volgende element.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Als <xref:System.Collections.IEnumerator.MoveNext%2A>geeft het einde van de verzameling, de enumerator bevindt zich na het laatste element in de verzameling en <xref:System.Collections.IEnumerator.MoveNext%2A>retourneert `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Wanneer de enumerator is op deze positie, volgende aanroepen naar <xref:System.Collections.IEnumerator.MoveNext%2A>ook retourneren `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Als de laatste aanroep aan <xref:System.Collections.IEnumerator.MoveNext%2A>geretourneerd `false`, <xref:System.Collections.IEnumerator.Current%2A>is niet gedefinieerd.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>U kunt naar het eerste element van de verzameling opnieuw aanroepen <xref:System.Collections.IEnumerator.Reset%2A>gevolgd door <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> instellen       Een enumerator blijft geldig zolang de verzameling ongewijzigd blijft. Als er wijzigingen zijn aangebracht aan de verzameling, zoals het toevoegen, wijzigen of verwijderen van elementen, de enumerator is permanent ongeldig en het gedrag is niet gedefinieerd.       De enumerator heeft geen exclusieve toegang tot de verzameling; inventariseren door middel van een verzameling is daarom intrinsiek geen procedure thread-safe.  Om te garanderen thread veiligheid tijdens de opsomming, vergrendelt u de verzameling gedurende de volledige inventarisatie.  Als u wilt toestaan dat de verzameling worden geopend door meerdere threads voor lezen en schrijven, moet u uw eigen synchronisatie implementeren.       Deze methode is een bewerking O(1)."
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "Een <xref:System.Collections.IDictionaryEnumerator>object voor de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.SortedList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "De sleutel opgehaald bij de opgegeven index van een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "De volgorde van de index is gebaseerd op de sorteervolgorde. Wanneer een element wordt toegevoegd, wordt ingevoegd in <xref:System.Collections.SortedList>in de juiste sortering volgorde en het indexeren aanpast dienovereenkomstig.</xref:System.Collections.SortedList> Als u een element is verwijderd, past de indexering ook dienovereenkomstig. Daarom de index van een specifieke sleutel-waardepaar mogelijk wijzigen wanneer elementen worden toegevoegd of verwijderd uit de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList>       Deze methode is een bewerking O(1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_19_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_19_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_19_1.vb)]"
  syntax:
    content: public virtual object GetKey (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index van de sleutel op te halen."
    return:
      type: System.Object
      description: "De sleutel op de opgegeven index van de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  overload: System.Collections.SortedList.GetKey*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>valt buiten het bereik van geldige indexen voor de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  platform:
  - net462
- uid: System.Collections.SortedList.GetKeyList
  id: GetKeyList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee haalt u de sleutels in een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "De geretourneerde <xref:System.Collections.IList>object is een alleen-lezen weergave van de sleutels van de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList> </xref:System.Collections.IList> Wijzigingen in de onderliggende <xref:System.Collections.SortedList>direct zichtbaar zijn in de <xref:System.Collections.IList>.</xref:System.Collections.IList> </xref:System.Collections.SortedList>       De elementen van de geretourneerde <xref:System.Collections.IList>worden gesorteerd in dezelfde volgorde als de sleutels van de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.IList>       Deze methode is vergelijkbaar met de <xref:System.Collections.SortedList.Keys%2A>eigenschap, maar retourneert een <xref:System.Collections.IList>object in plaats van een <xref:System.Collections.ICollection>object.</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Keys%2A>       Deze methode is een bewerking O(1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_1_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetKeyList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "Een <xref:System.Collections.IList>object met de sleutels in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object.</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetKeyList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetValueList
  id: GetValueList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee haalt u de waarden in een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "De geretourneerde <xref:System.Collections.IList>object is een alleen-lezen weergave van de waarden van de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList> </xref:System.Collections.IList> Wijzigingen in de onderliggende <xref:System.Collections.SortedList>direct zichtbaar zijn in de <xref:System.Collections.IList>.</xref:System.Collections.IList> </xref:System.Collections.SortedList>       De elementen van de geretourneerde <xref:System.Collections.IList>worden gesorteerd in dezelfde volgorde als de waarden van de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.IList>       Deze methode is vergelijkbaar met de <xref:System.Collections.SortedList.Values%2A>eigenschap, maar retourneert een <xref:System.Collections.IList>object in plaats van een <xref:System.Collections.ICollection>object.</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Values%2A>       Deze methode is een bewerking O(1)."
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_11_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_11_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_11_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetValueList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "Een <xref:System.Collections.IList>object met de waarden in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object.</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetValueList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  id: IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert de op nul gebaseerde index van de opgegeven sleutel in een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "De elementen van een <xref:System.Collections.SortedList>object worden gesorteerd op basis van de sleutels op basis van een specifieke <xref:System.Collections.IComparer>implementatie opgegeven wanneer de <xref:System.Collections.SortedList>is gemaakt of volgens de <xref:System.IComparable>implementatie geleverd door de sleutels zelf.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       De volgorde van de index is gebaseerd op de sorteervolgorde. Wanneer een element wordt toegevoegd, wordt ingevoegd in <xref:System.Collections.SortedList>in de juiste sortering volgorde en het indexeren aanpast dienovereenkomstig.</xref:System.Collections.SortedList> Als u een element is verwijderd, past de indexering ook dienovereenkomstig. Daarom de index van een specifieke sleutel-waardepaar mogelijk wijzigen wanneer elementen worden toegevoegd of verwijderd uit de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>       Deze methode maakt gebruik van een algoritme binaire zoekopdracht; Deze methode is daarom een O (log `n`)-bewerking, waarbij `n` is <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Beginnen met .NET Framework 2.0, deze methode maakt gebruik van een verzameling objecten <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden op `item` om te bepalen of item bestaat.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> In eerdere versies van .NET Framework, deze beslissing is gemaakt met behulp van de <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden van de `item` parameter voor de objecten in de verzameling.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_2_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_2_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_2_1.cs)]"
  syntax:
    content: public virtual int IndexOfKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "De sleutel te vinden in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
    return:
      type: System.Int32
      description: "De op nul gebaseerde index van de <code> key </code> parameter, als <code> key </code> is gevonden in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object; anders wordt -1."
  overload: System.Collections.SortedList.IndexOfKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De vergelijkingsfunctie er een uitzondering gegenereerd."
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  id: IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert de op nul gebaseerde index van het eerste exemplaar van de opgegeven waarde in een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "De volgorde van de index is gebaseerd op de sorteervolgorde. Wanneer een element wordt toegevoegd, wordt ingevoegd in <xref:System.Collections.SortedList>in de juiste sortering volgorde en het indexeren aanpast dienovereenkomstig.</xref:System.Collections.SortedList> Als u een element is verwijderd, past de indexering ook dienovereenkomstig. Daarom de index van een specifieke sleutel-waardepaar mogelijk wijzigen wanneer elementen worden toegevoegd of verwijderd uit de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList>       De waarden van de elementen van de <xref:System.Collections.SortedList>worden vergeleken met de opgegeven waarde met behulp van de <xref:System.Object.Equals%2A>methode.</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       Deze methode gebruikt een lineaire zoeken; Deze methode is daarom een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>       Beginnen met .NET Framework 2.0, deze methode maakt gebruik van een verzameling objecten <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden op `item` om te bepalen of item bestaat.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> In eerdere versies van .NET Framework, deze beslissing is gemaakt met behulp van de <xref:System.Object.Equals%2A>en <xref:System.IComparable.CompareTo%2A>methoden van de `item` parameter voor de objecten in de verzameling.</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_5_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_5_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_5_1.cs)]"
  syntax:
    content: public virtual int IndexOfValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "De waarde te vinden in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object. De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Int32
      description: "De op nul gebaseerde index van het eerste exemplaar van de <code> value </code> parameter, als <code> value </code> is gevonden in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object; anders wordt -1."
  overload: System.Collections.SortedList.IndexOfValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Haalt een waarde die aangeeft of een <xref href=&quot;System.Collections.SortedList&quot;> </xref> -object heeft een vaste grootte."
  remarks: "Een verzameling met een vaste grootte is niet toegestaan het toevoegen of verwijderen van elementen nadat de verzameling is gemaakt, maar toe de wijziging van bestaande elementen dat staat.       Een verzameling met een vaste grootte is gewoon een verzameling met een wrapper waardoor toevoegen en verwijderen van elementen; daarom als wijzigingen zijn aangebracht in de onderliggende verzameling, inclusief het toevoegen of verwijderen van elementen, de verzameling met vaste grootte wordt doorgevoerd die wijzigingen.       Ophalen van de waarde van deze eigenschap is een O(1)-bewerking."
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Collections.SortedList&quot;> </xref> -object heeft een vaste grootte, anders wordt <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Haalt een waarde die aangeeft of een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object is alleen-lezen."
  remarks: "Een verzameling die is alleen-lezen is het toevoegen, verwijderen of wijzigen van de elementen niet toegestaan, nadat de verzameling is gemaakt.       Een verzameling die is alleen-lezen is gewoon een verzameling met een wrapper waardoor het wijzigen van de collectie. daarom als wijzigingen worden aangebracht in de onderliggende verzameling, de verzameling alleen-lezen wordt doorgevoerd die wijzigingen.       Ophalen van de waarde van deze eigenschap is een O(1)-bewerking."
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Collections.SortedList&quot;> </xref> -object is alleen-lezen, anders wordt <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Haalt een waarde die aangeeft of de toegang tot een <xref href=&quot;System.Collections.SortedList&quot;> </xref> -object wordt gesynchroniseerd (thread-veilig)."
  remarks: "Om te waarborgen van de thread-veiligheid van een <xref:System.Collections.SortedList>object, alle bewerkingen moeten worden uitgevoerd via de wrapper die is geretourneerd door de <xref:System.Collections.SortedList.Synchronized%2A>methode.</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList>       Inventariseren door middel van een verzameling is intrinsiek niet een thread-veilige procedure. Zelfs wanneer een verzameling wordt gesynchroniseerd, andere threads kunnen nog steeds de verzameling niet wijzigen, waardoor de enumerator is een uitzondering. Om te garanderen thread veiligheid tijdens de opsomming, moet u de verzameling tijdens de gehele opsomming vergrendelen of het gevolg van wijzigingen die door andere threads uitzonderingen wordt onderschept."
  example:
  - "The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_1_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.sor_1_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.sor_1_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.sor_1_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de toegang tot de <xref href=&quot;System.Collections.SortedList&quot;> </xref> -object wordt gesynchroniseerd (thread-safe); anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Opgehaald en stelt u de waarde die is gekoppeld aan een specifieke sleutel in een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "U kunt de eigenschap Item gebruiken voor toegang tot een specifieke element in een verzameling door te geven van de volgende syntaxis: `myCollection[key]`.       U kunt deze eigenschap ook gebruiken voor het toevoegen van nieuwe elementen door de waarde van een sleutel die niet bestaat in de <xref:System.Collections.SortedList>object (bijvoorbeeld `myCollection[&quot;myNonexistentKey&quot;] = myValue)`.</xref:System.Collections.SortedList> Echter, als de opgegeven sleutel al bestaat in de <xref:System.Collections.SortedList>, de oude waarde instellen van de eigenschap Item overschrijft.</xref:System.Collections.SortedList> Daarentegen de <xref:System.Collections.SortedList.Add%2A>methode bestaande elementen niet wijzigt.</xref:System.Collections.SortedList.Add%2A>       Een sleutel kan niet worden `null`, maar een waarde kan zijn. Onderscheid maken tussen `null` die wordt geretourneerd omdat de opgegeven sleutel is niet gevonden en `null` die wordt geretourneerd omdat de waarde van de opgegeven sleutel is `null`, gebruiken de <xref:System.Collections.SortedList.Contains%2A>methode of de <xref:System.Collections.SortedList.ContainsKey%2A>methode om te bepalen of de sleutel in de lijst bestaat.</xref:System.Collections.SortedList.ContainsKey%2A> </xref:System.Collections.SortedList.Contains%2A>       De elementen van een <xref:System.Collections.SortedList>zijn gesorteerd op basis van de sleutels op basis van een specifieke <xref:System.Collections.IComparer>implementatie opgegeven wanneer de <xref:System.Collections.SortedList>is gemaakt of volgens de <xref:System.IComparable>implementatie geleverd door de sleutels zelf.</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       Het sleutelwoord in de C#-taal wordt gebruikt voor het definiëren van de indexeerfuncties in plaats van de implementatie van de <xref:System.Collections.SortedList.Keys%2A>eigenschap.</xref:System.Collections.SortedList.Keys%2A> Visual Basic implementeert Item als een standaardeigenschap dezelfde functionaliteit indexering bieden.       Ophalen van de waarde van deze eigenschap is een O (log `n`)-bewerking, waarbij `n` is <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> De eigenschap is een O (log `n`) bewerking als de sleutel al in de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> Als de sleutel niet in de lijst, instellen van de eigenschap is een O (`n`) bewerking voor niet-gesorteerde gegevens of O (logboek `n`) als het nieuwe element wordt toegevoegd aan het einde van de lijst. Als invoegen een formaat veroorzaakt, de bewerking is O (`n`)."
  syntax:
    content: public virtual object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "De sleutel die is gekoppeld aan de waarde ophalen of instellen."
    return:
      type: System.Object
      description: "De waarde die is gekoppeld aan de <code> key </code> parameter in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object, als <code> key </code> is gevonden, anders, <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De eigenschap is ingesteld en de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object is alleen-lezen.       - of - de eigenschap is ingesteld, <code> key </code> bestaat niet in de verzameling en de <xref href=&quot;System.Collections.SortedList&quot;> </xref> heeft een vaste grootte."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "Er is onvoldoende geheugen beschikbaar om het toevoegen van element op de <xref href=&quot;System.Collections.SortedList&quot;> </xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De vergelijkingsfunctie er een uitzondering gegenereerd."
  platform:
  - net462
- uid: System.Collections.SortedList.Keys
  id: Keys
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee haalt u de sleutels in een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "De <xref:System.Collections.ICollection>object is een alleen-lezen weergave van de sleutels van de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> Wijzigingen in de onderliggende <xref:System.Collections.SortedList>direct zichtbaar zijn in de <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.SortedList>       De elementen van de <xref:System.Collections.ICollection>worden gesorteerd in dezelfde volgorde als de sleutels van de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection>       Deze eigenschap is vergelijkbaar met de <xref:System.Collections.SortedList.GetKeyList%2A>methode, maar retourneert een <xref:System.Collections.ICollection>object in plaats van een <xref:System.Collections.IList>object.</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetKeyList%2A>       Deze methode is een bewerking O(1)."
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "Een <xref:System.Collections.ICollection>object met de sleutels in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object.</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee verwijdert u het element met de opgegeven sleutel van een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "Als de <xref:System.Collections.SortedList>object bevat een element met de opgegeven sleutel niet de <xref:System.Collections.SortedList>blijft ongewijzigd.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Er is geen uitzondering is opgetreden.       In verzamelingen van aangrenzende elementen, zoals lijsten, verplaatsen de elementen die achter de verwijderde element omhoog naar de vrijgekomen spot in beslag nemen. Als de verzameling is geïndexeerd, worden de indexen van de elementen die verplaatst worden ook bijgewerkt. Dit gedrag is niet van toepassing op verzamelingen waar elementen conceptueel gezien zijn gegroepeerd in buckets, zoals een hash-tabel.       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_6_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_6_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_6_1.vb)]"
  syntax:
    content: public virtual void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "De sleutel van het element te verwijderen."
  overload: System.Collections.SortedList.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.SortedList&quot;> </xref> object is alleen-lezen.       - of - de <xref href=&quot;System.Collections.SortedList&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee verwijdert u het element bij de opgegeven index van een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "De volgorde van de index is gebaseerd op de sorteervolgorde. Wanneer een element wordt toegevoegd, wordt ingevoegd in <xref:System.Collections.SortedList>in de juiste sortering volgorde en het indexeren aanpast dienovereenkomstig.</xref:System.Collections.SortedList> Als u een element is verwijderd, past de indexering ook dienovereenkomstig. Daarom de index van een specifieke sleutel-waardepaar mogelijk wijzigen wanneer elementen worden toegevoegd of verwijderd uit de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList>       In verzamelingen van aangrenzende elementen, zoals lijsten, verplaatsen de elementen die achter de verwijderde element omhoog naar de vrijgekomen spot in beslag nemen. Als de verzameling is geïndexeerd, worden de indexen van de elementen die verplaatst worden ook bijgewerkt. Dit gedrag is niet van toepassing op verzamelingen waar elementen conceptueel gezien zijn gegroepeerd in buckets, zoals een hash-tabel.       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_17_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_17_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_17_1.vb)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index van het element te verwijderen."
  overload: System.Collections.SortedList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>valt buiten het bereik van geldige indexen voor de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.SortedList&quot;> </xref> is alleen-lezen.       - of - de <xref href=&quot;System.Collections.SortedList&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  id: SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Vervangt de waarde op een specifieke index in een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "De volgorde van de index is gebaseerd op de sorteervolgorde. Wanneer een element wordt toegevoegd, wordt ingevoegd in <xref:System.Collections.SortedList>in de juiste sortering volgorde en het indexeren aanpast dienovereenkomstig.</xref:System.Collections.SortedList> Als u een element is verwijderd, past de indexering ook dienovereenkomstig. Daarom de index van een specifieke sleutel-waardepaar mogelijk wijzigen wanneer elementen worden toegevoegd of verwijderd uit de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList>       Deze methode is een bewerking O(1)."
  example:
  - "The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.  \n  \n [!code-vb[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_13_1.vb)]\n [!code-cs[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_13_1.cs)]\n [!code-cpp[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_13_1.cpp)]"
  syntax:
    content: public virtual void SetByIndex (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index opslagpunt `value`."
    - id: value
      type: System.Object
      description: "De <xref:System.Object>op te slaan in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object.</xref:System.Object> De waarde kan zijn <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>."
  overload: System.Collections.SortedList.SetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>valt buiten het bereik van geldige indexen voor de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  platform:
  - net462
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  id: Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert een gesynchroniseerde (thread-safe)-wrapper voor een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "Om te waarborgen van de thread-veiligheid van een <xref:System.Collections.SortedList>object, alle bewerkingen via deze wrapper alleen moeten worden uitgevoerd.</xref:System.Collections.SortedList>       Inventariseren door middel van een verzameling is intrinsiek niet een thread-veilige procedure. Zelfs wanneer een verzameling wordt gesynchroniseerd, andere threads kunnen nog steeds de verzameling niet wijzigen, waardoor de enumerator is een uitzondering. Om te garanderen thread veiligheid tijdens de opsomming, moet u de verzameling tijdens de gehele opsomming vergrendelen of het gevolg van wijzigingen die door andere threads uitzonderingen wordt onderschept."
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.sor_10_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.sor_10_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.sor_10_1.vb)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.sor_10_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.sor_10_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_10_2.vb)]"
  syntax:
    content: public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);
    parameters:
    - id: list
      type: System.Collections.SortedList
      description: "De <xref href=&quot;System.Collections.SortedList&quot;> </xref> object om te synchroniseren."
    return:
      type: System.Collections.SortedList
      description: "Een gesynchroniseerd (thread-veilige) wrapper voor de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  overload: System.Collections.SortedList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.SortedList.SyncRoot
  id: SyncRoot
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Haalt een object dat kan worden gebruikt voor het synchroniseren van toegang tot een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "Maken van een gesynchroniseerde versie van de <xref:System.Collections.SortedList>object, gebruikt u de <xref:System.Collections.SortedList.Synchronized%2A>methode.</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList> Afgeleide klassen kunnen evenwel de eigen gesynchroniseerde versie van de <xref:System.Collections.SortedList>met behulp van de eigenschap SyncRoot.</xref:System.Collections.SortedList> De code voor het synchroniseren moet bewerkingen uitvoeren op de SyncRoot van de <xref:System.Collections.SortedList>, niet rechtstreeks op de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> Dit zorgt ervoor dat de juiste werking van de verzamelingen die zijn afgeleid van andere objecten. In het bijzonder houdt juiste synchronisatie met andere threads dat tegelijkertijd kan worden wijzigt de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList>       Inventariseren door middel van een verzameling is intrinsiek niet een thread-veilige procedure. Zelfs wanneer een verzameling wordt gesynchroniseerd, andere threads kunnen nog steeds de verzameling niet wijzigen, waardoor de enumerator is een uitzondering. Om te garanderen thread veiligheid tijdens de opsomming, moet u de verzameling tijdens de gehele opsomming vergrendelen of het gevolg van wijzigingen die door andere threads uitzonderingen wordt onderschept."
  example:
  - "The following code example shows how to lock the collection using the SyncRoot property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_0_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_0_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_0_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "Een object dat kan worden gebruikt voor het synchroniseren van toegang tot de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  overload: System.Collections.SortedList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Retourneert een <xref:System.Collections.IEnumerator>die doorloopt de <xref href=&quot;System.Collections.SortedList&quot;> </xref>.</xref:System.Collections.IEnumerator>"
  remarks: "[Visual Basic C#]       De `foreach` -instructie van de taal C# (`for each` in Visual Basic) de complexiteit van de opsommingen worden verborgen.  Daarom kan het gebruik `foreach` wordt aanbevolen, in plaats van rechtstreeks bewerken van de enumerator.       Enumerators kunnen worden gebruikt om de gegevens in de verzameling te lezen, maar ze kunnen niet worden gebruikt om de onderliggende verzameling niet wijzigen.       In eerste instantie bevindt de enumerator zich vóór het eerste element in de verzameling. <xref:System.Collections.IEnumerator.Reset%2A>brengt ook de enumerator terug naar deze positie.</xref:System.Collections.IEnumerator.Reset%2A> Op deze functie, het aanroepen van <xref:System.Collections.IEnumerator.Current%2A>er een uitzondering gegenereerd.</xref:System.Collections.IEnumerator.Current%2A> U moet daarom aanroepen <xref:System.Collections.IEnumerator.MoveNext%2A>om door te gaan van de enumerator voor het eerste element van de verzameling voordat het lezen van <xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>retourneert de hetzelfde object totdat de <xref:System.Collections.IEnumerator.MoveNext%2A>of <xref:System.Collections.IEnumerator.Reset%2A>wordt aangeroepen.</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>Hiermee stelt u <xref:System.Collections.IEnumerator.Current%2A>naar het volgende element.</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       Als <xref:System.Collections.IEnumerator.MoveNext%2A>geeft het einde van de verzameling, de enumerator bevindt zich na het laatste element in de verzameling en <xref:System.Collections.IEnumerator.MoveNext%2A>retourneert `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Wanneer de enumerator is op deze positie, volgende aanroepen naar <xref:System.Collections.IEnumerator.MoveNext%2A>ook retourneren `false`.</xref:System.Collections.IEnumerator.MoveNext%2A> Als de laatste aanroep aan <xref:System.Collections.IEnumerator.MoveNext%2A>geretourneerd `false`, aanroepende <xref:System.Collections.IEnumerator.Current%2A>er een uitzondering gegenereerd.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> <xref:System.Collections.IEnumerator.Current%2A>U kunt naar het eerste element van de verzameling opnieuw aanroepen <xref:System.Collections.IEnumerator.Reset%2A>gevolgd door <xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A> instellen       Een enumerator blijft geldig zolang de verzameling ongewijzigd blijft. Als er wijzigingen zijn aangebracht aan de verzameling, zoals het toevoegen, wijzigen of verwijderen van elementen, in de enumerator permanent ongeldig wordt gemaakt en de volgende aanroep aan <xref:System.Collections.IEnumerator.MoveNext%2A>of <xref:System.Collections.IEnumerator.Reset%2A>er een <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> Als de verzameling is gewijzigd tussen <xref:System.Collections.IEnumerator.MoveNext%2A>en <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A>retourneert het element dat is ingesteld op, zelfs als de enumerator is al ongeldig gemaakt.</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       De enumerator heeft geen exclusieve toegang tot de verzameling; inventariseren door middel van een verzameling is daarom intrinsiek geen procedure thread-safe. Zelfs wanneer een verzameling wordt gesynchroniseerd, andere threads kunnen nog steeds de verzameling niet wijzigen, waardoor de enumerator is een uitzondering. Om te garanderen thread veiligheid tijdens de opsomming, moet u de verzameling tijdens de gehele opsomming vergrendelen of het gevolg van wijzigingen die door andere threads uitzonderingen wordt onderschept.       Deze methode is een bewerking O(1)."
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.SortedList&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.TrimToSize
  id: TrimToSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee stelt u de capaciteit aan het werkelijke aantal elementen in een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "Deze methode kan worden gebruikt om te minimaliseren van een verzameling geheugen overhead als er geen nieuwe elementen wordt toegevoegd aan de verzameling.       Om in te stellen een <xref:System.Collections.SortedList>object in de oorspronkelijke toestand, aanroep van de <xref:System.Collections.SortedList.Clear%2A>methode voordat u TrimToSize aanroept.</xref:System.Collections.SortedList.Clear%2A> </xref:System.Collections.SortedList> Een lege bijsnijden <xref:System.Collections.SortedList>Hiermee stelt u de capaciteit van de <xref:System.Collections.SortedList>naar de standaardcapaciteit.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       Deze methode is een O (`n`)-bewerking, waarbij `n` is <xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_3_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_3_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_3_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.SortedList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "De <xref href=&quot;System.Collections.SortedList&quot;> </xref> object is alleen-lezen.       - of - de <xref href=&quot;System.Collections.SortedList&quot;> </xref> heeft een vaste grootte."
  platform:
  - net462
- uid: System.Collections.SortedList.Values
  id: Values
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "Hiermee haalt u de waarden in een <xref href=&quot;System.Collections.SortedList&quot;> </xref> object."
  remarks: "De <xref:System.Collections.ICollection>object is een alleen-lezen weergave van de waarden van de <xref:System.Collections.SortedList>object.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> Wijzigingen in de onderliggende <xref:System.Collections.SortedList>direct zichtbaar zijn in de <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.SortedList>       De elementen van de <xref:System.Collections.ICollection>worden gesorteerd in dezelfde volgorde als de waarden van de <xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.ICollection>       Deze eigenschap is vergelijkbaar met de <xref:System.Collections.SortedList.GetValueList%2A>methode, maar retourneert een <xref:System.Collections.ICollection>object in plaats van een <xref:System.Collections.IList>object.</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetValueList%2A>       Deze methode is een bewerking O(1)."
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "Een <xref:System.Collections.ICollection>object met de waarden in de <xref href=&quot;System.Collections.SortedList&quot;> </xref> object.</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Collections.SortedList.#ctor
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.SortedList.#ctor(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
- uid: System.Collections.SortedList.Capacity
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
- uid: System.Collections.SortedList.Clear
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
- uid: System.Collections.SortedList.Clone
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
- uid: System.Collections.SortedList.Contains(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.SortedList.Count
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
- uid: System.Collections.SortedList.GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.SortedList.GetKey(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
- uid: System.Collections.SortedList.GetKeyList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.SortedList.GetValueList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
- uid: System.Collections.SortedList.IsFixedSize
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
- uid: System.Collections.SortedList.Keys
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.SortedList.Remove(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
- uid: System.Collections.SortedList
  parent: System.Collections
  isExternal: false
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
- uid: System.Collections.SortedList.SyncRoot
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.SortedList.TrimToSize
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
- uid: System.Collections.SortedList.Values
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
- uid: System.Collections.SortedList.#ctor*
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList
  nameWithType: SortedList.SortedList
- uid: System.Collections.SortedList.Add*
  parent: System.Collections.SortedList
  isExternal: false
  name: Add
  nameWithType: SortedList.Add
- uid: System.Collections.SortedList.Capacity*
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
- uid: System.Collections.SortedList.Clear*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear
  nameWithType: SortedList.Clear
- uid: System.Collections.SortedList.Clone*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone
  nameWithType: SortedList.Clone
- uid: System.Collections.SortedList.Contains*
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains
  nameWithType: SortedList.Contains
- uid: System.Collections.SortedList.ContainsKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey
  nameWithType: SortedList.ContainsKey
- uid: System.Collections.SortedList.ContainsValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue
  nameWithType: SortedList.ContainsValue
- uid: System.Collections.SortedList.CopyTo*
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo
  nameWithType: SortedList.CopyTo
- uid: System.Collections.SortedList.Count*
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
- uid: System.Collections.SortedList.GetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex
  nameWithType: SortedList.GetByIndex
- uid: System.Collections.SortedList.GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator
  nameWithType: SortedList.GetEnumerator
- uid: System.Collections.SortedList.GetKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey
  nameWithType: SortedList.GetKey
- uid: System.Collections.SortedList.GetKeyList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList
  nameWithType: SortedList.GetKeyList
- uid: System.Collections.SortedList.GetValueList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList
  nameWithType: SortedList.GetValueList
- uid: System.Collections.SortedList.IndexOfKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey
  nameWithType: SortedList.IndexOfKey
- uid: System.Collections.SortedList.IndexOfValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue
  nameWithType: SortedList.IndexOfValue
- uid: System.Collections.SortedList.IsFixedSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item*
  parent: System.Collections.SortedList
  isExternal: false
  name: Item
  nameWithType: SortedList.Item
- uid: System.Collections.SortedList.Keys*
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
- uid: System.Collections.SortedList.Remove*
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove
  nameWithType: SortedList.Remove
- uid: System.Collections.SortedList.RemoveAt*
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt
  nameWithType: SortedList.RemoveAt
- uid: System.Collections.SortedList.SetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex
  nameWithType: SortedList.SetByIndex
- uid: System.Collections.SortedList.Synchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized
  nameWithType: SortedList.Synchronized
- uid: System.Collections.SortedList.SyncRoot*
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.SortedList.TrimToSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize
  nameWithType: SortedList.TrimToSize
- uid: System.Collections.SortedList.Values*
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
