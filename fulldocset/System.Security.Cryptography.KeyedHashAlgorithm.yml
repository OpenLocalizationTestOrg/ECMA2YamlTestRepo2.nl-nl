### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  id: KeyedHashAlgorithm
  children:
  - System.Security.Cryptography.KeyedHashAlgorithm.#ctor
  - System.Security.Cryptography.KeyedHashAlgorithm.Create
  - System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)
  - System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.KeyedHashAlgorithm.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  langs:
  - csharp
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm
  fullName: System.Security.Cryptography.KeyedHashAlgorithm
  type: Class
  summary: "Hiermee geeft u de abstracte klasse van welke alle implementaties van versleutelde hash algoritmen moeten zijn afgeleid."
  remarks: "Hash-functies kaart binaire tekenreeksen van een willekeurige lengte in kleine binaire tekenreeksen met een vaste lengte. Een cryptografische hash-functie heeft de eigenschap invoerreeksen twee afzonderlijke invoer vinden die hash op dezelfde waarde is. Kleine wijzigingen in de gegevens leiden tot grote, onvoorspelbare wijzigingen in de hash.       Een sleutelhash-algoritme is een sleutel-afhankelijke, one-way hashfunctie gebruikt als een message authentication code. Alleen iemand die kent van de sleutel kunt controleren of de hash. Versleutelde hash-algoritmen bieden Echtheid zonder secrecy.       Hash-functies worden vaak gebruikt met digitale handtekeningen en gegevensintegriteit. De <xref:System.Security.Cryptography.HMACSHA1>klasse is een voorbeeld van een sleutelhash-algoritme.</xref:System.Security.Cryptography.HMACSHA1>"
  example:
  - "The following code example demonstrates how to derive from the KeyedHashAlgorithm class.  \n  \n [!code-cs[KeyedHashAlgorithm#1](~/add/codesnippet/csharp/t-system.security.crypto_129_1.cs)]\n [!code-vb[KeyedHashAlgorithm#1](~/add/codesnippet/visualbasic/t-system.security.crypto_129_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class KeyedHashAlgorithm : System.Security.Cryptography.HashAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.HashFinal
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.Initialize
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: KeyedHashAlgorithm()
  nameWithType: KeyedHashAlgorithm.KeyedHashAlgorithm()
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.KeyedHashAlgorithm()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;> </xref> klasse."
  remarks: "U kan geen exemplaar van een abstracte klasse maken. Toepassingscode maakt een nieuw exemplaar van een afgeleide klasse."
  syntax:
    content: protected KeyedHashAlgorithm ();
    parameters: []
  overload: System.Security.Cryptography.KeyedHashAlgorithm.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create
  id: Create
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: Create()
  nameWithType: KeyedHashAlgorithm.Create()
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Hiermee maakt een exemplaar van de standaardimplementatie van een sleutelhash-algoritme."
  remarks: "Deze overbelasting gebruikt standaard de <xref:System.Security.Cryptography.HMACSHA1>uitvoering van een sleutelhash-algoritme.</xref:System.Security.Cryptography.HMACSHA1> Als u opgeven van een andere implementatie wilt, gebruikt u de <xref:System.Security.Cryptography.KeyedHashAlgorithm.Create%28System.String%29>overbelasting, waarmee u kunt in plaats daarvan de naam van een algoritme opgeven.</xref:System.Security.Cryptography.KeyedHashAlgorithm.Create%28System.String%29> Het configuratiesysteem cryptografie definieert de standaardimplementatie van de <xref:System.Security.Cryptography.KeyedHashAlgorithm>klasse.</xref:System.Security.Cryptography.KeyedHashAlgorithm>"
  syntax:
    content: public static System.Security.Cryptography.KeyedHashAlgorithm Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.KeyedHashAlgorithm
      description: "Een nieuwe <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> exemplaar, tenzij de standaardinstellingen zijn gewijzigd."
  overload: System.Security.Cryptography.KeyedHashAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: Create(String)
  nameWithType: KeyedHashAlgorithm.Create(String)
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Maakt een exemplaar van de opgegeven implementatie van een sleutelhash-algoritme."
  remarks: "Deze methode ondersteunt een aantal algoritmen, zoals MD5, SHA-1, SHA-256 en RIPEMD160. Zie voor een volledige lijst, de ondersteunde waarden voor de `algName` parameter."
  syntax:
    content: public static System.Security.Cryptography.KeyedHashAlgorithm Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "De sleutelhash-algoritme-implementatie te gebruiken. De volgende tabel bevat de geldige waarden voor de `algName` parameter en de algoritmen deze worden toegewezen aan.       <table><thead><tr><th> Waarde van parameter       </th><th> Implements       </th></tr></thead><tbody><tr><td> System.Security.Cryptography.HMAC       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> System.Security.Cryptography.KeyedHashAlgorithm       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> HMACMD5       </td><td><xref href=&quot;System.Security.Cryptography.HMACMD5&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACMD5       </td><td><xref href=&quot;System.Security.Cryptography.HMACMD5&quot;></xref></td></tr><tr><td> HMACRIPEMD160       </td><td><xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACRIPEMD160       </td><td><xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref></td></tr><tr><td> HMACSHA1       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA1       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> HMACSHA256       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA256       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref></td></tr><tr><td> HMACSHA384       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA384       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;></xref></td></tr><tr><td> HMACSHA512       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA512       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;></xref></td></tr><tr><td> MACTripleDES       </td><td><xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;></xref></td></tr><tr><td> System.Security.Cryptography.MACTripleDES       </td><td><xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;></xref></td></tr></tbody></table>"
    return:
      type: System.Security.Cryptography.KeyedHashAlgorithm
      description: "Een nieuw exemplaar van de opgegeven sleutelhash-algoritme."
  overload: System.Security.Cryptography.KeyedHashAlgorithm.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: KeyedHashAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Heft de niet-beheerde bronnen worden gebruikt door de <xref href=&quot;System.Security.Cryptography.KeyedHashAlgorithm&quot;> </xref> en eventueel de beheerde bronnen vrij."
  remarks: "Deze methode wordt aangeroepen door het publiek `Dispose()` methode en de `Finalize` methode. `Dispose()`Hiermee wordt de beveiligde `Dispose(Boolean)` methode met de `disposing` parameter ingesteld op `true`. `Finalize`roept `Dispose` met `disposing` ingesteld op `false`.       Wanneer de `disposing` parameter `true`, deze methode worden alle resources die beheerde objecten waarover vrijgegeven dat dit <xref:System.Security.Cryptography.KeyedHashAlgorithm>verwijzingen.</xref:System.Security.Cryptography.KeyedHashAlgorithm> Deze methode roept de `Dispose()` methode van elk object waarnaar wordt verwezen."
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>voor het vrijgeven van zowel beheerde als onbeheerde hulpbronnen; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> om alleen niet-beheerde bronnen vrij te geven."
  overload: System.Security.Cryptography.KeyedHashAlgorithm.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Key
  id: Key
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: Key
  nameWithType: KeyedHashAlgorithm.Key
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Opgehaald of ingesteld van de sleutel moet worden gebruikt in de hash-algoritme."
  remarks: "Deze eigenschap is de openbare accessor voor de <xref:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue>veld.</xref:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue>"
  example:
  - "The following code example demonstrates how to override the Key property to retrieve the key used in the current <xref:System.Security.Cryptography.KeyedHashAlgorithm> object. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.KeyedHashAlgorithm> class.  \n  \n [!code-cs[System.Security.Cryptography.KeyedHashAlgorithm#22](~/add/codesnippet/csharp/p-system.security.crypto_121_1.cs)]\n [!code-vb[System.Security.Cryptography.KeyedHashAlgorithm#22](~/add/codesnippet/visualbasic/p-system.security.crypto_121_1.vb)]\n [!code-cpp[System.Security.Cryptography.KeyedHashAlgorithm#22](~/add/codesnippet/cpp/p-system.security.crypto_121_1.cpp)]"
  syntax:
    content: public virtual byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "De sleutel moet worden gebruikt in de hash-algoritme."
  overload: System.Security.Cryptography.KeyedHashAlgorithm.Key*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "Een poging gedaan om te wijzigen van de sleuteleigenschap nadat hashing is gestart."
  platform:
  - net462
- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  id: KeyValue
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  langs:
  - csharp
  name: KeyValue
  nameWithType: KeyedHashAlgorithm.KeyValue
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "De sleutel moet worden gebruikt in de hash-algoritme."
  remarks: "Dit veld kan worden geopend via de <xref:System.Security.Cryptography.KeyedHashAlgorithm.Key%2A>eigenschap.</xref:System.Security.Cryptography.KeyedHashAlgorithm.Key%2A>"
  syntax:
    content: protected byte[] KeyValue;
    return:
      type: System.Byte[]
      description: "Moet worden toegevoegd."
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: System.Security.Cryptography.HashAlgorithm
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.KeyedHashAlgorithm.#ctor
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: KeyedHashAlgorithm()
  nameWithType: KeyedHashAlgorithm.KeyedHashAlgorithm()
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.KeyedHashAlgorithm()
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Create()
  nameWithType: KeyedHashAlgorithm.Create()
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Create()
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm
  fullName: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Create(String)
  nameWithType: KeyedHashAlgorithm.Create(String)
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: KeyedHashAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Key
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Key
  nameWithType: KeyedHashAlgorithm.Key
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.Key
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: KeyValue
  nameWithType: KeyedHashAlgorithm.KeyValue
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
- uid: System.Security.Cryptography.KeyedHashAlgorithm.#ctor*
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm.KeyedHashAlgorithm
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Create*
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Create
  nameWithType: KeyedHashAlgorithm.Create
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Dispose*
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Dispose
  nameWithType: KeyedHashAlgorithm.Dispose
- uid: System.Security.Cryptography.KeyedHashAlgorithm.Key*
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: Key
  nameWithType: KeyedHashAlgorithm.Key
