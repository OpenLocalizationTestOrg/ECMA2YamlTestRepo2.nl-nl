### YamlMime:ManagedReference
items:
- uid: System.Runtime.CompilerServices.RuntimeWrappedException
  id: RuntimeWrappedException
  children:
  - System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException
  langs:
  - csharp
  name: RuntimeWrappedException
  nameWithType: RuntimeWrappedException
  fullName: System.Runtime.CompilerServices.RuntimeWrappedException
  type: Class
  summary: "Verpakt een uitzondering die wordt niet afgeleid van de <xref:System.Exception>klasse.</xref:System.Exception> Deze klasse kan niet worden overgenomen."
  remarks: "Sommige talen, zoals C++, kunnen u een beheerde type uitzonderingen genereert.  Andere talen, zoals Microsoft C# en Visual Basic, vereisen dat elke thrown uitzondering worden afgeleid van de <xref:System.Exception>klasse.</xref:System.Exception>  Compatibiliteit tussen talen, loopt de common language runtime (CLR) objecten die niet zijn afgeleid van <xref:System.Exception>in een object RuntimeWrappedException.</xref:System.Exception>       U kunt de <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>klasse om op te geven of uitzonderingen moeten worden weergegeven in een catch-blokken en uitzondering filters verpakte voor een assembly.</xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>  Veel Taalcompilers, met inbegrip van de compilers Microsoft C# en Visual Basic toepassing dit kenmerk standaard het gedrag wrapping opgeven.       Opmerking dat de runtime uitzonderingen nog steeds verpakt zelfs als u de <xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>klasse om op te geven dat u niet dat ze worden ingepakt wilt.</xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>  In dit geval zijn uitzonderingen niet-ingepakte alleen binnen een catch-blokken of uitzondering filters."
  example:
  - "The following code example demonstrates how to throw a <xref:System.String> object as an exception in C++ and catch it using a RuntimeWrappedException object.  \n  \n [!code-cpp[System.Runtime.CompilerServices.RuntimeWrappedException#1](~/add/codesnippet/cpp/t-system.runtime.compile_12_1.cpp)]"
  syntax:
    content: 'public sealed class RuntimeWrappedException : Exception'
  inheritance:
  - System.Exception
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.CompilerServices
  summary: "Stelt de <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> object met informatie over de uitzondering."
  remarks: "De methode GetObjectData, komen sets een <xref:System.Runtime.Serialization.SerializationInfo>object met alle uitzondering objectgegevens gericht voor serialisatie.</xref:System.Runtime.Serialization.SerializationInfo> Tijdens de deserialisatie-de uitzondering is aangemaakt de `SerializationInfo` verzonden via de stroom."
  syntax:
    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "De <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref> -object met de geserialiseerde objectgegevens over de uitzondering."
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "De <xref:System.Runtime.Serialization.StreamingContext>object dat contextuele informatie over de bron- of doelserver bevat.</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>info</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException
  id: WrappedException
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  langs:
  - csharp
  name: WrappedException
  nameWithType: RuntimeWrappedException.WrappedException
  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.CompilerServices
  summary: "Hiermee wordt het object dat is ingepakt door de <xref href=&quot;System.Runtime.CompilerServices.RuntimeWrappedException&quot;> </xref> object."
  remarks: "De eigenschap WrappedException haalt een object dat is geretourneerd als een uitzondering van een taal die u kunt uitzonderingen die niet afkomstig zijn van de <xref:System.Exception>klasse.</xref:System.Exception>"
  syntax:
    content: public object WrappedException { get; }
    return:
      type: System.Object
      description: "Het object dat is ingepakt door de <xref href=&quot;System.Runtime.CompilerServices.RuntimeWrappedException&quot;> </xref> object."
  overload: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Exception
  isExternal: false
  name: System.Exception
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  isExternal: false
  name: WrappedException
  nameWithType: RuntimeWrappedException.WrappedException
  fullName: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData*
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  isExternal: false
  name: GetObjectData
  nameWithType: RuntimeWrappedException.GetObjectData
- uid: System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException*
  parent: System.Runtime.CompilerServices.RuntimeWrappedException
  isExternal: false
  name: WrappedException
  nameWithType: RuntimeWrappedException.WrappedException
