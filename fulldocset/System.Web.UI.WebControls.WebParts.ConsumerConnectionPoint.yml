### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  type: Class
  summary: "Een verbindingsobject punt waarmee een besturingselement van de server die fungeert als een consument om een verbinding met een provider definieert."
  remarks: "In elke webonderdelen verbinding tussen twee serverbesturingselementen, elk besturingselement moet hebben (onder andere vereisten) een bijbehorende verbinding point-object dat deze kan verbinding maken met het andere besturingselement en geef of gegevens, afhankelijk van of het besturingselement is aangewezen als de provider of de consument voor de verbinding gebruiken. Een <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>object in het algemeen bevat de details voor hoe een besturingselement verbinding kan maken met een ander besturingselement en het type gegevens kunnen worden gedeeld.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> Het verbindingspunt moet een ConsumerConnectionPoint-object zijn voor een besturingselement fungeert als een consument in een verbinding. Lees de onderwerpen in de sectie Zie ook hieronder voor meer informatie over webonderdelen verbindingen en verbindingspunten.       Voor het maken van een object ConsumerConnectionPoint verschillende stappen zijn vereist: 1.  Schakel een besturingselement voor consumenten om te verwijzen naar een exemplaar van de interface. Een <xref:System.Web.UI.WebControls.WebParts.WebPart>of een ander serverbesturingselement (alle soorten serverbesturingselement dat wordt toegevoegd aan een <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>zone kan worden gebruikt) moeten kunnen gebruiken voor gegevens van een specifieke interface-exemplaar.</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> Het besturingselement moet de interface; niet ge誰mplementeerd alleen de provider moet deze worden ge誰mplementeerd. De consument ofwel kunt werken met het exacte interfacetype dat is geleverd door een provider of, als die niet bestaat, een <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>object kan worden gebruikt voor het transformeren van gegevens van een provider interfacetype naar een type begrepen door de consument.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Een gangbare manier voor het inschakelen van een consumer moet een persoonlijke veld bevat een verwijzing naar het gewenste interfacetype declareren.      2.  Identificeer een callback-methode. Een methode in de consument moet worden ge誰dentificeerd als de retouraanroepmethode geen verbinding met de provider. Deze methode haalt een exemplaar van de interface dat de provider wordt ge誰mplementeerd, en wijst deze naar het veld (bijvoorbeeld) persoonlijke in de eerste stap gemaakt. De webonderdelen benadering voor het identificeren van een callback-methode in de gebruiker is het toevoegen van een `ConnectionConsumer` metagegevenskenmerk (gedefinieerd door de <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>klasse) aan de methode die het exemplaar van de interface ontvangt.</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> Wanneer het kenmerk wordt toegevoegd, is de enige vereiste parameter een weergavenaam op die moet worden gebruikt voor het consumerverbindingspunt. Optionele parameters kunnen ook worden toegevoegd, zoals ID.      3.  Proces- en uitvoer van de gegevens van het exemplaar van de interface. De interne verwerking zo nodig op de gegevens uit en vervolgens doorgaans een besturingselement voor consumenten krijgt u de gegevens naar de pagina. Een veelgebruikte manier om dit te doen is voor het onderdrukken van het besturingselement <xref:System.Web.UI.Control.OnPreRender%2A>methode.</xref:System.Web.UI.Control.OnPreRender%2A>          > [!NOTE] > Tijdens een synchrone aanvraag een consumer moet vragen gegevens rechtstreeks vanuit de provider tijdens of meteen na de <xref:System.Web.UI.Control.PreRender>gebeurtenis.</xref:System.Web.UI.Control.PreRender> Tijdens een asynchrone aanvraag als retouraanroepmethode van de provider niet wordt aangeroepen op elk gewenst moment tijdens de rendering, de ontwikkelaar kan wordt ervan uitgegaan dat gegevens niet naar de verbruiker is verzonden.       Nadat een besturingselement heeft om te fungeren als een consument is uitgerust, deel het besturingselement uitmaken van verbindingen (ervan uitgaande dat een besturingselement provider ook is uitgerust en beschikbaar). Een statische, declaratieve om verbinding te maken in de opmaak van een webpagina, ontwikkelaars kunnen gebruikmaken van de `<asp:webpartconnection>` element. Als de `ConnectionConsumer` kenmerk in de broncode van consumenten die de retouraanroepmethode identificeert geeft een ID voor het verbindingspunt, wordt die waarde moet worden toegewezen aan de `ConsumerConnectionPointID` kenmerk in de `<asp:webpartconnection>` element op een pagina. Een reden dat een ontwikkelaar kan een ID opgeven voor een consumerverbindingspunt is of er meerdere verbindingspunten is gedefinieerd in het besturingselement voor consumenten zijn. Als een ID niet voor het consumerverbindingspunt in het besturingselement consumer opgegeven is, een waarde heeft geen moet worden toegewezen aan de `ConsumerConnectionPointID` kenmerk in op de pagina, omdat de verbinding wordt gemaakt met een standaardwaarde opgehaald uit de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>veld.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       Een verbinding wilt maken in de code, moeten ontwikkelaars een nieuw ConsumerConnectionPoint-object maken door het aanroepen van de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>methode en de ID van het besturingselement consumer, samen met de ID of index van de gedefinieerde ConsumerConnectionPoint-object in het besturingselement consumer wordt doorgegeven aan deze.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> Het geretourneerde object ConsumerConnectionPoint, samen met een verwijzing naar de verbruiker besturingselement, een verwijzing naar het provider-besturingselement en de bijbehorende <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>object, worden alle doorgegeven aan de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>methode voor het maken van een nieuwe <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>object.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       Hoewel ontwikkelaars consumer verbindingspunten als onderdeel gebruiken kunnen van het tot stand brengen van verbindingen declaratief of programmatisch, kunnen ook gebruikers communiceren met consumer verbindingspunten tot stand brengen van verbindingen via de gebruikersinterface (UI). Als ontwikkelaars declareert een <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>besturingselement op een webpagina die het biedt een runtime-gebruikersinterface voor gebruikers om verbindingen te maken.</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> Als gebruikers ervoor het provider-besturingselement als startpunt kiest voor het maken van de verbinding door te klikken op de connect werkwoord (ze kunnen er ook voor kiezen de verbruiker; er is geen verschil in de resulterende verbinding) in de gebruikersinterface zien ze een besturingselement voor vervolgkeuzelijst met de namen weergeven van de beschikbare consumer verbinding punt (of punten als er meerdere) dat de provider de gegevens kan verzenden. Gebruikers moeten een consumerverbindingspunt een verbinding tot stand te selecteren.       Een object ConsumerConnectionPoint rechtstreeks gekoppeld aan een besturingselement voor specifieke consumenten en worden details over een verbinding opgeslagen in de eigenschappen die van de basis van <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>de klasse</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> worden overgenomen Bijvoorbeeld, in de overgenomen <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>-eigenschap een consumerverbindingspunt houdt het type interface die wordt gebruikt.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> Als de provider en de consument in een verbinding met zowel het interfacetype begrijpt, wordt de besturingselementen zijn compatibel en een rechtstreekse verbinding in staat. Als de provider en de consumer niet met hetzelfde interfacetype werkt, ze niet compatibel zijn en moet gebruiken een <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>object omzetten van het providerverbindingspunt <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>eigenschap in een type dat de gebruiker met werkt.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> Een andere belangrijke overgenomen eigenschap is de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>eigenschap, waardoor een beschrijvende naam moet worden weergegeven in de gebruikersinterface voor gebruikers kunnen kiezen een consumer verbinding verwijzen bij het maken van verbindingen.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> De weergavenaam is de vereiste parameter wanneer ontwikkelaars een `ConnectionConsumer` kenmerk voor de callback-methode in een besturingselement voor consumenten. De overgenomen <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>eigenschap is ook handig zijn, zoals hierboven wordt vermeld, omdat deze een unieke id voor een consumerverbindingspunt biedt in het geval dat een consumer meerdere verbindingspunten heeft.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> Een consumer kan meerdere ConsumerConnectionPoint-objecten in deze en in dit geval wordt gedefinieerd wanneer ontwikkelaars toevoegt hebben de `ConnectionConsumer` kenmerk aan een methode ze een id-waarde om te onderscheiden van elk verbindingspunt moeten opgeven. Een andere opmerkelijke overgenomen, is de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>eigenschap waarmee wordt aangegeven of een consumerverbindingspunt gelijktijdig naar meerdere providers van verbinding kan maken.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> De waarde van deze eigenschap `false` voor consumenten verbindingspunten standaard (dat wordt standaard `true` voor provider verbindingspunten).       De ConsumerConnectionPoint-klasse uniek op verschillende manieren worden toegevoegd aan de leden worden overgenomen van de <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>klasse.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> De <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>methode roept de retouraanroepmethode consumer eigen gedefinieerd voor het ophalen van het exemplaar van de interface van de provider.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> De <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>methode retourneert een Booleaanse waarde die aangeeft of het verbindingspunt tot stand brengen van verbindingen is, op basis van de huidige status van het besturingselement voor gekoppelde consumenten.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ConsumerConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Consumer** link. The UI now displays a drop-down control that lists the consumer connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.  \n  \n The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ConsumerConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref> klasse."
  remarks: "De ConsumerConnectionPoint-constructor voor de <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>klasse roept de base constructor doorgeven aan de verschillende parameters en het initialiseren van de basis-klasse.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       De constructor basisklasse controleert een aantal van de parameters voor een verbindingspunt en kan meerdere uitzonderingen genereert. Zie de sectie uitzonderingen voor een lijst van mogelijke uitzonderingen.       U kunt aanroepen de ConsumerConnectionPoint-constructor voor het maken van uw eigen exemplaar van de <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>klasse.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Echter, in gevallen waarin u gewoon een verbinding tot stand brengen en de klasse niet uitbreidt, moet u aanroepen de <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>methode om te retourneren van een punt verbindingsobject van een provider.</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`. Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter. This demonstrates how to create a custom consumer connection point and then associate it with a consumer control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "De methode die in het besturingselement voor consumenten die een exemplaar van de interface retourneert aan de consument een verbinding tot stand brengen."
    - id: interfaceType
      type: System.Type
      description: "De <xref:System.Type>van de interface die de consument van een provider ontvangt.</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "De <xref:System.Type>van het besturingselement voor consumenten die aan het consumerverbindingspunt gekoppeld is.</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "Een beschrijvende weergavenaam voor het consumerverbindingspunt die wordt weergegeven in de gebruikersinterface (UI) van de verbinding."
    - id: id
      type: System.String
      description: "Een unieke id voor het consumerverbindingspunt."
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "Een Boolean die aangeeft of het consumerverbindingspunt meerdere gelijktijdige verbindingen met providers kan hebben."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>is niet hetzelfde type als het besturingselement voor consumenten (of een geldige klasse is afgeleid)."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  id: SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Roept de callback-methode in een besturingselement voor consumenten en het exemplaar van de interface opgehaald uit een besturingselement van de provider."
  remarks: "Deze methode ontvangt een exemplaar van de interface van een provider die gegevens voor het besturingselement voor consumenten bevat.       De methode SetObject is aangeroepen door <xref:System.Web.UI.WebControls.WebParts.WebPartConnection>objecten wanneer een verbinding wordt geactiveerd.</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> Dit is een essenti谷le stap die deel uitmaakt van een verbinding tot stand brengen en het inschakelen van twee besturingselementen voor het delen van gegevens.       De consumer-besturingselement in een verbinding moet kunnen werken met hetzelfde type interface als de provider. Als dit niet het geval is, de besturingselementen niet compatibel zijn en een <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>object moet worden gebruikt om een verbinding te maken.</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual void SetObject (System.Web.UI.Control control, object data);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Het besturingselement voor consumenten die zijn gekoppeld aan een consumerverbindingspunt."
    - id: data
      type: System.Object
      description: "De interface-exemplaar geretourneerd vanuit een besturingselement van de provider."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  id: SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "Hiermee wordt bepaald of een consumerverbindingspunt staat momenteel een verbinding is."
  remarks: "De methode SupportsConnection zoals ge誰mplementeerd altijd retourneert `true` in alle gevallen voor de <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>klasse.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> De bedoeling voor deze methode is om het controleren van de status van `control` en `secondaryInterfaces` op bepaalde kritieke punten om te bepalen of een <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>object kan momenteel geen verbinding maken.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       Kan er scenario&quot;s waarbij `control` bevindt zich in een status die zou het onmogelijk om een verbinding of waar `secondaryInterfaces` moet bestaan voordat een verbinding kan worden gevormd. In dergelijke gevallen ontwikkelaars kunnen overnemen van de <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>klasse en vervang de methode SupportsConnection, bieden een aangepaste implementatie om te bepalen wanneer het verbindingspunt is klaar voor de ondersteuning van verbindingen.</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>"
  syntax:
    content: public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "Het besturingselement voor consumenten die zijn gekoppeld aan de <xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref>."
    - id: secondaryInterfaces
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "Een <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref> van elke secundaire interfaces die deel uitmaken van een verbinding."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als een verbindingspunt kan momenteel geen verbinding worden; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject
  nameWithType: ConsumerConnectionPoint.SetObject
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection
  nameWithType: ConsumerConnectionPoint.SupportsConnection
