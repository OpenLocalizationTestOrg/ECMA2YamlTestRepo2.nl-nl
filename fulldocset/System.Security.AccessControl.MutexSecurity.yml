### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.MutexSecurity
  id: MutexSecurity
  children:
  - System.Security.AccessControl.MutexSecurity.#ctor
  - System.Security.AccessControl.MutexSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.MutexSecurity.AccessRightType
  - System.Security.AccessControl.MutexSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.MutexSecurity.AccessRuleType
  - System.Security.AccessControl.MutexSecurity.AddAccessRule(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.AddAuditRule(System.Security.AccessControl.MutexAuditRule)
  - System.Security.AccessControl.MutexSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.MutexSecurity.AuditRuleType
  - System.Security.AccessControl.MutexSecurity.RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)
  - System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)
  - System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)
  - System.Security.AccessControl.MutexSecurity.ResetAccessRule(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.SetAccessRule(System.Security.AccessControl.MutexAccessRule)
  - System.Security.AccessControl.MutexSecurity.SetAuditRule(System.Security.AccessControl.MutexAuditRule)
  langs:
  - csharp
  name: MutexSecurity
  nameWithType: MutexSecurity
  fullName: System.Security.AccessControl.MutexSecurity
  type: Class
  summary: "Hiermee geeft u de Windows-toegangsbeveiliging voor een benoemde mutex. Deze klasse kan niet worden overgenomen."
  remarks: "Een object MutexSecurity toegangsrechten voor een systeem benoemde mutex en bepaalt ook hoe toegangspogingen worden gecontroleerd. Toegangsrechten voor de mutex worden uitgedrukt als regels met elke toegangsregel dat wordt vertegenwoordigd door een <xref:System.Security.AccessControl.MutexAccessRule>object.</xref:System.Security.AccessControl.MutexAccessRule> Elke regel controle wordt vertegenwoordigd door een <xref:System.Security.AccessControl.MutexAuditRule>object.</xref:System.Security.AccessControl.MutexAuditRule>       Dit komt overeen met het onderliggende Windows beveiligingssysteem, waarin elk beveiligbaar object hooguit één discretionaire ACL&quot;s (DACL&quot;s heeft) waarmee de toegang tot het beveiligde object, en mag maximaal één system access control list (SACL) die aangeeft welke toegangspogingen worden gecontroleerd. De DACL en SACL zijn gerangschikt lijsten met vermeldingen voor toegangsbeheer (ACE) die toegang tot en controle-instellingen voor gebruikers en groepen opgeven. Een <xref:System.Security.AccessControl.MutexAccessRule>of <xref:System.Security.AccessControl.MutexAuditRule>object mogelijk meer dan één ACE vertegenwoordigen.</xref:System.Security.AccessControl.MutexAuditRule> </xref:System.Security.AccessControl.MutexAccessRule>      > [!NOTE] > A <xref:System.Threading.Mutex>object kan geen lokale mutex of een systeem benoemde mutex vertegenwoordigen.</xref:System.Threading.Mutex> Windows-toegangsbeveiliging is betekenis alleen voor benoemde system mutexen.       De MutexSecurity <xref:System.Security.AccessControl.MutexAccessRule>, en <xref:System.Security.AccessControl.MutexAuditRule>klassen verbergen details over de implementatie van ACL&quot;s en ACE&quot;s.</xref:System.Security.AccessControl.MutexAuditRule> </xref:System.Security.AccessControl.MutexAccessRule> Hiermee kunt u de zestien verschillende ACE-typen en de complexiteit van het onderhouden van correct overname en doorgifte van toegangsrechten genegeerd. Deze objecten ook zijn ontworpen om te voorkomen dat de volgende algemene besturingselement toegangsfouten:-een security descriptor maken met een null DACL. Een null-verwijzing naar een DACL kan elke gebruiker toegangsregels toevoegen aan een object, een denial of service-aanval mogelijk te maken. Een nieuw object op MutexSecurity begint altijd met een leeg DACL, die alle toegang voor alle gebruikers weigert.      -De canonieke volgorde van ACE&quot;s schenden. Als de ACE-lijst in de DACL is niet bewaard in de canonieke volgorde, gebruikers mogelijk per ongeluk toegang krijgen tot het beveiligde object. Geweigerde toegangsrechten moeten bijvoorbeeld altijd worden weergegeven vóór toegestane toegangsrechten. MutexSecurity objecten onderhouden intern van de juiste volgorde.      -Security descriptor vlaggen, opgenomen in het resource manager-beheer alleen worden moeten bewerken.      -Ongeldige combinaties van ACE vlaggen wordt gemaakt.      -Overgenomen ACE&quot;s bewerken. Overname en doorgifte worden verwerkt door de resource manager, in reactie op wijzigingen in regels voor toegangsbeleid en controlebeleid.      -Nutteloos ACE&quot;s in de ACL&quot;s invoegen.       De enige mogelijkheden die niet wordt ondersteund door de .NET-objecten voor beveiliging zijn schadelijke activiteiten die moeten worden vermeden door de meerderheid van ontwikkelaars van toepassingen, zoals het volgende:-laag niveau taken die normaal gesproken worden uitgevoerd door de resourcemanager.      -Toevoegen of verwijderen van de vermeldingen voor toegangsbeheer op een manier die niet van de canonieke volgorde onderhouden.       Voor het Windows-toegangsbeveiliging voor een benoemde mutex wijzigen, gebruikt u de <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName>methode voor het ophalen van het object MutexSecurity.</xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> Het object wijzigen door het toevoegen en verwijderen van regels en gebruik vervolgens de <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>methode koppelt u deze opnieuw</xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>      > [!IMPORTANT] > Wijzigingen die u aan een object MutexSecurity aanbrengt hebben geen invloed op de toegangsniveaus van de benoemde mutex totdat u de <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>methode het gewijzigde object toewijzen aan de benoemde mutex.</xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>       Om te kopiëren toegangsbeveiliging van een mutex naar een andere, gebruikt de <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName>methode voor het ophalen van een MutexSecurity-object dat de regels van het toegangsbeleid en controlebeleid voor de eerste mutex vertegenwoordigt en gebruik vervolgens de <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>methode of een constructor die een object MutexSecurity deze regels om aan te wijzen de tweede mutex accepteert.</xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName> </xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName>       Gebruikers met een investering in de security descriptor definition language (SDDL) kunnen gebruiken de <xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>methode toegangsregels voor een benoemde mutex instellen en de <xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>methode voor het verkrijgen van een tekenreeks met de toegangsregels in SDDL-indeling.</xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A> </xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A> Dit wordt niet aanbevolen voor het ontwikkelen van nieuwe.      > [!NOTE] > Beveiliging op synchronisatieobjecten wordt niet ondersteund voor Windows 98 of Windows ME."
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates a MutexSecurity object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_12_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_12_1.cs)]"
  syntax:
    content: 'public sealed class MutexSecurity : System.Security.AccessControl.NativeObjectSecurity'
  inheritance:
  - System.Object
  - System.Security.AccessControl.ObjectSecurity
  - System.Security.AccessControl.CommonObjectSecurity
  - System.Security.AccessControl.NativeObjectSecurity
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.GroupModified
  - System.Security.AccessControl.ObjectSecurity.IsContainer
  - System.Security.AccessControl.ObjectSecurity.IsDS
  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.OwnerModified
  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.ReadLock
  - System.Security.AccessControl.ObjectSecurity.ReadUnlock
  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.WriteLock
  - System.Security.AccessControl.ObjectSecurity.WriteUnlock
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: MutexSecurity()
  nameWithType: MutexSecurity.MutexSecurity()
  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.AccessControl.MutexSecurity&quot;> </xref> klasse met standaardwaarden."
  remarks: "Een nieuwe <xref:System.Security.AccessControl.MutexSecurity>object begint altijd met een leeg DACL (Discretionary access list), die alle toegang voor alle gebruikers weigert.</xref:System.Security.AccessControl.MutexSecurity>"
  syntax:
    content: public MutexSecurity ();
    parameters: []
  overload: System.Security.AccessControl.MutexSecurity.#ctor*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Deze klasse wordt niet ondersteund op Windows 98 of Windows ME."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  id: '#ctor(System.String,System.Security.AccessControl.AccessControlSections)'
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: MutexSecurity(String,AccessControlSections)
  nameWithType: MutexSecurity.MutexSecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity(String,AccessControlSections)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.AccessControl.MutexSecurity&quot;> </xref> klasse met de opgegeven secties van de beveiliging van de toegangscontroleregels van de mutex systeem met de opgegeven naam."
  remarks: "Deze constructor kunt u de toegangsbeveiliging voor een systeem benoemde mutex verkrijgen zonder eerst te maken een <xref:System.Threading.Mutex>object.</xref:System.Threading.Mutex>       Waarschuwing moet worden uitgeoefend bij het werken met benoemde systeemobjecten. Als er een systeemobject met de naam is `name` dat is niet een mutex, de beveiliging van de access control kan worden opgehaald."
  syntax:
    content: public MutexSecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: name
      type: System.String
      description: "De naam van het systeem mutex waarvan toegangscontroleregels voor beveiliging zijn om te worden opgehaald."
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "Een combinatie van <xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;> </xref> opgeven van de secties voor het ophalen van vlaggen."
  overload: System.Security.AccessControl.MutexSecurity.#ctor*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Er is geen systeemobject met de opgegeven naam."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Deze klasse wordt niet ondersteund op Windows 98 of Windows ME."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AccessRightType
  id: AccessRightType
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AccessRightType
  nameWithType: MutexSecurity.AccessRightType
  fullName: System.Security.AccessControl.MutexSecurity.AccessRightType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "De opsomming opgehaald die de <xref href=&quot;System.Security.AccessControl.MutexSecurity&quot;> </xref> klasse wordt gebruikt om aan te duiden toegangsrechten."
  remarks: "Klassen die zijn afgeleid van de <xref:System.Security.AccessControl.ObjectSecurity>klasse overschrijven de <xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A>eigenschap in en keer terug op het type dat ze gebruiken om aan te duiden toegangsrechten.</xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Wanneer u met matrices of verzamelingen die meerdere typen beveiligingsobjecten bevatten werkt, moet u deze eigenschap gebruiken om te bepalen van het juiste opsommingstype voor gebruik met elke beveiligingsobject."
  syntax:
    content: public override Type AccessRightType { get; }
    return:
      type: System.Type
      description: "Een <xref:System.Type>object voor de <xref href=&quot;System.Security.AccessControl.MutexRights&quot;> </xref> opsomming.</xref:System.Type>"
  overload: System.Security.AccessControl.MutexSecurity.AccessRightType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Maakt een nieuwe toegangsregel voor de opgegeven gebruiker met de opgegeven toegangsrechten, toegangsbeheer en vlaggen."
  remarks: "De aanbevolen manier om toegangsregels voor beheer maken is met de constructors van de <xref:System.Security.AccessControl.MutexAccessRule>klasse.</xref:System.Security.AccessControl.MutexAccessRule>      > [!NOTE] > Hoewel overname en doorgifte vlaggen nutteloos voor benoemde mutexen zijn, is het nog steeds mogelijk te geven. Dit wordt niet aanbevolen, omdat het onnodig ingewikkelder het onderhoud van regels, bijvoorbeeld door de combinatie van regels die anders compatibel verstoren."
  syntax:
    content: public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "Een <xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref> waarin de gebruiker of groep de regel van toepassing op."
    - id: accessMask
      type: System.Int32
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.MutexRights&quot;> </xref> waarden opgeven van de rechten voor het toestaan of weigeren, is geconverteerd naar een geheel getal."
    - id: isInherited
      type: System.Boolean
      description: "Rangschikking voor benoemde mutexen, omdat ze geen hiërarchie hebben."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Rangschikking voor benoemde mutexen, omdat ze geen hiërarchie hebben."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Rangschikking voor benoemde mutexen, omdat ze geen hiërarchie hebben."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Een van de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> waarden opgeven of de rechten zijn toegestaan of geweigerd."
    return:
      type: System.Security.AccessControl.AccessRule
      description: "Een <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref> -object dat de opgegeven rechten voor de opgegeven gebruiker vertegenwoordigt."
  overload: System.Security.AccessControl.MutexSecurity.AccessRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, of <code>type</code> bevat een ongeldige waarde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - of - <code>accessMask</code> gelijk is aan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>is geen van beide van het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, noch van een type zoals <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> die kunnen worden omgezet naar het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleType
  id: AccessRuleType
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AccessRuleType
  nameWithType: MutexSecurity.AccessRuleType
  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee wordt het type dat de <xref href=&quot;System.Security.AccessControl.MutexSecurity&quot;> </xref> gebruikt om aan te duiden toegangsregels klasse."
  remarks: "Klassen die zijn afgeleid van de <xref:System.Security.AccessControl.ObjectSecurity>klasse overschrijven de <xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A>eigenschap in en keer terug op het type dat ze gebruiken om aan te duiden toegangsregels.</xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Wanneer u met matrices of verzamelingen die meerdere typen beveiligingsobjecten bevatten werkt, moet u deze eigenschap gebruiken om te bepalen van de juiste toegang regeltype voor gebruik met elke beveiligingsobject."
  syntax:
    content: public override Type AccessRuleType { get; }
    return:
      type: System.Type
      description: "Een <xref:System.Type>object voor de <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref> klasse</xref:System.Type>"
  overload: System.Security.AccessControl.MutexSecurity.AccessRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AddAccessRule(System.Security.AccessControl.MutexAccessRule)
  id: AddAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AddAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.AddAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.AddAccessRule(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee zoekt u naar een overeenkomende toegangsregel waarmee de nieuwe regel kan worden samengevoegd. Als er geen wordt gevonden, voegt de nieuwe regel."
  remarks: "De methode AddAccessRule wordt gezocht naar regels met dezelfde gebruiker of groep en dezelfde <xref:System.Security.AccessControl.AccessControlType>Als `rule`.</xref:System.Security.AccessControl.AccessControlType> Als er geen wordt gevonden, `rule` wordt toegevoegd. Als een vergelijkingsregel wordt gevonden, wordt de rechten in `rule` worden samengevoegd met de bestaande regel."
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName><xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/a07c477f-17a9-4bd4-908e-_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.AddAccessRule#1](~/add/codesnippet/csharp/a07c477f-17a9-4bd4-908e-_1.cs)]"
  syntax:
    content: public void AddAccessRule (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "De toegangsregel om toe te voegen."
  overload: System.Security.AccessControl.MutexSecurity.AddAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Principal.IdentityNotMappedException
    commentId: T:System.Security.Principal.IdentityNotMappedException
    description: "<code>rule </code>kan niet worden toegewezen aan een bekende identiteit."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AddAuditRule(System.Security.AccessControl.MutexAuditRule)
  id: AddAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AddAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.AddAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.AddAuditRule(MutexAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee zoekt u naar een audit-regel waarmee de nieuwe regel kan worden samengevoegd. Als er geen wordt gevonden, voegt de nieuwe regel."
  remarks: "De methode AddAuditRule wordt gezocht naar regels met dezelfde gebruiker of groep als `rule`. Als er geen wordt gevonden, `rule` wordt toegevoegd. Als een vergelijkingsregel wordt gevonden, wordt de vlaggen in `rule` worden samengevoegd in de bestaande regel."
  syntax:
    content: public void AddAuditRule (System.Security.AccessControl.MutexAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAuditRule
      description: "De controleregel om toe te voegen. De gebruiker die is opgegeven door deze regel bepaalt de zoekopdracht."
  overload: System.Security.AccessControl.MutexSecurity.AddAuditRule*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Maakt een nieuwe controleregel, geven de gebruiker die de regel voor de toegangsrechten geldt voor het controleren en het resultaat waarmee de controleregel wordt geactiveerd."
  remarks: "De aanbevolen manier om audit regels te maken is met de constructors van de <xref:System.Security.AccessControl.MutexAuditRule>klasse.</xref:System.Security.AccessControl.MutexAuditRule>      > [!NOTE] > Hoewel overname en doorgifte vlaggen nutteloos voor benoemde mutexen zijn, is het nog steeds mogelijk te geven. Dit wordt niet aanbevolen, omdat het onnodig ingewikkelder het onderhoud van regels, bijvoorbeeld door de combinatie van regels die anders compatibel verstoren."
  syntax:
    content: public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "Een <xref href=&quot;System.Security.Principal.IdentityReference&quot;> </xref> waarin de gebruiker of groep de regel van toepassing op."
    - id: accessMask
      type: System.Int32
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.MutexRights&quot;> </xref> waarden opgeven van de toegangsrechten wilt controleren, geconverteerd naar een geheel getal."
    - id: isInherited
      type: System.Boolean
      description: "Voor benoemde wachten nutteloos verwerkt, omdat ze geen hiërarchie hebben."
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "Voor benoemde wachten nutteloos verwerkt, omdat ze geen hiërarchie hebben."
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "Voor benoemde wachten nutteloos verwerkt, omdat ze geen hiërarchie hebben."
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;> </xref> waarde die of opgeeft moet worden gecontroleerd, geslaagde of mislukte toegang."
    return:
      type: System.Security.AccessControl.AuditRule
      description: "Een <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;> </xref> -object dat de opgegeven controleregel voor de opgegeven gebruiker vertegenwoordigt. Het retourtype van de methode is de basisklasse <xref href=&quot;System.Security.AccessControl.AuditRule&quot;> </xref>, maar de retourwaarde veilig kan worden geconverteerd naar de afgeleide klasse."
  overload: System.Security.AccessControl.MutexSecurity.AuditRuleFactory*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>accessMask</code>, <code>inheritanceFlags</code>, <code>propagationFlags</code>, of <code>flags</code> bevat een ongeldige waarde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identityReference</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - of - <code>accessMask</code> gelijk is aan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identityReference</code>is geen van beide van het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>, noch van een type zoals <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> die kunnen worden omgezet naar het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleType
  id: AuditRuleType
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: AuditRuleType
  nameWithType: MutexSecurity.AuditRuleType
  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee wordt het type dat de <xref href=&quot;System.Security.AccessControl.MutexSecurity&quot;> </xref> klasse wordt gebruikt om aan te duiden audit-regels."
  remarks: "Klassen die zijn afgeleid van de <xref:System.Security.AccessControl.ObjectSecurity>klasse overschrijven de <xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A>eigenschap in en keer terug op het type dat ze gebruiken om aan te duiden audit rights.</xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A> </xref:System.Security.AccessControl.ObjectSecurity> Wanneer u met matrices of verzamelingen die meerdere typen beveiligingsobjecten bevatten werkt, moet u deze eigenschap gebruiken om te bepalen van het type van de regel juist audit voor gebruik met elke beveiligingsobject."
  syntax:
    content: public override Type AuditRuleType { get; }
    return:
      type: System.Type
      description: "Een <xref:System.Type>object voor de <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;> </xref> klasse</xref:System.Type>"
  overload: System.Security.AccessControl.MutexSecurity.AuditRuleType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)
  id: RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee zoekt u een regel voor het beheer van toegang met dezelfde gebruiker en <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (toestaan of weigeren) als de opgegeven regel en met compatibel overname en doorgifte van vlaggen; als deze regel wordt gevonden, de rechten die zijn opgenomen in de opgegeven toegangsregel ervan worden verwijderd."
  remarks: "De huidige <xref:System.Security.AccessControl.MutexSecurity>wordt gezocht naar een regel met dezelfde gebruiker en dezelfde <xref:System.Security.AccessControl.AccessControlType>waarde als `rule`.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.MutexSecurity> Als er geen dergelijke regels wordt gevonden, er geen actie ondernomen en de methode retourneert `false`. Als vergelijkingsregels zijn gevonden, hun compatibiliteit en overname vlaggen worden gecontroleerd voor compatibiliteit met markeringen die zijn opgegeven `rule`. Als er geen compatibel regel is gevonden, geen actie ondernomen is en de methode retourneert `false`. Als een regel met compatibel vlaggen wordt gevonden, de rechten opgegeven in `rule` worden verwijderd uit de compatibel regel en retourneert de methode `true`. Als `rule` bevat rechten niet is opgenomen in de regel compatibel, er geen actie ondernomen met betrekking tot deze rechten. Als alle rechten worden verwijderd uit de compatibel regel, de volledige regel wordt verwijderd uit de huidige <xref:System.Security.AccessControl.MutexSecurity>object.</xref:System.Security.AccessControl.MutexSecurity>      > [!IMPORTANT] > Hoewel kunt u overname en doorgifte vlaggen voor mutex toegangsregels, door te maken met de <xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A>methode, dit wordt niet aanbevolen.</xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A> Overname en doorgifte hebben geen betekenis voor benoemde mutexen en ze het onderhoud van de toegangsregels gecompliceerdere aanbrengen."
  example:
  - "The following code example demonstrates the use of the RemoveAccessRule method to remove rights from an <xref:System.Security.AccessControl.AccessControlType> rule in a <xref:System.Security.AccessControl.MutexSecurity> object. It also shows that other rights in `rule` are ignored.  \n  \n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object and adds rules that allow and deny various rights for the current user. The rights allowed include <xref:System.Security.AccessControl.MutexRights>, <xref:System.Security.AccessControl.MutexRights>, and <xref:System.Security.AccessControl.MutexRights>. The example then creates a new rule for the current user, including <xref:System.Security.AccessControl.MutexRights> and <xref:System.Security.AccessControl.MutexRights> rights, and uses that rule with the RemoveAccessRule method to remove <xref:System.Security.AccessControl.MutexRights> from the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.MutexSecurity> object. The extraneous <xref:System.Security.AccessControl.MutexRights> right in `rule` is ignored.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRule#1](~/add/codesnippet/visualbasic/02c8df82-84a8-4212-a3e0-_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.RemoveAccessRule#1](~/add/codesnippet/csharp/02c8df82-84a8-4212-a3e0-_1.cs)]"
  syntax:
    content: public bool RemoveAccessRule (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "Een <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref> die aangeeft dat de gebruiker en <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> zoeken en een set overname en doorgifte vlaggen die de bijbehorende regel als kan worden gevonden, moet compatibel zijn met. Hiermee geeft u de rechten voor het verwijderen van de compatibel regel als gevonden."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als een compatibel regel wordt gevonden; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.MutexSecurity.RemoveAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)
  id: RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAccessRuleAll(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee zoekt u alle regels met dezelfde gebruiker toegang tot en <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (toestaan of weigeren) als de opgegeven regel en, indien gevonden, verwijdert deze."
  remarks: "De huidige <xref:System.Security.AccessControl.MutexSecurity>object wordt gezocht naar regels met dezelfde gebruiker en dezelfde <xref:System.Security.AccessControl.AccessControlType>waarde als `rule`.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.MutexSecurity> Alle rechten die is opgegeven door `rule` worden genegeerd tijdens het uitvoeren van deze zoekopdracht. Als er geen overeenkomende regels gevonden zijn, wordt geen actie ondernomen."
  example:
  - "The following code example shows that the RemoveAccessRuleAll method removes all rules that match user and <xref:System.Security.AccessControl.AccessControlType>, ignoring rights.  \n  \n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> rule. The example then creates a new rule that allows the current user to take ownership, and uses that rule to remove the <xref:System.Security.AccessControl.AccessControlType> rule from the <xref:System.Security.AccessControl.MutexSecurity> object.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/csharp/6d97fdf7-4cee-497f-898e-_1.cs)]\n [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll#1](~/add/codesnippet/visualbasic/6d97fdf7-4cee-497f-898e-_1.vb)]"
  syntax:
    content: public void RemoveAccessRuleAll (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "Een <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref> die aangeeft dat de gebruiker en <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> om naar te zoeken. Alle rechten die door deze regel opgegeven, worden genegeerd."
  overload: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)
  id: RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAccessRuleSpecific(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Zoekt naar een toegangsregel die exact overeenkomt met de opgegeven regel en, indien gevonden, verwijdert het."
  remarks: "De regel wordt verwijderd, alleen als het exact overeenkomt met `rule` in alle gegevens, inclusief vlaggen. Andere regels met dezelfde gebruiker en <xref:System.Security.AccessControl.AccessControlType>worden niet beïnvloed.</xref:System.Security.AccessControl.AccessControlType>      > [!IMPORTANT] > Een regel vertegenwoordigt een of meer onderliggende vermeldingen voor toegangsbeheer (ACE) en deze vermeldingen worden gesplitst of gecombineerd zo nodig wanneer u de beveiliging toegangsregels voor een gebruiker wijzigt. Dus een regel bestaat mogelijk niet meer in het formulier was toen deze werd toegevoegd, en in dat geval de methode RemoveAccessRuleSpecific niet kunt verwijderen."
  example:
  - "The following code example shows that the RemoveAccessRuleSpecific method requires an exact match in order to remove a rule, and that rules to allow and deny rights are independent of each other.  \n  \n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object, adds rules that allow and deny various rights for the current user, and then merges additional rights into the <xref:System.Security.AccessControl.AccessControlType> access rule. The example then passes the original <xref:System.Security.AccessControl.AccessControlType> rule to the RemoveAccessRuleSpecific method, and displays the results, showing that nothing is deleted. The example then constructs a rule that matches the <xref:System.Security.AccessControl.AccessControlType> rule in the <xref:System.Security.AccessControl.MutexSecurity> object, and successfully uses the RemoveAccessRuleSpecific method to remove the rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/visualbasic/fa20d5ab-0fa1-47be-9c16-_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific#1](~/add/codesnippet/csharp/fa20d5ab-0fa1-47be-9c16-_1.cs)]"
  syntax:
    content: public void RemoveAccessRuleSpecific (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "De <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;> </xref> te verwijderen."
  overload: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)
  id: RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(MutexAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Zoekt naar een audit regel met dezelfde gebruiker die de opgegeven regel en met compatibel overname en doorgifte van vlaggen; Als een compatibel regel wordt gevonden, worden de rechten die zijn opgenomen in de opgegeven regel verwijderd uit het."
  remarks: "De huidige <xref:System.Security.AccessControl.MutexSecurity>wordt gezocht naar een controleregel met dezelfde gebruiker `rule`.</xref:System.Security.AccessControl.MutexSecurity> Als er geen dergelijke regels wordt gevonden, er geen actie ondernomen en de methode retourneert `false`. Als vergelijkingsregels zijn gevonden, hun compatibiliteit en overname vlaggen worden gecontroleerd voor compatibiliteit met markeringen die zijn opgegeven `rule`. Als er geen compatibel regel is gevonden, geen actie ondernomen is en de methode retourneert `false`. Als een regel met compatibel vlaggen wordt gevonden, de rechten opgegeven in `rule` worden verwijderd uit de compatibel regel en retourneert de methode `true`. Als `rule` bevat rechten niet is opgenomen in de regel compatibel, er geen actie ondernomen met betrekking tot deze rechten. Als alle rechten worden verwijderd uit de compatibel regel, de volledige regel wordt verwijderd uit de huidige <xref:System.Security.AccessControl.MutexSecurity>object.</xref:System.Security.AccessControl.MutexSecurity>      > [!IMPORTANT] > Hoewel kunt u overname en doorgifte vlaggen voor mutex audit regels, door te maken met de <xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A>methode, dit wordt niet aanbevolen.</xref:System.Security.AccessControl.MutexSecurity.AccessRuleFactory%2A> Overname en doorgifte hebben geen betekenis voor benoemde mutexen en ze het onderhoud van audit regels gecompliceerdere aanbrengen."
  syntax:
    content: public bool RemoveAuditRule (System.Security.AccessControl.MutexAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAuditRule
      description: "Een <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;> </xref> die de gebruiker om te zoeken naar en een set overname en doorgifte vlaggen die de regel een overeenkomende, geeft als kan worden gevonden, moet compatibel zijn met. Hiermee geeft u de rechten voor het verwijderen van de compatibel regel als gevonden."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als een compatibel regel wordt gevonden; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Security.AccessControl.MutexSecurity.RemoveAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)
  id: RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAuditRuleAll(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Zoekt u alle regels met dezelfde gebruiker die de opgegeven regel controleren en, indien gevonden, worden deze verwijderd."
  remarks: "De huidige <xref:System.Security.AccessControl.MutexSecurity>wordt gezocht naar audit regels met dezelfde gebruiker `rule`.</xref:System.Security.AccessControl.MutexSecurity> Alle rechten die is opgegeven door `rule` worden genegeerd tijdens het uitvoeren van deze zoekopdracht. Alle overeenkomende regels worden verwijderd. Als er geen overeenkomende regels gevonden zijn, wordt geen actie ondernomen."
  syntax:
    content: public void RemoveAuditRuleAll (System.Security.AccessControl.MutexAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAuditRule
      description: "Een <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;> </xref> die aangeeft dat de gebruiker om te zoeken. Alle rechten die door deze regel opgegeven, worden genegeerd."
  overload: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)
  id: RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: RemoveAuditRuleSpecific(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Zoekt naar een controleregel die exact overeenkomt met de opgegeven regel en, indien gevonden, verwijdert het."
  remarks: "De regel wordt verwijderd, alleen als het exact overeenkomt met `rule` in alle gegevens, inclusief vlaggen. Andere regels audit voor dezelfde gebruiker worden niet getroffen.      > [!IMPORTANT] > Een regel vertegenwoordigt een of meer onderliggende vermeldingen voor toegangsbeheer (ACE) en deze vermeldingen worden gesplitst of gecombineerd zo nodig wanneer u de audit-beveiligingsregels voor een gebruiker wijzigt. Dus een regel bestaat mogelijk niet meer in het formulier was toen deze werd toegevoegd, en in dat geval de methode RemoveAuditRuleSpecific niet kunt verwijderen."
  syntax:
    content: public void RemoveAuditRuleSpecific (System.Security.AccessControl.MutexAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAuditRule
      description: "De <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;> </xref> worden verwijderd."
  overload: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.ResetAccessRule(System.Security.AccessControl.MutexAccessRule)
  id: ResetAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: ResetAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.ResetAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.ResetAccessRule(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee verwijdert u alle regels voor toegang met dezelfde gebruiker die de opgegeven regel ongeacht <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref>, en worden de opgegeven regel toegevoegd."
  remarks: "Als er geen toegangsregels waarvan de gebruiker overeenkomt met de opgegeven regel `rule` wordt toegevoegd."
  example:
  - "The following code example shows how the ResetAccessRule method replaces all rules for the matching user with the rule specified for the match.  \n  \n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the ResetAccessRule method to replace both of the existing rules with the new rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.MutexSecurity.ResetAccessRule#1](~/add/codesnippet/csharp/382093ed-47a5-4dd0-aee6-_1.cs)]\n [!code-vb[System.Security.AccessControl.MutexSecurity.ResetAccessRule#1](~/add/codesnippet/visualbasic/382093ed-47a5-4dd0-aee6-_1.vb)]"
  syntax:
    content: public void ResetAccessRule (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;></xref> to add. De gebruiker die is opgegeven door deze regel bepaalt de regels te verwijderen voordat deze regel wordt toegevoegd."
  overload: System.Security.AccessControl.MutexSecurity.ResetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.SetAccessRule(System.Security.AccessControl.MutexAccessRule)
  id: SetAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: SetAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.SetAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.SetAccessRule(MutexAccessRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee verwijdert u alle regels voor toegang met dezelfde gebruiker en <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> (toestaan of weigeren) als de opgegeven regel en vervolgens wordt de opgegeven regel toegevoegd."
  remarks: "Als de opgegeven regel heeft <xref:System.Security.AccessControl.AccessControlType>, het effect van deze methode is het verwijderen van alle <xref:System.Security.AccessControl.AccessControlType>regels voor de opgegeven gebruiker, vervangen door de opgegeven regel.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.AccessControlType> Als de opgegeven regel heeft <xref:System.Security.AccessControl.AccessControlType>, worden alle <xref:System.Security.AccessControl.AccessControlType>regels voor de opgegeven gebruiker worden vervangen door de opgegeven regel.</xref:System.Security.AccessControl.AccessControlType> </xref:System.Security.AccessControl.AccessControlType>       Als er geen regels waarvan de gebruiker zijn en <xref:System.Security.AccessControl.AccessControlType>overeenkomen met de opgegeven regel `rule` wordt toegevoegd.</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example shows how the SetAccessRule method removes all rules that match both the user and the <xref:System.Security.AccessControl.AccessControlType> of `rule`, replacing them with `rule`.  \n  \n The example creates a <xref:System.Security.AccessControl.MutexSecurity> object and adds rules that allow and deny various rights for the current user. The example then creates a new rule that allows the current user full control, and uses the SetAccessRule method to replace the existing Allow rule with the new rule. The rule that denies access is not affected.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Mutex> object. Examples that attach security objects can be found in <xref:System.Threading.Mutex.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Mutex.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-vb[System.Security.AccessControl.MutexSecurity.SetAccessRule#1](~/add/codesnippet/visualbasic/5e6eedb1-8b35-40cc-b676-_1.vb)]\n [!code-cs[System.Security.AccessControl.MutexSecurity.SetAccessRule#1](~/add/codesnippet/csharp/5e6eedb1-8b35-40cc-b676-_1.cs)]"
  syntax:
    content: public void SetAccessRule (System.Security.AccessControl.MutexAccessRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAccessRule
      description: "The <xref href=&quot;System.Security.AccessControl.MutexAccessRule&quot;></xref> to add. De gebruiker en <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> van deze regel bepalen de regels te verwijderen voordat deze regel wordt toegevoegd."
  overload: System.Security.AccessControl.MutexSecurity.SetAccessRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.MutexSecurity.SetAuditRule(System.Security.AccessControl.MutexAuditRule)
  id: SetAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  langs:
  - csharp
  name: SetAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.SetAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.SetAuditRule(MutexAuditRule)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee verwijdert u alle regels met dezelfde gebruiker die de opgegeven regel ongeacht audit de <xref href=&quot;System.Security.AccessControl.AuditFlags&quot;> </xref> waarde en vervolgens voegt de opgegeven regel."
  remarks: "Als er zijn geen audit regels waarvan de gebruiker overeenkomt met de opgegeven regel `rule` wordt toegevoegd."
  syntax:
    content: public void SetAuditRule (System.Security.AccessControl.MutexAuditRule rule);
    parameters:
    - id: rule
      type: System.Security.AccessControl.MutexAuditRule
      description: "The <xref href=&quot;System.Security.AccessControl.MutexAuditRule&quot;></xref> to add. De gebruiker die is opgegeven door deze regel bepaalt de regels te verwijderen voordat deze regel wordt toegevoegd."
  overload: System.Security.AccessControl.MutexSecurity.SetAuditRule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rule</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.AccessControl.NativeObjectSecurity
  isExternal: false
  name: System.Security.AccessControl.NativeObjectSecurity
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Principal.IdentityNotMappedException
  parent: System.Security.Principal
  isExternal: false
  name: IdentityNotMappedException
  nameWithType: IdentityNotMappedException
  fullName: System.Security.Principal.IdentityNotMappedException
- uid: System.Security.AccessControl.MutexSecurity.#ctor
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: MutexSecurity()
  nameWithType: MutexSecurity.MutexSecurity()
  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity()
- uid: System.Security.AccessControl.MutexSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: MutexSecurity(String,AccessControlSections)
  nameWithType: MutexSecurity.MutexSecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.MutexSecurity.MutexSecurity(String,AccessControlSections)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.Security.AccessControl.MutexSecurity.AccessRightType
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: MutexSecurity.AccessRightType
  fullName: System.Security.AccessControl.MutexSecurity.AccessRightType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  nameWithType: MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AccessControlType)
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  nameWithType: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleType
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: MutexSecurity.AccessRuleType
  fullName: System.Security.AccessControl.MutexSecurity.AccessRuleType
- uid: System.Security.AccessControl.MutexSecurity.AddAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AddAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.AddAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.AddAccessRule(MutexAccessRule)
- uid: System.Security.AccessControl.MutexAccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: MutexAccessRule
  nameWithType: MutexAccessRule
  fullName: System.Security.AccessControl.MutexAccessRule
- uid: System.Security.AccessControl.MutexSecurity.AddAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AddAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.AddAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.AddAuditRule(MutexAuditRule)
- uid: System.Security.AccessControl.MutexAuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: MutexAuditRule
  nameWithType: MutexAuditRule
  fullName: System.Security.AccessControl.MutexAuditRule
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  nameWithType: MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleFactory(IdentityReference,Int32,Boolean,InheritanceFlags,PropagationFlags,AuditFlags)
- uid: System.Security.AccessControl.AuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditRule
  nameWithType: AuditRule
  fullName: System.Security.AccessControl.AuditRule
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  nameWithType: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleType
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: MutexSecurity.AuditRuleType
  fullName: System.Security.AccessControl.MutexSecurity.AuditRuleType
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRule(MutexAccessRule)
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRuleAll(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll(MutexAccessRule)
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific(MutexAccessRule)
  nameWithType: MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific(MutexAccessRule)
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRule(MutexAuditRule)
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRuleAll(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll(MutexAuditRule)
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific(MutexAuditRule)
  nameWithType: MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific(MutexAuditRule)
- uid: System.Security.AccessControl.MutexSecurity.ResetAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: ResetAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.ResetAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.ResetAccessRule(MutexAccessRule)
- uid: System.Security.AccessControl.MutexSecurity.SetAccessRule(System.Security.AccessControl.MutexAccessRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: SetAccessRule(MutexAccessRule)
  nameWithType: MutexSecurity.SetAccessRule(MutexAccessRule)
  fullName: System.Security.AccessControl.MutexSecurity.SetAccessRule(MutexAccessRule)
- uid: System.Security.AccessControl.MutexSecurity.SetAuditRule(System.Security.AccessControl.MutexAuditRule)
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: SetAuditRule(MutexAuditRule)
  nameWithType: MutexSecurity.SetAuditRule(MutexAuditRule)
  fullName: System.Security.AccessControl.MutexSecurity.SetAuditRule(MutexAuditRule)
- uid: System.Security.AccessControl.MutexSecurity.#ctor*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: MutexSecurity
  nameWithType: MutexSecurity.MutexSecurity
- uid: System.Security.AccessControl.MutexSecurity.AccessRightType*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRightType
  nameWithType: MutexSecurity.AccessRightType
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleFactory*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRuleFactory
  nameWithType: MutexSecurity.AccessRuleFactory
- uid: System.Security.AccessControl.MutexSecurity.AccessRuleType*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AccessRuleType
  nameWithType: MutexSecurity.AccessRuleType
- uid: System.Security.AccessControl.MutexSecurity.AddAccessRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AddAccessRule
  nameWithType: MutexSecurity.AddAccessRule
- uid: System.Security.AccessControl.MutexSecurity.AddAuditRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AddAuditRule
  nameWithType: MutexSecurity.AddAuditRule
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleFactory*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AuditRuleFactory
  nameWithType: MutexSecurity.AuditRuleFactory
- uid: System.Security.AccessControl.MutexSecurity.AuditRuleType*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: AuditRuleType
  nameWithType: MutexSecurity.AuditRuleType
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRule
  nameWithType: MutexSecurity.RemoveAccessRule
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleAll*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRuleAll
  nameWithType: MutexSecurity.RemoveAccessRuleAll
- uid: System.Security.AccessControl.MutexSecurity.RemoveAccessRuleSpecific*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAccessRuleSpecific
  nameWithType: MutexSecurity.RemoveAccessRuleSpecific
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRule
  nameWithType: MutexSecurity.RemoveAuditRule
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleAll*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRuleAll
  nameWithType: MutexSecurity.RemoveAuditRuleAll
- uid: System.Security.AccessControl.MutexSecurity.RemoveAuditRuleSpecific*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: RemoveAuditRuleSpecific
  nameWithType: MutexSecurity.RemoveAuditRuleSpecific
- uid: System.Security.AccessControl.MutexSecurity.ResetAccessRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: ResetAccessRule
  nameWithType: MutexSecurity.ResetAccessRule
- uid: System.Security.AccessControl.MutexSecurity.SetAccessRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: SetAccessRule
  nameWithType: MutexSecurity.SetAccessRule
- uid: System.Security.AccessControl.MutexSecurity.SetAuditRule*
  parent: System.Security.AccessControl.MutexSecurity
  isExternal: false
  name: SetAuditRule
  nameWithType: MutexSecurity.SetAuditRule
