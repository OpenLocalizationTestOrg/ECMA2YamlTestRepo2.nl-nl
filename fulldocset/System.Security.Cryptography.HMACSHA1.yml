### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACSHA1
  id: HMACSHA1
  children:
  - System.Security.Cryptography.HMACSHA1.#ctor
  - System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])
  - System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)
  langs:
  - csharp
  name: HMACSHA1
  nameWithType: HMACSHA1
  fullName: System.Security.Cryptography.HMACSHA1
  type: Class
  summary: "Berekent de Hash-based Message Authentication Code (HMAC) met behulp van de <xref href=&quot;System.Security.Cryptography.SHA1&quot;> </xref> hash-functie."
  remarks: "HMACSHA1 is een soort sleutelhash-algoritme dat is gemaakt op basis van de SHA1-hash-functie en gebruikt als een HMAC of hash-bericht verificatiecode op te geven. Het HMAC-proces combineert een geheime sleutel met de berichtgegevens, bewerkt het resultaat met de hashfunctie, combineert van de hashwaarde opnieuw met de geheime sleutel en past de hashfunctie vervolgens een tweede keer. De uitvoerhash is 160 bits lang.       Een HMAC kan worden gebruikt om te bepalen of een bericht wordt verzonden via een onbeveiligde kanaal is geknoeid, mits de verzender en ontvanger een geheime sleutel delen. De afzender wordt de hash-waarde voor de oorspronkelijke gegevens berekend en worden de oorspronkelijke gegevens en de hash-waarde als een enkel bericht verzonden. De ontvanger de hash-waarde voor het ontvangen bericht berekend en controleert of de berekende HMAC overeenkomt met de HMAC verzonden.       Elke wijziging van de gegevens of de hash-waarde resulteert in een niet-overeenkomende, omdat de geheime sleutel is vereist voor het wijzigen van het bericht en de juiste hash-waarde reproduceren. Als de oorspronkelijke en berekende hash-waarden overeenkomen, wordt daarom het bericht geverifieerd.       De SHA-1 (Secure Hash Algorithm, ook wel SHS Secure Hash Standard) is een cryptografische hash-algoritme gepubliceerd door de Amerikaanse overheid. SHA1 een 160-bits hash-waarde van een tekenreeks van willekeurige lengte.       HMACSHA1 accepteert sleutels van elke grootte, en genereert een hash-volgorde die 160 bits lang is."
  example:
  - "The following code example shows how to sign a file by using the HMACSHA1 object and then how to verify the file.  \n  \n [!code-cs[HMACSHA1#1](~/add/codesnippet/csharp/t-system.security.crypto_82_1.cs)]\n [!code-cpp[HMACSHA1#1](~/add/codesnippet/cpp/t-system.security.crypto_82_1.cpp)]\n [!code-vb[HMACSHA1#1](~/add/codesnippet/visualbasic/t-system.security.crypto_82_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACSHA1 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA1.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  name: HMACSHA1()
  nameWithType: HMACSHA1.HMACSHA1()
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> klasse met een willekeurig gegenereerde sleutel."
  remarks: "<xref:System.Security.Cryptography.HMACSHA1>is een soort sleutelhash-algoritme dat is gemaakt op basis van de SHA1-hash-functie en gebruikt als een HMAC of hash-bericht verificatiecode op te geven.</xref:System.Security.Cryptography.HMACSHA1> Het HMAC-proces combineert een geheime sleutel met de berichtgegevens, bewerkt het resultaat met de hashfunctie, combineert van de hashwaarde opnieuw met de geheime sleutel en past de hashfunctie vervolgens een tweede keer. De uitvoerhash is 160 bits (20 bytes) lang.       Deze constructor maakt gebruik van een 64-byte, willekeurig gegenereerde sleutel."
  syntax:
    content: public HMACSHA1 ();
    parameters: []
  overload: System.Security.Cryptography.HMACSHA1.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  name: HMACSHA1(Byte[])
  nameWithType: HMACSHA1.HMACSHA1(Byte[])
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[])
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> klasse met de opgegeven sleutel gegevens."
  remarks: "<xref:System.Security.Cryptography.HMACSHA1>is een soort sleutelhash-algoritme dat is gemaakt op basis van de SHA1-hash-functie en gebruikt als een HMAC of hash-bericht verificatiecode op te geven.</xref:System.Security.Cryptography.HMACSHA1> Het HMAC-proces combineert een geheime sleutel met de berichtgegevens, bewerkt het resultaat met de hashfunctie, combineert van de hashwaarde opnieuw met de geheime sleutel en past de hashfunctie vervolgens een tweede keer. De uitvoerhash is 160 bits (20 bytes) lang.      > [!NOTE] > Deze constructor maakt een niet-beheerde exemplaar van de algoritme met behulp van de <xref:System.Security.Cryptography.SHA1CryptoServiceProvider>klasse.</xref:System.Security.Cryptography.SHA1CryptoServiceProvider>"
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA1> class.
  syntax:
    content: public HMACSHA1 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: "De geheime sleutel voor <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> versleuteling. De sleutel kan een willekeurige lengte, maar als deze meer dan 64 bytes lang deze wordt opgedeeld (met behulp van SHA-1) worden afgeleid van een 64-byte-sleutel. Daarom is de aanbevolen grootte van de geheime sleutel 64 bytes."
  overload: System.Security.Cryptography.HMACSHA1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>key</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)
  id: '#ctor(System.Byte[],System.Boolean)'
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  name: HMACSHA1(Byte[],Boolean)
  nameWithType: HMACSHA1.HMACSHA1(Byte[],Boolean)
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[],Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> klasse met de opgegeven sleutel gegevens en een waarde die aangeeft of de beheerde versie van het SHA1-algoritme te gebruiken."
  syntax:
    content: public HMACSHA1 (byte[] key, bool useManagedSha1);
    parameters:
    - id: key
      type: System.Byte[]
      description: "De geheime sleutel voor <xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;> </xref> versleuteling. De sleutel kan een willekeurige lengte, maar als deze meer dan 64 bytes lang, deze wordt opgedeeld (met behulp van SHA-1) worden afgeleid van een 64-byte-sleutel. Daarom is de aanbevolen grootte van de geheime sleutel 64 bytes."
    - id: useManagedSha1
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>de beheerde implementatie van het SHA1-algoritme gebruiken (de <xref href=&quot;System.Security.Cryptography.SHA1Managed&quot;> </xref> klasse); <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> de niet-beheerde implementatie gebruiken (de <xref href=&quot;System.Security.Cryptography.SHA1CryptoServiceProvider&quot;> </xref> klasse)."
  overload: System.Security.Cryptography.HMACSHA1.#ctor*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.HMAC
  isExternal: false
  name: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACSHA1.#ctor
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1()
  nameWithType: HMACSHA1.HMACSHA1()
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1()
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1(Byte[])
  nameWithType: HMACSHA1.HMACSHA1(Byte[])
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1(Byte[],Boolean)
  nameWithType: HMACSHA1.HMACSHA1(Byte[],Boolean)
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(Byte[],Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HMACSHA1.#ctor*
  parent: System.Security.Cryptography.HMACSHA1
  isExternal: false
  name: HMACSHA1
  nameWithType: HMACSHA1.HMACSHA1
