### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.AceEnumerator
  id: AceEnumerator
  children:
  - System.Security.AccessControl.AceEnumerator.Current
  - System.Security.AccessControl.AceEnumerator.MoveNext
  - System.Security.AccessControl.AceEnumerator.Reset
  - System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: AceEnumerator
  nameWithType: AceEnumerator
  fullName: System.Security.AccessControl.AceEnumerator
  type: Class
  summary: "Biedt de mogelijkheid om te doorlopen van de vermeldingen voor toegangsbeheer (ACE&quot;s) in een toegangsbeheerlijst (ACL)."
  syntax:
    content: 'public sealed class AceEnumerator : System.Collections.IEnumerator'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerator
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.Current
  id: Current
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: AceEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee haalt u het huidige element in de <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> verzameling. Deze eigenschap haalt de type-vriendelijk-versie van het object."
  syntax:
    content: public System.Security.AccessControl.GenericAce Current { get; }
    return:
      type: System.Security.AccessControl.GenericAce
      description: "Het huidige element in de <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> verzameling."
  overload: System.Security.AccessControl.AceEnumerator.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.MoveNext
  id: MoveNext
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: AceEnumerator.MoveNext()
  fullName: System.Security.AccessControl.AceEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "De enumerator verplaatst naar het volgende onderdeel van de <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> verzameling."
  remarks: "Nadat een enumerator is gemaakt of na een aanroep van de <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>methode, een enumerator is geplaatst v贸贸r het eerste element van de verzameling en de eerste aanroep van de methode MoveNext de enumerator verplaatst via het eerste element van de verzameling.</xref:System.Security.AccessControl.AceEnumerator.Reset%2A>       Na het einde van de verzameling wordt doorgegeven, volgende aanroepen MoveNext terug `false` totdat <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>wordt aangeroepen.</xref:System.Security.AccessControl.AceEnumerator.Reset%2A>       Een enumerator blijft geldig zolang de verzameling ongewijzigd blijft. Wijzigingen zoals het toevoegen, wijzigen of verwijderen van elementen, worden aangebracht in de verzameling, de enumerator is permanent ongeldig als de volgende Roep MoveNext of <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>genereert een <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Security.AccessControl.AceEnumerator.Reset%2A>"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de enumerator is is voortgezet naar het volgende element; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> als de enumerator heeft voorbij het einde van de verzameling."
  overload: System.Security.AccessControl.AceEnumerator.MoveNext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De verzameling is gewijzigd nadat de enumerator is gemaakt."
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.Reset
  id: Reset
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: AceEnumerator.Reset()
  fullName: System.Security.AccessControl.AceEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "De enumerator ingesteld op de oorspronkelijke positie die v贸贸r het eerste element in de <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref> verzameling."
  remarks: "Een enumerator blijft geldig zolang de verzameling ongewijzigd blijft. Zoals het toevoegen, wijzigen of verwijderen van elementen, worden aangebracht in de verzameling, de enumerator is permanent ongeldig als de volgende aanroep van de <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>methode of de methode opnieuw genereert een <xref:System.InvalidOperationException></xref:System.InvalidOperationException> </xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.AccessControl.AceEnumerator.Reset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De verzameling is gewijzigd nadat de enumerator is gemaakt."
  platform:
  - net462
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Security.AccessControl.AceEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "Hiermee haalt het huidige element in de verzameling."
  remarks: "Nadat een enumerator is gemaakt of na een aanroep van de <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>methode, moet u aanroepen de <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>methode om door te gaan van de enumerator voor het eerste element van de verzameling voordat het lezen van IEnumerator.Current; anders IEnumerator.Current is niet gedefinieerd.</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> </xref:System.Security.AccessControl.AceEnumerator.Reset%2A>       IEnumerator.Current er ook een uitzondering gegenereerd als de laatste aanroep aan <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>geretourneerd `false`, wat aangeeft dat het einde van de verzameling.</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>       IEnumerator.Current wordt de positie van de enumerator niet verplaatst en opeenvolgende aanroepen naar IEnumerator.Current hetzelfde object retourneren totdat de <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>of <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>wordt aangeroepen.</xref:System.Security.AccessControl.AceEnumerator.Reset%2A> </xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>       Een enumerator blijft geldig zolang de verzameling ongewijzigd blijft. Als wijzigingen zoals het toevoegen, wijzigen of verwijderen van elementen, worden aangebracht in de verzameling, de enumerator permanent ongeldig en wordt de volgende aanroep aan <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>of <xref:System.Security.AccessControl.AceEnumerator.Reset%2A>er een <xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Security.AccessControl.AceEnumerator.Reset%2A> </xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A> Als de verzameling is gewijzigd tussen <xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>en IEnumerator.Current, IEnumerator.Current retourneert het element dat is ingesteld op, zelfs als de enumerator is al ongeldig gemaakt.</xref:System.Security.AccessControl.AceEnumerator.MoveNext%2A>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "Retourneert het huidige element in de verzameling."
  overload: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De verzameling is gewijzigd nadat de enumerator is gemaakt."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.AccessControl.AceEnumerator.Current
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Current
  nameWithType: AceEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.Current
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.AceEnumerator.MoveNext
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: AceEnumerator.MoveNext()
  fullName: System.Security.AccessControl.AceEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.AceEnumerator.Reset
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Reset()
  nameWithType: AceEnumerator.Reset()
  fullName: System.Security.AccessControl.AceEnumerator.Reset()
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.Current
- uid: System.Security.AccessControl.AceEnumerator.Current*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Current
  nameWithType: AceEnumerator.Current
- uid: System.Security.AccessControl.AceEnumerator.MoveNext*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: AceEnumerator.MoveNext
- uid: System.Security.AccessControl.AceEnumerator.Reset*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: Reset
  nameWithType: AceEnumerator.Reset
- uid: System.Security.AccessControl.AceEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Security.AccessControl.AceEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: AceEnumerator.System.Collections.IEnumerator.Current
