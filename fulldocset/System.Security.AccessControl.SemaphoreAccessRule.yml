### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.SemaphoreAccessRule
  id: SemaphoreAccessRule
  children:
  - System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  langs:
  - csharp
  name: SemaphoreAccessRule
  nameWithType: SemaphoreAccessRule
  fullName: System.Security.AccessControl.SemaphoreAccessRule
  type: Class
  summary: "Vertegenwoordigt een verzameling van toegangsrechten toegestaan of geweigerd voor een gebruiker of groep. Deze klasse kan niet worden overgenomen."
  remarks: "De klasse SemaphoreAccessRule is een van de klassen die het .NET Framework biedt voor het beheren van Windows-toegangsbeveiliging op benoemde system semaforen. Zie voor een overzicht van deze klassen en hun relatie tot de onderliggende Windows access control-structuren, <xref:System.Security.AccessControl.SemaphoreSecurity>.</xref:System.Security.AccessControl.SemaphoreSecurity>      > [!NOTE] > Toegangsbeveiliging betekenis is alleen voor Windows met de naam system semaforen. Als een <xref:System.Threading.Semaphore>object vertegenwoordigt geen lokale semafoor, toegangsbeheer is niet relevant.</xref:System.Threading.Semaphore>       Als u een lijst van de regels die momenteel wordt toegepast op een benoemde semafoor, gebruikt de <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName>methode voor het ophalen van een <xref:System.Security.AccessControl.SemaphoreSecurity>object en gebruik vervolgens de <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>methode voor het verkrijgen van een verzameling objecten SemaphoreAccessRule.</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> </xref:System.Security.AccessControl.SemaphoreSecurity> </xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName>       SemaphoreAccessRule objecten niet zijn toegewezen-op-een met vermeldingen voor toegangsbeheer in de onderliggende discretionary access control list (DACL&quot;s). Als u de set met alle regels voor toegang voor een semafoor krijgt, bevat de set het minimum aantal regels dat momenteel is vereist voor alle de vermeldingen voor toegangsbeheer express.      > [!NOTE] > De onderliggende vermeldingen voor toegangsbeheer wijzigen bij het toepassen en regels te verwijderen. De informatie in de regels samengevoegd, indien mogelijk, zodat het kleinste aantal vermeldingen voor toegangsbeheer. Dus bij het lezen van de huidige lijst met regels deze mogelijk niet precies hetzelfde uitzien als de lijst met alle regels die u hebt toegevoegd.       SemaphoreAccessRule objecten gebruiken om op te geven van de rechten voor het toestaan of weigeren aan een gebruiker of groep. Een SemaphoreAccessRule object altijd vertegenwoordigt toegang hebben of geen toegang hebben, niet beide.       Als u wilt een regel toepast op een benoemde systeemsemafoor, gebruiken de <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName>methode om op te halen de <xref:System.Security.AccessControl.SemaphoreSecurity>object.</xref:System.Security.AccessControl.SemaphoreSecurity> </xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> Wijzig de <xref:System.Security.AccessControl.SemaphoreSecurity>object met behulp van de bijbehorende methoden toevoegen van de regel en gebruik vervolgens de <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>methode voor opnieuw koppelen van het object.</xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.SemaphoreSecurity>      > [!IMPORTANT] > Wijzigingen die u aanbrengt in een <xref:System.Security.AccessControl.SemaphoreSecurity>object hebben geen invloed op de toegangsniveaus van de benoemde semafoor totdat u de <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>methode het gewijzigde object toewijzen aan de benoemde semafoor.</xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.SemaphoreSecurity>       SemaphoreAccessRule objecten zijn niet-wijzigbaar. Beveiliging voor een semafoor is gewijzigd met de methoden van de <xref:System.Security.AccessControl.SemaphoreSecurity>klasse toevoegen of verwijderen van regels; als u dit doet, de onderliggende vermeldingen voor toegangsbeheer zijn gewijzigd.</xref:System.Security.AccessControl.SemaphoreSecurity>      > [!NOTE] > Beveiliging op synchronisatieobjecten wordt niet ondersteund voor Windows 98 of Windows ME."
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_3_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_3_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public sealed class SemaphoreAccessRule : System.Security.AccessControl.AccessRule
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.SemaphoreAccessRule
  langs:
  - csharp
  name: SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.AccessControl.SemaphoreAccessRule&quot;> </xref> klasse, geven de gebruiker of groep die de regel voor de toegangsrechten geldt en of de opgegeven toegangsrechten worden toegestaan of geweigerd."
  remarks: "Om in te voeren een <xref:System.Threading.Semaphore>, bijvoorbeeld door het aanroepen van de <xref:System.Threading.WaitHandle.WaitOne%2A>methode, een gebruiker moet beschikken over <xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>toegang.</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.Semaphore> Om af te sluiten van de semafoor door het aanroepen van de <xref:System.Threading.Semaphore.Release%2A>methode, moet de gebruiker hebben <xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>toegang.</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.Semaphore.Release%2A>"
  syntax:
    content: public SemaphoreAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "De gebruiker of groep die de regel van toepassing op. Moet van het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> of een type zoals <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> die kunnen worden omgezet naar het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
    - id: eventRights
      type: System.Security.AccessControl.SemaphoreRights
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.SemaphoreRights&quot;> </xref> waarden opgeven van de rechten toegestaan of geweigerd."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Een van de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> waarden opgeven of de rechten zijn toegestaan of geweigerd."
  overload: System.Security.AccessControl.SemaphoreAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>Hiermee geeft u een ongeldige waarde.       - of - <code>type</code> bevat een ongeldige waarde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - of - <code>eventRights</code> gelijk is aan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is geen van beide van het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref> of van een type zoals <xref href=&quot;System.Security.Principal.NTAccount&quot;> </xref> die kunnen worden omgezet naar het type <xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.SemaphoreAccessRule
  langs:
  - csharp
  name: SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Security.AccessControl.SemaphoreAccessRule&quot;> </xref> klasse, geven de naam van de gebruiker of groep die de regel voor de toegangsrechten geldt en of de opgegeven toegangsrechten worden toegestaan of geweigerd."
  remarks: "Om in te voeren een <xref:System.Threading.Semaphore>, bijvoorbeeld door het aanroepen van de <xref:System.Threading.WaitHandle.WaitOne%2A>methode, een gebruiker moet beschikken over <xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>toegang.</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.Semaphore> Om af te sluiten van de semafoor door het aanroepen van de <xref:System.Threading.Semaphore.Release%2A>methode, moet de gebruiker hebben <xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>toegang.</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.Semaphore.Release%2A>       Deze constructor is gelijk aan het maken van een <xref:System.Security.Principal.NTAccount>object door `identity` naar de <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>constructor en het doorgeven van het zojuist gemaakte <xref:System.Security.Principal.NTAccount>object toe aan de <xref:System.Security.AccessControl.SemaphoreAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.SemaphoreRights%2CSystem.Security.AccessControl.AccessControlType%29>constructor.</xref:System.Security.AccessControl.SemaphoreAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.SemaphoreRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount>"
  example:
  - "The following code example demonstrates the use of this constructor to create <xref:System.Security.AccessControl.SemaphoreAccessRule> objects. The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/csharp/09c19b7f-c894-4d29-aa9f-_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/09c19b7f-c894-4d29-aa9f-_1.vb)]"
  syntax:
    content: public SemaphoreAccessRule (string identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "De naam van de gebruiker of groep die de regel van toepassing op."
    - id: eventRights
      type: System.Security.AccessControl.SemaphoreRights
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.SemaphoreRights&quot;> </xref> waarden opgeven van de rechten toegestaan of geweigerd."
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "Een van de <xref href=&quot;System.Security.AccessControl.AccessControlType&quot;> </xref> waarden opgeven of de rechten zijn toegestaan of geweigerd."
  overload: System.Security.AccessControl.SemaphoreAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>Hiermee geeft u een ongeldige waarde.       - of - <code>type</code> bevat een ongeldige waarde."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>is gelijk aan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       - of - <code>identity</code> is een tekenreeks met lengte nul.       - of - <code>identity</code> is langer dan 512 tekens."
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  id: SemaphoreRights
  parent: System.Security.AccessControl.SemaphoreAccessRule
  langs:
  - csharp
  name: SemaphoreRights
  nameWithType: SemaphoreAccessRule.SemaphoreRights
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  type: Property
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "Hiermee haalt u de rechten die door de toegangsregel toegestaan of geweigerd."
  remarks: "<xref:System.Security.AccessControl.SemaphoreAccessRule>objecten zijn niet-wijzigbaar.</xref:System.Security.AccessControl.SemaphoreAccessRule> Kunt u een nieuwe toegangsregel die een andere gebruiker, verschillende rechten of een andere <xref:System.Security.AccessControl.AccessControlType>, maar u kunt een bestaande toegangsregel niet wijzigen.</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example demonstrates the use of the SemaphoreRights property to display the rights in the set of rules contained in a <xref:System.Security.AccessControl.SemaphoreSecurity> object. The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/csharp/p-system.security.access_1_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/p-system.security.access_1_1.vb)]"
  syntax:
    content: public System.Security.AccessControl.SemaphoreRights SemaphoreRights { get; }
    return:
      type: System.Security.AccessControl.SemaphoreRights
      description: "Een bitsgewijze combinatie van <xref href=&quot;System.Security.AccessControl.SemaphoreRights&quot;> </xref> waarden van de rechten die toegestaan of geweigerd door de toegangsregel."
  overload: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.SemaphoreRights
  parent: System.Security.AccessControl
  isExternal: false
  name: SemaphoreRights
  nameWithType: SemaphoreRights
  fullName: System.Security.AccessControl.SemaphoreRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreRights
  nameWithType: SemaphoreAccessRule.SemaphoreRights
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor*
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreAccessRule
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule
- uid: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights*
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreRights
  nameWithType: SemaphoreAccessRule.SemaphoreRights
