### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.UdpClient
  id: UdpClient
  children:
  - System.Net.Sockets.UdpClient.#ctor
  - System.Net.Sockets.UdpClient.#ctor(System.Int32)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Active
  - System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  - System.Net.Sockets.UdpClient.Available
  - System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpClient.Client
  - System.Net.Sockets.UdpClient.Close
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Dispose
  - System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  - System.Net.Sockets.UdpClient.DontFragment
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.EnableBroadcast
  - System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  - System.Net.Sockets.UdpClient.ExclusiveAddressUse
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.MulticastLoopback
  - System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpClient.ReceiveAsync
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Ttl
  langs:
  - csharp
  name: UdpClient
  nameWithType: UdpClient
  fullName: System.Net.Sockets.UdpClient
  type: Class
  summary: "Biedt netwerkservices User Datagram Protocol (UDP)."
  remarks: "The UdpClient class provides simple methods for sending and receiving connectionless UDP datagrams in blocking synchronous mode. Because UDP is a connectionless transport protocol, you do not need to establish a remote host connection prior to sending and receiving data. You do, however, have the option of establishing a default remote host in one of the following two ways:  \n  \n-   Create an instance of the UdpClient class using the remote host name and port number as parameters.  \n  \n-   Create an instance of the UdpClient class and then call the <xref:System.Net.Sockets.UdpClient.Connect%2A> method.  \n  \n You can use any of the send methods provided in the UdpClient to send data to a remote device. Use the <xref:System.Net.Sockets.UdpClient.Receive%2A> method to receive data from remote hosts.  \n  \n> [!NOTE]\n>  Do not call [Send(Byte\\[\\], Int32, IPEndPoint)](assetId:///M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)?qualifyHint=False&autoUpgrade=True) using a host name or <xref:System.Net.IPEndPoint> if you have already specified a default remote host. If you do, UdpClient will throw an exception.  \n  \n UdpClient methods also allow you to send and receive multicast datagrams. Use the <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> method to subscribe a UdpClient to a multicast group. Use the <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A> method to unsubscribe a UdpClient from a multicast group."
  example:
  - "The following example establishes a UdpClient connection using the host name www.contoso.com on port 11000. A small string message is sent to two separate remote host machines. The <xref:System.Net.Sockets.UdpClient.Receive%2A> method blocks execution until a message is received. Using the <xref:System.Net.IPEndPoint> passed to <xref:System.Net.Sockets.UdpClient.Receive%2A>, the identity of the responding host is revealed.  \n  \n [!code-vb[Classic UdpClientExample#1](~/add/codesnippet/visualbasic/t-system.net.sockets.udp_1.vb)]\n [!code-cpp[Classic UdpClientExample#1](~/add/codesnippet/cpp/t-system.net.sockets.udp_1.cpp)]\n [!code-cs[Classic UdpClientExample#1](~/add/codesnippet/csharp/t-system.net.sockets.udp_1.cs)]"
  syntax:
    content: 'public class UdpClient : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor
  id: '#ctor'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> klasse."
  remarks: "Deze constructor maakt u een nieuwe <xref:System.Net.Sockets.UdpClient>en kan de onderliggende serviceprovider het meest geschikte lokale IPv4-adres en poort nummer toewijzen.</xref:System.Net.Sockets.UdpClient> Als u deze constructor is gebruikt, de <xref:System.Net.Sockets.UdpClient>exemplaar is ingesteld met de adresfamilie IPv4 die niet worden gewijzigd of overschreven door een methodeaanroep verbinding maken met een IPv6-doel.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout.       Deze constructor is niet geschikt voor het toevoegen aan een multicast-groep omdat socket-binding komt niet worden uitgevoerd. Bovendien werkt alleen met IPv4-adrestypen."
  example:
  - "The following example demonstrates how to use the default constructor to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/csharp/m-system.net.sockets.udp_11_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/cpp/m-system.net.sockets.udp_11_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#4](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_11_1.vb)]"
  syntax:
    content: public UdpClient ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> klasse en koppelt u deze naar het lokale poortnummer dat is opgegeven."
  remarks: "Deze constructor maakt een bijbehorend <xref:System.Net.Sockets.Socket>en koppelt u deze naar het poortnummer van waaruit u van plan bent om te communiceren.</xref:System.Net.Sockets.Socket> Gebruik deze constructor als u alleen geïnteresseerd bent in het lokale poortnummer instellen. De onderliggende serviceprovider, wordt het lokale IP-adres toewijzen. Als u 0 aan de constructor doorgeven, wordt de onderliggende serviceprovider een poortnummer toewijzen. Als u deze constructor is gebruikt, de <xref:System.Net.Sockets.UdpClient>exemplaar is ingesteld met de adresfamilie IPv4 die niet worden gewijzigd of overschreven door een methodeaanroep verbinding maken met een IPv6-doel.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout.       Deze constructor werkt alleen met IPv4-adrestypen."
  example:
  - "The following example demonstrates using a local port number to create an instance of the <xref:System.Net.Sockets.UdpClient> class.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_4_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_4_1.vb)]"
  syntax:
    content: public UdpClient (int port);
    parameters:
    - id: port
      type: System.Int32
      description: "Het lokale poortnummer van waaruit u van plan bent om te communiceren."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "De <code> port </code> parameter is groter dan <xref:System.Net.IPEndPoint.MaxPort>of kleiner zijn dan <xref:System.Net.IPEndPoint.MinPort>.</xref:System.Net.IPEndPoint.MinPort> </xref:System.Net.IPEndPoint.MaxPort>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> klasse en bindt aan het opgegeven lokale eindpunt."
  remarks: "Deze constructor maakt u een nieuwe <xref:System.Net.Sockets.UdpClient>en bindt aan de <xref:System.Net.IPEndPoint>opgegeven door de `localEP` parameter.</xref:System.Net.IPEndPoint> </xref:System.Net.Sockets.UdpClient> Voordat u deze constructor aanroepen, moet u een <xref:System.Net.IPEndPoint>met behulp van het IP-adres en poort nummer van waaruit u wilt verzenden en ontvangen van gegevens.</xref:System.Net.IPEndPoint> U hoeft niet te geeft een lokale IP-adres en poortnummer voor het verzenden en ontvangen van gegevens. Als u dit niet doet, wordt de onderliggende serviceprovider het meest geschikte lokale IP-adres en poort nummer toewijzen.       Als u deze constructor is gebruikt, de <xref:System.Net.Sockets.UdpClient>exemplaar is ingesteld met de adresfamilie die is opgegeven door de `localEP` parameter die niet worden gewijzigd of overschreven door een methodeaanroep verbinding maken met een ander adres-serie.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout."
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a local endpoint.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_9_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_9_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_9_1.vb)]"
  syntax:
    content: public UdpClient (System.Net.IPEndPoint localEP);
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: "Een <xref:System.Net.IPEndPoint>die respresents het lokale eindpunt waarmee u de verbinding UDP binden.</xref:System.Net.IPEndPoint>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localEP</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> klasse."
  remarks: "De `family` parameter bepaalt of de listener een versie 4 IP-adres (IPv4) of een IP-versie 6 (IPv6 gebruikt) adres. Voor het gebruik van een IPv4-adres, geven de <xref:System.Net.Sockets.AddressFamily>waarde.</xref:System.Net.Sockets.AddressFamily> Voor het gebruik van een IPv6-adres, geven de <xref:System.Net.Sockets.AddressFamily>waarde.</xref:System.Net.Sockets.AddressFamily> Een andere waarde wordt doorgegeven, wordt de methode voor het genereren van een <xref:System.ArgumentException>.</xref:System.ArgumentException>       Als u deze constructor is gebruikt, de <xref:System.Net.Sockets.UdpClient>exemplaar is ingesteld met de adresfamilie die is opgegeven door de `family` parameter die niet worden gewijzigd of overschreven door een methodeaanroep verbinding maken met een ander adres-serie.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout.       De UdpClient is niet geschikt voor het toevoegen aan een multicast-groep omdat socket-binding komt niet worden uitgevoerd."
  syntax:
    content: public UdpClient (System.Net.Sockets.AddressFamily family);
    parameters:
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "Een van de <xref:System.Net.Sockets.AddressFamily>waarden waarmee het adresseringsschema van de socket.</xref:System.Net.Sockets.AddressFamily>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code>is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Int32,System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> klasse en koppelt u deze naar het lokale poortnummer dat is opgegeven."
  remarks: "Deze constructor maakt een bijbehorend <xref:System.Net.Sockets.Socket>en koppelt u deze naar het poortnummer van waaruit u van plan bent om te communiceren.</xref:System.Net.Sockets.Socket>       De `family` parameter bepaalt of de listener een versie 4 IP-adres (IPv4) of een IP-versie 6 (IPv6 gebruikt) adres. Voor het gebruik van een IPv4-adres, geven de <xref:System.Net.Sockets.AddressFamily>waarde.</xref:System.Net.Sockets.AddressFamily> Voor het gebruik van een IPv6-adres, geven de <xref:System.Net.Sockets.AddressFamily>waarde.</xref:System.Net.Sockets.AddressFamily> Een andere waarde wordt doorgegeven, wordt de methode voor het genereren van een <xref:System.ArgumentException>.</xref:System.ArgumentException>       Als u deze constructor is gebruikt, de <xref:System.Net.Sockets.UdpClient>exemplaar is ingesteld met de adresfamilie die is opgegeven door de `family` parameter die niet worden gewijzigd of overschreven door een methodeaanroep verbinding maken met een ander adres-serie.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, Raadpleeg de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout."
  example:
  - "The following code example shows how to create a UDP client to use in a multicast group.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/cpp/c2c91fdb-fd73-47cc-8239-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/visualbasic/c2c91fdb-fd73-47cc-8239-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#3](~/add/codesnippet/csharp/c2c91fdb-fd73-47cc-8239-_1.cs)]"
  syntax:
    content: public UdpClient (int port, System.Net.Sockets.AddressFamily family);
    parameters:
    - id: port
      type: System.Int32
      description: "De poort waarop om te luisteren naar binnenkomende verbindingspogingen."
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "Een van de <xref:System.Net.Sockets.AddressFamily>waarden waarmee het adresseringsschema van de socket.</xref:System.Net.Sockets.AddressFamily>"
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>family</code>is not <xref:System.Net.Sockets.AddressFamily> or <xref:System.Net.Sockets.AddressFamily>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>is groter dan <xref:System.Net.IPEndPoint.MaxPort> of minder dan <xref:System.Net.IPEndPoint.MinPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> klasse en er wordt een standaard externe host."
  remarks: "Deze constructor initialiseert een nieuw <xref:System.Net.Sockets.UdpClient>en er wordt een externe host met behulp van de `hostname` en `port` parameters.</xref:System.Net.Sockets.UdpClient> Tot stand brengen van een externe standaardhost is optioneel. Als u deze constructor gebruikt, hoeft u niet om op te geven van een externe host in elke aanroep van de <xref:System.Net.Sockets.UdpClient.Send%2A>methode.</xref:System.Net.Sockets.UdpClient.Send%2A> Een standaard externe host opgeven u beperkt tot alleen die host. U kunt de externe standaardhost op elk gewenst moment wijzigen door het aanroepen van de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode.</xref:System.Net.Sockets.UdpClient.Connect%2A> Als u wilt opgeven van een externe host in de aanroep van de <xref:System.Net.Sockets.UdpClient.Send%2A>methode, moet u deze constructor niet gebruiken.</xref:System.Net.Sockets.UdpClient.Send%2A>      > [!NOTE] > Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout."
  example:
  - "The following example demonstrates how to create an instance of the <xref:System.Net.Sockets.UdpClient> class using a host name and port number.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/csharp/m-system.net.sockets.udp_7_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/cpp/m-system.net.sockets.udp_7_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#3](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_7_1.vb)]"
  syntax:
    content: public UdpClient (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "De naam van de externe DNS-host waarnaar u wilt verbinden."
    - id: port
      type: System.Int32
      description: "Het externe poortnummer waarnaar u wilt verbinden."
  overload: System.Net.Sockets.UdpClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hostname</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>ligt niet tussen <xref:System.Net.IPEndPoint.MinPort> en <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Active
  id: Active
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Opgehaald of ingesteld van een waarde die aangeeft of een externe standaardhost is ingesteld."
  remarks: "Klassen die zijn afgeleid van <xref:System.Net.Sockets.UdpClient>Deze eigenschap kunt gebruiken om te bepalen of een externe standaardhost is ingesteld.</xref:System.Net.Sockets.UdpClient> U kunt een externe standaardhost tot stand te brengen met behulp van de juiste constructor of door het aanroepen van de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode.</xref:System.Net.Sockets.UdpClient.Connect%2A> Als u een standaard externe host maken, kunt u een externe host niet opgeven in de aanroep van <xref:System.Net.Sockets.UdpClient.Send%2A>.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  syntax:
    content: protected bool Active { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als een verbinding niet actief is. anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.Active*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  id: AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Hiermee schakelt u Network Address Translation (NAT) traversal op of een <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> exemplaar."
  remarks: "De methode AllowNatTraversal wordt gebruikt om de in- of uitschakelen van de NAT-verzending voor een <xref:System.Net.Sockets.UdpClient>exemplaar.</xref:System.Net.Sockets.UdpClient> NAT-passage kan worden geleverd met Teredo, 6to4, of een ISATAP-tunnel.       Wanneer de `allowed` parameter is ingesteld op false, de <xref:System.Net.Sockets.SocketOptionName>optie op de bijbehorende socket is ingesteld op <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> </xref:System.Net.Sockets.SocketOptionName> Hiermee expliciet NAT-verzending voor een <xref:System.Net.Sockets.UdpClient>exemplaar.</xref:System.Net.Sockets.UdpClient>       Wanneer de `allowed` parameter is ingesteld op true, de <xref:System.Net.Sockets.SocketOptionName>optie op de bijbehorende socket is ingesteld op <xref:System.Net.Sockets.IPProtectionLevel>.</xref:System.Net.Sockets.IPProtectionLevel> </xref:System.Net.Sockets.SocketOptionName> Hierdoor NAT-verzending voor een <xref:System.Net.Sockets.UdpClient>, afhankelijk van de firewall-regels in plaats van het systeem.</xref:System.Net.Sockets.UdpClient>       Een Teredo-adres is een IPv6-adres met het voorvoegsel 2001:: / 32. Teredo-adressen worden geretourneerd via normale DNS-naamomzetting of als een IPv6-adres dat is toegewezen aan een lokale interface is geïnventariseerd."
  syntax:
    content: public void AllowNatTraversal (bool allowed);
    parameters:
    - id: allowed
      type: System.Boolean
      description: "Een Boolean die aangeeft of of NAT-passage uit te schakelen."
  overload: System.Net.Sockets.UdpClient.AllowNatTraversal*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Available
  id: Available
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Hiermee haalt u de hoeveelheid gegevens ontvangen van het netwerk dat beschikbaar is om te lezen."
  remarks: "De eigenschap Available wordt gebruikt om te bepalen van dat de hoeveelheid gegevens in de wachtrij in de buffer van het netwerk om te lezen. Gegevens beschikbaar is, belt <xref:System.Net.Sockets.NetworkStream.Read%2A>om de gegevens te verkrijgen.</xref:System.Net.Sockets.NetworkStream.Read%2A> Als er geen gegevens beschikbaar is, retourneert de eigenschap Available 0.       Als de externe host wordt afgesloten of de verbinding wordt gesloten, de eigenschap Available genereert een <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException>      > [!NOTE] > Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>verkrijgen van de specifieke foutcode en Raadpleeg de Windows Sockets versie 2 API fout code documentatie in de MSDN-bibliotheek op [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)/ voor een gedetailleerde beschrijving van de fout.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException>"
  example:
  - "The following code example shows the use of the Available property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_1_1.cpp)]"
  syntax:
    content: public int Available { get; }
    return:
      type: System.Int32
      description: "Het aantal bytes aan gegevens ontvangen van het netwerk."
  overload: System.Net.Sockets.UdpClient.Available*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden tijdens het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De <xref:System.Net.Sockets.Socket>is gesloten.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  id: BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Ontvangt een datagram asynchroon van een externe host."
  remarks: "De asynchrone BeginReceive-bewerking moet worden uitgevoerd door het aanroepen van de <xref:System.Net.Sockets.UdpClient.EndReceive%2A>methode.</xref:System.Net.Sockets.UdpClient.EndReceive%2A> Normaal gesproken de methode wordt aangeroepen door de `requestCallback` delegeren.       Deze methode worden niet geblokkeerd totdat de bewerking voltooid is. Als u wilt blokkeren totdat de bewerking voltooid is, gebruiken de <xref:System.Net.Sockets.UdpClient.Receive%2A>methode.</xref:System.Net.Sockets.UdpClient.Receive%2A>       Zie voor gedetailleerde informatie over het gebruik van de asynchrone programmeermodel [asynchroon synchrone methoden aanroepen](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses BeginReceive to asynchronously receive a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_12_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_12_1.cs)]"
  syntax:
    content: public IAsyncResult BeginReceive (AsyncCallback requestCallback, object state);
    parameters:
    - id: requestCallback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen wanneer de bewerking voltooid is.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Een door de gebruiker gedefinieerde object dat informatie over de ontvangstbewerking bevat. Dit object wordt doorgegeven aan de `requestCallback` delegeren wanneer de bewerking voltooid is."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>-object dat verwijst naar de asynchrone ontvangst.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginReceive*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Verzendt een datagram asynchroon naar een externe host. De bestemming is eerder opgegeven door een aanroep naar <xref:System.Net.Sockets.UdpClient.Connect*>.</xref:System.Net.Sockets.UdpClient.Connect*>"
  remarks: "De asynchrone bewerking voor BeginSend moet worden uitgevoerd door het aanroepen van de <xref:System.Net.Sockets.UdpClient.EndSend%2A>methode.</xref:System.Net.Sockets.UdpClient.EndSend%2A> Normaal gesproken de methode wordt aangeroepen door de `requestCallback` delegeren.       Deze methode worden niet geblokkeerd totdat de bewerking is voltooid. Als u wilt blokkeren totdat de bewerking voltooid is, gebruikt u een van de <xref:System.Net.Sockets.UdpClient.Send%2A>methode overloads.</xref:System.Net.Sockets.UdpClient.Send%2A>       Zie voor gedetailleerde informatie over het gebruik van de asynchrone programmeermodel [asynchroon synchrone methoden aanroepen](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses BeginSend to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/cpp/8a1303c1-e75f-4620-9cd1-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#3](~/add/codesnippet/csharp/8a1303c1-e75f-4620-9cd1-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Een <xref:System.Byte>matrix met de gegevens worden verzonden.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Het aantal bytes te verzenden."
    - id: requestCallback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen wanneer de bewerking voltooid is.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Een door de gebruiker gedefinieerde object dat informatie over de verzendbewerking bevat. Dit object wordt doorgegeven aan de `requestCallback` delegeren wanneer de bewerking voltooid is."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>-object dat verwijst naar de asynchrone verzenden.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Verzendt een datagram asynchroon naar een bestemming. Het doel is opgegeven door een <xref:System.Net.EndPoint>.</xref:System.Net.EndPoint>"
  remarks: "De asynchrone bewerking voor BeginSend moet worden uitgevoerd door het aanroepen van de <xref:System.Net.Sockets.UdpClient.EndSend%2A>methode.</xref:System.Net.Sockets.UdpClient.EndSend%2A> Normaal gesproken de methode wordt aangeroepen door de `requestCallback` delegeren.       Deze methode worden niet geblokkeerd totdat de bewerking voltooid is. Als u wilt blokkeren totdat de bewerking voltooid is, gebruikt u een van de <xref:System.Net.Sockets.UdpClient.Send%2A>methode overloads.</xref:System.Net.Sockets.UdpClient.Send%2A>       Zie voor gedetailleerde informatie over het gebruik van de asynchrone programmeermodel [asynchroon synchrone methoden aanroepen](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/cpp/baa8f51b-e44a-4d9b-997b-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#4](~/add/codesnippet/csharp/baa8f51b-e44a-4d9b-997b-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Een <xref:System.Byte>matrix met de gegevens worden verzonden.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Het aantal bytes te verzenden."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "De <xref:System.Net.EndPoint>die de bestemming voor de gegevens aangeeft.</xref:System.Net.EndPoint>"
    - id: requestCallback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen wanneer de bewerking voltooid is.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Een door de gebruiker gedefinieerde object dat informatie over de verzendbewerking bevat. Dit object wordt doorgegeven aan de `requestCallback` delegeren wanneer de bewerking voltooid is."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>-object dat verwijst naar de asynchrone verzenden.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  id: BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Verzendt een datagram asynchroon naar een bestemming. Het doel is opgegeven door de hostnaam en het poortnummer."
  remarks: "De asynchrone bewerking voor BeginSend moet worden uitgevoerd door het aanroepen van de <xref:System.Net.Sockets.UdpClient.EndSend%2A>methode.</xref:System.Net.Sockets.UdpClient.EndSend%2A> Normaal gesproken de methode wordt aangeroepen door de `requestCallback` delegeren.       Deze methode worden niet geblokkeerd totdat de bewerking voltooid is. Als u wilt blokkeren totdat de bewerking voltooid is, gebruikt u een van de <xref:System.Net.Sockets.UdpClient.Send%2A>methode overloads.</xref:System.Net.Sockets.UdpClient.Send%2A>       Zie voor gedetailleerde informatie over het gebruik van de asynchrone programmeermodel [asynchroon synchrone methoden aanroepen](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to asynchronously send a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_1.cs)]  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/cpp/b00a89c3-67f5-4a47-8f24-_2.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#5](~/add/codesnippet/csharp/b00a89c3-67f5-4a47-8f24-_2.cs)]"
  syntax:
    content: public IAsyncResult BeginSend (byte[] datagram, int bytes, string hostname, int port, AsyncCallback requestCallback, object state);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Een <xref:System.Byte>matrix met de gegevens worden verzonden.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Het aantal bytes te verzenden."
    - id: hostname
      type: System.String
      description: "De doelhost."
    - id: port
      type: System.Int32
      description: "Het poortnummer van de bestemming."
    - id: requestCallback
      type: System.AsyncCallback
      description: "Een <xref:System.AsyncCallback>gemachtigde die verwijst naar de methode aan te roepen wanneer de bewerking voltooid is.</xref:System.AsyncCallback>"
    - id: state
      type: System.Object
      description: "Een door de gebruiker gedefinieerde object dat informatie over de verzendbewerking bevat. Dit object wordt doorgegeven aan de `requestCallback` delegeren wanneer de bewerking voltooid is."
    return:
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>-object dat verwijst naar de asynchrone verzenden.</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpClient.BeginSend*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Client
  id: Client
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Opgehaald of ingesteld van het onderliggende netwerk <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>"
  remarks: "<xref:System.Net.Sockets.UdpClient>maakt een <xref:System.Net.Sockets.Socket>gebruikt voor het verzenden en ontvangen van gegevens via een netwerk.</xref:System.Net.Sockets.Socket></xref:System.Net.Sockets.UdpClient> Klassen die zijn afgeleid van <xref:System.Net.Sockets.UdpClient>Deze eigenschap ophalen of instellen van deze <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient> Gebruik van de onderliggende <xref:System.Net.Sockets.Socket>geretourneerd van de Client als u toegang tot voorbij dat vereist dat <xref:System.Net.Sockets.UdpClient>biedt.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.Socket> U kunt ook de Client gebruiken om in te stellen de onderliggende <xref:System.Net.Sockets.Socket>naar een bestaande <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.Socket> Dit is handig als u wilt profiteren van de eenvoud van het <xref:System.Net.Sockets.UdpClient>gebruik van een bestaande <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>"
  example:
  - "The following example demonstrates the use of the Client property. In this example, broadcasting is enabled for the underlying <xref:System.Net.Sockets.Socket>.  \n  \n [!code-cs[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/csharp/p-system.net.sockets.udp_0_1.cs)]\n [!code-cpp[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/cpp/p-system.net.sockets.udp_0_1.cpp)]\n [!code-vb[Classic UdpClient.ProtectedMethodsAndPropertiesExample#1](~/add/codesnippet/visualbasic/p-system.net.sockets.udp_0_1.vb)]"
  syntax:
    content: public System.Net.Sockets.Socket Client { get; set; }
    return:
      type: System.Net.Sockets.Socket
      description: "Het onderliggende netwerk <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>"
  overload: System.Net.Sockets.UdpClient.Client*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Close
  id: Close
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Hiermee wordt de UDP-verbinding gesloten."
  remarks: "De afsluiting wordt uitgeschakeld voor de onderliggende <xref:System.Net.Sockets.Socket>en releases van alle beheerde en onbeheerde resources die zijn gekoppeld aan de <xref:System.Net.Sockets.UdpClient>.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.Socket>      > [!NOTE] > Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout."
  example:
  - "The following example demonstrates closing a <xref:System.Net.Sockets.UdpClient> by calling the Close method.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/csharp/m-system.net.sockets.udp_10_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/cpp/m-system.net.sockets.udp_10_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#15](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_10_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Close*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  id: Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Hiermee stelt u een standaard externe host met behulp van het eindpunt van het opgegeven."
  remarks: "De <xref:System.Net.Sockets.UdpClient.Connect%2A>methode stelt een standaard externe host met behulp van de opgegeven waarde in de `endPoint` parameter.</xref:System.Net.Sockets.UdpClient.Connect%2A> Zodra, u niet moet specificeren van een externe host in elke aanroep van de <xref:System.Net.Sockets.UdpClient.Send%2A>methode.</xref:System.Net.Sockets.UdpClient.Send%2A>       Tot stand brengen van een externe standaardhost is optioneel. Een standaard externe host opgeven u beperkt tot alleen die host. Als u datagrammen verzenden naar een andere externe host wilt, moet u een andere aanroep van de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode of maak een nieuwe <xref:System.Net.Sockets.UdpClient>zonder een externe standaardhost.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.Connect%2A> Als u hebt vastgesteld dat een externe standaard host en u bieden ook een externe host in de aanroep van de <xref:System.Net.Sockets.UdpClient.Send%2A>methode, <xref:System.Net.Sockets.UdpClient.Send%2A>genereert een <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout.       Als u de <xref:System.Net.Sockets.Socket.Connect%2A>methode, datagrammen die vanaf een adres binnenkomen andere dan de opgegeven standaardwaarde worden genegeerd.</xref:System.Net.Sockets.Socket.Connect%2A> U kunt de externe standaardhost naar een broadcast-adres met deze methode, tenzij u overnemen niet instellen <xref:System.Net.Sockets.UdpClient>, de Client-methode gebruiken om op te halen van de onderliggende <xref:System.Net.Sockets.Socket>, en de optie socket voor <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       U kunt wel, broadcast gegevens op de standaardwaarde broadcast-adres, 255.255.255.255, als u opgeeft <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>in de aanroep van de <xref:System.Net.Sockets.UdpClient.Send%2A>methode.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> Als uw toepassing meer controle over broadcast-adressen vereist, kunt u ook herstellen met behulp van de <xref:System.Net.Sockets.Socket>klasse.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Omdat de UDP-protocol is zonder verbinding, de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode worden niet geblokkeerd.</xref:System.Net.Sockets.UdpClient.Connect%2A> Roep niet de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode als u van plan bent voor het ontvangen van multicast-datagrammen.</xref:System.Net.Sockets.UdpClient.Connect%2A>"
  example:
  - "The following example uses an <xref:System.Net.IPEndPoint> to establish a default remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/csharp/m-system.net.sockets.udp_1_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/cpp/m-system.net.sockets.udp_1_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#7](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_1_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPEndPoint endPoint);
    parameters:
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "Een <xref:System.Net.IPEndPoint>die aangeeft dat het netwerkeindpunt waaraan u van plan bent om gegevens te verzenden.</xref:System.Net.IPEndPoint>"
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>endPoint</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> is gesloten."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  id: Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Hiermee stelt u een standaard externe host met behulp van het opgegeven IP-adres en poort nummer."
  remarks: "De <xref:System.Net.Sockets.UdpClient.Connect%2A>methode stelt een standaard externe host met behulp van de opgegeven waarden in de `addr` en `port` parameters.</xref:System.Net.Sockets.UdpClient.Connect%2A> Zodra, u niet moet specificeren van een externe host in elke aanroep van de <xref:System.Net.Sockets.UdpClient.Send%2A>methode.</xref:System.Net.Sockets.UdpClient.Send%2A>       Tot stand brengen van een externe standaardhost is optioneel. Een standaard externe host opgeven u beperkt tot alleen die host. Als u datagrammen verzenden naar een andere externe host wilt, moet u een andere aanroep van de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode of maak een nieuwe <xref:System.Net.Sockets.UdpClient>zonder een externe standaardhost.</xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.Connect%2A> Als u hebt vastgesteld dat een externe standaard host en u bieden ook een externe host in de aanroep van de <xref:System.Net.Sockets.UdpClient.Send%2A>methode, <xref:System.Net.Sockets.UdpClient.Send%2A>genereert een <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout.       Als u de <xref:System.Net.Sockets.Socket.Connect%2A>methode, datagrammen die vanaf een adres binnenkomen andere dan de opgegeven standaardwaarde worden genegeerd.</xref:System.Net.Sockets.Socket.Connect%2A> U kunt de externe standaardhost naar een broadcast-adres met deze methode, tenzij u overnemen niet instellen <xref:System.Net.Sockets.UdpClient>, de clientmethode gebruiken om op te halen van de onderliggende <xref:System.Net.Sockets.Socket>, en de optie socket voor <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       U kunt wel, broadcast gegevens op de standaardwaarde broadcast-adres, 255.255.255.255, als u opgeeft <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>in de aanroep van de <xref:System.Net.Sockets.UdpClient.Send%2A>methode.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> Als uw toepassing meer controle over broadcast-adressen vereist, kunt u ook herstellen met behulp van de <xref:System.Net.Sockets.Socket>klasse.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Omdat de UDP-protocol is zonder verbinding, de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode worden niet geblokkeerd.</xref:System.Net.Sockets.UdpClient.Connect%2A> Roep niet de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode als u van plan bent voor het ontvangen van multicast-datagrammen.</xref:System.Net.Sockets.UdpClient.Connect%2A>"
  example:
  - "The following example uses an IP address and port number to connect with a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/csharp/m-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/cpp/m-system.net.sockets.udp_6_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#6](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_6_1.vb)]"
  syntax:
    content: public void Connect (System.Net.IPAddress addr, int port);
    parameters:
    - id: addr
      type: System.Net.IPAddress
      description: "De <xref:System.Net.IPAddress>van de externe host waaraan u van plan bent om gegevens te verzenden.</xref:System.Net.IPAddress>"
    - id: port
      type: System.Int32
      description: "Het poortnummer waarmee u van plan bent gegevens verzenden."
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>is gesloten."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>addr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>ligt niet tussen <xref:System.Net.IPEndPoint.MinPort> en <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  id: Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Stelt een standaard externe host met behulp van de opgegeven naam en poortnummer hosten."
  remarks: "De methode Connect stelt een standaard externe host met behulp van de opgegeven waarden in de `port` en `hostname` parameters. Zodra, u niet moet specificeren van een externe host in elke aanroep van de <xref:System.Net.Sockets.UdpClient.Send%2A>methode.</xref:System.Net.Sockets.UdpClient.Send%2A>       Tot stand brengen van een externe standaardhost is optioneel. Een standaard externe host opgeven u beperkt tot alleen die host. Als u datagrammen verzenden naar een andere externe host wilt, moet u ervoor een andere aanroep van de methode Connect of maak een nieuwe <xref:System.Net.Sockets.UdpClient>zonder een externe standaardhost.</xref:System.Net.Sockets.UdpClient>       Als u hebt vastgesteld dat een externe standaard host en u bieden ook een externe host in de aanroep van de <xref:System.Net.Sockets.UdpClient.Send%2A>methode, <xref:System.Net.Sockets.UdpClient.Send%2A>genereert een <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Send%2A> Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout.       Als u de <xref:System.Net.Sockets.Socket.Connect%2A>methode, datagrammen die vanaf een adres binnenkomen andere dan de opgegeven standaardwaarde worden genegeerd.</xref:System.Net.Sockets.Socket.Connect%2A> U kunt de externe standaardhost naar een broadcast-adres met deze methode, tenzij u overnemen niet instellen <xref:System.Net.Sockets.UdpClient>, de clientmethode gebruiken om op te halen van de onderliggende <xref:System.Net.Sockets.Socket>, en de optie socket voor <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient>       U kunt wel, broadcast gegevens op de standaardwaarde broadcast-adres, 255.255.255.255, als u opgeeft <xref:System.Net.IPAddress.Broadcast?displayProperty=fullName>in de aanroep van de <xref:System.Net.Sockets.UdpClient.Send%2A>methode.</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.IPAddress.Broadcast?displayProperty=fullName> Als uw toepassing meer controle over broadcast-adressen vereist, kunt u ook herstellen met behulp van de <xref:System.Net.Sockets.Socket>klasse.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Omdat de UDP-protocol is zonder verbinding, de methode Connect worden niet geblokkeerd. Roep de methode Connect niet als u van plan bent voor het ontvangen van multicast-datagrammen."
  example:
  - "The following example uses the host name and port number to connect to a remote host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/csharp/m-system.net.sockets.udp_13_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/cpp/m-system.net.sockets.udp_13_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#5](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_13_1.vb)]"
  syntax:
    content: public void Connect (string hostname, int port);
    parameters:
    - id: hostname
      type: System.String
      description: "De DNS-naam van de externe host waaraan u van plan bent gegevens verzenden."
    - id: port
      type: System.Int32
      description: "Het poortnummer op de externe host waaraan u van plan bent om gegevens te verzenden."
  overload: System.Net.Sockets.UdpClient.Connect*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> is gesloten."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>port</code>ligt niet tussen <xref:System.Net.IPEndPoint.MinPort> en <xref:System.Net.IPEndPoint.MaxPort>."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose
  id: Dispose
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Versies van de beheerde en onbeheerde resources gebruikt door de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Heft de niet-beheerde bronnen worden gebruikt door de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> en eventueel de beheerde bronnen vrij."
  remarks: "Deze methode wordt aangeroepen door het publiek `Dispose()`methode en de <xref:System.Object.Finalize%2A>methode.</xref:System.Object.Finalize%2A> `Dispose()`Hiermee wordt de beveiligde `Dispose(Boolean)` methode met de `disposing` parameter ingesteld op `true`. <xref:System.Object.Finalize%2A>roept `Dispose` met `disposing` ingesteld op `false`.</xref:System.Object.Finalize%2A>       Wanneer de `disposing` parameter is ingesteld op true, wordt deze methode worden alle resources die beheerde objecten waarover vrijgegeven dat dit <xref:System.Net.Sockets.UdpClient>verwijzingen.</xref:System.Net.Sockets.UdpClient> Deze methode roept de `Dispose()` methode van elk object waarnaar wordt verwezen."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>voor het vrijgeven van zowel beheerde als onbeheerde hulpbronnen; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> om alleen niet-beheerde bronnen vrij te geven."
  overload: System.Net.Sockets.UdpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DontFragment
  id: DontFragment
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Opgehaald of ingesteld een <xref:System.Boolean>waarde die aangeeft of de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> kan IP (Internet Protocol) datagrammen worden gefragmenteerd.</xref:System.Boolean>"
  remarks: "Datagrammen vereisen fragmentatie wanneer hun grootte de maximale Transfer Unit (MTU) van het verzendingsmedium overschrijdt. Datagrammen gefragmenteerd door de verzendende host of een tussenliggende router. Als een datagram moet worden gefragmenteerd, en de <xref:System.Net.Sockets.Socket.DontFragment%2A>optie is ingesteld, het datagram wordt verwijderd en een Internet Control Message Protocol (ICMP) foutbericht teruggestuurd naar de afzender van het datagram wordt verzonden.</xref:System.Net.Sockets.Socket.DontFragment%2A>"
  example:
  - "The following code example shows the use of the <xref:System.Net.Sockets.Socket.DontFragment%2A> property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#2](~/add/codesnippet/csharp/p-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#2](~/add/codesnippet/cpp/p-system.net.sockets.udp_5_1.cpp)]"
  syntax:
    content: public bool DontFragment { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> kunt datagram fragmentatie; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.DontFragment*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "Deze eigenschap kan alleen worden ingesteld voor sockets die gebruikmaken van de <xref:System.Net.Sockets.AddressFamily>vlag of de <xref:System.Net.Sockets.AddressFamily>vlag.</xref:System.Net.Sockets.AddressFamily> </xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  id: DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Laat een multicast-groep."
  remarks: "De methode DropMulticastGroup intrekt het <xref:System.Net.Sockets.UdpClient>uit de multicast-groep geïdentificeerd door de opgegeven <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> Na het aanroepen van de methode DropMulticastGroup, de onderliggende <xref:System.Net.Sockets.Socket>verstuurt een groep Management IGMP (Internet Protocol)-pakket naar de router van de router verwijderen uit de multicastgroep.</xref:System.Net.Sockets.Socket> Na een <xref:System.Net.Sockets.UdpClient>intrekt uit de groep het niet meer worden verzonden aan die groep datagrammen ontvangen.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout."
  example:
  - "The following example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_3_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_3_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_3_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "De <xref:System.Net.IPAddress>van de multicast-groep te verlaten.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De onderliggende <xref:System.Net.Sockets.Socket>is gesloten.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Het IP-adres is niet compatibel met de <xref:System.Net.Sockets.AddressFamily>-waarde die het adresseringsschema van de socket definieert.</xref:System.Net.Sockets.AddressFamily>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  id: DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Laat een multicast-groep."
  remarks: "De methode DropMulticastGroup intrekt het <xref:System.Net.Sockets.UdpClient>uit de multicast-groep geïdentificeerd door de opgegeven <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> Na het aanroepen van de methode DropMulticastGroup, de onderliggende <xref:System.Net.Sockets.Socket>verstuurt een groep Management IGMP (Internet Protocol)-pakket naar de router van de router verwijderen uit de multicastgroep.</xref:System.Net.Sockets.Socket> Na een <xref:System.Net.Sockets.UdpClient>intrekt uit de groep het niet meer worden verzonden aan die groep datagrammen ontvangen.</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruiken de <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>eigenschap in op de specifieke foutcode verkrijgen.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Wanneer u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout."
  example:
  - "The following code example demonstrates how to drop a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/cpp/d83f3217-6e3e-43a5-a5d8-_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/visualbasic/d83f3217-6e3e-43a5-a5d8-_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#2](~/add/codesnippet/csharp/d83f3217-6e3e-43a5-a5d8-_1.cs)]"
  syntax:
    content: public void DropMulticastGroup (System.Net.IPAddress multicastAddr, int ifindex);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "De <xref:System.Net.IPAddress>van de multicast-groep te verlaten.</xref:System.Net.IPAddress>"
    - id: ifindex
      type: System.Int32
      description: "Het lokale adres van de multicast-groep te verlaten."
  overload: System.Net.Sockets.UdpClient.DropMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De onderliggende <xref:System.Net.Sockets.Socket>is gesloten.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Het IP-adres is niet compatibel met de <xref:System.Net.Sockets.AddressFamily>-waarde die het adresseringsschema van de socket definieert.</xref:System.Net.Sockets.AddressFamily>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  id: EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Opgehaald of ingesteld een <xref:System.Boolean>waarde die aangeeft of de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> mogen verzenden of ontvangen van broadcastpakketten.</xref:System.Boolean>"
  remarks: "Broadcasting is beperkt tot een specifiek subnet. U kunt met het lokale subnet uitzenden door een pakket verzenden naar 255.255.255.255; of u kunt het gerichte broadcastadres, namelijk het netwerkgedeelte van een adres IP (Internet Protocol) met alle bits in het hostgedeelte instellen. Als uw IP-adres is 192.168.1.40 (een adres van klasse C, met het netwerkgedeelte als de eerste drie octetten en het hostgedeelte is het laatste octet), is uw gerichte broadcastadres 192.168.1.255."
  example:
  - "The following code example shows the use of the EnableBroadcast property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#3](~/add/codesnippet/csharp/p-system.net.sockets.udp_3_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#3](~/add/codesnippet/cpp/p-system.net.sockets.udp_3_1.cpp)]"
  syntax:
    content: public bool EnableBroadcast { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> kunt broadcastpakketten; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.EnableBroadcast*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  id: EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Eindigt een in behandeling zijnde asynchrone ontvangen."
  remarks: "Deze methodeblokken totdat de bewerking is voltooid.       Gebruik voor deze bewerking synchroon uitvoeren, de <xref:System.Net.Sockets.UdpClient.Receive%2A>methode.</xref:System.Net.Sockets.UdpClient.Receive%2A>"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous receive of a server response.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/cpp/5ace0ab2-d0e9-4f1f-a415-_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#1](~/add/codesnippet/csharp/5ace0ab2-d0e9-4f1f-a415-_1.cs)]"
  syntax:
    content: public byte[] EndReceive (IAsyncResult asyncResult, ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>object dat is geretourneerd door een aanroep naar <xref:System.Net.Sockets.UdpClient.BeginReceive*>.</xref:System.Net.Sockets.UdpClient.BeginReceive*> </xref:System.IAsyncResult>"
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "Het opgegeven externe eindpunt."
    return:
      type: System.Byte[]
      description: "Als dit lukt, wordt het aantal bytes ontvangen. Als dit niet lukt, wordt deze methode retourneert 0."
  overload: System.Net.Sockets.UdpClient.EndReceive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>is niet geretourneerd door een aanroep naar de <xref:System.Net.Sockets.UdpClient.BeginReceive*> methode."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "EndReceive is eerder aangeroepen voor het asynchroon lezen."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij een poging tot toegang tot de onderliggende <xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket> Zie de sectie met opmerkingen voor meer informatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De onderliggende <xref:System.Net.Sockets.Socket>is gesloten.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  id: EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Een wachtende asynchrone verzending eindigt."
  remarks: "Deze methodeblokken totdat de bewerking is voltooid.       Gebruik voor deze bewerking synchroon uitvoeren, de <xref:System.Net.Sockets.UdpClient.Send%2A>methode.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  example:
  - "The following code example uses <xref:System.Net.Sockets.UdpClient.BeginSend%2A> to complete an asynchronous send of a server request.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/cpp/m-system.net.sockets.udp_0_1.cpp)]\n [!code-cs[System.Net.Sockets.UdpClient1#2](~/add/codesnippet/csharp/m-system.net.sockets.udp_0_1.cs)]"
  syntax:
    content: public int EndSend (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "Een <xref:System.IAsyncResult>object dat is geretourneerd door een aanroep naar <xref:System.Net.Sockets.UdpClient.BeginSend*>.</xref:System.Net.Sockets.UdpClient.BeginSend*> </xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "Als geslaagd, het aantal bytes naar verzonden de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.EndSend*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>is niet geretourneerd door een aanroep naar de <xref:System.Net.Sockets.Socket.BeginSend*> methode."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Net.Sockets.Socket.EndSend*>eerder is voor de asynchrone leesbewerking aangeroepen.</xref:System.Net.Sockets.Socket.EndSend*>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij een poging tot toegang tot de onderliggende socket. Zie de sectie met opmerkingen voor meer informatie."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De onderliggende <xref:System.Net.Sockets.Socket>is gesloten.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Opgehaald of ingesteld een <xref:System.Boolean>waarde die aangeeft of de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> kan slechts één client gebruik van een poort.</xref:System.Boolean>"
  remarks: "Standaard kunt meerdere clients een specifieke poort; slechts één van de clients kan echter bewerkingen van het netwerk verzonden naar de poort uitvoeren. U kunt de eigenschap ExclusiveAddressUse gebruiken om te voorkomen dat meerdere clients met behulp van een specifieke poort.       Deze eigenschap moet worden ingesteld voordat de onderliggende socket is gebonden aan een clientpoort. Als u aanroept <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName>, <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName>, of <xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName>, als een neveneffect van de constructor is afhankelijk van de clientpoort en u vervolgens de ExclusiveAddressUse-eigenschap niet instellen</xref:System.Net.Sockets.UdpClient.%23ctor%28System.String%2CSystem.Int32%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%2CSystem.Net.Sockets.AddressFamily%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor%28System.Int32%29?displayProperty=fullName>"
  example:
  - "The following code example creates a <xref:System.Net.Sockets.UdpClient>, and gets and sets the ExclusiveAddressUse property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#4](~/add/codesnippet/csharp/p-system.net.sockets.udp_4_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#4](~/add/codesnippet/cpp/p-system.net.sockets.udp_4_1.cpp)]"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> kan slechts één client gebruik van een specifieke poort; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>. De standaardwaarde is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref> voor Windows Server 2003 en Windows XP servicepack 2 en hoger, en <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> voor alle andere versies."
  overload: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij een poging tot toegang tot de onderliggende socket."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De onderliggende <xref:System.Net.Sockets.Socket>is gesloten.</xref:System.Net.Sockets.Socket>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Voegt een <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> aan een multicast-groep."
  remarks: "De methode JoinMulticastGroup is lid van het <xref:System.Net.Sockets.UdpClient>gebruik van de opgegeven <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> aan een multicast-groep</xref:System.Net.Sockets.UdpClient> Na het aanroepen van de methode JoinMulticastGroup, de onderliggende <xref:System.Net.Sockets.Socket>verstuurt een groep Management IGMP (Internet Protocol)-pakket naar de router lidmaatschap van de multicast-groep aanvragen.</xref:System.Net.Sockets.Socket> Het multicast-adresbereik is 224.0.0.0 t/m 239.255.255.255. Als u een adres buiten dit bereik opgeven of als de router waarnaar de aanvraag wordt gedaan niet multicast is ingeschakeld, <xref:System.Net.Sockets.UdpClient>genereert een <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient> Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout. Eenmaal de <xref:System.Net.Sockets.UdpClient>wordt vermeld met de router als lid van de multicast-groep, wordt het ontvangen van multicast datagrammen verzonden naar de opgegeven <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> worden</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Moet u de <xref:System.Net.Sockets.UdpClient>met behulp van het multicast-poortnummer; anders u kan niet worden ontvangen van multicast datagrammen.</xref:System.Net.Sockets.UdpClient> Roep niet de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode vóór het aanroepen van de methode JoinMulticastGroup of de <xref:System.Net.Sockets.UdpClient.Receive%2A>methode werkt niet.</xref:System.Net.Sockets.UdpClient.Receive%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> U hoeft niet te behoren tot een multicast-groep datagrammen verzenden naar een multicast-IP-adres.       Voordat u een multicast-groep toevoegt, moet dat de socket is gebonden aan de poort of het eindpunt. U doet dit door het aanroepen van een van de constructors die een poort of een eindpunt als een parameter accepteren.       Aanroepen niet meer wilt ontvangen van multicast-datagrammen, de <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>methode en geef de <xref:System.Net.IPAddress>van de groep waaruit u wilt intrekken.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>      > [!NOTE] > In het geval IPv6-er zijn verschillende multicast-adresbereiken die u kunt kiezen uit. Raadpleeg bij de IETF RFC 2375.      > [!NOTE] > Kan niet worden aangeroepen <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>op een <xref:System.Net.Sockets.UdpClient>samengesteld zonder een specifieke poort van de lokale (dat wil zeggen, met behulp van de <xref:System.Net.Sockets.UdpClient.%23ctor>of <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>constructor).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following code example demonstrates how to join a multicast group by providing a multicast address.  \n  \n [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/cpp/m-system.net.sockets.udp_8_1.cpp)]\n [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_8_1.vb)]\n [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#1](~/add/codesnippet/csharp/m-system.net.sockets.udp_8_1.cs)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "De multicast <xref:System.Net.IPAddress>van de groep die u wilt toevoegen.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De onderliggende <xref:System.Net.Sockets.Socket>is gesloten.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Het IP-adres is niet compatibel met de <xref:System.Net.Sockets.AddressFamily>-waarde die het adresseringsschema van de socket definieert.</xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Voegt een <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> aan een multicast-groep."
  remarks: "Voordat u een multicast-groep toevoegt, moet u dat de socket is gebonden aan de poort of het eindpunt. U kunt dit doen door een van de constructors die een poort of een eindpunt als parameter accepteert.       De `infindex` parameter wordt gebruikt om een hardware-interface op dezelfde koppeling identificeren.      > [!NOTE] > Er zijn verschillende multicastadres bereiken kiezen. Raadpleeg de IETF RFC 2375.      > [!NOTE] > Kan niet worden aangeroepen <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>op een <xref:System.Net.Sockets.UdpClient>samengesteld zonder een specifieke poort van de lokale (dat wil zeggen, met behulp van de <xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName>of <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName>constructor).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient.%23ctor?displayProperty=fullName> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - >-
    [!code-cpp[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/cpp/f675abdc-8a60-48f5-a8c6-_1.cpp)]
     [!code-vb[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/visualbasic/f675abdc-8a60-48f5-a8c6-_1.vb)]
     [!code-cs[System.Net.Sockets.UdpClient.JoinMulticastGroup#5](~/add/codesnippet/csharp/f675abdc-8a60-48f5-a8c6-_1.cs)]
  syntax:
    content: public void JoinMulticastGroup (int ifindex, System.Net.IPAddress multicastAddr);
    parameters:
    - id: ifindex
      type: System.Int32
      description: "De interface-index die is gekoppeld aan het lokale IP-adres waarop u wilt deelnemen aan de multicast-groep."
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "De multicast <xref:System.Net.IPAddress>van de groep die u wilt toevoegen.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De onderliggende <xref:System.Net.Sockets.Socket>is gesloten.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Voegt een <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> aan een multicast-groep met de opgegeven Time to Live (TTL)."
  remarks: "De <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>methode is lid van <xref:System.Net.Sockets.UdpClient>een multicast-groep met de opgegeven <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> Na het aanroepen de <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>methode en de onderliggende <xref:System.Net.Sockets.Socket>verstuurt een groep Management IGMP (Internet Protocol)-pakket naar de router lidmaatschap van de multicast-groep aanvragen.</xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> Het multicast-adresbereik is 224.0.0.0 t/m 239.255.255.255. Als u een adres buiten dit bereik opgeven of als de router waarnaar de aanvraag wordt gedaan niet multicast is ingeschakeld, <xref:System.Net.Sockets.UdpClient>genereert een <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient> Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout. De `timeToLive` parameter geeft u het aantal router-hops voor een multicast-datagram toegestaan voordat het wordt verwijderd. Eenmaal de <xref:System.Net.Sockets.UdpClient>wordt vermeld met de router als lid van de multicast-groep, wordt het ontvangen van multicast datagrammen verzonden naar de opgegeven <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress> worden</xref:System.Net.Sockets.UdpClient>      > [!NOTE] > Moet u de <xref:System.Net.Sockets.UdpClient>met behulp van het multicast-poortnummer anders u kan niet worden ontvangen van multicast datagrammen.</xref:System.Net.Sockets.UdpClient> Roep niet de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode voorafgaand aan het aanroepen van de <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>methode of de methode receive werkt niet.</xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> U hoeft niet te behoren tot een multicast-groep datagrammen verzenden naar een multicast-IP-adres.       Controleer of dat de socket is gebonden aan de poort of het eindpunt voordat toevoegen aan een multicast-groep. U doet dit door het aanroepen van een van de constructors een poort of een eindpunt als parameter worden geaccepteerd.       Aanroepen niet meer wilt ontvangen van multicast-datagrammen, de <xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>methode en geef de <xref:System.Net.IPAddress>van de groep waaruit u wilt intrekken.</xref:System.Net.IPAddress> </xref:System.Net.Sockets.UdpClient.DropMulticastGroup%2A>      > [!NOTE] > Kan niet worden aangeroepen <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>op een <xref:System.Net.Sockets.UdpClient>samengesteld zonder een specifieke poort van de lokale (dat wil zeggen, met behulp van de <xref:System.Net.Sockets.UdpClient.%23ctor>of <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>constructor).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following example demonstrates how to join a multicast group by providing two parameters, a multicast address, and a number that represents the TTL.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/csharp/2ab5d1d5-1bd6-4398-ae63-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/cpp/2ab5d1d5-1bd6-4398-ae63-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#13](~/add/codesnippet/visualbasic/2ab5d1d5-1bd6-4398-ae63-_1.vb)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, int timeToLive);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "De <xref:System.Net.IPAddress>van de multicast-groep toevoegen.</xref:System.Net.IPAddress>"
    - id: timeToLive
      type: System.Int32
      description: "De Time to Live (TTL), gemeten in router-hops."
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "De TTL-waarde ligt niet tussen 0 en 255"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De onderliggende <xref:System.Net.Sockets.Socket>is gesloten.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>multicastAddr</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Het IP-adres is niet compatibel met de <xref:System.Net.Sockets.AddressFamily>-waarde die het adresseringsschema van de socket definieert.</xref:System.Net.Sockets.AddressFamily>"
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Voegt een <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> aan een multicast-groep."
  remarks: "Voordat u een multicast-groep toevoegt, moet u dat de socket is gebonden aan de poort of het eindpunt. U kunt dit doen door een van de constructors die een poort of een eindpunt als parameter accepteert.      > [!NOTE] > Er zijn verschillende multicastadres bereiken kiezen. U vindt deze in de IETF RFC 2375.      > [!NOTE] > Kan niet worden aangeroepen <xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>op een <xref:System.Net.Sockets.UdpClient>samengesteld zonder een specifieke poort van de lokale (dat wil zeggen, met behulp van de <xref:System.Net.Sockets.UdpClient.%23ctor>of <xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29>constructor).</xref:System.Net.Sockets.UdpClient.%23ctor%28System.Net.Sockets.AddressFamily%29> </xref:System.Net.Sockets.UdpClient.%23ctor> </xref:System.Net.Sockets.UdpClient> </xref:System.Net.Sockets.UdpClient.JoinMulticastGroup%2A>"
  example:
  - "The following code example shows the use of the JoinMulticastGroup method.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#6](~/add/codesnippet/csharp/83ef7d63-bccd-4c55-a88d-_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#6](~/add/codesnippet/cpp/83ef7d63-bccd-4c55-a88d-_1.cpp)]"
  syntax:
    content: public void JoinMulticastGroup (System.Net.IPAddress multicastAddr, System.Net.IPAddress localAddress);
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "De multicast <xref:System.Net.IPAddress>van de groep die u wilt toevoegen.</xref:System.Net.IPAddress>"
    - id: localAddress
      type: System.Net.IPAddress
      description: "De lokale <xref:System.Net.IPAddress>.</xref:System.Net.IPAddress>"
  overload: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De onderliggende <xref:System.Net.Sockets.Socket>is gesloten.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  id: MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Opgehaald of ingesteld een <xref:System.Boolean>waarde die aangeeft of uitgaande multicast-pakketten worden doorgegeven aan de betreffende toepassing.</xref:System.Boolean>"
  remarks: "Multicast is een schaalbare methode voor veel-op-veel-communicatie op het Internet. Als een proces is lid van een multicast-adres, wordt alle pakketten die worden verzonden door waarmee het proces worden ontvangen door elk proces dat is geabonneerd op het multicast-adres."
  example:
  - "The following code example shows the use of the MulticastLoopback property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#7](~/add/codesnippet/csharp/p-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#7](~/add/codesnippet/cpp/p-system.net.sockets.udp_2_1.cpp)]"
  syntax:
    content: public bool MulticastLoopback { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> ontvangt uitgaande multicastpakketten; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Net.Sockets.UdpClient.MulticastLoopback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  id: Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Retourneert een UDP-datagram dat is verzonden door een externe host."
  remarks: "De methode Receive wordt geblokkeerd tot een datagram vanaf een externe host ontvangen. Wanneer de gegevens beschikbaar is, wordt de methode Receive lezen van het eerste in de wachtrij-datagram en wordt het gedeelte met gegevens als een bytematrix retourneren. Deze methode vult de `remoteEP` parameter met de <xref:System.Net.IPAddress>en poortnummer van de afzender.</xref:System.Net.IPAddress>       Als u opgeeft dat een externe standaardhost in de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode datagrammen vanaf deze host alleen worden geaccepteerd door de methode Receive.</xref:System.Net.Sockets.UdpClient.Connect%2A> Alle andere datagrammen wordt dit genegeerd.       Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout.      > [!NOTE] > Niet aanroepen als u van plan bent voor het ontvangen van multicast-datagrammen, de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode voorafgaand aan het aanroepen van de methode Receive.</xref:System.Net.Sockets.UdpClient.Connect%2A> De <xref:System.Net.Sockets.UdpClient>u gebruiken voor het ontvangen van datagrammen moet worden gemaakt met het multicast-poortnummer.</xref:System.Net.Sockets.UdpClient>"
  example:
  - "The following example demonstrates the Receive method. The Receive method blocks execution until it receives a message. Using the <xref:System.Net.IPEndPoint> passed to Receive, the identity of the responding host is revealed.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/csharp/m-system.net.sockets.udp_5_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/cpp/m-system.net.sockets.udp_5_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#11](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_5_1.vb)]"
  syntax:
    content: public byte[] Receive (ref System.Net.IPEndPoint remoteEP);
    parameters:
    - id: remoteEP
      type: System.Net.IPEndPoint
      description: "Een <xref:System.Net.IPEndPoint>die staat voor de externe host van waaruit de gegevens zijn verzonden.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Byte[]
      description: "Een matrix van het type <xref:System.Byte>die datagram gegevens bevat.</xref:System.Byte>"
  overload: System.Net.Sockets.UdpClient.Receive*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De onderliggende <xref:System.Net.Sockets.Socket>is gesloten.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  id: ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Retourneert een UDP-datagram asynchroon die is verzonden door een externe host."
  remarks: "Deze bewerking wordt niet geblokkeerd. De geretourneerde <xref:System.Threading.Tasks.Task%601>> object voltooid nadat het UDP-pakket is ontvangen.</xref:System.Threading.Tasks.Task%601>       Als u opgeeft dat een externe standaardhost in de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode datagrammen vanaf deze host alleen worden geaccepteerd door deze methode.</xref:System.Net.Sockets.UdpClient.Connect%2A> Alle andere datagrammen wordt dit genegeerd.       Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout.      > [!WARNING] > Niet aanroepen als u van plan bent voor het ontvangen van multicast-datagrammen, de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode voordat u deze methode aanroept.</xref:System.Net.Sockets.UdpClient.Connect%2A> De <xref:System.Net.Sockets.UdpClient>u gebruiken voor het ontvangen van datagrammen moet worden gemaakt met het multicast-poortnummer.</xref:System.Net.Sockets.UdpClient>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult> ReceiveAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
      description: "Retourneert &lt;xref:System.Threading.Tasks.Task%601&gt;.       Het taakobject dat de asynchrone bewerking vertegenwoordigt."
  overload: System.Net.Sockets.UdpClient.ReceiveAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De onderliggende <xref:System.Net.Sockets.Socket>is gesloten.</xref:System.Net.Sockets.Socket>"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  id: Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Een UDP-datagram verzendt naar een externe host."
  remarks: "Deze overbelasting datagrammen verzendt naar de externe host tot stand gebracht in de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode en retourneert het aantal bytes verzonden.</xref:System.Net.Sockets.UdpClient.Connect%2A> Als u niet <xref:System.Net.Sockets.UdpClient.Connect%2A>voordat u deze overbelasting, de <xref:System.Net.Sockets.UdpClient.Send%2A>methode genereert een <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> aangeroepen</xref:System.Net.Sockets.UdpClient.Send%2A> </xref:System.Net.Sockets.UdpClient.Connect%2A> Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout.       Als u wilt datagrammen verzenden naar een andere externe host, moet u aanroepen de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode en geef de gewenste externe host.</xref:System.Net.Sockets.UdpClient.Connect%2A> Gebruik een van de andere <xref:System.Net.Sockets.UdpClient.Send%2A>methode overloads datagrammen verzenden naar een broadcast-adres.</xref:System.Net.Sockets.UdpClient.Send%2A>"
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. You must establish a default remote host prior to using this overload.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/csharp/m-system.net.sockets.udp_2_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/cpp/m-system.net.sockets.udp_2_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#10](~/add/codesnippet/visualbasic/m-system.net.sockets.udp_2_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "Een matrix van het type <xref:System.Byte>die aangeeft dat het UDP-datagram die u wilt verzenden, weergegeven als een matrix met bytes.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Het aantal bytes in het datagram."
    return:
      type: System.Int32
      description: "Het aantal bytes dat is verzonden."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> heeft al een externe standaardhost tot stand worden gebracht."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> is gesloten."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Een UDP-datagram verzendt naar de host op de opgegeven externe eindpunt."
  remarks: "De methode verzenden datagrammen verzendt naar het opgegeven eindpunt en retourneert het aantal bytes dat is verzonden. Voordat u deze overbelasting aanroept, moet u eerst maken een <xref:System.Net.IPEndPoint>met behulp van het aantal IP-adres en poort van de externe host waar uw datagrammen worden afgeleverd.</xref:System.Net.IPEndPoint> U kunt datagrammen verzenden naar het standaard broadcastadres 255.255.255.255, door te geven <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>voor de <xref:System.Net.IPAddress.Address%2A>eigenschap van het <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> </xref:System.Net.IPAddress.Address%2A> </xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> Nadat u dit hebt gemaakt <xref:System.Net.IPEndPoint>, doorgegeven aan de methode verzenden als de `endPoint` parameter.</xref:System.Net.IPEndPoint>       Als u datagrammen verzenden naar andere broadcastadres wilt, gebruikt u de <xref:System.Net.Sockets.UdpClient.Client%2A>methode verkrijgen van de onderliggende <xref:System.Net.Sockets.Socket>, en de optie socket voor <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> U kunt ook herstellen met behulp van de <xref:System.Net.Sockets.Socket>klasse.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Beschikken niet over een `endPoint` -parameter voor deze methode als u hebt al een externe host met de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode.</xref:System.Net.Sockets.UdpClient.Connect%2A> Als u dit doet, genereert de Send-methode een <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout."
  example:
  - "The following example demonstrates the Send method. This example uses an <xref:System.Net.IPEndPoint> to specify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/csharp/2c594ef1-b462-42a1-adc5-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/cpp/2c594ef1-b462-42a1-adc5-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#8](~/add/codesnippet/visualbasic/2c594ef1-b462-42a1-adc5-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "Een matrix van het type <xref:System.Byte>Hiermee worden de UDP-datagram die u verzenden wilt, weergegeven als een matrix met bytes.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Het aantal bytes in het datagram."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "Een <xref:System.Net.IPEndPoint>die staat voor de host en poort voor het verzenden van het datagram.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Int32
      description: "Het aantal bytes dat is verzonden."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>heeft al een externe standaardhost tot stand gebracht."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>is gesloten."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  id: Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Een UDP-datagram verzendt naar een opgegeven poort op een bepaalde externe host."
  remarks: "De <xref:System.Net.Sockets.UdpClient.Send%2A>methode datagrammen verzendt naar de opgegeven waarden van de `hostname` en `port` parameters en retourneert het aantal bytes verzonden.</xref:System.Net.Sockets.UdpClient.Send%2A> U kunt datagrammen naar het standaard broadcast-adres verzenden door te geven &quot;255.255.255.255&quot; voor de `hostname` parameterwaarde.       Als u datagrammen verzenden naar andere broadcastadres wilt, gebruikt u de <xref:System.Net.Sockets.UdpClient.Client%2A>methode verkrijgen van de onderliggende <xref:System.Net.Sockets.Socket>, en de optie socket voor <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> U kunt ook herstellen met behulp van de <xref:System.Net.Sockets.Socket>klasse.</xref:System.Net.Sockets.Socket>      > [!NOTE] > Niet bieden een hostnaam of poortnummer aan deze methode als u hebt al een externe host met de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode.</xref:System.Net.Sockets.UdpClient.Connect%2A> Als u dit doet, de <xref:System.Net.Sockets.UdpClient.Send%2A>methode genereert een <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpClient.Send%2A> Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout."
  example:
  - "The following example demonstrates the <xref:System.Net.Sockets.UdpClient.Send%2A> method. This example uses a host name and a port number to identify the target host.  \n  \n [!code-cs[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/csharp/5d28964f-8575-4595-a91e-_1.cs)]\n [!code-cpp[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/cpp/5d28964f-8575-4595-a91e-_1.cpp)]\n [!code-vb[Classic UdpClient.PublicMethodsAndPropertiesExample#9](~/add/codesnippet/visualbasic/5d28964f-8575-4595-a91e-_1.vb)]"
  syntax:
    content: public int Send (byte[] dgram, int bytes, string hostname, int port);
    parameters:
    - id: dgram
      type: System.Byte[]
      description: "Een matrix van het type <xref:System.Byte>die aangeeft dat het UDP-datagram die u wilt verzenden, weergegeven als een matrix met bytes.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Het aantal bytes in het datagram."
    - id: hostname
      type: System.String
      description: "De naam van de externe host waaraan u van plan bent het datagram verzenden."
    - id: port
      type: System.Int32
      description: "Het externe poortnummer waarmee u van plan bent om te communiceren."
    return:
      type: System.Int32
      description: "Het aantal bytes dat is verzonden."
  overload: System.Net.Sockets.UdpClient.Send*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> heeft al een externe standaardhost tot stand worden gebracht."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> is gesloten."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  id: SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Verzendt een UDP-datagram asynchroon naar een externe host."
  remarks: "Deze overbelasting datagrammen verzendt naar de externe host tot stand gebracht in de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode.</xref:System.Net.Sockets.UdpClient.Connect%2A> Als u niet <xref:System.Net.Sockets.UdpClient.Connect%2A>voordat u deze overbelasting, genereert de methode een <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> aanroepen</xref:System.Net.Sockets.UdpClient.Connect%2A> Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout.       Als u wilt datagrammen verzenden naar een andere externe host, moet u aanroepen de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode en geef de gewenste externe host.</xref:System.Net.Sockets.UdpClient.Connect%2A> Gebruik een van de andere <xref:System.Net.Sockets.UdpClient.SendAsync%2A>methode overloads datagrammen verzenden naar een broadcast-adres.</xref:System.Net.Sockets.UdpClient.SendAsync%2A>"
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Een matrix van het type <xref:System.Byte>die aangeeft dat het UDP-datagram die u wilt verzenden, weergegeven als een matrix met bytes.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Het aantal bytes in het datagram."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Retourneert &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> heeft al een externe standaardhost tot stand worden gebracht."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> is gesloten."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Verzendt een UDP-datagram asynchroon naar een externe host."
  remarks: "Deze methode verzendt datagrammen met het opgegeven eindpunt. Voordat u deze overbelasting aanroept, moet u eerst maken een <xref:System.Net.IPEndPoint>met behulp van het aantal IP-adres en poort van de externe host waar uw datagrammen worden afgeleverd.</xref:System.Net.IPEndPoint> U kunt datagrammen verzenden naar het standaard broadcastadres 255.255.255.255, door te geven <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>voor de <xref:System.Net.IPAddress.Address%2A>eigenschap van het <xref:System.Net.IPEndPoint>.</xref:System.Net.IPEndPoint> </xref:System.Net.IPAddress.Address%2A> </xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> Nadat u dit hebt gemaakt <xref:System.Net.IPEndPoint>, doorgegeven aan deze methode als het `endPoint` parameter.</xref:System.Net.IPEndPoint>       Als u datagrammen verzenden naar andere broadcastadres wilt, gebruikt u de <xref:System.Net.Sockets.UdpClient.Client%2A>methode verkrijgen van de onderliggende <xref:System.Net.Sockets.Socket>, en de optie socket voor <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> U kunt ook herstellen met behulp van de <xref:System.Net.Sockets.Socket>klasse.</xref:System.Net.Sockets.Socket>      > [!WARNING] > Beschikken niet over een `endPoint` -parameter voor deze methode als u hebt al een externe host met de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode.</xref:System.Net.Sockets.UdpClient.Connect%2A> Als u dit doet, genereert deze methode een <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout."
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, System.Net.IPEndPoint endPoint);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Een matrix van het type <xref:System.Byte>die aangeeft dat het UDP-datagram die u wilt verzenden, weergegeven als een matrix met bytes.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Het aantal bytes in het datagram."
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "Een <xref:System.Net.IPEndPoint>die staat voor de host en poort voor het verzenden van het datagram.</xref:System.Net.IPEndPoint>"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Retourneert &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>heeft al een externe standaardhost tot stand gebracht."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpClient&quot;></xref>is gesloten."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  id: SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Verzendt een UDP-datagram asynchroon naar een externe host."
  remarks: "Deze methode verzendt datagrammen naar de opgegeven waarden van de `hostname` en `port` parameters. U kunt datagrammen naar het standaard broadcast-adres verzenden door te geven &quot;255.255.255.255&quot; voor de `hostname` parameterwaarde.       Als u datagrammen verzenden naar andere broadcastadres wilt, gebruikt u de <xref:System.Net.Sockets.UdpClient.Client%2A>methode verkrijgen van de onderliggende <xref:System.Net.Sockets.Socket>, en de optie socket voor <xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName>.</xref:System.Net.Sockets.SocketOptionName?displayProperty=fullName> </xref:System.Net.Sockets.Socket> </xref:System.Net.Sockets.UdpClient.Client%2A> U kunt ook herstellen met behulp van de <xref:System.Net.Sockets.Socket>klasse.</xref:System.Net.Sockets.Socket>      > [!WARNING] > Niet bieden een hostnaam of poortnummer aan deze methode als u hebt al een externe host met de <xref:System.Net.Sockets.UdpClient.Connect%2A>methode.</xref:System.Net.Sockets.UdpClient.Connect%2A> Als u dit doet, genereert deze methode een <xref:System.Net.Sockets.SocketException>.</xref:System.Net.Sockets.SocketException> Als u krijgt een <xref:System.Net.Sockets.SocketException>, gebruik <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName>om op te halen van de specifieke foutcode.</xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> </xref:System.Net.Sockets.SocketException> Zodra u deze code hebt ontvangen, kunt u verwijzen naar de Windows Sockets versie 2 API fout code-documentatie in MSDN voor een gedetailleerde beschrijving van de fout."
  syntax:
    content: public System.Threading.Tasks.Task<int> SendAsync (byte[] datagram, int bytes, string hostname, int port);
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "Een matrix van het type <xref:System.Byte>die aangeeft dat het UDP-datagram die u wilt verzenden, weergegeven als een matrix met bytes.</xref:System.Byte>"
    - id: bytes
      type: System.Int32
      description: "Het aantal bytes in het datagram."
    - id: hostname
      type: System.String
      description: "De naam van de externe host waaraan u van plan bent het datagram verzenden."
    - id: port
      type: System.Int32
      description: "Het externe poortnummer waarmee u van plan bent om te communiceren."
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "Retourneert &lt;xref:System.Threading.Tasks.Task%601&gt;."
  overload: System.Net.Sockets.UdpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dgram</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "De <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> heeft al een externe standaardhost tot stand worden gebracht."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "De <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref> is gesloten."
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Er is een fout opgetreden bij het openen van de socket. Zie de sectie met opmerkingen voor meer informatie."
  platform:
  - net462
- uid: System.Net.Sockets.UdpClient.Ttl
  id: Ttl
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
  type: Property
  assemblies:
  - System
  namespace: System.Net.Sockets
  summary: "Opgehaald of ingesteld van een waarde die de waarde voor Live (TTL) IP (Internet Protocol)-pakketten die zijn verzonden bepaalt door de <xref href=&quot;System.Net.Sockets.UdpClient&quot;> </xref>."
  remarks: "De TTL-waarde geeft aan dat het maximum aantal routers een pakket doorlopen kunt voordat de router wordt genegeerd voor het pakket en een Internet Control Message Protocol (ICMP) &quot;TTL overschreden&quot; foutbericht wordt geretourneerd naar de afzender."
  example:
  - "The following code example shows the use of the Ttl property.  \n  \n [!code-cs[System.Net.Sockets.UdpClient#5](~/add/codesnippet/csharp/p-system.net.sockets.udp_6_1.cs)]\n [!code-cpp[System.Net.Sockets.UdpClient#5](~/add/codesnippet/cpp/p-system.net.sockets.udp_6_1.cpp)]"
  syntax:
    content: public short Ttl { get; set; }
    return:
      type: System.Int16
      description: "De TTL-waarde."
  overload: System.Net.Sockets.UdpClient.Ttl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Net.Sockets.SocketException
  isExternal: true
  name: System.Net.Sockets.SocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.Sockets.UdpClient.#ctor
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient()
  nameWithType: UdpClient.UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32)
  nameWithType: UdpClient.UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(IPEndPoint)
  nameWithType: UdpClient.UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(IPEndPoint)
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(AddressFamily)
  nameWithType: UdpClient.UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(AddressFamily)
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: true
  name: AddressFamily
  nameWithType: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(Int32,AddressFamily)
  nameWithType: UdpClient.UdpClient(Int32,AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(Int32,AddressFamily)
- uid: System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient(String,Int32)
  nameWithType: UdpClient.UdpClient(String,Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(String,Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Sockets.UdpClient.Active
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
  fullName: System.Net.Sockets.UdpClient.Active
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal(Boolean)
  nameWithType: UdpClient.AllowNatTraversal(Boolean)
  fullName: System.Net.Sockets.UdpClient.AllowNatTraversal(Boolean)
- uid: System.Net.Sockets.UdpClient.Available
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
  fullName: System.Net.Sockets.UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive(AsyncCallback,Object)
  nameWithType: UdpClient.BeginReceive(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginReceive(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,IPEndPoint,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  nameWithType: UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpClient.BeginSend(Byte[],Int32,String,Int32,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpClient.Client
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
  fullName: System.Net.Sockets.UdpClient.Client
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: true
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.UdpClient.Close
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close()
  nameWithType: UdpClient.Close()
  fullName: System.Net.Sockets.UdpClient.Close()
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPEndPoint)
  nameWithType: UdpClient.Connect(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Connect(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(IPAddress,Int32)
  nameWithType: UdpClient.Connect(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(IPAddress,Int32)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect(String,Int32)
  nameWithType: UdpClient.Connect(String,Int32)
  fullName: System.Net.Sockets.UdpClient.Connect(String,Int32)
- uid: System.Net.Sockets.UdpClient.Dispose
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose()
  nameWithType: UdpClient.Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: UdpClient.Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(Boolean)
- uid: System.Net.Sockets.UdpClient.DontFragment
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.DropMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive(IAsyncResult,IPEndPoint)
  nameWithType: UdpClient.EndReceive(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.EndReceive(IAsyncResult,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend(IAsyncResult)
  nameWithType: UdpClient.EndSend(IAsyncResult)
  fullName: System.Net.Sockets.UdpClient.EndSend(IAsyncResult)
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(Int32,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(Int32,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(Int32,IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,Int32)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,Int32)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup(IPAddress,IPAddress)
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(IPAddress,IPAddress)
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive(IPEndPoint)
  nameWithType: UdpClient.Receive(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Receive(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync()
  nameWithType: UdpClient.ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
- uid: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<UdpReceiveResult>
  nameWithType: Task<UdpReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Sockets.UdpReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    nameWithType: UdpReceiveResult
    fullName: UdpReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32)
  nameWithType: UdpClient.Send(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.Send(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.Send(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.Send(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,IPEndPoint)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync(Byte[],Int32,String,Int32)
  nameWithType: UdpClient.SendAsync(Byte[],Int32,String,Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(Byte[],Int32,String,Int32)
- uid: System.Net.Sockets.UdpClient.Ttl
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Net.Sockets.UdpClient.#ctor*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: UdpClient
  nameWithType: UdpClient.UdpClient
- uid: System.Net.Sockets.UdpClient.Active*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Active
  nameWithType: UdpClient.Active
- uid: System.Net.Sockets.UdpClient.AllowNatTraversal*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: AllowNatTraversal
  nameWithType: UdpClient.AllowNatTraversal
- uid: System.Net.Sockets.UdpClient.Available*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Available
  nameWithType: UdpClient.Available
- uid: System.Net.Sockets.UdpClient.BeginReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginReceive
  nameWithType: UdpClient.BeginReceive
- uid: System.Net.Sockets.UdpClient.BeginSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: BeginSend
  nameWithType: UdpClient.BeginSend
- uid: System.Net.Sockets.UdpClient.Client*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Client
  nameWithType: UdpClient.Client
- uid: System.Net.Sockets.UdpClient.Close*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Close
  nameWithType: UdpClient.Close
- uid: System.Net.Sockets.UdpClient.Connect*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Connect
  nameWithType: UdpClient.Connect
- uid: System.Net.Sockets.UdpClient.Dispose*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Dispose
  nameWithType: UdpClient.Dispose
- uid: System.Net.Sockets.UdpClient.DontFragment*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DontFragment
  nameWithType: UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: DropMulticastGroup
  nameWithType: UdpClient.DropMulticastGroup
- uid: System.Net.Sockets.UdpClient.EnableBroadcast*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EnableBroadcast
  nameWithType: UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.EndReceive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndReceive
  nameWithType: UdpClient.EndReceive
- uid: System.Net.Sockets.UdpClient.EndSend*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: EndSend
  nameWithType: UdpClient.EndSend
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ExclusiveAddressUse
  nameWithType: UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: JoinMulticastGroup
  nameWithType: UdpClient.JoinMulticastGroup
- uid: System.Net.Sockets.UdpClient.MulticastLoopback*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Receive*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Receive
  nameWithType: UdpClient.Receive
- uid: System.Net.Sockets.UdpClient.ReceiveAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: ReceiveAsync
  nameWithType: UdpClient.ReceiveAsync
- uid: System.Net.Sockets.UdpClient.Send*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Send
  nameWithType: UdpClient.Send
- uid: System.Net.Sockets.UdpClient.SendAsync*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: SendAsync
  nameWithType: UdpClient.SendAsync
- uid: System.Net.Sockets.UdpClient.Ttl*
  parent: System.Net.Sockets.UdpClient
  isExternal: false
  name: Ttl
  nameWithType: UdpClient.Ttl
