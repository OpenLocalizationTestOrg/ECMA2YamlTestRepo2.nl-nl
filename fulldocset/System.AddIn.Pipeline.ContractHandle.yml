### YamlMime:ManagedReference
items:
- uid: System.AddIn.Pipeline.ContractHandle
  id: ContractHandle
  children:
  - System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)
  - System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)
  - System.AddIn.Pipeline.ContractHandle.Contract
  - System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  - System.AddIn.Pipeline.ContractHandle.Dispose
  - System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)
  - System.AddIn.Pipeline.ContractHandle.Finalize
  langs:
  - csharp
  name: ContractHandle
  nameWithType: ContractHandle
  fullName: System.AddIn.Pipeline.ContractHandle
  type: Class
  summary: "Biedt methoden waarmee de levensduur van een invoegtoepassing."
  remarks: "Omdat het model-invoegtoepassing de mogelijkheid voor invoegtoepassingen biedt voor de communicatie tussen toepassingsdomeinen en tussen processen, vertrouwen niet het op de garbage collector om deze vrij te maken. Deze klasse biedt een mechanisme voor de invoegtoepassing tellen door het verkrijgen van een van levensduurtoken dat het contract verwijzing.       Als een object ContractHandle is samengesteld, roept de <xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A>methode voor het contract dat is doorgegeven aan de constructor.</xref:System.AddIn.Pipeline.ContractBase.AcquireLifetimeToken%2A> Wanneer het ContractHandle-object is verwijderd of voltooid is, ontvangt de <xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A>methode voor het contract, waarmee de blokkering voor het contract wordt verwijderd.</xref:System.AddIn.Pipeline.ContractBase.RevokeLifetimeToken%2A>       Adapters het contract is ge√Ømplementeerd. De klasse ContractHandle is ontworpen om te worden gebruikt in een adapter contract te bekijken om te beheren van de levensduur van het contract dat is wordt aangepast pipeline-ontwikkelaars. Normaal gesproken een exemplaar van deze klasse is gemaakt tijdens het samenstellen van de adapterklasse en wordt opgeslagen in een exemplaarveld van de adapter. Wanneer de adapterklasse die door de garbage collector zijn verzameld, wordt het object ContractHandle ook worden verzameld en het object ContractHandle zal de levensduurtoken op het contract intrekken.       Het verdient aanbeveling dat uw weergave naar contract adapters van de <xref:System.AddIn.Pipeline.ContractBase>klasse overneemt.</xref:System.AddIn.Pipeline.ContractBase> U kunt een standaardimplementatie voor de leden van <xref:System.AddIn.Contract.IContract>, wat betekent dat u wilt implementeren, alleen de leden van uw specifieke contract.</xref:System.AddIn.Contract.IContract>"
  example:
  - "The following example shows how to set the lifetime token handle in a contract-to-view adapter on the add-in side of a pipeline.  \n  \n [!code-vb[AddinP2HostSideAdapters#2](~/add/codesnippet/visualbasic/Calc2HostSideAdapter/Calc2ContractToViewHostSideAdapter.vb#2)]\n [!code-cs[AddinP2HostSideAdapters#2](~/add/codesnippet/csharp/Calc2HostSideAdapter/Calc2ContractToViewHostSideAdapter.cs#2)]"
  syntax:
    content: 'public class ContractHandle : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)
  id: '#ctor(System.AddIn.Contract.IContract)'
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: ContractHandle(IContract)
  nameWithType: ContractHandle.ContractHandle(IContract)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractHandle(IContract)
  type: Constructor
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.AddIn.Pipeline.ContractHandle&quot;> </xref> klasse."
  syntax:
    content: public ContractHandle (System.AddIn.Contract.IContract contract);
    parameters:
    - id: contract
      type: System.AddIn.Contract.IContract
      description: "Het servicecontract voor gebruik in de pijplijn."
  overload: System.AddIn.Pipeline.ContractHandle.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>contract</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)
  id: AppDomainOwner(System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: AppDomainOwner(AppDomain)
  nameWithType: ContractHandle.AppDomainOwner(AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(AppDomain)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Hiermee haalt u het exemplaar van de add-in-side &quot;-adapter tijdens het maken van het toepassingsdomein."
  remarks: "De add-in-side &quot;-adapters worden getypt als <xref:System.AddIn.Contract.IContract>.</xref:System.AddIn.Contract.IContract>       Als het toepassingsdomein is eerder is gemaakt door een gebruiker, is er geen eigenaar."
  syntax:
    content: public static System.AddIn.Contract.IContract AppDomainOwner (AppDomain domain);
    parameters:
    - id: domain
      type: System.AppDomain
      description: "Het toepassingsdomein om te controleren."
    return:
      type: System.AddIn.Contract.IContract
      description: "Een <xref href=&quot;System.AddIn.Contract.IContract&quot;> </xref> -object met de eigenaar van het toepassingsdomein."
  overload: System.AddIn.Pipeline.ContractHandle.AppDomainOwner*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>domain</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Contract
  id: Contract
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Contract
  nameWithType: ContractHandle.Contract
  fullName: System.AddIn.Pipeline.ContractHandle.Contract
  type: Property
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Hiermee haalt u de opdracht die wordt gebruikt door een pijplijn."
  syntax:
    content: public System.AddIn.Contract.IContract Contract { get; }
    return:
      type: System.AddIn.Contract.IContract
      description: "Het contract, die is afgeleid van <xref href=&quot;System.AddIn.Contract.IContract&quot;> </xref>."
  overload: System.AddIn.Pipeline.ContractHandle.Contract*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  id: ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: ContractOwnsAppDomain(IContract,AppDomain)
  nameWithType: ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Hiermee wordt bepaald of een toepassingsdomein is eigendom van het opgegeven contract."
  syntax:
    content: public static bool ContractOwnsAppDomain (System.AddIn.Contract.IContract contract, AppDomain domain);
    parameters:
    - id: contract
      type: System.AddIn.Contract.IContract
      description: "Het contract om te controleren."
    - id: domain
      type: System.AppDomain
      description: "Het toepassingsdomein om te controleren."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als het contract eigenaar is van het toepassingsdomein; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>contract</code>or <code>domain</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Dispose
  id: Dispose
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Dispose()
  nameWithType: ContractHandle.Dispose()
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose()
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Hiermee wordt de levensduurtoken voor een contract, ongeacht de invoer ingetrokken."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.AddIn.Pipeline.ContractHandle.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ContractHandle.Dispose(Boolean)
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose(Boolean)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "De levensduurtoken op de overeenkomst ongeacht invoer trekt en eventueel versies van de beheerde bronnen."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>voor het vrijgeven van zowel beheerde als onbeheerde hulpbronnen; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> om alleen niet-beheerde bronnen vrij te geven."
  overload: System.AddIn.Pipeline.ContractHandle.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.ContractHandle.Finalize
  id: Finalize
  parent: System.AddIn.Pipeline.ContractHandle
  langs:
  - csharp
  name: Finalize()
  nameWithType: ContractHandle.Finalize()
  fullName: System.AddIn.Pipeline.ContractHandle.Finalize()
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: "Versies van de resources die zijn gekoppeld aan de <xref href=&quot;System.AddIn.Pipeline.ContractHandle&quot;> </xref> exemplaar."
  remarks: "Deze methode overschrijft <xref:System.Object.Finalize%2A?displayProperty=fullName>.</xref:System.Object.Finalize%2A?displayProperty=fullName> Toepassingscode moet niet aanroepen voor deze methode; de methode Finalize van een object wordt automatisch geactiveerd tijdens garbagecollection, tenzij voltooiing door de garbage collector is uitgeschakeld door een aanroep naar de <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>methode.</xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>       Als deze wordt aangeroepen door de garbage collector, wordt deze methode roept de <xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29>methode.</xref:System.AddIn.Pipeline.ContractHandle.Dispose%28System.Boolean%29>"
  syntax:
    content: ~ContractHandle ();
    parameters: []
  overload: System.AddIn.Pipeline.ContractHandle.Finalize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.AddIn.Pipeline.ContractHandle.#ctor(System.AddIn.Contract.IContract)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractHandle(IContract)
  nameWithType: ContractHandle.ContractHandle(IContract)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractHandle(IContract)
- uid: System.AddIn.Contract.IContract
  parent: System.AddIn.Contract
  isExternal: false
  name: IContract
  nameWithType: IContract
  fullName: System.AddIn.Contract.IContract
- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: AppDomainOwner(AppDomain)
  nameWithType: ContractHandle.AppDomainOwner(AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.AppDomainOwner(AppDomain)
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.AddIn.Pipeline.ContractHandle.Contract
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Contract
  nameWithType: ContractHandle.Contract
  fullName: System.AddIn.Pipeline.ContractHandle.Contract
- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(System.AddIn.Contract.IContract,System.AppDomain)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractOwnsAppDomain(IContract,AppDomain)
  nameWithType: ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
  fullName: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain(IContract,AppDomain)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.AddIn.Pipeline.ContractHandle.Dispose
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Dispose()
  nameWithType: ContractHandle.Dispose()
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose()
- uid: System.AddIn.Pipeline.ContractHandle.Dispose(System.Boolean)
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ContractHandle.Dispose(Boolean)
  fullName: System.AddIn.Pipeline.ContractHandle.Dispose(Boolean)
- uid: System.AddIn.Pipeline.ContractHandle.Finalize
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Finalize()
  nameWithType: ContractHandle.Finalize()
  fullName: System.AddIn.Pipeline.ContractHandle.Finalize()
- uid: System.AddIn.Pipeline.ContractHandle.#ctor*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractHandle
  nameWithType: ContractHandle.ContractHandle
- uid: System.AddIn.Pipeline.ContractHandle.AppDomainOwner*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: AppDomainOwner
  nameWithType: ContractHandle.AppDomainOwner
- uid: System.AddIn.Pipeline.ContractHandle.Contract*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Contract
  nameWithType: ContractHandle.Contract
- uid: System.AddIn.Pipeline.ContractHandle.ContractOwnsAppDomain*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: ContractOwnsAppDomain
  nameWithType: ContractHandle.ContractOwnsAppDomain
- uid: System.AddIn.Pipeline.ContractHandle.Dispose*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Dispose
  nameWithType: ContractHandle.Dispose
- uid: System.AddIn.Pipeline.ContractHandle.Finalize*
  parent: System.AddIn.Pipeline.ContractHandle
  isExternal: false
  name: Finalize
  nameWithType: ContractHandle.Finalize
