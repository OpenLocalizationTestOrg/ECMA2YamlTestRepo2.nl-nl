### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Interaction
  id: Interaction
  children:
  - Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)
  - Microsoft.VisualBasic.Interaction.AppActivate(System.String)
  - Microsoft.VisualBasic.Interaction.Beep
  - Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  - Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])
  - Microsoft.VisualBasic.Interaction.Command
  - Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)
  - Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)
  - Microsoft.VisualBasic.Interaction.Environ(System.Int32)
  - Microsoft.VisualBasic.Interaction.Environ(System.String)
  - Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)
  - Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)
  - Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)
  - Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)
  - Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  - Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  - Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)
  - Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  - Microsoft.VisualBasic.Interaction.Switch(System.Object[])
  langs:
  - csharp
  name: Interaction
  nameWithType: Interaction
  fullName: Microsoft.VisualBasic.Interaction
  type: Class
  summary: "De <xref uid=&quot;langword_csharp_Interaction&quot; name=&quot;Interaction&quot; href=&quot;&quot;> </xref> -module bevat procedures voor het communiceren met objecten, toepassingen en systemen."
  remarks: "Deze module biedt ondersteuning voor de Visual Basic-taal sleutelwoorden en run-time-bibliotheek-leden die programma&quot;s uitvoeren, aanroepen van een methode of eigenschap geluid een signaal van de computer, een opdrachtregeltekenreeks te bieden, manipuleren van COM-objecten en dialoogvensters beheren."
  example:
  - "The following example uses the `Shell` function to run an application specified by the user. Specifying <xref:Microsoft.VisualBasic.AppWinStyle?displayProperty=fullName> as the second argument opens the application in normal size and gives it the focus.  \n  \n```  \nDim procID As Integer  \n' Run calculator.  \nprocID = Shell(\"C:\\Windows\\system32\\calc.exe\", AppWinStyle.NormalFocus)  \n' The preceding path is for Windows XP.  \n' The Windows 2000 path is C:\\WINNT\\system32\\calc.exe.  \n```"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Interaction
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)
  id: AppActivate(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: AppActivate(Int32)
  nameWithType: Interaction.AppActivate(Int32)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Hiermee activeert u een toepassing die al wordt uitgevoerd."
  remarks: "U gebruikt `AppActivate` brengt het actieve venster van de toepassing onder focus. U mogelijk niet een greep of een verwijzing naar het actieve venster, of zelfs weten welk venster actief is op een bepaald moment. In dat geval moet u geen gebruiken de <xref:System.Windows.Forms.Control.Focus%2A>methode.</xref:System.Windows.Forms.Control.Focus%2A>       De `AppActivate` functie de focus wordt gewijzigd in de toepassing met de naam of het venster, maar heeft geen invloed op of dit is gemaximaliseerd of geminimaliseerd. De focus verplaatst van het toepassingsvenster geactiveerde wanneer de gebruiker wordt een bepaalde actie de focus wijzigen of sluit het venster. U kunt de `Shell` functie voor het starten van een toepassing en de vensterstijl ingesteld.       Als u de `Title` parameter `AppActivate` maakt gebruik van een niet-hoofdlettergevoelige vergelijking, maar anders vereist een exacte overeenkomst met de inhoud van de titelbalk. Het lijkt eerst via de windows op het hoogste niveau en vervolgens via de onderliggende vensters. Als er geen een overeenkomst is gevonden, genereert het een <xref:System.ArgumentException>.</xref:System.ArgumentException>       U kunt `AppActivate` alleen aan processen die eigenaar zijn van windows. De meeste consoletoepassingen windows, wat betekent dat ze niet worden weergegeven in de lijst met die processen geen eigenaar `AppActivate` zoekopdrachten. Wanneer vanuit een consoletoepassing die wordt uitgevoerd, wordt het systeem een afzonderlijk proces voor het uitvoeren van de toepassing wordt gemaakt en wordt de uitvoer geretourneerd naar de consoleproces. Dus als u het huidige proces-ID aanvraagt, krijgt u de proces-ID van dit proces voor afzonderlijke, in plaats van de consoletoepassing proces-ID.       Tijdens runtime, de `AppActivate` functie wordt geactiveerd voor elke toepassing uitgevoerd met een titel die overeenkomt met `Title` of met de proces-ID die overeenkomt met `ProcessId`. Als er geen exacte overeenkomst, wordt elke toepassing waarvan tekenreeks titel eindigt op geactiveerd `Title`. Als er meer dan één toepassing met de naam is `Title`, wordt de `AppActivate` functie kiest willekeurig een om te activeren.      > [!NOTE] > De `AppActivate` functie vereist `UIPermission` op de <xref:System.Security.Permissions.UIPermissionWindow>niveau kan invloed hebben op de uitvoering in situaties gedeeltelijk vertrouwde.</xref:System.Security.Permissions.UIPermissionWindow> Zie voor meer informatie <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example illustrates various uses of the `AppActivate` function to activate an application window. If a Notepad process is not running, the example throws an <xref:System.ArgumentException>. The `Shell` procedure assumes the applications are in the paths specified.  \n  \n [!code-vb[VbVbalrCatRef#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._135_1.vb)]"
  syntax:
    content: public static void AppActivate (int ProcessId);
    parameters:
    - id: ProcessId
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>de Win32 proces-ID-nummer toegewezen aan dit proces opgeven. U kunt de ID die is geretourneerd door de <xref:Microsoft.VisualBasic.Interaction.Shell*>, mits het is niet nul.</xref:Microsoft.VisualBasic.Interaction.Shell*>"
  overload: Microsoft.VisualBasic.Interaction.AppActivate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.String)
  id: AppActivate(System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: AppActivate(String)
  nameWithType: Interaction.AppActivate(String)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Hiermee activeert u een toepassing die al wordt uitgevoerd."
  remarks: "U gebruikt `AppActivate` brengt het actieve venster van de toepassing onder focus. U mogelijk niet een greep of een verwijzing naar het actieve venster, of zelfs weten welk venster actief is op een bepaald moment. In dat geval moet u geen gebruiken de <xref:System.Windows.Forms.Control.Focus%2A>methode.</xref:System.Windows.Forms.Control.Focus%2A>       De `AppActivate` functie de focus wordt gewijzigd in de toepassing met de naam of het venster, maar heeft geen invloed op of dit is gemaximaliseerd of geminimaliseerd. De focus verplaatst van het toepassingsvenster geactiveerde wanneer de gebruiker wordt een bepaalde actie de focus wijzigen of sluit het venster. U kunt de `Shell` functie voor het starten van een toepassing en de vensterstijl ingesteld.       Als u de `Title` parameter `AppActivate` maakt gebruik van een niet-hoofdlettergevoelige vergelijking, maar anders vereist een exacte overeenkomst met de inhoud van de titelbalk. Het lijkt eerst via de windows op het hoogste niveau en vervolgens via de onderliggende vensters. Als er geen een overeenkomst is gevonden, genereert het een <xref:System.ArgumentException>.</xref:System.ArgumentException>       U kunt `AppActivate` alleen aan processen die eigenaar zijn van windows. De meeste consoletoepassingen windows, wat betekent dat ze niet worden weergegeven in de lijst met die processen geen eigenaar `AppActivate` zoekopdrachten. Wanneer vanuit een consoletoepassing die wordt uitgevoerd, wordt het systeem een afzonderlijk proces voor het uitvoeren van de toepassing wordt gemaakt en wordt de uitvoer geretourneerd naar de consoleproces. Dus als u het huidige proces-ID aanvraagt, krijgt u de proces-ID van dit proces voor afzonderlijke, in plaats van de consoletoepassing proces-ID.       Tijdens runtime, de `AppActivate` functie wordt geactiveerd voor elke toepassing uitgevoerd met een titel die overeenkomt met `Title` of met de proces-ID die overeenkomt met `ProcessId`. Als er geen exacte overeenkomst, wordt elke toepassing waarvan tekenreeks titel eindigt op geactiveerd `Title`. Als er meer dan één toepassing met de naam is `Title`, wordt de `AppActivate` functie kiest willekeurig een om te activeren.      > [!NOTE] > De `AppActivate` functie vereist `UIPermission` op de <xref:System.Security.Permissions.UIPermissionWindow>niveau kan invloed hebben op de uitvoering in situaties gedeeltelijk vertrouwde.</xref:System.Security.Permissions.UIPermissionWindow> Zie voor meer informatie <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example illustrates various uses of the `AppActivate` function to activate an application window. If a Notepad process is not running, the example throws an <xref:System.ArgumentException>. The `Shell` procedure assumes the applications are in the paths specified.  \n  \n [!code-vb[VbVbalrCatRef#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._229_1.vb)]"
  syntax:
    content: public static void AppActivate (string Title);
    parameters:
    - id: Title
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>de expressie voor het opgeven van de titel in de titelbalk van de toepassing die u wilt activeren. U kunt de titel aan de toepassing wordt toegewezen wanneer deze is gestart."
  overload: Microsoft.VisualBasic.Interaction.AppActivate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Beep
  id: Beep
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Beep()
  nameWithType: Interaction.Beep()
  fullName: Microsoft.VisualBasic.Interaction.Beep()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Klinkt een toon via spreker van de computer."
  remarks: "De presentatie en de duur van het geluid afhankelijk zijn van uw hardware en software en daarom variëren tussen computers.      > [!NOTE] > De `Beep` functie vereist `UIPermission` op de <xref:System.Security.Permissions.UIPermissionWindow>niveau kan invloed hebben op de uitvoering in situaties gedeeltelijk vertrouwde.</xref:System.Security.Permissions.UIPermissionWindow> Zie voor meer informatie <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example uses the `Beep` function to sound a tone through the computer's speaker.  \n  \n [!code-vb[VbVbalrCatRef#59](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._129_1.vb)]"
  syntax:
    content: public static void Beep ();
    parameters: []
  overload: Microsoft.VisualBasic.Interaction.Beep*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  id: CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: CallByName(Object,String,CallType,Object[])
  nameWithType: Interaction.CallByName(Object,String,CallType,Object[])
  fullName: Microsoft.VisualBasic.Interaction.CallByName(Object,String,CallType,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Een methode uitvoeren op een object of ingesteld of een eigenschap voor een object geretourneerd."
  remarks: "De `CallByName` functie tijdens runtime wordt gebruikt om een eigenschap ophalen, een eigenschap instellen of een methode worden aangeroepen."
  example:
  - "In the following example, the first line uses `CallByName` to set the `Text` property of a text box, the second line retrieves the value of the `Text` property, and the third line invokes the `Move` method to move the text box.  \n  \n [!code-vb[VbVbalrFunctions#99](~/add/codesnippet/visualbasic/4d9384f0-535e-442c-920a-_1.vb)]  \n  \n [!code-vb[VbVbalrFunctions#20](~/add/codesnippet/visualbasic/4d9384f0-535e-442c-920a-_2.vb)]  \n  \n The next example uses the `CallByName` function to invoke the `Add` and `Item` methods of a collection object.  \n  \n [!code-vb[VbVbalrFunctions#21](~/add/codesnippet/visualbasic/4d9384f0-535e-442c-920a-_3.vb)]"
  syntax:
    content: public static object CallByName (object ObjectRef, string ProcName, Microsoft.VisualBasic.CallType UseCallType, object[] Args);
    parameters:
    - id: ObjectRef
      type: System.Object
      description: "Vereist. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. Een verwijzing naar het object dat de eigenschap of methode."
    - id: ProcName
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Een tekenreeksexpressie met de naam van de eigenschap of methode op het object."
    - id: UseCallType
      type: Microsoft.VisualBasic.CallType
      description: "Vereist. Een inventarisatielid van het type <xref href=&quot;Microsoft.VisualBasic.CallType&quot;> </xref> die het type van de procedure wordt aangeroepen. The value of <xref uid=&quot;langword_csharp_CallType&quot; name=&quot;CallType&quot; href=&quot;&quot;></xref> can be <xref uid=&quot;langword_csharp_Method&quot; name=&quot;Method&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Get&quot; name=&quot;Get&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Set&quot; name=&quot;Set&quot; href=&quot;&quot;></xref>."
    - id: Args
      type: System.Object[]
      description: "Optioneel. <xref uid=&quot;langword_csharp_ParamArray&quot; name=&quot;ParamArray&quot; href=&quot;&quot;></xref>. Een een parametermatrix met de argumenten worden doorgegeven aan de eigenschap of methode wordt aangeroepen."
    return:
      type: System.Object
      description: "Een methode uitvoeren op een object of ingesteld of een eigenschap voor een object geretourneerd."
  overload: Microsoft.VisualBasic.Interaction.CallByName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Invalid <code>UseCallType</code> value; must be <xref uid=&quot;langword_csharp_Method&quot; name=&quot;Method&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_Get&quot; name=&quot;Get&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Set&quot; name=&quot;Set&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])
  id: Choose(System.Double,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Choose(Double,Object[])
  nameWithType: Interaction.Choose(Double,Object[])
  fullName: Microsoft.VisualBasic.Interaction.Choose(Double,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Selecteert en retourneert een waarde uit een lijst met argumenten."
  remarks: "De `Choose` functie retourneert een lid van de lijst doorgegeven `Choice()`, op basis van de waarde van `Index`. Het eerste lid van de lijst is geselecteerd als `Index` is 1. Het laatste lid van de lijst is geselecteerd als `Index` is `UBound`(`Choice()`). Als `Index` is buiten deze grenzen `Choose` retourneert `Nothing`.       Als `Index` is niet een geheel getal is, wordt het afgerond op het dichtstbijzijnde gehele getal voordat het wordt geëvalueerd.       U kunt `Choose` opzoeken van een waarde in een lijst met mogelijkheden.      > [!NOTE] > De expressies in de lijst met argumenten kunnen functieaanroepen bevatten. Als onderdeel van het voorbereiden van de lijst met argumenten voor de aanroep van `Choose`, de Visual Basic compiler elke functie aanroept in elke expressie. Dit betekent dat u niet op een specifieke functie die niet wordt aangeroepen vertrouwen als een andere expressie wordt geselecteerd door `Index`."
  example:
  - "This example uses the `Choose` function to display a name in response to an index passed into the procedure in the `Ind` parameter.  \n  \n [!code-vb[VbVbalrFunctions#22](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._248_1.vb)]"
  syntax:
    content: public static object Choose (double Index, object[] Choice);
    parameters:
    - id: Index
      type: System.Double
      description: "Vereist. <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>. Numerieke expressie in een waarde tussen 1 en het aantal elementen resulteert doorgegeven de `Choice` argument."
    - id: Choice
      type: System.Object[]
      description: "Vereist. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>de parametermatrix. U kunt één variabele of een expressie die wordt geëvalueerd naar opgeven de <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> gegevenstype naar een lijst met <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> variabelen of expressies gescheiden door komma&quot;s of naar een eendimensionale matrix van <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> elementen."
    return:
      type: System.Object
      description: "Selecteert en retourneert een waarde uit een lijst met argumenten."
  overload: Microsoft.VisualBasic.Interaction.Choose*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Command
  id: Command
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Command()
  nameWithType: Interaction.Command()
  fullName: Microsoft.VisualBasic.Interaction.Command()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert het argumentgedeelte van de opdrachtregel die wordt gebruikt voor het starten van de Visual Basic of een uitvoerbaar programma ontwikkeld met Visual Basic. De <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> functie biedt meer productiviteit en prestaties dan de <xref uid=&quot;langword_csharp_Command &quot; name=&quot;Command &quot; href=&quot;&quot;> </xref>functie. Zie voor meer informatie <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>.</xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>"
  remarks: "Nadat de argumenten zijn geretourneerd, kunt u zoeken naar algemene scheidingstekens, zoals spaties, voorwaarts of achterwaarts slashes, streepjes of aanhalingstekens, om te splitsen of de tekenreeks voor de afzonderlijke parameters zoeken.       Voor toepassingen die zijn ontwikkeld met Visual Basic en gecompileerd naar een .exe-bestand, de `Command` functie retourneert geen argumenten die worden weergegeven na de naam van de toepassing op de opdrachtregel, in dit formulier: `MyApp(cmdlineargs)`."
  example:
  - "This example uses the `Command` function to return the command-line arguments in an object that contains an array.  \n  \n [!code-vb[VbVbalrCatRef#58](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._185_1.vb)]"
  syntax:
    content: public static string Command ();
    parameters: []
    return:
      type: System.String
      description: "Retourneert het argumentgedeelte van de opdrachtregel die wordt gebruikt voor het starten van de Visual Basic of een uitvoerbaar programma ontwikkeld met Visual Basic.       De <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> functie biedt meer productiviteit en prestaties dan de <xref uid=&quot;langword_csharp_Command &quot; name=&quot;Command &quot; href=&quot;&quot;> </xref>functie. Zie voor meer informatie <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>.</xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs*>"
  overload: Microsoft.VisualBasic.Interaction.Command*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)
  id: CreateObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: CreateObject(String,String)
  nameWithType: Interaction.CreateObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.CreateObject(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Maakt en retourneert een verwijzing naar een COM-object. <xref uid=&quot;langword_csharp_CreateObject&quot; name=&quot;CreateObject&quot; href=&quot;&quot;></xref>kan niet worden gebruikt voor het maken van exemplaren van klassen in Visual Basic, tenzij deze klassen expliciet beschikbaar worden gesteld als COM-onderdelen."
  remarks: "To create an instance of a COM component, assign the object returned by `CreateObject` to an object variable:  \n  \n```vb#  \nSub CreateADODB()  \n   Dim adoApp As Object  \n   adoApp = CreateObject(\"ADODB.Connection\")  \nEnd Sub  \n```  \n  \n The type of object variable you use to store the returned object can affect your application's performance. Declaring an object variable with the `As Object` clause creates a variable that can contain a reference to any type of object. However, access to the object through that variable is *late-bound*, that is, the binding occurs when your program runs. There are many reasons you should avoid late binding, including slower application performance.  \n  \n You can create an object variable that results in early binding—that is, binding when the program is compiled. To do so, add a reference to the type library for your object from the **COM** tab of the **Add Reference** dialog box on the **Project** menu. Then declare the object variable of the specific type of your object. In most cases, it is more efficient to use the `Dim` statement and a primary interop assembly to create objects than it is to use the `CreateObject` function.  \n  \n## Interacting with Unmanaged Code  \n Another issue is that COM objects use unmanaged code — code without the benefit of the common language runtime. There is a fair degree of complexity involved in mixing the managed code of Visual Basic with unmanaged code from COM. When you add a reference to a COM object, Visual Basic searches for a primary interop assembly (PIA) for that library; if it finds one, then it uses it. If it does not find a PIA, then it creates an interoperability assembly that contains local interoperability classes for each class in the COM library. For more information, see [COM Interoperability in .NET Framework Applications](~/add/includes/ajax-current-ext-md.md).  \n  \n You should generally use strongly bound objects and primary interop assemblies whenever possible. The examples below use the `CreateObject` function with Microsoft Office objects for demonstration purposes only. However, these objects are easier to use and more reliable when used with the appropriate primary interop assembly.  \n  \n## Creating an Object on a Remote Computer  \n You can create an object on a remote networked computer by passing the name of the computer to the `ServerName` argument of the `CreateObject` function. That name is the same as the Machine Name portion of a share name: for a share named \"\\\\\\MyServer\\Public,\" `ServerName` is \"MyServer.\"  \n  \n> [!NOTE]\n>  Refer to COM documentation (see Microsoft Developer Network) for additional information on making an application accessible on a remote networked computer. You may need to add a registry key for your application.  \n  \n The following code returns the version number of an instance of Excel running on a remote computer named `MyServer`:  \n  \n```vb#  \nSub CreateRemoteExcelObj()  \n    Dim xlApp As Object  \n    ' Replace string \"\\\\MyServer\" with name of the remote computer.  \n    xlApp = CreateObject(\"Excel.Application\", \"\\\\MyServer\")  \n    MsgBox(xlApp.Version)  \nEnd Sub  \n```  \n  \n If the remote server name is incorrect, or if it is unavailable, a run-time error occurs.  \n  \n> [!NOTE]\n>  Use `CreateObject` when there is no current instance of the object. If an instance of the object is already running, a new instance is started, and an object of the specified type is created. To use the current instance, or to start the application and have it load a file, use the `GetObject` function. If an object has registered itself as a single-instance object, only one instance of the object is created, no matter how many times `CreateObject` is executed.  \n  \n## Creating Framework Objects  \n You can use the `CreateObject` function only to create a COM object. While there is no exact equivalent mechanism for creating a .NET Framework object, the <xref:System.Activator> in the <xref:System> namespace contains methods to create local or remote objects. In particular, the <xref:System.Activator.CreateInstance%2A> method or the <xref:System.Activator.CreateInstanceFrom%2A> method might be useful.  \n  \n> [!IMPORTANT]\n>  The `CreateObject` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."
  example:
  - "The following example uses the `CreateObject` function to create a Microsoft Excel worksheet and saves the worksheet to a file. To use this example, Excel must be installed on the computer where this program runs. Also, you must add a reference to the type library from the **COM** tab of the **Add Reference** dialog box on the **Project** menu. The name of the type library varies depending on the version of Excel installed on your computer. For example, the type library for Microsoft Excel 2002 is named **Microsoft Excel 10.0 Object Library**.  \n  \n [!code-vb[VbVbalrExcelObject#1](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._59_1.vb)]"
  syntax:
    content: public static object CreateObject (string ProgId, string ServerName = "");
    parameters:
    - id: ProgId
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. De programma-ID van het object te maken."
    - id: ServerName
      type: System.String
      description: "Optioneel. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. De naam van de netwerkserver waar het object wordt gemaakt. Als `ServerName` is een lege tekenreeks (&quot;&quot;), de lokale computer wordt gebruikt."
    return:
      type: System.Object
      description: "Maakt en retourneert een verwijzing naar een COM-object. <xref uid=&quot;langword_csharp_CreateObject&quot; name=&quot;CreateObject&quot; href=&quot;&quot;></xref>kan niet worden gebruikt voor het maken van exemplaren van klassen in Visual Basic, tenzij deze klassen expliciet beschikbaar worden gesteld als COM-onderdelen."
  overload: Microsoft.VisualBasic.Interaction.CreateObject*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Server is niet beschikbaar"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Er bestaat geen object van het opgegeven type"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)
  id: DeleteSetting(System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: DeleteSetting(String,String,String)
  nameWithType: Interaction.DeleteSetting(String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.DeleteSetting(String,String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Een sectie of sleutelinstelling verwijdert uit een toepassing vermelding in het Windows-register. De <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> biedt u grotere productiviteit en prestaties in registerbewerkingen dan de <xref uid=&quot;langword_csharp_DeleteSetting &quot; name=&quot;DeleteSetting &quot; href=&quot;&quot;> </xref>functie. Zie voor meer informatie <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "If all arguments are provided, the specified setting is deleted. A run-time error occurs if you attempt to use `DeleteSetting` on a nonexistent section or key setting.  \n  \n `DeleteSetting` requires that a user be logged on since it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys."
  example:
  - "The following example first uses the `SaveSetting` procedure to make entries in the Windows registry for the `MyApp` application, and then uses the `DeleteSetting` function to remove them. Because no `Key` argument is specified, the whole `Startup` section is deleted, including the section name and all of its keys.  \n  \n [!code-vb[VbVbalrCatRef#45](~/add/codesnippet/visualbasic/e195f0a5-815a-4af5-b672-_1.vb)]"
  syntax:
    content: public static void DeleteSetting (string AppName, string Section = null, string Key = null);
    parameters:
    - id: AppName
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>een expressie met de naam van de toepassing of een project waaraan de sectie of sleutel van toepassing is."
    - id: Section
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>een expressie met de naam van de sectie waarin de instelling voor de sleutel wordt verwijderd. Als er slechts `AppName` en `Section` zijn opgegeven, wordt de opgegeven sectie samen met alle gerelateerde instellingen van de sleutel wordt verwijderd."
    - id: Key
      type: System.String
      description: "Optioneel. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>een expressie met de naam van de instelling voor de sleutel wordt verwijderd."
  overload: Microsoft.VisualBasic.Interaction.DeleteSetting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Gebruiker is niet aangemeld."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Environ(System.Int32)
  id: Environ(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Environ(Int32)
  nameWithType: Interaction.Environ(Int32)
  fullName: Microsoft.VisualBasic.Interaction.Environ(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert de tekenreeks die is gekoppeld aan een omgevingsvariabele besturingssysteem."
  remarks: "Als `Expression` bevat een tekenreeks, de <xref:Microsoft.VisualBasic.Interaction.Environ%2A>functie retourneert de tekst die wordt toegewezen aan de tekenreeks opgegeven milieu — dat wil zeggen, de tekst achter het gelijkteken (=) in de tabel omgeving-tekenreeks voor die omgevingsvariabele.</xref:Microsoft.VisualBasic.Interaction.Environ%2A> Als de tekenreeks in `Expression` kan niet worden gevonden in de tabel, een tekenreeks met lengte nul (&quot;&quot;) wordt geretourneerd.       Als `Expression` bevat een geheel getal of de tekenreeks bepaald dat zich bevindt dat numerieke positie in de tabel wordt geretourneerd. In dit geval <xref:Microsoft.VisualBasic.Interaction.Environ%2A>het resultaat van de tekst, inclusief de naam van de omgevingsvariabele.</xref:Microsoft.VisualBasic.Interaction.Environ%2A> Als er geen omgevingstekenreeks in de opgegeven positie <xref:Microsoft.VisualBasic.Interaction.Environ%2A>retourneert een tekenreeks met lengte nul.</xref:Microsoft.VisualBasic.Interaction.Environ%2A>      > [!IMPORTANT] > De <xref:Microsoft.VisualBasic.Interaction.Environ%2A>functie vereist omgeving toestemming hebben, die mogelijk gevolgen hebben voor de uitvoering in situaties gedeeltelijk vertrouwde.</xref:Microsoft.VisualBasic.Interaction.Environ%2A> Zie voor meer informatie <xref:System.Security.Permissions.SecurityPermission>en [Code toegangsmachtigingen](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "This example uses the <xref:Microsoft.VisualBasic.Interaction.Environ%2A> function to supply the entry number and length of the `PATH` statement from the environment-string table.  \n  \n [!code-vb[VbVbalrCatRef#28](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._74_1.vb)]"
  syntax:
    content: public static string Environ (int Expression);
    parameters:
    - id: Expression
      type: System.Int32
      description: "Vereist. De expressie die wordt geëvalueerd als hetzij een tekenreeks met de naam van een omgevingsvariabele of een getal dat overeenkomt met de numerieke volgorde van de omgevingstekenreeks van een in de tabel."
    return:
      type: System.String
      description: "Retourneert de tekenreeks die is gekoppeld aan een omgevingsvariabele besturingssysteem."
  overload: Microsoft.VisualBasic.Interaction.Environ*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>Er ontbreken."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Environ(System.String)
  id: Environ(System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Environ(String)
  nameWithType: Interaction.Environ(String)
  fullName: Microsoft.VisualBasic.Interaction.Environ(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert de tekenreeks die is gekoppeld aan een omgevingsvariabele besturingssysteem."
  remarks: "Als `Expression` bevat een tekenreeks, de functie de tekst die wordt toegewezen aan de tekenreeks opgegeven milieu retourneert Environ — dat wil zeggen, de tekst achter het gelijkteken (=) in de tabel omgeving-tekenreeks voor die omgevingsvariabele. Als de tekenreeks in `Expression` kan niet worden gevonden in de tabel, een tekenreeks met lengte nul (&quot;&quot;) wordt geretourneerd.       Als `Expression` bevat een geheel getal of de tekenreeks bepaald dat zich bevindt dat numerieke positie in de tabel wordt geretourneerd. In dit geval retourneert Environ alle van de tekst, inclusief de naam van de omgevingsvariabele. Als er geen omgevingstekenreeks in de opgegeven positie, retourneert Environ een tekenreeks met lengte nul.      > [!IMPORTANT] > Omgeving van de functie vereist omgeving machtiging invloed kan zijn op de uitvoering in situaties met gedeeltelijk vertrouwen. Zie voor meer informatie <xref:System.Security.Permissions.SecurityPermission>en [Code toegangsmachtigingen](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "This example uses the Environ function to supply the entry number and length of the `PATH` statement from the environment-string table.  \n  \n [!code-vb[VbVbalrCatRef#28](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._35_1.vb)]"
  syntax:
    content: public static string Environ (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "Vereist. De expressie die wordt geëvalueerd als hetzij een tekenreeks met de naam van een omgevingsvariabele of een getal dat overeenkomt met de numerieke volgorde van de omgevingstekenreeks van een in de tabel."
    return:
      type: System.String
      description: "Retourneert de tekenreeks die is gekoppeld aan een omgevingsvariabele besturingssysteem."
  overload: Microsoft.VisualBasic.Interaction.Environ*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Expression</code>Er ontbreken."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)
  id: GetAllSettings(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: GetAllSettings(String,String)
  nameWithType: Interaction.GetAllSettings(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetAllSettings(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een lijst met belangrijke instellingen en de bijbehorende waarden (oorspronkelijk is gemaakt met <xref uid=&quot;langword_csharp_SaveSetting&quot; name=&quot;SaveSetting&quot; href=&quot;&quot;> </xref>) van een toepassing vermelding in het Windows-register. Met behulp van de <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> biedt u grotere productiviteit en prestaties in registerbewerkingen dan <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>. Zie voor meer informatie <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "`GetAllSettings` returns an uninitialized `Object` if either `AppName` or `Section` does not exist.  \n  \n Because it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively, `GetAllSettings` requires that a user be logged on.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys."
  example:
  - "This example first uses the `SaveSetting` function to make entries in the Windows registry for the application specified as `AppName`, then uses the `GetAllSettings` function to display the settings. Note that application names and `Section` names cannot be retrieved with `GetAllSettings`. Finally, the `DeleteSetting` function removes the application's entries.  \n  \n [!code-vb[VbVbalrCatRef#68](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._40_1.vb)]"
  syntax:
    content: public static string[,] GetAllSettings (string AppName, string Section);
    parameters:
    - id: AppName
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>een expressie met de naam van de toepassing of het project waarvan u de belangrijke instellingen worden aangevraagd."
    - id: Section
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>een expressie met de naam van de sectie waarvan u de belangrijke instellingen worden aangevraagd. <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;></xref>retourneert een object met een tweedimensionale matrix met tekenreeksen. De tekenreeksen bevatten alle instellingen voor de sleutel in de opgegeven sectie, plus de bijbehorende waarden."
    return:
      type: System.String[,]
      description: "Retourneert een lijst met belangrijke instellingen en de bijbehorende waarden (oorspronkelijk is gemaakt met <xref uid=&quot;langword_csharp_SaveSetting&quot; name=&quot;SaveSetting&quot; href=&quot;&quot;> </xref>) van een toepassing vermelding in het Windows-register.       Met behulp van de <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> biedt u grotere productiviteit en prestaties in registerbewerkingen dan <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>. Zie voor meer informatie <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  overload: Microsoft.VisualBasic.Interaction.GetAllSettings*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Gebruiker is niet aangemeld."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)
  id: GetObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: GetObject(String,String)
  nameWithType: Interaction.GetObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetObject(String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een verwijzing naar een object van een COM-onderdeel."
  remarks: "Use the `GetObject` function to load an instance of a COM component from a file. The following example illustrates this.  \n  \n```vb#  \nDim CADObject As Object  \nCADObject = GetObject(\"C:\\CAD\\schema.cad\")  \n```  \n  \n When this code runs, the application associated with the specified `PathName` is started and the object in the specified file is activated.  \n  \n## Default Cases  \n If `PathName` is a zero-length string (`\"\"`), `GetObject` returns a new object instance of the specified class type. If the `PathName` argument is omitted, `GetObject` returns a currently active object of the class type specified in `Class`. If no object of the specified type exists, an error occurs.  \n  \n## Accessing a Subobject  \n Some applications allow you to activate a subobject associated with a file. To do this, add an exclamation point (`!`) to the end of the file name and follow it with a string that identifies the part of the file you want to activate. For information on how to create this string, see the documentation for the application that created the object.  \n  \n For example, in a drawing application you might have multiple layers to a drawing stored in a file. You could use the following code to activate a layer within a drawing called `schema.cad`.  \n  \n```vb#  \nlayerObject = GetObject(\"C:\\CAD\\schema.cad!Layer3\")  \n```  \n  \n## Specifying a Class  \n If you do not specify the object's `Class`, Automation determines the application to start and the object to activate, based on the file name you provide. Some files, however, can support more than one class of object. For example, a drawing might support three different types of objects: an `Application` object, a `Drawing` object, and a `Toolbar` object, all of which are part of the same file. To specify which object in a file you want to activate, use the optional `Class` argument. The following example illustrates this.  \n  \n```vb#  \nDim drawObj As Object  \ndrawObj = GetObject(\"C:\\Drawings\\sample.drw\", \"Figment.Drawing\")  \n```  \n  \n In the preceding example, `Figment` is the name of a drawing application and `Drawing` is one of the object types it supports.  \n  \n## Using the Object  \n Once an object is activated, you refer to it in code using the object variable you declared. In the preceding example, you access properties and methods of the new object using the object variable `drawObj`. The following example illustrates this.  \n  \n```vb#  \ndrawObj.Line(9, 90)  \ndrawObj.InsertText(9, 100, \"Hello, world.\")  \ndrawObj.SaveAs(\"C:\\Drawings\\sample.drw\")  \n```  \n  \n> [!NOTE]\n>  Use the `GetObject` function when there is a current instance of the object or if you want to create the object with a file loaded. If there is no current instance, and you do not want the object started with a file loaded, use the <xref:Microsoft.VisualBasic.Interaction.CreateObject%2A> function.  \n>   \n>  If an object has registered itself as an ActiveX single-instance object, only one instance of the object is created, no matter how many times `CreateObject` is called. With a single-instance object, `GetObject` always returns the same instance when called with the zero-length string (`\"\"`) syntax, and it causes an error if the `PathName` argument is omitted. You cannot use `GetObject` to obtain a reference to a class created with Visual Basic.  \n  \n> [!IMPORTANT]\n>  The `GetObject` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."
  example:
  - "The following example uses the `GetObject` function to obtain a reference to a specific Microsoft Excel worksheet (`excelObj`). It uses the worksheet's `Application` property to make Excel visible, to close it, and to perform other actions. Using two API calls, the `detectExcel` procedure looks for Excel, and if it is running, enters it in the Running Object table. The first call to `GetObject` causes an error if Excel is not already running, which in this example causes the `excelWasNotRunning` flag to be set to `True`. The second call to `GetObject` specifies a file to open. If Excel is not already running, the second call starts it and returns a reference to the worksheet represented by the specified file, `test.xls`. The file must exist in the specified location; otherwise, Visual Basic throws a <xref:System.IO.FileNotFoundException>. Next, the example code makes both Excel and the window containing the specified worksheet visible.  \n  \n This example requires `Option Strict Off` because it uses late binding, where objects are assigned to variables of type `Object`. You can specify `Option Strict On` and declare objects of specific object types if you add a reference to the Excel type library from the **COM** tab of the **Add Reference** dialog box of the **Project** menu in Visual Studio.  \n  \n [!code-vb[VbVbalrExcelObject#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._196_1.vb)]  \n  \n [!code-vb[VbVbalrExcelObject#4](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._196_2.vb)]  \n  \n [!code-vb[VbVbalrExcelObject#5](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._196_3.vb)]  \n  \n When you call the `getExcel` function, a check is made to see if Excel is already running. If it is not, then an instance is created.  \n  \n> [!IMPORTANT]\n>  For simplicity, the preceding example assumes that any window called `XLMAIN` belongs to an instance of Microsoft Excel. If another object, possibly launched by illicit tampering, created a window with that name, it would receive all the messages you intended for Excel. In an application to be used for production, you should include some more rigorous testing to verify that `XLMAIN` really belongs to Excel."
  syntax:
    content: public static object GetObject (string PathName = null, string Class = null);
    parameters:
    - id: PathName
      type: System.String
      description: "Optioneel. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Het volledige pad en de naam van het bestand met het object ophalen. Als `PathName` wordt weggelaten, `Class` is vereist."
    - id: Class
      type: System.String
      description: "Vereist als `PathName` is niet opgegeven. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Een tekenreeks die de klasse van het object vertegenwoordigt. De `Class` argument heeft de volgende syntaxis en delen: `appname` `.` `objecttype` [1 |&1;] Parameter [1 |&2;] beschrijving [2 |&1;] `appname` [2 |&2;] vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. De naam van de toepassing waarvan het object.       [3 |&1;] `objecttype` [3 |&2;] vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. Het type of de klasse van het object te maken."
    return:
      type: System.Object
      description: "Retourneert een verwijzing naar een object van een COM-onderdeel."
  overload: Microsoft.VisualBasic.Interaction.GetObject*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "Er bestaat geen object van het type van de opgegeven klasse."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "Er bestaat geen object met het opgegeven pad en de naam."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)
  id: GetSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: GetSetting(String,String,String,String)
  nameWithType: Interaction.GetSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetSetting(String,String,String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een waarde voor sleutel van een toepassing vermelding in het Windows-register. De <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> biedt u grotere productiviteit en prestaties in registerbewerkingen dan <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>. Zie voor meer informatie <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "If any of the items named in the `GetSetting` arguments do not exist, `GetSetting` returns a value of `Default`.  \n  \n Because it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively, `GetSetting` requires that a user be logged on.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys.  \n  \n `GetSetting` requires `Read`<xref:System.Security.Permissions.RegistryPermission> ."
  example:
  - "This example first uses the `SaveSetting` function to make entries in the Windows registry for the application specified as `AppName`, and then uses the `GetSetting` function to display one of the settings. Because the `Default` argument is specified, some value is guaranteed to be returned. Notice that `Section` names cannot be retrieved with `GetSetting`. Finally, the `DeleteSetting` function removes all the application's entries.  \n  \n [!code-vb[VbVbalrCatRef#61](~/add/codesnippet/visualbasic/1601a1b5-4317-44fc-9f01-_1.vb)]"
  syntax:
    content: public static string GetSetting (string AppName, string Section, string Key, string Default = "");
    parameters:
    - id: AppName
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>een expressie met de naam van de toepassing of het project waarvan de sleutelinstelling wordt aangevraagd."
    - id: Section
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>een expressie met de naam van de sectie waarin de instelling voor de sleutel is gevonden."
    - id: Key
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>een expressie met de naam van de sleutelinstelling om terug te keren."
    - id: Default
      type: System.String
      description: "Optioneel. Een expressie met de waarde om te retourneren als geen waarde is ingesteld de `Key` instelling. Als u dit weglaat, `Default` wordt ervan uitgegaan dat een tekenreeks met lengte nul (&quot;&quot;)."
    return:
      type: System.String
      description: "Retourneert een waarde voor sleutel van een toepassing vermelding in het Windows-register.       De <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> biedt u grotere productiviteit en prestaties in registerbewerkingen dan <xref uid=&quot;langword_csharp_GetAllSettings&quot; name=&quot;GetAllSettings&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.Interaction.GetSetting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Een of meer argumenten zijn niet <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressies of een gebruiker is niet aangemeld."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)
  id: IIf(System.Boolean,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: IIf(Boolean,Object,Object)
  nameWithType: Interaction.IIf(Boolean,Object,Object)
  fullName: Microsoft.VisualBasic.Interaction.IIf(Boolean,Object,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een van de twee objecten, afhankelijk van de evaluatie van een expressie."
  remarks: 'De `IIf` functie biedt een equivalent voor de Ternair [voorwaardelijke Operator:?:](~/add/includes/ajax-current-ext-md.md) in Visual C++.'
  example:
  - "This example uses the `IIf` function to evaluate the `testMe` parameter of the `checkIt` procedure and returns the word \"Large\" if the amount is greater than 1000; otherwise, it returns the word \"Small\".  \n  \n [!code-vb[VbVbalrFunctions#33](~/add/codesnippet/visualbasic/296aac5d-5997-4225-8ac0-_1.vb)]  \n  \n Note that if `Option Strict` is `On`, you must use the `CStr` keyword to explicitly convert the return from `Object` to `String`."
  syntax:
    content: public static object IIf (bool Expression, object TruePart, object FalsePart);
    parameters:
    - id: Expression
      type: System.Boolean
      description: "Vereist. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. De expressie die u wilt evalueren."
    - id: TruePart
      type: System.Object
      description: "Vereist. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. Geretourneerde als `Expression` resulteert in <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
    - id: FalsePart
      type: System.Object
      description: "Vereist. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>. Geretourneerde als `Expression` resulteert in <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>."
    return:
      type: System.Object
      description: "Retourneert een van de twee objecten, afhankelijk van de evaluatie van een expressie."
  overload: Microsoft.VisualBasic.Interaction.IIf*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  id: InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: InputBox(String,String,String,Int32,Int32)
  nameWithType: Interaction.InputBox(String,String,String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Interaction.InputBox(String,String,String,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Een bericht weergegeven in het dialoogvenster, wordt gewacht op de gebruiker naar tekst of op een knop klikken en vervolgens retourneert een tekenreeks met de inhoud van het tekstvak."
  remarks: "Als de gebruiker op **annuleren**, een tekenreeks met lengte nul wordt geretourneerd.       Als u wilt meer dan het eerste argument opgeeft, moet u de `InputBox` functie in een expressie. Als u geen positionele argumenten weglaat, moet u de bijbehorende komma als scheidingsteken bewaren.      > [!NOTE] > De `InputBox` functie vereist `UIPermission` op de <xref:System.Security.Permissions.UIPermissionWindow>niveau kan invloed hebben op de uitvoering in situaties gedeeltelijk vertrouwde.</xref:System.Security.Permissions.UIPermissionWindow> Voor meer informatie, Zie en <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>"
  example:
  - "This example shows various ways to use the `InputBox` function to prompt the user to enter a value. If the x and y positions are omitted, the dialog box is automatically centered for the respective axes. The variable `MyValue` contains the value entered by the user if the user clicks OK or presses the ENTER key.  \n  \n [!code-vb[VbVbalrCatRef#67](~/add/codesnippet/visualbasic/e8c4ff4e-3901-4354-99c7-_1.vb)]"
  syntax:
    content: public static string InputBox (string Prompt, string Title = "", string DefaultResponse = "", int XPos = -1, int YPos = -1);
    parameters:
    - id: Prompt
      type: System.String
      description: "Vereist <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie weergegeven als het bericht in het dialoogvenster. De maximale lengte van `Prompt` is ongeveer 1024 tekens, afhankelijk van de breedte van de tekens die worden gebruikt. Als `Prompt` bestaat van meer dan één regel, kunt u verschillende regels met een Enter-teken (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), een regelinvoer (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), of een regelterugloop en nieuwe regel feed combinatie (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;> </xref> &amp; <xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;> </xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>) tussen elke regel."
    - id: Title
      type: System.String
      description: "Optioneel. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>de expressie die wordt weergegeven in de titelbalk van het dialoogvenster. Als u weglaat `Title`, naam van de toepassing wordt geplaatst in de titelbalk."
    - id: DefaultResponse
      type: System.String
      description: "Optioneel. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>de expressie die wordt weergegeven in het tekstvak als het standaardantwoord als er geen andere tekst is opgegeven. Als u weglaat `DefaultResponse`, het vak weergegeven tekst is leeg."
    - id: XPos
      type: System.Int32
      description: "Optioneel. Een numerieke expressie die, in twips, de afstand van de linkerrand van het dialoogvenster van de linkerrand van het scherm aangeeft. Als u weglaat `XPos`, in het dialoogvenster horizontaal wordt gecentreerd."
    - id: YPos
      type: System.Int32
      description: "Optioneel. Een numerieke expressie die, in twips, de afstand van de bovenrand van het dialoogvenster vanaf de bovenkant van het scherm aangeeft. Als u weglaat `YPos`, in het dialoogvenster verticaal ongeveer één derde van de manier op het scherm wordt geplaatst."
    return:
      type: System.String
      description: "Een bericht weergegeven in het dialoogvenster, wordt gewacht op de gebruiker naar tekst of op een knop klikken en vervolgens retourneert een tekenreeks met de inhoud van het tekstvak."
  overload: Microsoft.VisualBasic.Interaction.InputBox*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  id: MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: MsgBox(Object,MsgBoxStyle,Object)
  nameWithType: Interaction.MsgBox(Object,MsgBoxStyle,Object)
  fullName: Microsoft.VisualBasic.Interaction.MsgBox(Object,MsgBoxStyle,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Wordt een bericht weergegeven in het dialoogvenster, wordt gewacht op de gebruiker op een knop te klikken en vervolgens retourneert een geheel getal dat aangeeft welke knop de gebruiker heeft geklikt."
  remarks: "Als u geen positionele argumenten weglaat, moet u de bijbehorende komma als scheidingsteken bewaren.       Als het dialoogvenster wordt weergegeven in een **annuleren** knop, de ESC-toets heeft hetzelfde effect als klikken op **annuleren** als in het dialoogvenster bevat een **Help** knop contextgevoelige Help beschikbaar voor het dialoogvenster. Er is geen waarde wordt evenwel geretourneerd totdat een van de andere knoppen is gekozen. In Windows Forms-toepassingen kiezen de **Help** knop voert de <xref:System.Windows.Forms.Control.HelpRequested>gebeurtenis voor het formulier.</xref:System.Windows.Forms.Control.HelpRequested>      > [!NOTE] > De `MsgBox` functie vereist `UIPermission` op de <xref:System.Security.Permissions.UIPermissionWindow>niveau kan invloed hebben op de uitvoering in situaties gedeeltelijk vertrouwde.</xref:System.Security.Permissions.UIPermissionWindow> Zie voor meer informatie <xref:System.Security.Permissions.UIPermission>.</xref:System.Security.Permissions.UIPermission>       De `MsgBoxStyle` opsommingswaarden worden vermeld in de volgende tabel.      ||||   |-|-|-|   | Lid | Waarde | Beschrijving |   | `OKOnly`|0| Alleen de knop OK geeft. |   | `OKCancel`|1| Geeft OK en annuleren knoppen. |   | `AbortRetryIgnore`|2| Afbreken, probeer het opnieuw en negeren knoppen weergegeven. |   | `YesNoCancel`|3| Ja, Nee en knoppen te annuleren. |   | `YesNo`|4| Geeft de knoppen Ja en Nee. |   | `RetryCancel`|5| Nieuwe pogingen en annuleren knoppen weergegeven. |   | `Critical`|16| Geeft het pictogram kritieke bericht. |   | `Question`|32| Pictogram van de Query van de waarschuwing geeft. |   | `Exclamation`|48| Pictogram van de waarschuwing geeft. |   | `Information`|64| Geeft informatiebericht pictogram. |   | `DefaultButton1`|0| Eerste knop is standaard. |   | `DefaultButton2`|256| Tweede knop is standaard. |   | `DefaultButton3`|512| Derde knop is standaard. |   | `ApplicationModal`|0| Toepassing is modaal. De gebruiker moet reageren op het berichtvenster voordat u doorgaat werk in de huidige toepassing. |   | `SystemModal`|4096| Het systeem is modaal. Alle toepassingen worden onderbroken totdat de gebruiker op het berichtvenster reageert. |   | `MsgBoxSetForeground`|&65536; | Hiermee geeft u het berichtvenster als venster op de voorgrond. |   | `MsgBoxRight`|&52428;8 | Tekst rechts is uitgelijnd. |   | `MsgBoxRtlReading`|&10485;76 | Hiermee geeft u de tekst moet worden weergegeven als rechts-naar-links lezen op Hebreeuwse en Arabische systemen. |       De eerste groep waarden (0-5) wordt het aantal en type van de knoppen worden weergegeven in het dialoogvenster beschreven. De tweede groep (16, 32, 48, 64) beschrijft de pictogramstijl. De derde groep (0, 256, 512) bepaalt welke knop is de standaardinstelling. De vierde groep (0, 4096) bepaalt de modaliteit van het bericht en de vijfde groep geeft u op of het berichtvenster venster op de voorgrond, samen met de uitlijning en de richting van de tekst is. Bij het toevoegen van cijfers voor het maken van een definitieve waarde voor de `Buttons` argument, gebruik slechts één nummer van elke groep."
  example:
  - "This example uses the `MsgBox` function to display a critical-error message in a dialog box with Yes and No buttons. The No button is specified as the default response. This is done by combining the `MsgBox` constant values into one numeric expression. In this case, adding 4 (the Yes/No button combination) and 16 (the **Critical Message** window) and 256 (the second button as default button) gives a total of 276. The value returned by the `MsgBox` function depends on the button chosen by the user: Yes returns a value of 6; No returns a value of 7.  \n  \n [!code-vb[VbVbalrCatRef#20](~/add/codesnippet/visualbasic/b9e37542-f81a-4692-86e1-_1.vb)]"
  syntax:
    content: public static Microsoft.VisualBasic.MsgBoxResult MsgBox (object Prompt, Microsoft.VisualBasic.MsgBoxStyle Buttons = Microsoft.VisualBasic.MsgBoxStyle.ApplicationModal, object Title = null);
    parameters:
    - id: Prompt
      type: System.Object
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>de expressie die wordt weergegeven als het bericht in het dialoogvenster. De maximale lengte van `Prompt` is ongeveer 1024 tekens, afhankelijk van de breedte van de tekens die worden gebruikt. Als `Prompt` bestaat van meer dan één regel, kunt u verschillende regels met een Enter-teken (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), een regelinvoer (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>), of een regeleinde/nieuwe regel tekencombinatie (<xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;></xref>13<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;> </xref> &amp; <xref uid=&quot;langword_csharp_Chr(&quot; name=&quot;Chr(&quot; href=&quot;&quot;> </xref>10<xref uid=&quot;langword_csharp_)&quot; name=&quot;)&quot; href=&quot;&quot;></xref>) tussen elke regel."
    - id: Buttons
      type: Microsoft.VisualBasic.MsgBoxStyle
      description: "Optioneel. Een numerieke expressie is de som van waarden die het aantal en type knoppen weer te geven, het gebruik van de identiteit van de standaardknop en de modaliteit van het bericht. Als u weglaat `Buttons`, de standaardwaarde is nul."
    - id: Title
      type: System.Object
      description: "Optioneel. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>de expressie die wordt weergegeven in de titelbalk van het dialoogvenster. Als u weglaat `Title`, naam van de toepassing wordt geplaatst in de titelbalk."
    return:
      type: Microsoft.VisualBasic.MsgBoxResult
      description: "<table><tbody><tr><td> Constante       </td><td> Waarde       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_OK&quot; name=&quot;OK&quot; href=&quot;&quot;></xref>         </td><td> 1       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Cancel&quot; name=&quot;Cancel&quot; href=&quot;&quot;></xref>         </td><td> 2       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Abort&quot; name=&quot;Abort&quot; href=&quot;&quot;></xref>         </td><td> 3       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Retry&quot; name=&quot;Retry&quot; href=&quot;&quot;></xref>         </td><td> 4       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Ignore&quot; name=&quot;Ignore&quot; href=&quot;&quot;></xref>         </td><td> 5       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_Yes&quot; name=&quot;Yes&quot; href=&quot;&quot;></xref>         </td><td> 6       </td></tr><tr><td>           <xref uid=&quot;langword_csharp_No&quot; name=&quot;No&quot; href=&quot;&quot;></xref>         </td><td> 7       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Interaction.MsgBox*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Prompt</code>is niet een <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> expressie, of <code>Title</code> is ongeldig."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Proces wordt niet uitgevoerd in de gebruiker interactieve modus."
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "Een of meer parameters geen lid van <xref uid=&quot;langword_csharp_MsgBoxResult&quot; name=&quot;MsgBoxResult&quot; href=&quot;&quot;> </xref> of <xref uid=&quot;langword_csharp_MsgBoxStyle&quot; name=&quot;MsgBoxStyle&quot; href=&quot;&quot;> </xref> opsomming."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  id: Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Partition(Int64,Int64,Int64,Int64)
  nameWithType: Interaction.Partition(Int64,Int64,Int64,Int64)
  fullName: Microsoft.VisualBasic.Interaction.Partition(Int64,Int64,Int64,Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Retourneert een tekenreeks voor het berekende bereik dat een getal bevat."
  remarks: "De `Partition` functie berekent een set van numerieke bereiken, elk met het aantal waarden die zijn opgegeven door `Interval`. Het eerste bereik begint bij `Start`, en het laatste bereik eindigt bij `Stop`. De `Partition` functie identificeert welke bereik bevat `Number` en retourneert een tekenreeks met een beschrijving van dat bereik. Het bereik wordt weergegeven in de tekenreeks als &quot;*laagste*:*hoogste*&quot;, waarbij de ondergrens van het bereik (*laagste*) is gescheiden van het hoge einde (*hoogste*) door een dubbele punt (:).       Indien nodig, de `Partition` functie voegt voorloopspaties voordat *laagste* en *hoogste* zodat ze beide hetzelfde aantal tekens als de tekenreeksrepresentatie van de waarde hebben (`Stop` + 1). Dit zorgt ervoor dat als u de uitvoer van de `Partition` met verschillende waarden van de functie `Number`, de resulterende tekst correct wordt afgehandeld tijdens een volgende sorteerbewerking.       De volgende tabel bevat enkele voorbeeld-tekenreeksen voor de bereiken berekend op basis van drie sets `Start`, `Stop`, en `Interval`. De &quot;Eerst bereik&quot; en &quot;Laatste bereik&quot; kolommen ziet u de laagste en hoogste bereiken mogelijk basis van de waarden van `Start` en `Stop`. De &quot;voor de eerste bereik&quot; en &quot;na de laatste bereik&quot; kolommen bevatten de tekenreeksen geretourneerd voor waarden van `Number` minder dan `Start` en groter zijn dan `Stop`respectievelijk.      ||||||||   |-|-|-|-|-|-|-|   | `Start`|`Stop`|`Interval`| Voordat de eerste bereik | Eerst bereik | Laatste bereik | Na de laatste bereik |   | 0 | 99 | 5 | &quot;: -1&quot; | &quot;  0: 4&quot;|&quot; 95: 99 &quot;|&quot; 100: &quot;|   | 20 | 199 | 10 | &quot;: 19-inch |&quot; 20:29 &quot;|&quot; 190:199 &quot;|&quot; 200: &quot;|   | 100 | 1010 | 20 | &quot;: 99&quot; | &quot; 100: 119 &quot;|&quot; 1000:1010 &quot;|&quot; 1011: &quot;|       In de voorgaande tabel ziet u de derde regel het resultaat wanneer `Start` en `Stop` definiëren van een reeks cijfers die gelijkmatig kan niet worden gedeeld door `Interval`. Het laatste bereik eindigt bij `Stop`, zodat u alleen 11 cijfers, ook al `Interval` is 20.       Als `Interval` 1 is, wordt het bereik &quot;`Number`:`Number`&quot;, ongeacht de `Start` en `Stop` argumenten. Bijvoorbeeld, als `Number` 267 is `Stop` is 1000, en `Interval` 1 is, `Partition` &quot;267: 267&quot; retourneert.       `Partition`kan nuttig zijn bij het maken van de databasequery&quot;s. U kunt een SELECT-query die laat zien hoeveel orders plaatsvinden binnen verschillende bereiken, bijvoorbeeld met factuurwaarden tussen 1 en 1000, 1001-2000, enzovoort."
  example:
  - "The following example sets up a series of ranges for decades from 1950 through 2049. It locates the value of `year` within the appropriate range and returns a `String` value showing the range. If `year` has a value of 1984, for example, `Partition` returns \"1980:1989\".  \n  \n [!code-vb[VbVbalrFunctions#45](~/add/codesnippet/visualbasic/2056d306-036e-4f9b-954c-_1.vb)]"
  syntax:
    content: public static string Partition (long Number, long Start, long Stop, long Interval);
    parameters:
    - id: Number
      type: System.Int64
      description: "Vereist. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Geheel getal dat u wilt zoeken in een van de berekende bereiken."
    - id: Start
      type: System.Int64
      description: "Vereist. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Geheel getal dat het begin van de reeks berekende bereiken geeft. `Start`mag niet kleiner dan 0."
    - id: Stop
      type: System.Int64
      description: "Vereist. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Geheel getal dat het einde van de reeks berekende bereiken aangeeft. `Stop`mag niet kleiner zijn dan of gelijk aan `Start`."
    - id: Interval
      type: System.Int64
      description: "Vereist. <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. Een geheel getal dat de grootte van elk bereik geeft berekend tussen `Start` en `Stop`. `Interval`kan niet minder dan 1."
    return:
      type: System.String
      description: "Retourneert een tekenreeks voor het berekende bereik dat een getal bevat."
  overload: Microsoft.VisualBasic.Interaction.Partition*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt; 0, <code>Stop</code> &lt;= <code>Start</code>, or <code>Interval</code> &lt; 1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)
  id: SaveSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: SaveSetting(String,String,String,String)
  nameWithType: Interaction.SaveSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.SaveSetting(String,String,String,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Hiermee slaat u of de vermelding voor een toepassing maakt in het Windows-register. De <xref uid=&quot;langword_csharp_My&quot; name=&quot;My&quot; href=&quot;&quot;> </xref> biedt u grotere productiviteit en prestaties in registerbewerkingen dan <xref uid=&quot;langword_csharp_SaveSetting&quot; name=&quot;SaveSetting&quot; href=&quot;&quot;> </xref>. Zie voor meer informatie <xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>.</xref:Microsoft.VisualBasic.Devices.ServerComputer.Registry*>"
  remarks: "The `SaveSetting` function adds the key to `HKEY_CURRENT_USER\\Software\\VB and VBA Program Settings`.  \n  \n If the key setting cannot be saved for any reason, an error occurs.  \n  \n `SaveSetting` requires that a user be logged on since it operates under the `HKEY_LOCAL_USER` registry key, which is not active until a user logs on interactively.  \n  \n Registry settings that are to be accessed from a non-interactive process (such as Mtx.exe) should be stored under either the `HKEY_LOCAL_MACHINE\\Software\\` or the `HKEY_USER\\DEFAULT\\Software` registry keys.  \n  \n `SaveSetting` requires `Write` and `Create`<xref:System.Security.Permissions.RegistryPermission> ."
  example:
  - "The following example first uses the `SaveSetting` function to make entries in the Windows registry for the `MyApp` application, and then uses the `DeleteSetting` function to remove them.  \n  \n [!code-vb[VbVbalrCatRef#56](~/add/codesnippet/visualbasic/771356b4-108a-4f31-9d7a-_1.vb)]"
  syntax:
    content: public static void SaveSetting (string AppName, string Section, string Key, string Setting);
    parameters:
    - id: AppName
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>een expressie met de naam van de toepassing of een project waaraan de van toepassing is."
    - id: Section
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>een expressie met de naam van de sectie waarin de instelling voor de sleutel wordt opgeslagen."
    - id: Key
      type: System.String
      description: "Vereist. <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>een expressie met de naam van de instelling voor de sleutel wordt opgeslagen."
    - id: Setting
      type: System.String
      description: "Vereist. Een expressie met de waarde waarnaar `Key` wordt ingesteld."
  overload: Microsoft.VisualBasic.Interaction.SaveSetting*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Sleutel register kan niet worden gemaakt of gebruiker niet is aangemeld."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  id: Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Shell(String,AppWinStyle,Boolean,Int32)
  nameWithType: Interaction.Shell(String,AppWinStyle,Boolean,Int32)
  fullName: Microsoft.VisualBasic.Interaction.Shell(String,AppWinStyle,Boolean,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Een uitvoerbaar programma wordt uitgevoerd en retourneert een geheel getal met de proces-ID van het programma als deze nog wordt uitgevoerd."
  remarks: "The return value of the `Shell` function depends on whether the program named in `PathName` is still executing when `Shell` returns. If you set `Wait` to `True` and the program finishes before the timeout expires, `Shell` returns zero. If the timeout expires, or if you omit `Wait` or set it to `False`, `Shell` returns the process ID of the program. The process ID is a unique number that identifies the running program.  \n  \n## Failure to Start  \n If the `Shell` function cannot start the named program, a <xref:System.IO.FileNotFoundException> error occurs. This can happen, for example, when you attempt to run a 16-bit program, such as `command.com`, from an application using <xref:System.Windows.Forms?displayProperty=fullName>. For a workaround, you can run a 32-bit program that calls the desired 16-bit program. In the case of `command.com`, you can run `cmd.exe` as an alternative.  \n  \n## Waiting for Completion  \n By default, the `Shell` function runs the program asynchronously. This means that a program started with the `Shell` function might not finish executing before the statements following the `Shell` function are executed. If you want to wait for the program to finish before you continue, set `Wait` to `True`.  \n  \n## Determining the Exit Code  \n A process can return an *exit code* when it terminates. However, you cannot use `Shell` to retrieve this exit code, because `Shell` returns zero if it waits for termination, and also because the process runs in a different object from `Shell`.  \n  \n To retrieve the exit code from a process, you must write your own code to initiate the process and wait for termination. The following example shows how to initiate a process, wait for it to terminate, and retrieve its exit code.  \n  \n```vb#  \nDim procID As Integer  \nDim newProc As Diagnostics.Process  \nnewProc = Diagnostics.Process.Start(\"C:\\WINDOWS\\NOTEPAD.EXE\")  \nprocID = newProc.Id  \nnewProc.WaitForExit()  \nDim procEC As Integer = -1  \nIf newProc.HasExited Then  \n    procEC = newProc.ExitCode  \nEnd If  \nMsgBox(\"Process with ID \" & CStr(ProcID) & _  \n    \" terminated with exit code \" & CStr(procEC))  \n```  \n  \n## Protecting the File Specification  \n You should always enclose the entire path and file specification in quotation marks, as the following example shows.  \n  \n```vb#  \nID = Shell(\"\"\"C:\\Program Files\\display.exe\"\" -a -q\", , True, 100000)  \n```  \n  \n Each pair of adjacent double quotation marks (`\" \"`) within the string literal is interpreted as one double quotation character in the string. Therefore, the preceding example presents the following string to the `Shell` function:  \n  \n```  \n\"C:\\Program Files\\display.exe\" -a -q  \n```  \n  \n If you did not have the path enclosed in quotation marks, Windows would look for a file called `Program.exe` in the C:\\ directory, instead of `display.exe` in the C:\\Program Files directory.  \n  \n> [!IMPORTANT]\n>  If you do not enclose the path and file specification in quotation marks, there is a security risk if the file name or a path node contains spaces. In the preceding example, the path node `\\Program Files` includes a space. If the specification were not inside quotation marks and a program named `Program.exe` had been installed in C:\\\\, for example by illicit tampering, Windows would execute it instead of `display.exe`.  \n  \n> [!IMPORTANT]\n>  The `Shell` function requires unmanaged code permission, which might affect its execution in partial-trust situations. For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)."
  example:
  - "The following example uses the `Shell` function to run an application specified by the user. Specifying <xref:Microsoft.VisualBasic.AppWinStyle?displayProperty=fullName> as the second argument opens the application in normal size and gives it the focus.  \n  \n [!code-vb[VbVbalrFunctions#47](~/add/codesnippet/visualbasic/a0f7fa2d-96c5-4a1d-b721-_1.vb)]"
  syntax:
    content: public static int Shell (string PathName, Microsoft.VisualBasic.AppWinStyle Style = Microsoft.VisualBasic.AppWinStyle.MinimizedFocus, bool Wait = false, int Timeout = -1);
    parameters:
    - id: PathName
      type: System.String
      description: "Required. <xref uid=\"langword_csharp_String\" name=\"String\" href=\"\"></xref>. Name of the program to execute, together with any required arguments and command-line switches. `PathName` can also include the drive and the directory path or folder.  \n  \n If you do not know the path to the program, you can use the <xref:Microsoft.VisualBasic.FileIO.FileSystem.GetFiles*> to locate it. For example, you can call `My.Computer.FileSystem.GetFiles(\"C:\\\", True, \"testFile.txt\")`, which returns the full path of every file named `testFile.txt` anywhere on drive C:\\\\."
    - id: Style
      type: Microsoft.VisualBasic.AppWinStyle
      description: "Optioneel. <xref uid=&quot;langword_csharp_AppWinStyle&quot; name=&quot;AppWinStyle&quot; href=&quot;&quot;></xref>. Een waarde die is gekozen uit de <xref href=&quot;Microsoft.VisualBasic.AppWinStyle&quot;> </xref> geven de stijl van het venster waarin het programma wordt uitgevoerd. Als `Style` wordt weggelaten, <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> gebruikt <xref uid=&quot;langword_csharp_AppWinStyle.MinimizedFocus&quot; name=&quot;AppWinStyle.MinimizedFocus&quot; href=&quot;&quot;> </xref>, die het programma geminimaliseerd en met de focus gestart."
    - id: Wait
      type: System.Boolean
      description: "Optioneel. <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. Een waarde die aangeeft of de <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> functie voor de voltooiing van het programma moet wachten. If `Wait` is omitted, <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;></xref> uses <xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>."
    - id: Timeout
      type: System.Int32
      description: "Optioneel. <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. Het aantal milliseconden wachttijd voor voltooiing als `Wait` is <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>. Als `Timeout` wordt weggelaten, <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> maakt gebruik van -1, wat betekent dat er geen time-out en <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> niet terug totdat het programma is voltooid. Dus als u geen waarde opgeeft `Timeout` of een set IT-1, is het mogelijk dat <xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;> </xref> mogelijk nooit besturingselement terug naar uw programma."
    return:
      type: System.Int32
      description: "Een uitvoerbaar programma wordt uitgevoerd en retourneert een geheel getal met de proces-ID van het programma als deze nog wordt uitgevoerd."
  overload: Microsoft.VisualBasic.Interaction.Shell*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Style</code>valt niet binnen het bereik van 0 tot en met 9 liggen."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<xref uid=&quot;langword_csharp_Shell&quot; name=&quot;Shell&quot; href=&quot;&quot;></xref>kan niet worden gevonden de <code> PathName </code> bestand."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "<code>PathName</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Interaction.Switch(System.Object[])
  id: Switch(System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  langs:
  - csharp
  name: Switch(Object[])
  nameWithType: Interaction.Switch(Object[])
  fullName: Microsoft.VisualBasic.Interaction.Switch(Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "Evalueert een lijst met expressies en retourneert een <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> waarde die overeenkomt met de eerste expressie in de lijst die <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
  remarks: "Het argument doorgegeven aan `VarExpr` bestaat uit de gekoppelde expressies en waarden. De `Switch` geëvalueerd met de expressies oneven van laag naar hoogste index in de functie `VarExpr`, en retourneert de waarde even nummer is gekoppeld aan de eerste expressie die wordt geëvalueerd als `True`. Bijvoorbeeld, als `VarExpr(0)` is `True`, `Switch` retourneert `VarExpr(1)`, en als `VarExpr(0)` is `False` maar `VarExpr(2)` is `True`, `Switch` retourneert `VarExpr(3)`, enzovoort.       Als u geen opgeeft de `VarExpr` argument, `Switch` retourneert `Nothing`.      > [!NOTE] > De expressies in de lijst met argumenten kunnen functieaanroepen bevatten. Als onderdeel van het voorbereiden van de lijst met argumenten voor de aanroep van `Switch`, de Visual Basic compiler elke functie aanroept in elke expressie. Dit betekent dat u niet op een specifieke functie die niet wordt aangeroepen vertrouwen als een expressie die u eerder in de lijst met argumenten is `True`."
  example:
  - "The following example uses the `Switch` function to return the name of a language that matches the name of a city. It requires that `Option Strict` be `Off`.  \n  \n [!code-vb[VbVbalrFunctions#48](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._108_1.vb)]  \n  \n Because the <xref:System.Diagnostics> namespace also contains a class called <xref:System.Diagnostics.Switch>, a call to the `Switch` function must be qualified with the <xref:Microsoft.VisualBasic> namespace."
  syntax:
    content: public static object Switch (object[] VarExpr);
    parameters:
    - id: VarExpr
      type: System.Object[]
      description: "Vereist. <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>de parametermatrix. Moet een even aantal elementen hebben. U kunt opgeven dat een lijst met <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> variabelen of expressies die zijn gescheiden door komma&quot;s of een eendimensionale matrix van <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> elementen."
    return:
      type: System.Object
      description: "Evalueert een lijst met expressies en retourneert een <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref> waarde die overeenkomt met de eerste expressie in de lijst die <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>."
  overload: Microsoft.VisualBasic.Interaction.Switch*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Aantal argumenten is oneven."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: AppActivate(Int32)
  nameWithType: Interaction.AppActivate(Int32)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Interaction.AppActivate(System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: AppActivate(String)
  nameWithType: Interaction.AppActivate(String)
  fullName: Microsoft.VisualBasic.Interaction.AppActivate(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Interaction.Beep
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Beep()
  nameWithType: Interaction.Beep()
  fullName: Microsoft.VisualBasic.Interaction.Beep()
- uid: Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CallByName(Object,String,CallType,Object[])
  nameWithType: Interaction.CallByName(Object,String,CallType,Object[])
  fullName: Microsoft.VisualBasic.Interaction.CallByName(Object,String,CallType,Object[])
- uid: Microsoft.VisualBasic.CallType
  parent: Microsoft.VisualBasic
  isExternal: false
  name: CallType
  nameWithType: CallType
  fullName: Microsoft.VisualBasic.CallType
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Choose(Double,Object[])
  nameWithType: Interaction.Choose(Double,Object[])
  fullName: Microsoft.VisualBasic.Interaction.Choose(Double,Object[])
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Interaction.Command
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Command()
  nameWithType: Interaction.Command()
  fullName: Microsoft.VisualBasic.Interaction.Command()
- uid: Microsoft.VisualBasic.Interaction.CreateObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CreateObject(String,String)
  nameWithType: Interaction.CreateObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.CreateObject(String,String)
- uid: Microsoft.VisualBasic.Interaction.DeleteSetting(System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: DeleteSetting(String,String,String)
  nameWithType: Interaction.DeleteSetting(String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.DeleteSetting(String,String,String)
- uid: Microsoft.VisualBasic.Interaction.Environ(System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Environ(Int32)
  nameWithType: Interaction.Environ(Int32)
  fullName: Microsoft.VisualBasic.Interaction.Environ(Int32)
- uid: Microsoft.VisualBasic.Interaction.Environ(System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Environ(String)
  nameWithType: Interaction.Environ(String)
  fullName: Microsoft.VisualBasic.Interaction.Environ(String)
- uid: Microsoft.VisualBasic.Interaction.GetAllSettings(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetAllSettings(String,String)
  nameWithType: Interaction.GetAllSettings(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetAllSettings(String,String)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[,]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[,]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Interaction.GetObject(System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetObject(String,String)
  nameWithType: Interaction.GetObject(String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetObject(String,String)
- uid: Microsoft.VisualBasic.Interaction.GetSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetSetting(String,String,String,String)
  nameWithType: Interaction.GetSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.GetSetting(String,String,String,String)
- uid: Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: IIf(Boolean,Object,Object)
  nameWithType: Interaction.IIf(Boolean,Object,Object)
  fullName: Microsoft.VisualBasic.Interaction.IIf(Boolean,Object,Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Interaction.InputBox(System.String,System.String,System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: InputBox(String,String,String,Int32,Int32)
  nameWithType: Interaction.InputBox(String,String,String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Interaction.InputBox(String,String,String,Int32,Int32)
- uid: Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: MsgBox(Object,MsgBoxStyle,Object)
  nameWithType: Interaction.MsgBox(Object,MsgBoxStyle,Object)
  fullName: Microsoft.VisualBasic.Interaction.MsgBox(Object,MsgBoxStyle,Object)
- uid: Microsoft.VisualBasic.MsgBoxResult
  parent: Microsoft.VisualBasic
  isExternal: false
  name: MsgBoxResult
  nameWithType: MsgBoxResult
  fullName: Microsoft.VisualBasic.MsgBoxResult
- uid: Microsoft.VisualBasic.MsgBoxStyle
  parent: Microsoft.VisualBasic
  isExternal: false
  name: MsgBoxStyle
  nameWithType: MsgBoxStyle
  fullName: Microsoft.VisualBasic.MsgBoxStyle
- uid: Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Partition(Int64,Int64,Int64,Int64)
  nameWithType: Interaction.Partition(Int64,Int64,Int64,Int64)
  fullName: Microsoft.VisualBasic.Interaction.Partition(Int64,Int64,Int64,Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Interaction.SaveSetting(System.String,System.String,System.String,System.String)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: SaveSetting(String,String,String,String)
  nameWithType: Interaction.SaveSetting(String,String,String,String)
  fullName: Microsoft.VisualBasic.Interaction.SaveSetting(String,String,String,String)
- uid: Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Shell(String,AppWinStyle,Boolean,Int32)
  nameWithType: Interaction.Shell(String,AppWinStyle,Boolean,Int32)
  fullName: Microsoft.VisualBasic.Interaction.Shell(String,AppWinStyle,Boolean,Int32)
- uid: Microsoft.VisualBasic.AppWinStyle
  parent: Microsoft.VisualBasic
  isExternal: false
  name: AppWinStyle
  nameWithType: AppWinStyle
  fullName: Microsoft.VisualBasic.AppWinStyle
- uid: Microsoft.VisualBasic.Interaction.Switch(System.Object[])
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Switch(Object[])
  nameWithType: Interaction.Switch(Object[])
  fullName: Microsoft.VisualBasic.Interaction.Switch(Object[])
- uid: Microsoft.VisualBasic.Interaction.AppActivate*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: AppActivate
  nameWithType: Interaction.AppActivate
- uid: Microsoft.VisualBasic.Interaction.Beep*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Beep
  nameWithType: Interaction.Beep
- uid: Microsoft.VisualBasic.Interaction.CallByName*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CallByName
  nameWithType: Interaction.CallByName
- uid: Microsoft.VisualBasic.Interaction.Choose*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Choose
  nameWithType: Interaction.Choose
- uid: Microsoft.VisualBasic.Interaction.Command*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Command
  nameWithType: Interaction.Command
- uid: Microsoft.VisualBasic.Interaction.CreateObject*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: CreateObject
  nameWithType: Interaction.CreateObject
- uid: Microsoft.VisualBasic.Interaction.DeleteSetting*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: DeleteSetting
  nameWithType: Interaction.DeleteSetting
- uid: Microsoft.VisualBasic.Interaction.Environ*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Environ
  nameWithType: Interaction.Environ
- uid: Microsoft.VisualBasic.Interaction.GetAllSettings*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetAllSettings
  nameWithType: Interaction.GetAllSettings
- uid: Microsoft.VisualBasic.Interaction.GetObject*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetObject
  nameWithType: Interaction.GetObject
- uid: Microsoft.VisualBasic.Interaction.GetSetting*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: GetSetting
  nameWithType: Interaction.GetSetting
- uid: Microsoft.VisualBasic.Interaction.IIf*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: IIf
  nameWithType: Interaction.IIf
- uid: Microsoft.VisualBasic.Interaction.InputBox*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: InputBox
  nameWithType: Interaction.InputBox
- uid: Microsoft.VisualBasic.Interaction.MsgBox*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: MsgBox
  nameWithType: Interaction.MsgBox
- uid: Microsoft.VisualBasic.Interaction.Partition*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Partition
  nameWithType: Interaction.Partition
- uid: Microsoft.VisualBasic.Interaction.SaveSetting*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: SaveSetting
  nameWithType: Interaction.SaveSetting
- uid: Microsoft.VisualBasic.Interaction.Shell*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Shell
  nameWithType: Interaction.Shell
- uid: Microsoft.VisualBasic.Interaction.Switch*
  parent: Microsoft.VisualBasic.Interaction
  isExternal: false
  name: Switch
  nameWithType: Interaction.Switch
