### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute
  id: InheritanceMappingAttribute
  children:
  - System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor
  - System.Data.Linq.Mapping.InheritanceMappingAttribute.Code
  - System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault
  - System.Data.Linq.Mapping.InheritanceMappingAttribute.Type
  langs:
  - csharp
  name: InheritanceMappingAttribute
  nameWithType: InheritanceMappingAttribute
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute
  type: Class
  summary: "Toegewezen een overnamehiërarchie in een [!INCLUDE[vbtecdlinq](~/add/includes/vbtecdlinq-md.md)] toepassing."
  remarks: "Een die inheritancemappingattribute per toegewezen klasse is opgegeven.       Let op het volgende wanneer u overnamehiërarchieën zijn toegewezen:-alle klassen in een hiërarchie moeten worden toegewezen aan één tabel.      -De tabel voor een overnamehiërarchie moet worden gedeclareerd op het toegewezen type dat is aan de bovenkant van de hiërarchie. U kunt de kenmerken van de tabel of toewijzing niet opgeven in een klasse die is afgeleid van de bovenste klasse.      -U kunt een interface in een hiërarchie, maar [!INCLUDE[vbtecLinq](~/add/includes/vbteclinq-md.md)] komt niet overeen.      -U kunt een klasse in de hiërarchie overslaan als u klassen worden toegewezen, maar u kunt een query tegen alleen toegewezen klassen.       Voor de juiste materialisatie moeten discriminator code-waarden uniek zijn en overeenkomen met de waarden in de database. Een rij met de waarde van een discriminator-code die niet precies (zelfs op het hoofdlettergebruik) overeenkomt met de klasse instantiëren met behulp van <xref:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault%2A>ingesteld op `true`.</xref:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault%2A>"
  example:
  - "This example shows inheritance mapping for a hierarchy where the top, mapped class (`Shape`) is abstract.  \n  \n [!code-cs[System.Data.Linq.Mapping.InheritanceMappingAttribute#1](~/add/codesnippet/csharp/inherit/Program.cs#1)]\n [!code-vb[System.Data.Linq.Mapping.InheritanceMappingAttribute#1](~/add/codesnippet/visualbasic/inherit/Module1.vb#1)]  \n  \n The following example shows the inclusion of unmapped classes. You can put unmapped classes anywhere in the hierarchy.  \n  \n [!code-cs[System.Data.Linq.Mapping.InheritanceMappingAttribute#2](~/add/codesnippet/csharp/inherit/Program.cs#2)]\n [!code-vb[System.Data.Linq.Mapping.InheritanceMappingAttribute#2](~/add/codesnippet/visualbasic/inherit/Module1.vb#2)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=true, Inherited=false)]

      public sealed class InheritanceMappingAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor
  id: '#ctor'
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  langs:
  - csharp
  name: InheritanceMappingAttribute()
  nameWithType: InheritanceMappingAttribute.InheritanceMappingAttribute()
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.InheritanceMappingAttribute()
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Data.Linq.Mapping.InheritanceMappingAttribute&quot;> </xref> klasse."
  syntax:
    content: public InheritanceMappingAttribute ();
    parameters: []
  overload: System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.Code
  id: Code
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  langs:
  - csharp
  name: Code
  nameWithType: InheritanceMappingAttribute.Code
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.Code
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Opgehaald of ingesteld van de waarde van de discriminator in een toegewezen overnamehiërarchie."
  syntax:
    content: public object Code { get; set; }
    return:
      type: System.Object
      description: "Moet door gebruiker opgegeven. Er is geen standaardwaarde."
  overload: System.Data.Linq.Mapping.InheritanceMappingAttribute.Code*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault
  id: IsDefault
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  langs:
  - csharp
  name: IsDefault
  nameWithType: InheritanceMappingAttribute.IsDefault
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Opgehaald of ingesteld of een object van dit type in geïnstantieerd als de discriminatorwaarde komt niet overeen met een opgegeven waarde."
  remarks: "Exact één van de <xref:System.Data.Linq.Mapping.InheritanceMappingAttribute>kenmerken moeten worden gedeclareerd met IsDefault als `true`.</xref:System.Data.Linq.Mapping.InheritanceMappingAttribute>"
  syntax:
    content: public bool IsDefault { get; set; }
    return:
      type: System.Boolean
      description: "Default = <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.Type
  id: Type
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  langs:
  - csharp
  name: Type
  nameWithType: InheritanceMappingAttribute.Type
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.Type
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq.Mapping
  summary: "Opgehaald of ingesteld van het type van de klasse in de hiërarchie."
  remarks: "Gebruik niet-abstract type in de overnamehiërarchie, met inbegrip van het type."
  syntax:
    content: public Type Type { get; set; }
    return:
      type: System.Type
      description: "Moet door gebruiker opgegeven. Er is geen standaardwaarde."
  overload: System.Data.Linq.Mapping.InheritanceMappingAttribute.Type*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: InheritanceMappingAttribute()
  nameWithType: InheritanceMappingAttribute.InheritanceMappingAttribute()
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.InheritanceMappingAttribute()
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.Code
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: Code
  nameWithType: InheritanceMappingAttribute.Code
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.Code
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: IsDefault
  nameWithType: InheritanceMappingAttribute.IsDefault
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.Type
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: Type
  nameWithType: InheritanceMappingAttribute.Type
  fullName: System.Data.Linq.Mapping.InheritanceMappingAttribute.Type
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor*
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: InheritanceMappingAttribute
  nameWithType: InheritanceMappingAttribute.InheritanceMappingAttribute
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.Code*
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: Code
  nameWithType: InheritanceMappingAttribute.Code
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault*
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: IsDefault
  nameWithType: InheritanceMappingAttribute.IsDefault
- uid: System.Data.Linq.Mapping.InheritanceMappingAttribute.Type*
  parent: System.Data.Linq.Mapping.InheritanceMappingAttribute
  isExternal: false
  name: Type
  nameWithType: InheritanceMappingAttribute.Type
