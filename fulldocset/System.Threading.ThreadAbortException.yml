### YamlMime:ManagedReference
items:
- uid: System.Threading.ThreadAbortException
  id: ThreadAbortException
  children:
  - System.Threading.ThreadAbortException.ExceptionState
  langs:
  - csharp
  name: ThreadAbortException
  nameWithType: ThreadAbortException
  fullName: System.Threading.ThreadAbortException
  type: Class
  summary: "De uitzondering die wordt gegenereerd wanneer er wordt een aanroep naar de <xref:System.Threading.Thread.Abort*>methode.</xref:System.Threading.Thread.Abort*> Deze klasse kan niet worden overgenomen."
  remarks: "Wanneer wordt een aanroep naar de <xref:System.Threading.Thread.Abort%2A>een ThreadAbortException, genereert de methode een thread, de common language runtime vernietigen.</xref:System.Threading.Thread.Abort%2A> ThreadAbortException is een speciale uitzondering die kan worden onderschept, maar deze automatisch worden verhoogd opnieuw aan het einde van de `catch` blok. Wanneer deze uitzondering wordt gegenereerd, voert de runtime alle de `finally` blokken voordat de thread wordt beëindigd. Omdat de thread een unbounded berekening kunt doen in de `finally` blokken of aanroep <xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName>om te annuleren de afbreken, kan niet worden gegarandeerd dat de thread ooit wordt beëindigd.</xref:System.Threading.Thread.ResetAbort%2A?displayProperty=fullName> Als u wachten wilt totdat de afgebroken thread is beëindigd, belt u het <xref:System.Threading.Thread.Join%2A?displayProperty=fullName>methode.</xref:System.Threading.Thread.Join%2A?displayProperty=fullName> <xref:System.Threading.Thread.Join%2A>is een aanroep van blokkeren die niet terug totdat de thread stopt daadwerkelijk wordt uitgevoerd.</xref:System.Threading.Thread.Join%2A>      > [!NOTE] > Wanneer de common language runtime (CLR) achtergrond threadsafter alle voorgrond threads in een beheerde uitvoerbaar bestand hebt beëindigd stoppen, deze geen gebruik <xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>.</xref:System.Threading.Thread.Abort%2A?displayProperty=fullName> U kunt de ThreadAbortException daarom niet gebruiken om te detecteren wanneer threads op de achtergrond worden beëindigd door de CLR.       ThreadAbortException maakt gebruik van de HRESULT COR_E_THREADABORTED, dat de waarde 0x80131530 heeft.      > [!NOTE] > De waarde van de overgenomen <xref:System.Exception.Data%2A>eigenschap is altijd `null`.</xref:System.Exception.Data%2A>"
  example:
  - "The following example demonstrates aborting a thread. The thread that receives the `ThreadAbortException` uses the <xref:System.Threading.Thread.ResetAbort%2A> method to cancel the abort request and continue executing.  \n  \n [!code-cpp[ThreadAbEx#1](~/add/codesnippet/cpp/t-system.threading.threa_4_1.cpp)]\n [!code-vb[ThreadAbEx#1](~/add/codesnippet/visualbasic/t-system.threading.threa_4_1.vb)]\n [!code-cs[ThreadAbEx#1](~/add/codesnippet/csharp/t-system.threading.threa_4_1.cs)]  \n  \n This code produces the following output:  \n  \n```  \nThread - working.  \nMain - aborting my thread.  \nThread - caught ThreadAbortException - resetting.  \nException message: Thread was being aborted.  \nThread - still alive and working.  \nThread - finished working.  \nMain ending.  \n```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ThreadAbortException : SystemException
  inheritance:
  - System.Exception
  - System.SystemException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Threading.ThreadAbortException.ExceptionState
  id: ExceptionState
  parent: System.Threading.ThreadAbortException
  langs:
  - csharp
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
  fullName: System.Threading.ThreadAbortException.ExceptionState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "Haalt een object met toepassingsspecifieke gegevens met betrekking tot het afbreken van de thread."
  remarks: "Het object dat wordt geretourneerd door deze eigenschap is opgegeven via de `stateInfo` parameter van de <xref:System.Threading.Thread.Abort%2A>methode.</xref:System.Threading.Thread.Abort%2A> De exacte inhoud en het gebruik van dit object is toepassing gedefinieerde; Dit wordt meestal gebruikt voor het overbrengen van informatie die relevant zijn voor de thread is afgebroken."
  example:
  - "The following code example shows how to pass information to a thread that is being aborted.  \n  \n [!code-cs[System.Threading.Thread.Abort2#1](~/add/codesnippet/csharp/p-system.threading.threa_10_1.cs)]\n [!code-cpp[System.Threading.Thread.Abort2#1](~/add/codesnippet/cpp/p-system.threading.threa_10_1.cpp)]\n [!code-vb[System.Threading.Thread.Abort2#1](~/add/codesnippet/visualbasic/p-system.threading.threa_10_1.vb)]"
  syntax:
    content: public object ExceptionState { get; }
    return:
      type: System.Object
      description: "Een object met toepassingsspecifieke gegevens."
  overload: System.Threading.ThreadAbortException.ExceptionState*
  exceptions: []
  platform:
  - net462
references:
- uid: System.SystemException
  isExternal: false
  name: System.SystemException
- uid: System.Threading.ThreadAbortException.ExceptionState
  parent: System.Threading.ThreadAbortException
  isExternal: false
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
  fullName: System.Threading.ThreadAbortException.ExceptionState
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.ThreadAbortException.ExceptionState*
  parent: System.Threading.ThreadAbortException
  isExternal: false
  name: ExceptionState
  nameWithType: ThreadAbortException.ExceptionState
