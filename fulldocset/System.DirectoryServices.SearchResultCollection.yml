### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.SearchResultCollection
  id: SearchResultCollection
  children:
  - System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)
  - System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  - System.DirectoryServices.SearchResultCollection.Count
  - System.DirectoryServices.SearchResultCollection.Dispose
  - System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)
  - System.DirectoryServices.SearchResultCollection.Finalize
  - System.DirectoryServices.SearchResultCollection.GetEnumerator
  - System.DirectoryServices.SearchResultCollection.Handle
  - System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)
  - System.DirectoryServices.SearchResultCollection.Item(System.Int32)
  - System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized
  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot
  langs:
  - csharp
  name: SearchResultCollection
  nameWithType: SearchResultCollection
  fullName: System.DirectoryServices.SearchResultCollection
  type: Class
  summary: "De klasse SearchResultCollection bevat de <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> -exemplaren die de Active Directory-hiërarchie heeft geretourneerd tijdens een <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;> </xref> query."
  remarks: "Vanwege beperkingen van de implementatie vrijgeven de klasse SearchResultCollection niet alle bijbehorende niet-beheerde bronnen als garbage collector zijn verzameld is. Om te voorkomen dat een geheugenlek, belt u het <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>methode wanneer het SearchResultCollection-object is niet meer nodig.</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>"
  syntax:
    content: 'public class SearchResultCollection : MarshalByRefObject, IDisposable, System.Collections.ICollection'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.ICollection
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)
  id: Contains(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Contains(SearchResult)
  nameWithType: SearchResultCollection.Contains(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.Contains(SearchResult)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Hiermee wordt bepaald of een opgegeven <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> object bevindt zich in deze verzameling."
  syntax:
    content: public bool Contains (System.DirectoryServices.SearchResult result);
    parameters:
    - id: result
      type: System.DirectoryServices.SearchResult
      description: "De <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> object vinden."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de opgegeven eigenschap deel uitmaakt van deze verzameling; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.DirectoryServices.SearchResultCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  id: CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: CopyTo(SearchResult[],Int32)
  nameWithType: SearchResultCollection.CopyTo(SearchResult[],Int32)
  fullName: System.DirectoryServices.SearchResultCollection.CopyTo(SearchResult[],Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Kopieert alle <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objecten in deze verzameling aan de specifieke matrix, beginnend bij de opgegeven index in de doelmatrix."
  syntax:
    content: public void CopyTo (System.DirectoryServices.SearchResult[] results, int index);
    parameters:
    - id: results
      type: System.DirectoryServices.SearchResult[]
      description: "De matrix van <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objecten die de onderdelen van deze verzameling ontvangt."
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index in `results` waar deze methode begint deze verzameling te kopiëren."
  overload: System.DirectoryServices.SearchResultCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Count
  id: Count
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Count
  nameWithType: SearchResultCollection.Count
  fullName: System.DirectoryServices.SearchResultCollection.Count
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Hiermee wordt het aantal <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objecten in deze verzameling."
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "Het aantal <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> objecten in deze verzameling."
  overload: System.DirectoryServices.SearchResultCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Dispose
  id: Dispose
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Dispose()
  nameWithType: SearchResultCollection.Dispose()
  fullName: System.DirectoryServices.SearchResultCollection.Dispose()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Versies van alle resources die worden gebruikt door de <xref href=&quot;System.DirectoryServices.SearchResultCollection&quot;> </xref> object."
  remarks: "De methode Dispose kunt u de resources die worden gebruikt door de <xref:System.DirectoryServices.SearchResultCollection>naar opnieuw worden toegewezen voor andere doeleinden.</xref:System.DirectoryServices.SearchResultCollection> Zie voor meer informatie over Dispose [onbeheerde hulpbronnen reinigen](~/add/includes/ajax-current-ext-md.md).       De garbage collector wordt niet vrijgegeven geheugen voor een <xref:System.DirectoryServices.SearchResultCollection>object.</xref:System.DirectoryServices.SearchResultCollection> Een toepassing moet daarom de methode Dispose expliciet om te voorkomen dat een geheugenlek aanroepen."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.DirectoryServices.SearchResultCollection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SearchResultCollection.Dispose(Boolean)
  fullName: System.DirectoryServices.SearchResultCollection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "De niet-beheerde bronnen vrij die worden gebruikt door de <xref href=&quot;System.DirectoryServices.SearchResultCollection&quot;> </xref> object en eventueel de beheerde bronnen vrij."
  remarks: "Deze methode wordt aangeroepen door het publiek <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>methode en de <xref:System.Object.Finalize%2A>methode.</xref:System.Object.Finalize%2A> </xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>de beveiligde methode Dispose met roept de `disposing` parameter ingesteld op `true`.</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> <xref:System.Object.Finalize%2A>Dispose met roept de `disposing` parameter ingesteld op `false`.</xref:System.Object.Finalize%2A>       Wanneer de `disposing` parameter `true`, deze methode versies van alle resources die worden vastgehouden door alle beheerde objecten waarmee deze <xref:System.DirectoryServices.SearchResultCollection>verwijzingen.</xref:System.DirectoryServices.SearchResultCollection>       De garbage collector wordt niet vrijgegeven geheugen voor een <xref:System.DirectoryServices.SearchResultCollection>object.</xref:System.DirectoryServices.SearchResultCollection> Daarom moet u aanroepen de <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>methode expliciet om te voorkomen dat een geheugenlek.</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>       Deze methode roept de <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>methode van elk object in de verzameling.</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>       Voor meer informatie over <xref:System.DirectoryServices.SearchResultCollection.Dispose>en <xref:System.Object.Finalize%2A>, Zie [onbeheerde hulpbronnen reinigen](~/add/includes/ajax-current-ext-md.md) en [vervangt de methode voltooien](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</xref:System.Object.Finalize%2A> </xref:System.DirectoryServices.SearchResultCollection.Dispose>"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>voor het vrijgeven van zowel beheerde als onbeheerde hulpbronnen; <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> om alleen niet-beheerde bronnen vrij te geven."
  overload: System.DirectoryServices.SearchResultCollection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Finalize
  id: Finalize
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Finalize()
  nameWithType: SearchResultCollection.Finalize()
  fullName: System.DirectoryServices.SearchResultCollection.Finalize()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Onderdrukt de &lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt; methode."
  syntax:
    content: ~SearchResultCollection ();
    parameters: []
  overload: System.DirectoryServices.SearchResultCollection.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SearchResultCollection.GetEnumerator()
  fullName: System.DirectoryServices.SearchResultCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Retourneert een enumerator die u gebruiken kunt om deze collectie te doorlopen."
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "Een <xref:System.Collections.IEnumerator>object die u gebruiken kunt om deze collectie te doorlopen.</xref:System.Collections.IEnumerator>"
  overload: System.DirectoryServices.SearchResultCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Handle
  id: Handle
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Handle
  nameWithType: SearchResultCollection.Handle
  fullName: System.DirectoryServices.SearchResultCollection.Handle
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Haalt de ingang die wordt geretourneerd door de [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) methode waarmee de werkelijke zoekopdracht wordt uitgevoerd. Zie voor meer informatie de [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) onderwerp in de MSDN-bibliotheek op [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."
  remarks: "De <xref:System.DirectoryServices.DirectorySearcher>die deze verzameling gemaakt roept de [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) methode, waardoor de queryresultaten beschikbaar voor het object T:System.DirectoryServices.SearchResultCollection.</xref:System.DirectoryServices.DirectorySearcher> Zie voor meer informatie de [IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp) onderwerp in de MSDN-bibliotheek op [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).       Elke keer dat een query wordt uitgevoerd, een ingang voor de resultaten van de query is gekoppeld aan de <xref:System.DirectoryServices.SearchResultCollection>object.</xref:System.DirectoryServices.SearchResultCollection> Deze koppeling komt overeen met de greep zoeken in ADSI. Deze koppeling zich blijft voordoen nadat u de <xref:System.DirectoryServices.SearchResultCollection.Dispose>methode op de <xref:System.DirectoryServices.SearchResultCollection>object, dus u moet aanroepen <xref:System.DirectoryServices.SearchResultCollection.Dispose>om te voorkomen dat een geheugenlek.</xref:System.DirectoryServices.SearchResultCollection.Dispose> </xref:System.DirectoryServices.SearchResultCollection> </xref:System.DirectoryServices.SearchResultCollection.Dispose> De garbage collector vrijgeeft niet geheugen voor dit object."
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "De waarde van het type ADS_SEARCH_HANDLE die gebruikmaakt van deze verzameling."
  overload: System.DirectoryServices.SearchResultCollection.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)
  id: IndexOf(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: IndexOf(SearchResult)
  nameWithType: SearchResultCollection.IndexOf(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.IndexOf(SearchResult)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Hiermee wordt de index van het eerste exemplaar van de opgegeven <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> object in deze verzameling."
  syntax:
    content: public int IndexOf (System.DirectoryServices.SearchResult result);
    parameters:
    - id: result
      type: System.DirectoryServices.SearchResult
      description: "De <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> object om te zoeken naar in deze verzameling."
    return:
      type: System.Int32
      description: "De op nul gebaseerde index van het eerste overeenkomende object. Retourneert-1 als er geen lid is van deze verzameling is identiek aan de <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> object."
  overload: System.DirectoryServices.SearchResultCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SearchResultCollection.Item(Int32)
  fullName: System.DirectoryServices.SearchResultCollection.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Haalt de <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> -object dat zich bevindt op een opgegeven index in deze verzameling."
  remarks: "In C# is deze eigenschap de indexeerfunctie voor de <xref:System.DirectoryServices.SearchResultCollection>klasse.</xref:System.DirectoryServices.SearchResultCollection>       In JScript kunt u de geïndexeerde standaardeigenschappen die zijn gedefinieerd door een type, maar u expliciet zelf niet definiëren. Echter opgeven van het kenmerk uitbreiden voor een klasse wordt automatisch een standaardwaarde geïndexeerde eigenschap waarvan het type Object en met een indextype <xref:System.String>.</xref:System.String>"
  syntax:
    content: public System.DirectoryServices.SearchResult this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index van de <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> object ophalen."
    return:
      type: System.DirectoryServices.SearchResult
      description: "De <xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref> -object dat zich bevindt bij de opgegeven index."
  overload: System.DirectoryServices.SearchResultCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  id: PropertiesLoaded
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: PropertiesLoaded
  nameWithType: SearchResultCollection.PropertiesLoaded
  fullName: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Haalt de <xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;> </xref> eigenschappen die zijn opgegeven voordat de zoekopdracht is uitgevoerd."
  syntax:
    content: public string[] PropertiesLoaded { get; }
    return:
      type: System.String[]
      description: "Een matrix van het type <xref:System.String>die bevat de eigenschappen die zijn opgegeven in de <xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*>eigenschap verzameling voordat de zoekopdracht is uitgevoerd.</xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*> </xref:System.String>"
  overload: System.DirectoryServices.SearchResultCollection.PropertiesLoaded*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Kopieert de elementen van de <xref:System.Collections.ICollection>naar een <xref:System.Array>, te beginnen bij een bepaalde <xref:System.Array>index.</xref:System.Array> </xref:System.Array> </xref:System.Collections.ICollection>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "De eendimensionale <xref:System.Array>die het doel van de elementen die zijn gekopieerd vanuit <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> is</xref:System.Array> De <xref:System.Array>moet hebben op nul gebaseerde indexering.</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "De op nul gebaseerde index in `array` welke kopiëren begint."
  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>is kleiner dan nul."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>is multidimensionaal.       - of - het aantal elementen in de bron <xref:System.Collections.ICollection> groter is dan de beschikbare ruimte vanaf <code>index</code> aan het einde van de bestemming <code>array</code>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "Het type van de bron <xref:System.Collections.ICollection>kan niet automatisch worden geconverteerd naar het type van de bestemming <code> array </code>.</xref:System.Collections.ICollection>"
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Haalt een waarde die aangeeft of de toegang tot de <xref:System.Collections.ICollection>is gesynchroniseerd (thread-veilig).</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ICollection.SyncRoot%2A>retourneert een object dat kan worden gebruikt voor toegang tot de <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> synchroniseren</xref:System.Collections.ICollection.SyncRoot%2A>       De meeste verzameling klassen in de <xref:System.Collections?displayProperty=fullName>naamruimte een Synchronized-methode, waarbij een gesynchroniseerde wrapper rond de onderliggende verzameling biedt ook implementeren.</xref:System.Collections?displayProperty=fullName>       Inventariseren door middel van een verzameling is intrinsiek niet een thread-veilige procedure. Zelfs wanneer een verzameling wordt gesynchroniseerd, andere threads kunnen nog steeds de verzameling niet wijzigen, waardoor de enumerator is een uitzondering. Om te garanderen thread veiligheid tijdens de opsomming, moet u de verzameling tijdens de gehele opsomming vergrendelen of het gevolg van wijzigingen die door andere threads uitzonderingen wordt onderschept.       [Visual Basic C#]       De volgende voorbeeldcode laat zien hoe vergrendelen op de verzameling met behulp van de <xref:System.Collections.ICollection.SyncRoot%2A>tijdens de gehele opsomming: ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de toegang tot de <xref:System.Collections.ICollection>is gesynchroniseerd (thread-safe); anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>.</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "Haalt een object dat kan worden gebruikt voor toegang tot de <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> synchroniseren"
  remarks: "Voor verzamelingen waarvan het onderliggende archief niet openbaar beschikbaar is, is de verwachte implementatie te retourneren van het huidige exemplaar. Houd er rekening mee dat de verwijzing naar het huidige exemplaar kan niet voldoende zijn voor verzamelingen die u andere verzamelingen inpakt; die als resultaat moeten de onderliggende verzameling `SyncRoot` eigenschap.       De meeste verzameling klassen in de <xref:System.Collections?displayProperty=fullName>naamruimte ook implementeren een `Synchronized` methode, waarmee een gesynchroniseerde wrapper rond de onderliggende verzameling.</xref:System.Collections?displayProperty=fullName> Afgeleide klassen bieden echter kunnen hun eigen gesynchroniseerde versie van de verzameling met behulp van de <xref:System.Collections.ICollection.SyncRoot%2A>eigenschap.</xref:System.Collections.ICollection.SyncRoot%2A> De code voor het synchroniseren moet bewerkingen uitvoeren op de <xref:System.Collections.ICollection.SyncRoot%2A>van de verzameling, niet rechtstreeks op de verzameling.</xref:System.Collections.ICollection.SyncRoot%2A> Dit zorgt ervoor dat de juiste werking van de verzamelingen die zijn afgeleid van andere objecten. In het bijzonder houdt het juiste synchronisatie met andere threads die worden tegelijkertijd van het verzamelingsexemplaar wijzigen mogelijk.       In het ontbreken van een `Synchronized` methode op een verzameling, het verwachte gebruik van <xref:System.Collections.ICollection.SyncRoot%2A>ziet er als volgt: ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ``` [Visual Basic] ```   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     &quot; Some operation on the collection, which is now thread safe.    End SyncLock   ``` opsommen via een verzameling is intrinsiek niet een thread-veilige procedure.</xref:System.Collections.ICollection.SyncRoot%2A> Zelfs wanneer een verzameling wordt gesynchroniseerd, andere threads kunnen nog steeds de verzameling niet wijzigen, waardoor de enumerator is een uitzondering. Om te garanderen thread veiligheid tijdens de opsomming, moet u de verzameling tijdens de gehele opsomming vergrendelen of het gevolg van wijzigingen die door andere threads uitzonderingen wordt onderschept.       [Visual Basic C#]       De volgende voorbeeldcode laat zien hoe vergrendelen op de verzameling met behulp van de <xref:System.Collections.ICollection.SyncRoot%2A>tijdens de gehele opsomming: ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "Een object dat kan worden gebruikt voor toegang tot de <xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> synchroniseren"
  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Contains(SearchResult)
  nameWithType: SearchResultCollection.Contains(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.Contains(SearchResult)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.SearchResult
  parent: System.DirectoryServices
  isExternal: false
  name: SearchResult
  nameWithType: SearchResult
  fullName: System.DirectoryServices.SearchResult
- uid: System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: CopyTo(SearchResult[],Int32)
  nameWithType: SearchResultCollection.CopyTo(SearchResult[],Int32)
  fullName: System.DirectoryServices.SearchResultCollection.CopyTo(SearchResult[],Int32)
- uid: System.DirectoryServices.SearchResult[]
  parent: System.DirectoryServices
  isExternal: false
  name: SearchResult
  nameWithType: SearchResult
  fullName: System.DirectoryServices.SearchResult[]
  spec.csharp:
  - uid: System.DirectoryServices.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: SearchResult[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.SearchResultCollection.Count
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Count
  nameWithType: SearchResultCollection.Count
  fullName: System.DirectoryServices.SearchResultCollection.Count
- uid: System.DirectoryServices.SearchResultCollection.Dispose
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Dispose()
  nameWithType: SearchResultCollection.Dispose()
  fullName: System.DirectoryServices.SearchResultCollection.Dispose()
- uid: System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SearchResultCollection.Dispose(Boolean)
  fullName: System.DirectoryServices.SearchResultCollection.Dispose(Boolean)
- uid: System.DirectoryServices.SearchResultCollection.Finalize
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Finalize()
  nameWithType: SearchResultCollection.Finalize()
  fullName: System.DirectoryServices.SearchResultCollection.Finalize()
- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: SearchResultCollection.GetEnumerator()
  fullName: System.DirectoryServices.SearchResultCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.SearchResultCollection.Handle
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Handle
  nameWithType: SearchResultCollection.Handle
  fullName: System.DirectoryServices.SearchResultCollection.Handle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: IndexOf(SearchResult)
  nameWithType: SearchResultCollection.IndexOf(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.IndexOf(SearchResult)
- uid: System.DirectoryServices.SearchResultCollection.Item(System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: SearchResultCollection.Item(Int32)
  fullName: System.DirectoryServices.SearchResultCollection.Item(Int32)
- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: PropertiesLoaded
  nameWithType: SearchResultCollection.PropertiesLoaded
  fullName: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.SyncRoot
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.SearchResultCollection.Contains*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Contains
  nameWithType: SearchResultCollection.Contains
- uid: System.DirectoryServices.SearchResultCollection.CopyTo*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: CopyTo
  nameWithType: SearchResultCollection.CopyTo
- uid: System.DirectoryServices.SearchResultCollection.Count*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Count
  nameWithType: SearchResultCollection.Count
- uid: System.DirectoryServices.SearchResultCollection.Dispose*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Dispose
  nameWithType: SearchResultCollection.Dispose
- uid: System.DirectoryServices.SearchResultCollection.Finalize*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Finalize
  nameWithType: SearchResultCollection.Finalize
- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: SearchResultCollection.GetEnumerator
- uid: System.DirectoryServices.SearchResultCollection.Handle*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Handle
  nameWithType: SearchResultCollection.Handle
- uid: System.DirectoryServices.SearchResultCollection.IndexOf*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: IndexOf
  nameWithType: SearchResultCollection.IndexOf
- uid: System.DirectoryServices.SearchResultCollection.Item*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Item
  nameWithType: SearchResultCollection.Item
- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: PropertiesLoaded
  nameWithType: SearchResultCollection.PropertiesLoaded
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot
