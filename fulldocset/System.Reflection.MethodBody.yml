### YamlMime:ManagedReference
items:
- uid: System.Reflection.MethodBody
  id: MethodBody
  children:
  - System.Reflection.MethodBody.#ctor
  - System.Reflection.MethodBody.ExceptionHandlingClauses
  - System.Reflection.MethodBody.GetILAsByteArray
  - System.Reflection.MethodBody.InitLocals
  - System.Reflection.MethodBody.LocalSignatureMetadataToken
  - System.Reflection.MethodBody.LocalVariables
  - System.Reflection.MethodBody.MaxStackSize
  langs:
  - csharp
  name: MethodBody
  nameWithType: MethodBody
  fullName: System.Reflection.MethodBody
  type: Class
  summary: "Biedt toegang tot de metagegevens en MSIL voor de hoofdtekst van een methode."
  remarks: "De klasse MethodBody biedt toegang tot informatie over de lokale variabelen en de componenten afhandeling van uitzonderingen in de hoofdtekst van een methode en de Microsoft tussenliggende taal (MSIL) waaruit de hoofdcode van methode.       U kunt de methoden voor het token omzetten van de moduleklasse, zoals <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, en <xref:System.Reflection.Module.ResolveType%2A>, omzetten van de tokens in de hoofdtekst van de methode voor <xref:System.Type>objecten, <xref:System.Reflection.MethodInfo>objecten, en <xref:System.Reflection.FieldInfo>objecten die gedetailleerde informatie over de typen, methoden en velden die toegankelijk is voor de MSIL in de hoofdtekst van de methode bieden.</xref:System.Reflection.FieldInfo> </xref:System.Reflection.MethodInfo> </xref:System.Type> </xref:System.Reflection.Module.ResolveType%2A> </xref:System.Reflection.Module.ResolveMethod%2A> </xref:System.Reflection.Module.ResolveType%2A>      > [!NOTE] > Parseren hoofdcode van een methode vereist een grondig begrip van metagegevens en indelingen voor MSIL-instructie. Informatie vindt in de documentatie van de Common Language Infrastructure (CLI), met name &quot; partitie II: metagegevens definitie en semantiek&quot; en &quot;Partitie III: CIL instructie instellen&quot;. De documentatie is beschikbaar online; Zie [ECMA C# en algemene Language Infrastructure standaarden](http://go.microsoft.com/fwlink/?LinkID=99212) op MSDN en [standaard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) op de website van Ecma International.       Als u een MethodBody-object voor een bepaalde methode, eerst aanvragen een <xref:System.Reflection.MethodInfo>object voor de methode, roept u vervolgens de <xref:System.Reflection.MethodInfo>van het object <xref:System.Reflection.MethodBase.GetMethodBody%2A>methode.</xref:System.Reflection.MethodBase.GetMethodBody%2A> </xref:System.Reflection.MethodInfo> </xref:System.Reflection.MethodInfo>"
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a MethodBody object for the test method.  \n  \n The example uses the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and then displays their types and index order. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n [!code-cpp[MethodBody#1](~/add/codesnippet/cpp/t-system.reflection.meth_1.cpp)]\n [!code-vb[MethodBody#1](~/add/codesnippet/visualbasic/t-system.reflection.meth_1.vb)]\n [!code-cs[MethodBody#1](~/add/codesnippet/csharp/t-system.reflection.meth_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class MethodBody
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.#ctor
  id: '#ctor'
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: MethodBody()
  nameWithType: MethodBody.MethodBody()
  fullName: System.Reflection.MethodBody.MethodBody()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Initialiseert een nieuw exemplaar van de <xref href=&quot;System.Reflection.MethodBody&quot;> </xref> klasse."
  remarks: "Deze constructor is aangeroepen door afgeleide klassen tijdens het samenstellen van <xref:System.Reflection.MethodBody>objecten.</xref:System.Reflection.MethodBody>"
  syntax:
    content: protected MethodBody ();
    parameters: []
  overload: System.Reflection.MethodBody.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses
  id: ExceptionHandlingClauses
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
  fullName: System.Reflection.MethodBody.ExceptionHandlingClauses
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Hiermee wordt een lijst met alle componenten voor de afhandeling van uitzonderingen in de hoofdtekst van de methode opgehaald."
  remarks: "De lijst bevat alle componenten van alle probeer blokken in de hoofdtekst van de methode. Elke <xref:System.Reflection.ExceptionHandlingClause>object bevat informatie waarmee het try-blok waaraan deze gekoppeld is.</xref:System.Reflection.ExceptionHandlingClause>      > [!NOTE] > Werken met afhandeling van uitzonderingen componenten vereist een grondig begrip van metagegevens en indelingen voor MSIL-instructie. Informatie vindt in de documentatie van de Common Language Infrastructure (CLI), met name &quot; partitie II: metagegevens definitie en semantiek&quot; en &quot;Partitie III: CIL instructie instellen&quot;. De documentatie is beschikbaar online; Zie [ECMA C# en algemene Language Infrastructure standaarden](http://go.microsoft.com/fwlink/?LinkID=99212) op MSDN en [standaard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) op de website van Ecma International."
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays information about its exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The ExceptionHandlingClauses property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.  \n  \n> [!NOTE]\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_2_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_2_1.cs)]  \n[!code-cpp[MethodBody#4](~/add/codesnippet/cpp/p-system.reflection.meth_2_2.cpp)]\n[!code-vb[MethodBody#4](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_2.vb)]\n[!code-cs[MethodBody#4](~/add/codesnippet/csharp/p-system.reflection.meth_2_2.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_2_3.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_3.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_2_3.cs)]  \n[!code-cpp[MethodBody#7](~/add/codesnippet/cpp/p-system.reflection.meth_2_4.cpp)]\n[!code-vb[MethodBody#7](~/add/codesnippet/visualbasic/p-system.reflection.meth_2_4.vb)]\n[!code-cs[MethodBody#7](~/add/codesnippet/csharp/p-system.reflection.meth_2_4.cs)]"
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause> ExceptionHandlingClauses { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}
      description: "Een &lt;xref:System.Collections.Generic.IList%601&gt; van <xref href=&quot;System.Reflection.ExceptionHandlingClause&quot;> </xref> -objecten die de componenten afhandeling van uitzonderingen in de hoofdtekst van de methode."
  overload: System.Reflection.MethodBody.ExceptionHandlingClauses*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.GetILAsByteArray
  id: GetILAsByteArray
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: GetILAsByteArray()
  nameWithType: MethodBody.GetILAsByteArray()
  fullName: System.Reflection.MethodBody.GetILAsByteArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Retourneert de MSIL voor de hoofdtekst methode als een matrix met bytes."
  remarks: "U kunt de methoden voor het token omzetten van de moduleklasse, zoals <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, en <xref:System.Reflection.Module.ResolveMember%2A>, omzetten van de tokens in de hoofdtekst van de methode voor <xref:System.Type>objecten, <xref:System.Reflection.MethodInfo>objecten, en <xref:System.Reflection.FieldInfo>objecten die gedetailleerde informatie over de typen, methoden en velden die toegankelijk is voor de MSIL in de hoofdtekst van de methode bieden.</xref:System.Reflection.FieldInfo> </xref:System.Reflection.MethodInfo> </xref:System.Type> </xref:System.Reflection.Module.ResolveMember%2A> </xref:System.Reflection.Module.ResolveMethod%2A> </xref:System.Reflection.Module.ResolveType%2A>      > [!NOTE] > Parseren hoofdcode van een methode vereist een grondig begrip van metagegevens en indelingen voor MSIL-instructie. Informatie vindt in de documentatie van de Common Language Infrastructure (CLI), met name &quot; partitie II: metagegevens definitie en semantiek&quot; en &quot;Partitie III: CIL instructie instellen&quot;. De documentatie is beschikbaar online; Zie [ECMA C# en algemene Language Infrastructure standaarden](http://go.microsoft.com/fwlink/?LinkID=99212) op MSDN en [standaard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) op de website van Ecma International."
  syntax:
    content: public virtual byte[] GetILAsByteArray ();
    parameters: []
    return:
      type: System.Byte[]
      description: "Een matrix van het type <xref:System.Byte>die de MSIL voor de hoofdtekst van de methode bevat.</xref:System.Byte>"
  overload: System.Reflection.MethodBody.GetILAsByteArray*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.InitLocals
  id: InitLocals
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: InitLocals
  nameWithType: MethodBody.InitLocals
  fullName: System.Reflection.MethodBody.InitLocals
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Haalt een waarde die aangeeft of de lokale variabelen in de hoofdtekst van de methode op de standaardwaarden voor de typen zijn geïnitialiseerd."
  remarks: "De eigenschap InitLocals verwijst naar variabelen die niet expliciet worden geïnitialiseerd; dat wil zeggen, de variabelen die zijn gedeclareerd met de syntaxis, zoals `int x;` in C# of `Dim x As Integer` in Visual Basic.       Variabelen voor objectverwijzingen worden geïnitialiseerd op `null` standaard. Numerieke variabelen worden ingesteld op nul."
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and InitLocals properties are displayed.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_3_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_3_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_3_1.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_3_2.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_3_2.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_3_2.cs)]"
  syntax:
    content: public virtual bool InitLocals { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>Als de hoofdcode van methode bevat code lokale variabelen te initialiseren <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> voor verwijzingstypen of aan de waarde nul is geïnitialiseerd voor waardetypen; anders <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>."
  overload: System.Reflection.MethodBody.InitLocals*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken
  id: LocalSignatureMetadataToken
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
  fullName: System.Reflection.MethodBody.LocalSignatureMetadataToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Hiermee wordt een metagegevenstoken voor de handtekening die de lokale variabelen voor de methode in de metagegevens beschrijft."
  remarks: "Gebruik de <xref:System.Reflection.MethodBody.LocalVariables%2A>eigenschap informatie verkrijgen over de methode lokale variabelen.</xref:System.Reflection.MethodBody.LocalVariables%2A>      > [!NOTE] > Informatie over handtekeningen voor lokale variabele kan worden gevonden in de documentatie van de Common Language Infrastructure (CLI), met name &quot;partitie II: metagegevens definitie en semantiek&quot;. De documentatie is beschikbaar online; Zie [ECMA C# en algemene Language Infrastructure standaarden](http://go.microsoft.com/fwlink/?LinkID=99212) op MSDN en [standaard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) op de website van Ecma International."
  syntax:
    content: public virtual int LocalSignatureMetadataToken { get; }
    return:
      type: System.Int32
      description: "Een geheel getal dat het metagegevenstoken vertegenwoordigt."
  overload: System.Reflection.MethodBody.LocalSignatureMetadataToken*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.LocalVariables
  id: LocalVariables
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
  fullName: System.Reflection.MethodBody.LocalVariables
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Hiermee wordt de lijst met lokale variabelen gedeclareerd in de hoofdtekst van de methode opgehaald."
  remarks: "U hoeft niet de metagegevenstoken voor de lokale variabele handtekening die is geleverd door de <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A>eigenschap.</xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A>"
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The LocalVariables property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_0_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_0_1.cs)]  \n[!code-cpp[MethodBody#3](~/add/codesnippet/cpp/p-system.reflection.meth_0_2.cpp)]\n[!code-vb[MethodBody#3](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_2.vb)]\n[!code-cs[MethodBody#3](~/add/codesnippet/csharp/p-system.reflection.meth_0_2.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_0_3.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_3.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_0_3.cs)]  \n[!code-cpp[MethodBody#6](~/add/codesnippet/cpp/p-system.reflection.meth_0_4.cpp)]\n[!code-vb[MethodBody#6](~/add/codesnippet/visualbasic/p-system.reflection.meth_0_4.vb)]\n[!code-cs[MethodBody#6](~/add/codesnippet/csharp/p-system.reflection.meth_0_4.cs)]"
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.LocalVariableInfo> LocalVariables { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}
      description: "Een &lt;xref:System.Collections.Generic.IList%601&gt; van <xref:System.Reflection.LocalVariableInfo>objecten die een beschrijving van de lokale variabelen gedeclareerd in de hoofdtekst van de methode.</xref:System.Reflection.LocalVariableInfo>"
  overload: System.Reflection.MethodBody.LocalVariables*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.MethodBody.MaxStackSize
  id: MaxStackSize
  parent: System.Reflection.MethodBody
  langs:
  - csharp
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
  fullName: System.Reflection.MethodBody.MaxStackSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "Hiermee wordt het maximum aantal items op de stack operand opgehaald bij het uitvoeren van de methode."
  remarks: 'Zie voor meer informatie de documentatie van de Common Language Infrastructure (CLI), met name &quot; partitie II: metagegevens definitie en semantiek&quot; en &quot;Partitie III: CIL instructie instellen&quot;. De documentatie is beschikbaar online; Zie [ECMA C# en algemene Language Infrastructure standaarden](http://go.microsoft.com/fwlink/?LinkID=99212) op MSDN en [standaard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) op de website van Ecma International.'
  example:
  - "The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The MaxStackSize and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.  \n  \n This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.  \n  \n [!code-cpp[MethodBody#2](~/add/codesnippet/cpp/p-system.reflection.meth_1_1.cpp)]\n [!code-vb[MethodBody#2](~/add/codesnippet/visualbasic/p-system.reflection.meth_1_1.vb)]\n [!code-cs[MethodBody#2](~/add/codesnippet/csharp/p-system.reflection.meth_1_1.cs)]  \n[!code-cpp[MethodBody#5](~/add/codesnippet/cpp/p-system.reflection.meth_1_2.cpp)]\n[!code-vb[MethodBody#5](~/add/codesnippet/visualbasic/p-system.reflection.meth_1_2.vb)]\n[!code-cs[MethodBody#5](~/add/codesnippet/csharp/p-system.reflection.meth_1_2.cs)]"
  syntax:
    content: public virtual int MaxStackSize { get; }
    return:
      type: System.Int32
      description: "Het maximum aantal items op de stack operand bij het uitvoeren van de methode."
  overload: System.Reflection.MethodBody.MaxStackSize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.MethodBody.#ctor
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MethodBody()
  nameWithType: MethodBody.MethodBody()
  fullName: System.Reflection.MethodBody.MethodBody()
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses
  parent: System.Reflection.MethodBody
  isExternal: false
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
  fullName: System.Reflection.MethodBody.ExceptionHandlingClauses
- uid: System.Collections.Generic.IList{System.Reflection.ExceptionHandlingClause}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<ExceptionHandlingClause>
  nameWithType: IList<ExceptionHandlingClause>
  fullName: System.Collections.Generic.IList<System.Reflection.ExceptionHandlingClause>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Reflection.ExceptionHandlingClause>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.ExceptionHandlingClause
    name: ExceptionHandlingClause
    nameWithType: ExceptionHandlingClause
    fullName: ExceptionHandlingClause
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MethodBody.GetILAsByteArray
  parent: System.Reflection.MethodBody
  isExternal: false
  name: GetILAsByteArray()
  nameWithType: MethodBody.GetILAsByteArray()
  fullName: System.Reflection.MethodBody.GetILAsByteArray()
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.MethodBody.InitLocals
  parent: System.Reflection.MethodBody
  isExternal: false
  name: InitLocals
  nameWithType: MethodBody.InitLocals
  fullName: System.Reflection.MethodBody.InitLocals
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
  fullName: System.Reflection.MethodBody.LocalSignatureMetadataToken
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.MethodBody.LocalVariables
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
  fullName: System.Reflection.MethodBody.LocalVariables
- uid: System.Collections.Generic.IList{System.Reflection.LocalVariableInfo}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<LocalVariableInfo>
  nameWithType: IList<LocalVariableInfo>
  fullName: System.Collections.Generic.IList<System.Reflection.LocalVariableInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Reflection.LocalVariableInfo>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.LocalVariableInfo
    name: LocalVariableInfo
    nameWithType: LocalVariableInfo
    fullName: LocalVariableInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.MethodBody.MaxStackSize
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
  fullName: System.Reflection.MethodBody.MaxStackSize
- uid: System.Reflection.MethodBody.#ctor*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MethodBody
  nameWithType: MethodBody.MethodBody
- uid: System.Reflection.MethodBody.ExceptionHandlingClauses*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: ExceptionHandlingClauses
  nameWithType: MethodBody.ExceptionHandlingClauses
- uid: System.Reflection.MethodBody.GetILAsByteArray*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: GetILAsByteArray
  nameWithType: MethodBody.GetILAsByteArray
- uid: System.Reflection.MethodBody.InitLocals*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: InitLocals
  nameWithType: MethodBody.InitLocals
- uid: System.Reflection.MethodBody.LocalSignatureMetadataToken*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalSignatureMetadataToken
  nameWithType: MethodBody.LocalSignatureMetadataToken
- uid: System.Reflection.MethodBody.LocalVariables*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: LocalVariables
  nameWithType: MethodBody.LocalVariables
- uid: System.Reflection.MethodBody.MaxStackSize*
  parent: System.Reflection.MethodBody
  isExternal: false
  name: MaxStackSize
  nameWithType: MethodBody.MaxStackSize
