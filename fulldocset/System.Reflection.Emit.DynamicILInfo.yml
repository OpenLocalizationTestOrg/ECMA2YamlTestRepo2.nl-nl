### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.DynamicILInfo
  id: DynamicILInfo
  children:
  - System.Reflection.Emit.DynamicILInfo.DynamicMethod
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  langs:
  - csharp
  name: DynamicILInfo
  nameWithType: DynamicILInfo
  fullName: System.Reflection.Emit.DynamicILInfo
  type: Class
  summary: "Biedt ondersteuning voor alternatieve manieren voor het genereren van de tussenliggende taal (MSIL) van Microsoft en de metagegevens voor een dynamische methode, met inbegrip van methoden voor het maken van tokens en voor het invoegen van de code, de afhandeling van uitzonderingen en de lokale variabele handtekening blobs."
  remarks: "De klasse DynamicILInfo kan ontwikkelaars hun eigen MSIL genereren in plaats van <xref:System.Reflection.Emit.ILGenerator>.</xref:System.Reflection.Emit.ILGenerator> schrijven       Exemplaren van andere typen maken, aanroepen van methoden, enzovoort, moet de MSIL u genereren tokens voor deze entiteiten bevatten. De klasse DynamicILInfo biedt verschillende overloads van de <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>methode, die tokens in het bereik van de huidige DynamicILInfo geldig retourneren.</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> Bijvoorbeeld, als u nodig hebt om aan te roepen een overbelasting van de <xref:System.Console.WriteLine%2A?displayProperty=fullName>methode, kunt u een <xref:System.RuntimeMethodHandle>voor die van de overbelasting en doorgegeven aan de <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>methode een token voor het insluiten in uw MSIL te verkrijgen.</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> </xref:System.RuntimeMethodHandle> </xref:System.Console.WriteLine%2A?displayProperty=fullName>       Nadat u hebt gemaakt <xref:System.Byte>matrices voor uw lokale variabele handtekening, uitzonderingen en code-instantie, kunt u de <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, en <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A>methoden voegt u deze in de <xref:System.Reflection.Emit.DynamicMethod>die zijn gekoppeld aan uw DynamicILInfo-object.</xref:System.Reflection.Emit.DynamicMethod> </xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> </xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A> </xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A> </xref:System.Byte>       Uw eigen metagegevens en MSIL genereren, moet bekend bent met de Common Language Infrastructure (CLI)-documentatie, met name &quot; partitie II: metagegevens definitie en semantiek&quot; en &quot;Partitie III: CIL instructie instellen&quot;. De documentatie is beschikbaar online; Zie [ECMA C# en algemene Language Infrastructure standaarden](http://go.microsoft.com/fwlink/?LinkID=99212) op MSDN en [standaard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) op de website van Ecma International.      > [!NOTE] > DynamicILInfo geen gebruiken voor het genereren van code die wordt gemaakt van een gemachtigde van een andere dynamische methode door rechtstreeks aanroepen van de gemachtigdenconstructor. Gebruik in plaats daarvan de <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>methode voor het maken van de gemachtigde.</xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> Een gemachtigde dat wordt gemaakt met de gemachtigden-constructor heeft geen een verwijzing naar de doel-dynamische methode. De dynamische methode kan worden vrijgemaakt door de garbage collector, terwijl de gemachtigde nog in gebruik is."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class DynamicILInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  id: DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hiermee haalt u de dynamische methode waarvan instantie wordt gegenereerd door het huidige exemplaar."
  remarks: "Een <xref:System.Reflection.Emit.DynamicILInfo>object is altijd gekoppeld aan een dynamische methode.</xref:System.Reflection.Emit.DynamicILInfo> Het doel van de <xref:System.Reflection.Emit.DynamicILInfo>klasse is het bieden van een andere manier van het invoegen van de stroom MSIL, afhandeling van uitzonderingen en lokale variabele handtekening in een dynamische methode, voor ontwikkelaars die genereren MSIL wilt zonder gebruik van de <xref:System.Reflection.Emit.ILGenerator>klasse.</xref:System.Reflection.Emit.ILGenerator> </xref:System.Reflection.Emit.DynamicILInfo>"
  syntax:
    content: public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }
    return:
      type: System.Reflection.Emit.DynamicMethod
      description: "Een <xref:System.Reflection.Emit.DynamicMethod>-object als de dynamische methode waarvoor de huidige <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> object genereren van code.</xref:System.Reflection.Emit.DynamicMethod>"
  overload: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  id: GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Een token is ongeldig in het bereik van de huidige opgehaald <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, die de handtekening voor de bijbehorende dynamische methode vertegenwoordigt."
  remarks: 'Voor informatie over de blobs in handtekening, Zie de documentatie van de Common Language Infrastructure (CLI), met name &quot;partitie II: metagegevens definitie en semantiek&quot;. De documentatie is beschikbaar online; Zie [ECMA C# en algemene Language Infrastructure standaarden](http://go.microsoft.com/fwlink/?LinkID=99212) op MSDN en [standaard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) op de website van Ecma International.'
  syntax:
    content: public int GetTokenFor (byte[] signature);
    parameters:
    - id: signature
      type: System.Byte[]
      description: "Een matrix met de handtekening."
    return:
      type: System.Int32
      description: "Een token dat kan worden ingesloten in de metagegevens en de MSIL-stroom voor de bijbehorende dynamische methode."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  id: GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Een token is ongeldig in het bereik van de huidige opgehaald <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, die een dynamische methode worden aangeroepen vanuit de bijbehorende methode vertegenwoordigt."
  remarks: "Het token dat is geretourneerd door deze methode-overload kunt u een dynamische methode aanroepen vanuit de dynamische methode die is gekoppeld aan de huidige <xref:System.Reflection.Emit.DynamicILInfo>object.</xref:System.Reflection.Emit.DynamicILInfo> Voor het aanroepen van de bijbehorende dynamische methode recursief, geeft u de waarde van de <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>eigenschap.</xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>"
  syntax:
    content: public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);
    parameters:
    - id: method
      type: System.Reflection.Emit.DynamicMethod
      description: "De dynamische methode aan te roepen."
    return:
      type: System.Int32
      description: "Een token dat kan worden ingesloten in de MSIL-stroom voor de bijbehorende dynamische methode als het doel van een MSIL-instructie."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  id: GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Een token is ongeldig in het bereik van de huidige opgehaald <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, dat een veld worden geopend vanaf de bijbehorende dynamische methode vertegenwoordigt."
  remarks: "Moet u een token voor elk veld dat wordt geopend door de dynamische methode die is gekoppeld aan de huidige <xref:System.Reflection.Emit.DynamicILInfo>object.</xref:System.Reflection.Emit.DynamicILInfo> Gebruik de <xref:System.Type.GetField%2A?displayProperty=fullName>methode <xref:System.Reflection.FieldInfo>voor het veld dat u openen wilt, gebruikt u de <xref:System.Reflection.FieldInfo.FieldHandle%2A>eigenschap ophalen van de <xref:System.RuntimeFieldHandle>.</xref:System.RuntimeFieldHandle> </xref:System.Reflection.FieldInfo.FieldHandle%2A> </xref:System.Reflection.FieldInfo> ophalen</xref:System.Type.GetField%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "Het veld worden geopend."
    return:
      type: System.Int32
      description: "Een token dat kan worden gebruikt als de operand van een MSIL-instructie die toegang heeft tot de velden in het bereik van de huidige <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> object."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  id: GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Een token is ongeldig in het bereik van de huidige opgehaald <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, die een methode om te worden bereikt vanaf de bijbehorende dynamische methode vertegenwoordigt."
  remarks: "Moet u een token voor een methode die wordt geopend door de dynamische methode die is gekoppeld aan de huidige <xref:System.Reflection.Emit.DynamicILInfo>object.</xref:System.Reflection.Emit.DynamicILInfo> Gebruik de <xref:System.Type.GetMethod%2A?displayProperty=fullName>methode om op te halen <xref:System.Reflection.MethodInfo>voor de methode die u wilt openen, en vervolgens de <xref:System.Reflection.MethodBase.MethodHandle%2A>eigenschap ophalen van de <xref:System.RuntimeMethodHandle>.</xref:System.RuntimeMethodHandle> </xref:System.Reflection.MethodBase.MethodHandle%2A> gebruiken</xref:System.Reflection.MethodInfo> </xref:System.Type.GetMethod%2A?displayProperty=fullName>      > [!NOTE] > Gebruiken voor een methode die bij een generiek type hoort, de <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>methode van de overbelasting en geef een <xref:System.RuntimeTypeHandle>voor het algemene type.</xref:System.RuntimeTypeHandle> </xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "De methode die worden geopend."
    return:
      type: System.Int32
      description: "Een token dat kan worden gebruikt als de operand van een MSIL-instructie die toegang heeft tot methoden, zoals <xref:System.Reflection.Emit.OpCodes.Call>of <xref:System.Reflection.Emit.OpCodes.Ldtoken>, in het bereik van de huidige <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> object.</xref:System.Reflection.Emit.OpCodes.Ldtoken> </xref:System.Reflection.Emit.OpCodes.Call>"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Een token is ongeldig in het bereik van de huidige opgehaald <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, die een type moet worden gebruikt in de bijbehorende dynamische methode."
  remarks: "Het token dat is geretourneerd door deze methode-overload kunt u een lokale variabele type definiëren en verzenden van MSIL-exemplaar wilt maken van een type in de dynamische methode die is gekoppeld aan de huidige <xref:System.Reflection.Emit.DynamicILInfo>object.</xref:System.Reflection.Emit.DynamicILInfo>       Ophalen van een <xref:System.RuntimeTypeHandle>die een type, gebruiken de <xref:System.Type.TypeHandle%2A?displayProperty=fullName>eigenschap.</xref:System.Type.TypeHandle%2A?displayProperty=fullName> </xref:System.RuntimeTypeHandle>"
  syntax:
    content: public int GetTokenFor (RuntimeTypeHandle type);
    parameters:
    - id: type
      type: System.RuntimeTypeHandle
      description: "Het type moet worden gebruikt."
    return:
      type: System.Int32
      description: "Een token dat kan worden gebruikt als de operand van een MSIL-instructie die is vereist van een type in het bereik van de huidige <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> object."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  id: GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Een token is ongeldig in het bereik van de huidige opgehaald <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, die een tekenreeks die moet worden gebruikt in de bijbehorende dynamische methode letterlijke vertegenwoordigt."
  syntax:
    content: public int GetTokenFor (string literal);
    parameters:
    - id: literal
      type: System.String
      description: "De tekenreeks die moet worden gebruikt."
    return:
      type: System.Int32
      description: "Een token dat kan worden gebruikt als de operand van een MSIL-instructie die is vereist een tekenreeks, in het bereik van de huidige <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> object."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Een token is ongeldig in het bereik van de huidige opgehaald <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, dat een veld worden geopend vanaf de bijbehorende dynamische methode; vertegenwoordigt het veld is op de opgegeven algemeen type."
  remarks: "Moet u een token voor elk veld dat wordt geopend door de dynamische methode die is gekoppeld aan de huidige <xref:System.Reflection.Emit.DynamicILInfo>object.</xref:System.Reflection.Emit.DynamicILInfo> Gebruik de <xref:System.Type.GetField%2A?displayProperty=fullName>methode <xref:System.Reflection.FieldInfo>voor het veld dat u wilt openen, en gebruik vervolgens de <xref:System.Reflection.FieldInfo.FieldHandle%2A>eigenschap ophalen van de <xref:System.RuntimeFieldHandle>.</xref:System.RuntimeFieldHandle> </xref:System.Reflection.FieldInfo.FieldHandle%2A> </xref:System.Reflection.FieldInfo> ophalen</xref:System.Type.GetField%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "Het veld worden geopend."
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "Het algemene type dat het veld hoort."
    return:
      type: System.Int32
      description: "Een token dat kan worden gebruikt als de operand van een MSIL-instructie die toegang heeft tot de velden in het bereik van de huidige <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> object."
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Een token is ongeldig in het bereik van de huidige opgehaald <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>, die een methode op een generiek type vertegenwoordigt."
  remarks: "Moet u een token voor een methode die wordt aangeroepen door de dynamische methode die is gekoppeld aan de huidige <xref:System.Reflection.Emit.DynamicILInfo>object.</xref:System.Reflection.Emit.DynamicILInfo> Gebruik de <xref:System.Type.GetMethod%2A?displayProperty=fullName>methode om op te halen <xref:System.Reflection.MethodInfo>voor de methode die u wilt aanroepen, en vervolgens de <xref:System.Reflection.MethodBase.MethodHandle%2A>eigenschap ophalen van de <xref:System.RuntimeMethodHandle>.</xref:System.RuntimeMethodHandle> </xref:System.Reflection.MethodBase.MethodHandle%2A> gebruiken</xref:System.Reflection.MethodInfo> </xref:System.Type.GetMethod%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "De methode."
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "Het generieke type van de methode hoort bij."
    return:
      type: System.Int32
      description: "Een token dat kan worden gebruikt als de operand van een MSIL-instructie die toegang heeft tot methoden, zoals <xref:System.Reflection.Emit.OpCodes.Call>of <xref:System.Reflection.Emit.OpCodes.Ldtoken>, in het bereik van de huidige <xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref> object.</xref:System.Reflection.Emit.OpCodes.Ldtoken> </xref:System.Reflection.Emit.OpCodes.Call>"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  id: SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hiermee stelt u de hoofdtekst van de code van de bijbehorende dynamische methode."
  remarks: "Er is geen geldigheid controles worden uitgevoerd op de MSIL-stroom.       Een tweede keer u deze methode aanroept, wordt de eerste MSIL-stroom vervangen door de tweede.       Uw eigen metagegevens en MSIL genereren, moet bekend bent met de Common Language Infrastructure (CLI)-documentatie, met name &quot; partitie II: metagegevens definitie en semantiek&quot; en &quot;Partitie III: CIL instructie instellen&quot;. De documentatie is beschikbaar online; Zie [ECMA C# en algemene Language Infrastructure standaarden](http://go.microsoft.com/fwlink/?LinkID=99212) op MSDN en [standaard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) op de website van Ecma International."
  syntax:
    content: public void SetCode (byte[] code, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte[]
      description: "Een matrix met de MSIL-stroom."
    - id: maxStackSize
      type: System.Int32
      description: "Het maximum aantal items op de stack operand bij het uitvoeren van de methode."
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  id: SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hiermee stelt u de hoofdtekst van de code van de bijbehorende dynamische methode."
  remarks: "Er is geen geldigheid controles worden uitgevoerd op de MSIL-stroom.       Een tweede keer u deze methode aanroept, wordt de eerste MSIL-stroom vervangen door de tweede.       Genereren van uw eigen metagegevens en MSIL vereist kennis van de documentatie van de Common Language Infrastructure (CLI), met name &quot;partitie II: metagegevens definitie en semantiek&quot; en &quot; partitie III: CIL instructieset. &quot; De documentatie is beschikbaar online; Zie [ECMA C# en algemene Language Infrastructure standaarden](http://go.microsoft.com/fwlink/?LinkID=99212) op MSDN en [standaard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) op de website van Ecma International."
  syntax:
    content: public void SetCode (byte* code, int codeSize, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte*
      description: "Een verwijzing naar een bytematrix die de MSIL-stroom bevat."
    - id: codeSize
      type: System.Int32
      description: "Het aantal bytes in de MSIL-stroom."
    - id: maxStackSize
      type: System.Int32
      description: "Het maximum aantal items op de stack operand bij het uitvoeren van de methode."
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>code</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> en <code>codeSize</code> is groter dan 0."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>codeSize</code>is kleiner dan 0."
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  id: SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hiermee stelt u de metagegevens van de uitzondering voor de bijbehorende dynamische methode."
  remarks: 'De metagegevens van de uitzondering voor een methode definieert de locatie en grootte van alle `try`, `catch`, `finally`, filter en fout-blokken. Zie voor informatie over de indeling van deze metagegevens, de documentatie van de Common Language Infrastructure (CLI), met name &quot;partitie II: metagegevens definitie en semantiek&quot;. De documentatie is beschikbaar online; Zie [ECMA C# en algemene Language Infrastructure standaarden](http://go.microsoft.com/fwlink/?LinkID=99212) op MSDN en [standaard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) op de website van Ecma International.'
  syntax:
    content: public void SetExceptions (byte[] exceptions);
    parameters:
    - id: exceptions
      type: System.Byte[]
      description: "Een matrix die de metagegevens van de uitzondering bevat."
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  id: SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hiermee stelt u de metagegevens van de uitzondering voor de bijbehorende dynamische methode."
  remarks: 'De metagegevens van de uitzondering voor een methode definieert de locatie en grootte van alle `try`, `catch`, `finally`, filter en fout-blokken. Zie voor informatie over de indeling van deze metagegevens, de documentatie van de Common Language Infrastructure (CLI), met name &quot; partitie II: metagegevens definitie en semantiek&quot; en &quot;Partitie III: CIL instructie instellen&quot;. De documentatie is beschikbaar online; Zie [ECMA C# en algemene Language Infrastructure standaarden](http://go.microsoft.com/fwlink/?LinkID=99212) op MSDN en [standaard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) op de website van Ecma International.'
  syntax:
    content: public void SetExceptions (byte* exceptions, int exceptionsSize);
    parameters:
    - id: exceptions
      type: System.Byte*
      description: "Een verwijzing naar een bytematrix die de metagegevens van de uitzondering bevat."
    - id: exceptionsSize
      type: System.Int32
      description: "Het aantal bytes van de metagegevens van de uitzondering."
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>exceptions</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> en <code>exceptionSize</code> is groter dan 0."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>exceptionSize</code>is kleiner dan 0."
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  id: SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hiermee stelt u de lokale variabele handtekening die de indeling van de lokale variabelen voor de bijbehorende dynamische methode beschrijft."
  remarks: "De lokale variabele handtekening beschrijft de indeling van een methode lokale variabelen. Gebruiken om te maken van de lokale variabele handtekening vereenvoudigen, de `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>methode voor het ophalen van een <xref:System.Reflection.Emit.SignatureHelper>voor de lokale handtekening.</xref:System.Reflection.Emit.SignatureHelper> </xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>       Zie de documentatie van de Common Language Infrastructure (CLI), met name &quot;partitie II: metagegevens definitie en semantiek&quot; voor meer informatie over lokale variabele handtekeningen. De documentatie is beschikbaar online; Zie [ECMA C# en algemene Language Infrastructure standaarden](http://go.microsoft.com/fwlink/?LinkID=99212) op MSDN en [standaard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) op de website van Ecma International."
  syntax:
    content: public void SetLocalSignature (byte[] localSignature);
    parameters:
    - id: localSignature
      type: System.Byte[]
      description: "Een matrix met de indeling van de lokale variabelen voor de bijbehorende <xref:System.Reflection.Emit.DynamicMethod>.</xref:System.Reflection.Emit.DynamicMethod>"
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  id: SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "Hiermee stelt u de lokale variabele handtekening die de indeling van de lokale variabelen voor de bijbehorende dynamische methode beschrijft."
  remarks: "De lokale variabele handtekening beschrijft de indeling van een methode lokale variabelen. Gebruiken om te maken van de lokale variabele handtekening vereenvoudigen, de `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>methode voor het ophalen van een <xref:System.Reflection.Emit.SignatureHelper>voor de lokale handtekening.</xref:System.Reflection.Emit.SignatureHelper> </xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>       Zie de documentatie van de Common Language Infrastructure (CLI), met name &quot;partitie II: metagegevens definitie en semantiek&quot; voor meer informatie over lokale variabele handtekeningen. De documentatie is beschikbaar online; Zie [ECMA C# en algemene Language Infrastructure standaarden](http://go.microsoft.com/fwlink/?LinkID=99212) op MSDN en [standaard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) op de website van Ecma International."
  syntax:
    content: public void SetLocalSignature (byte* localSignature, int signatureSize);
    parameters:
    - id: localSignature
      type: System.Byte*
      description: "Een matrix met de indeling van de lokale variabelen voor de bijbehorende <xref:System.Reflection.Emit.DynamicMethod>.</xref:System.Reflection.Emit.DynamicMethod>"
    - id: signatureSize
      type: System.Int32
      description: "Het aantal bytes in de handtekening."
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localSignature</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> en <code>signatureSize</code> is groter dan 0."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>signatureSize</code>is kleiner dan 0."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicMethod
  parent: System.Reflection.Emit
  isExternal: true
  name: DynamicMethod
  nameWithType: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: true
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: true
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: true
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor
  nameWithType: DynamicILInfo.GetTokenFor
- uid: System.Reflection.Emit.DynamicILInfo.SetCode*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode
  nameWithType: DynamicILInfo.SetCode
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions
  nameWithType: DynamicILInfo.SetExceptions
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature
  nameWithType: DynamicILInfo.SetLocalSignature
